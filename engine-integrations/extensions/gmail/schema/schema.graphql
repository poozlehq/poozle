type Query {
  """
  Gets the auto-forwarding setting for the specified account.
  
  Equivalent to GET /gmail/v1/users/{userId}/settings/autoForwarding
  """
  autoForwarding(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): AutoForwarding

  """
  Retrieves a client-side encryption identity configuration.
  
  Equivalent to GET /gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}
  """
  cseIdentity(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """
    The primary email address associated with the client-side encryption identity configuration that's retrieved.
    """
    cseEmailAddress: String!

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): CseIdentity

  """
  Retrieves an existing client-side encryption key pair.
  
  Equivalent to GET /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}
  """
  cseKeyPair(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """The identifier of the key pair to retrieve."""
    keyPairId: String!

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): CseKeyPair

  """
  Gets the specified delegate. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority.
  
  Equivalent to GET /gmail/v1/users/{userId}/settings/delegates/{delegateEmail}
  """
  delegate(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """
    The email address of the user whose delegate relationship is to be retrieved.
    """
    delegateEmail: String!

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Delegate

  """
  Gets the specified draft.
  
  Equivalent to GET /gmail/v1/users/{userId}/drafts/{id}
  """
  draft(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """The format to return the draft in."""
    format: Format

    """The ID of the draft to retrieve."""
    id: String!

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Draft

  """
  Gets a filter.
  
  Equivalent to GET /gmail/v1/users/{userId}/settings/filters/{id}
  """
  filter2(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """The ID of the filter to be fetched."""
    id: String!

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Filter2

  """
  Gets the specified forwarding address.
  
  Equivalent to GET /gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}
  """
  forwardingAddress(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """The forwarding address to be retrieved."""
    forwardingEmail: String!

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): ForwardingAddress

  """
  Gets IMAP settings.
  
  Equivalent to GET /gmail/v1/users/{userId}/settings/imap
  """
  imapSettings(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): ImapSettings

  """
  Gets the specified label.
  
  Equivalent to GET /gmail/v1/users/{userId}/labels/{id}
  """
  label(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """The ID of the label to retrieve."""
    id: String!

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Label

  """
  Gets language settings.
  
  Equivalent to GET /gmail/v1/users/{userId}/settings/language
  """
  languageSettings(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): LanguageSettings

  """
  Lists the client-side encrypted identities for an authenticated user.
  
  Equivalent to GET /gmail/v1/users/{userId}/settings/cse/identities
  """
  listCseIdentitiesResponse(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """
    The number of identities to return. If not provided, the page size will default to 20 entries.
    """
    pageSize: Int

    """
    Pagination token indicating which page of identities to return. If the token is not supplied, then the API will return the first page of results.
    """
    pageToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): ListCseIdentitiesResponse

  """
  Lists client-side encryption key pairs for an authenticated user.
  
  Equivalent to GET /gmail/v1/users/{userId}/settings/cse/keypairs
  """
  listCseKeyPairsResponse(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """
    The number of key pairs to return. If not provided, the page size will default to 20 entries.
    """
    pageSize: Int

    """
    Pagination token indicating which page of key pairs to return. If the token is not supplied, then the API will return the first page of results.
    """
    pageToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): ListCseKeyPairsResponse

  """
  Lists the delegates for the specified account. This method is only available to service account clients that have been delegated domain-wide authority.
  
  Equivalent to GET /gmail/v1/users/{userId}/settings/delegates
  """
  listDelegatesResponse(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): ListDelegatesResponse

  """
  Lists the drafts in the user's mailbox.
  
  Equivalent to GET /gmail/v1/users/{userId}/drafts
  """
  listDraftsResponse(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """Include drafts from `SPAM` and `TRASH` in the results."""
    includeSpamTrash: Boolean

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """
    Maximum number of drafts to return. This field defaults to 100. The maximum allowed value for this field is 500.
    """
    maxResults: Int

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Page token to retrieve a specific page of results in the list."""
    pageToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Only return draft messages matching the specified query. Supports the same query format as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
    """
    q: String

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): ListDraftsResponse

  """
  Lists the message filters of a Gmail user.
  
  Equivalent to GET /gmail/v1/users/{userId}/settings/filters
  """
  listFiltersResponse(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): ListFiltersResponse

  """
  Lists the forwarding addresses for the specified account.
  
  Equivalent to GET /gmail/v1/users/{userId}/settings/forwardingAddresses
  """
  listForwardingAddressesResponse(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): ListForwardingAddressesResponse

  """
  Lists the history of all changes to the given mailbox. History results are returned in chronological order (increasing `historyId`).
  
  Equivalent to GET /gmail/v1/users/{userId}/history
  """
  listHistoryResponse(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """History types to be returned by the function"""
    historyTypes: [HistoryTypesListItem]

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """Only return messages with a label matching the ID."""
    labelId: String

    """
    Maximum number of history records to return. This field defaults to 100. The maximum allowed value for this field is 500.
    """
    maxResults: Int

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Page token to retrieve a specific page of results in the list."""
    pageToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """
    Required. Returns history records after the specified `startHistoryId`. The supplied `startHistoryId` should be obtained from the `historyId` of a message, thread, or previous `list` response. History IDs increase chronologically but are not contiguous with random gaps in between valid IDs. Supplying an invalid or out of date `startHistoryId` typically returns an `HTTP 404` error code. A `historyId` is typically valid for at least a week, but in some rare circumstances may be valid for only a few hours. If you receive an `HTTP 404` error response, your application should perform a full sync. If you receive no `nextPageToken` in the response, there are no updates to retrieve and you can store the returned `historyId` for a future request.
    """
    startHistoryId: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): ListHistoryResponse

  """
  Lists all labels in the user's mailbox.
  
  Equivalent to GET /gmail/v1/users/{userId}/labels
  """
  listLabelsResponse(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): ListLabelsResponse

  """
  Lists the messages in the user's mailbox.
  
  Equivalent to GET /gmail/v1/users/{userId}/messages
  """
  listMessagesResponse(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """Include messages from `SPAM` and `TRASH` in the results."""
    includeSpamTrash: Boolean

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """
    Only return messages with labels that match all of the specified label IDs.
    """
    labelIds: [String]

    """
    Maximum number of messages to return. This field defaults to 100. The maximum allowed value for this field is 500.
    """
    maxResults: Int

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Page token to retrieve a specific page of results in the list."""
    pageToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`. Parameter cannot be used when accessing the api using the gmail.metadata scope.
    """
    q: String

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): ListMessagesResponse

  """
  Lists the send-as aliases for the specified account. The result includes the primary send-as address associated with the account as well as any custom "from" aliases.
  
  Equivalent to GET /gmail/v1/users/{userId}/settings/sendAs
  """
  listSendAsResponse(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): ListSendAsResponse

  """
  Lists S/MIME configs for the specified send-as alias.
  
  Equivalent to GET /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo
  """
  listSmimeInfoResponse(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """
    The email address that appears in the "From:" header for mail sent using this alias.
    """
    sendAsEmail: String!

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): ListSmimeInfoResponse

  """
  Lists the threads in the user's mailbox.
  
  Equivalent to GET /gmail/v1/users/{userId}/threads
  """
  listThreadsResponse(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """Include threads from `SPAM` and `TRASH` in the results."""
    includeSpamTrash: Boolean

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """
    Only return threads with labels that match all of the specified label IDs.
    """
    labelIds: [String]

    """
    Maximum number of threads to return. This field defaults to 100. The maximum allowed value for this field is 500.
    """
    maxResults: Int

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Page token to retrieve a specific page of results in the list."""
    pageToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Only return threads matching the specified query. Supports the same query format as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`. Parameter cannot be used when accessing the api using the gmail.metadata scope.
    """
    q: String

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): ListThreadsResponse

  """
  Gets the specified message.
  
  Equivalent to GET /gmail/v1/users/{userId}/messages/{id}
  """
  message(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """The format to return the message in."""
    format: Format

    """
    The ID of the message to retrieve. This ID is usually retrieved using `messages.list`. The ID is also contained in the result when a message is inserted (`messages.insert`) or imported (`messages.import`).
    """
    id: String!

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """When given and format is `METADATA`, only include headers specified."""
    metadataHeaders: [String]

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Message

  """
  Gets the specified message attachment.
  
  Equivalent to GET /gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}
  """
  messagePartBody(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """The ID of the attachment."""
    id: String!

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """The ID of the message containing the attachment."""
    messageId: String!

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): MessagePartBody

  """
  Gets POP settings.
  
  Equivalent to GET /gmail/v1/users/{userId}/settings/pop
  """
  popSettings(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): PopSettings

  """
  Gets the current user's Gmail profile.
  
  Equivalent to GET /gmail/v1/users/{userId}/profile
  """
  profile(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Profile

  """
  Gets the specified send-as alias. Fails with an HTTP 404 error if the specified address is not a member of the collection.
  
  Equivalent to GET /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}
  """
  sendAs2(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """The send-as alias to be retrieved."""
    sendAsEmail: String!

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): SendAs2

  """
  Gets the specified S/MIME config for the specified send-as alias.
  
  Equivalent to GET /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}
  """
  smimeInfo2(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """The immutable ID for the SmimeInfo."""
    id: String!

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """
    The email address that appears in the "From:" header for mail sent using this alias.
    """
    sendAsEmail: String!

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): SmimeInfo2

  """
  Gets the specified thread.
  
  Equivalent to GET /gmail/v1/users/{userId}/threads/{id}
  """
  thread(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """The format to return the messages in."""
    format: Format2

    """The ID of the thread to retrieve."""
    id: String!

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """When given and format is METADATA, only include headers specified."""
    metadataHeaders: [String]

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Thread

  """
  Gets vacation responder settings.
  
  Equivalent to GET /gmail/v1/users/{userId}/settings/vacation
  """
  vacationSettings(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): VacationSettings
}

"""Auto-forwarding settings for an account."""
type AutoForwarding {
  """
  The state that a message should be left in after it has been forwarded.
  """
  disposition: Disposition

  """
  Email address to which all incoming messages are forwarded. This email address must be a verified member of the forwarding addresses.
  """
  emailAddress: String

  """
  Whether all incoming mail is automatically forwarded to another address.
  """
  enabled: Boolean
}

enum Disposition {
  DISPOSITIONUNSPECIFIED
  LEAVEININBOX
  ARCHIVE
  TRASH
  MARKREAD
}

enum Alt {
  JSON
  MEDIA
  PROTO
}

enum Xgafv {
  _1
  _2
}

"""
The client-side encryption (CSE) configuration for the email address of an authenticated user. Gmail uses CSE configurations to save drafts of client-side encrypted email messages, and to sign and send encrypted email messages.
"""
type CseIdentity {
  """
  The email address for the sending identity. The email address must be the primary email address of the authenticated user.
  """
  emailAddress: String

  """
  If a key pair is associated, the identifier of the key pair, CseKeyPair.
  """
  primaryKeyPairId: String
}

"""
A client-side encryption S/MIME key pair, which is comprised of a public key, its certificate chain, and metadata for its paired private key. Gmail uses the key pair to complete the following tasks: - Sign outgoing client-side encrypted messages. - Save and reopen drafts of client-side encrypted messages. - Save and reopen sent messages. - Decrypt incoming or archived S/MIME messages.
"""
type CseKeyPair {
  """
  Output only. If a key pair is set to `DISABLED`, the time that the key pair's state changed from `ENABLED` to `DISABLED`. This field is present only when the key pair is in state `DISABLED`.
  """
  disableTime: String

  """Output only. The current state of the key pair."""
  enablementState: EnablementState

  """
  Output only. The immutable ID for the client-side encryption S/MIME key pair.
  """
  keyPairId: String

  """
  Output only. The public key and its certificate chain, in [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail) format.
  """
  pem: String

  """
  Input only. The public key and its certificate chain. The chain must be in [PKCS#7](https://en.wikipedia.org/wiki/PKCS_7) format and use PEM encoding and ASCII armor.
  """
  pkcs7: String

  """Metadata for instances of this key pair's private key."""
  privateKeyMetadata: [CsePrivateKeyMetadata]

  """
  Output only. The email address identities that are specified on the leaf certificate.
  """
  subjectEmailAddresses: [String]
}

enum EnablementState {
  STATEUNSPECIFIED
  ENABLED
  DISABLED
}

"""Metadata for a private key instance."""
type CsePrivateKeyMetadata {
  """
  Metadata for private keys managed by an external key access control list service. For details about managing key access, see [Google Workspace CSE API Reference](https://developers.google.com/workspace/cse/reference).
  """
  kaclsKeyMetadata: KaclsKeyMetadata

  """Output only. The immutable ID for the private key metadata instance."""
  privateKeyMetadataId: String
}

"""
Metadata for private keys managed by an external key access control list service. For details about managing key access, see [Google Workspace CSE API Reference](https://developers.google.com/workspace/cse/reference).
"""
type KaclsKeyMetadata {
  """
  Opaque data generated and used by the key access control list service. Maximum size: 8 KiB.
  """
  kaclsData: String

  """
  The URI of the key access control list service that manages the private key.
  """
  kaclsUri: String
}

"""
Settings for a delegate. Delegates can read, send, and delete messages, as well as view and add contacts, for the delegator's account. See "Set up mail delegation" for more information about delegates.
"""
type Delegate {
  """The email address of the delegate."""
  delegateEmail: String

  """
  Indicates whether this address has been verified and can act as a delegate for the account. Read-only.
  """
  verificationStatus: VerificationStatus
}

enum VerificationStatus {
  VERIFICATIONSTATUSUNSPECIFIED
  ACCEPTED
  PENDING
  REJECTED
  EXPIRED
}

"""A draft email in the user's mailbox."""
type Draft {
  """The immutable ID of the draft."""
  id: String

  """An email message."""
  message: Message
}

"""An email message."""
type Message {
  """The ID of the last history record that modified this message."""
  historyId: String

  """The immutable ID of the message."""
  id: String

  """
  The internal message creation timestamp (epoch ms), which determines ordering in the inbox. For normal SMTP-received email, this represents the time the message was originally accepted by Google, which is more reliable than the `Date` header. However, for API-migrated mail, it can be configured by client to be based on the `Date` header.
  """
  internalDate: String

  """List of IDs of labels applied to this message."""
  labelIds: [String]

  """A single MIME message part."""
  payload: MessagePart

  """
  The entire email message in an RFC 2822 formatted and base64url encoded string. Returned in `messages.get` and `drafts.get` responses when the `format=RAW` parameter is supplied.
  """
  raw: String

  """Estimated size in bytes of the message."""
  sizeEstimate: Int

  """A short part of the message text."""
  snippet: String

  """
  The ID of the thread the message belongs to. To add a message or draft to a thread, the following criteria must be met: 1. The requested `threadId` must be specified on the `Message` or `Draft.Message` you supply with your request. 2. The `References` and `In-Reply-To` headers must be set in compliance with the [RFC 2822](https://tools.ietf.org/html/rfc2822) standard. 3. The `Subject` headers must match. 
  """
  threadId: String
}

"""A single MIME message part."""
type MessagePart {
  """The body of a single MIME message part."""
  body: MessagePartBody

  """
  The filename of the attachment. Only present if this message part represents an attachment.
  """
  filename: String

  """
  List of headers on this message part. For the top-level message part, representing the entire message payload, it will contain the standard RFC 2822 email headers such as `To`, `From`, and `Subject`.
  """
  headers: [MessagePartHeader]

  """The MIME type of the message part."""
  mimeType: String

  """The immutable ID of the message part."""
  partId: String

  """
  The child MIME message parts of this part. This only applies to container MIME message parts, for example `multipart/*`. For non- container MIME message part types, such as `text/plain`, this field is empty. For more information, see RFC 1521.
  """
  parts: [MessagePart]
}

"""The body of a single MIME message part."""
type MessagePartBody {
  """
  When present, contains the ID of an external attachment that can be retrieved in a separate `messages.attachments.get` request. When not present, the entire content of the message part body is contained in the data field.
  """
  attachmentId: String

  """
  The body data of a MIME message part as a base64url encoded string. May be empty for MIME container types that have no message body or when the body data is sent as a separate attachment. An attachment ID is present if the body data is contained in a separate attachment.
  """
  data: String

  """Number of bytes for the message part data (encoding notwithstanding)."""
  size: Int
}

type MessagePartHeader {
  """The name of the header before the `:` separator. For example, `To`."""
  name: String

  """
  The value of the header after the `:` separator. For example, `someuser@example.com`.
  """
  value: String
}

enum Format {
  MINIMAL
  FULL
  RAW
  METADATA
}

"""
Resource definition for Gmail filters. Filters apply to specific messages instead of an entire email thread.
"""
type Filter2 {
  """A set of actions to perform on a message."""
  action: FilterAction

  """Message matching criteria."""
  criteria: FilterCriteria

  """The server assigned ID of the filter."""
  id: String
}

"""A set of actions to perform on a message."""
type FilterAction {
  """List of labels to add to the message."""
  addLabelIds: [String]

  """Email address that the message should be forwarded to."""
  forward: String

  """List of labels to remove from the message."""
  removeLabelIds: [String]
}

"""Message matching criteria."""
type FilterCriteria {
  """Whether the response should exclude chats."""
  excludeChats: Boolean

  """The sender's display name or email address."""
  from: String

  """Whether the message has any attachment."""
  hasAttachment: Boolean

  """
  Only return messages not matching the specified query. Supports the same query format as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
  """
  negatedQuery: String

  """
  Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
  """
  query: String

  """
  The size of the entire RFC822 message in bytes, including all headers and attachments.
  """
  size: Int

  """How the message size in bytes should be in relation to the size field."""
  sizeComparison: SizeComparison

  """
  Case-insensitive phrase found in the message's subject. Trailing and leading whitespace are be trimmed and adjacent spaces are collapsed.
  """
  subject: String

  """
  The recipient's display name or email address. Includes recipients in the "to", "cc", and "bcc" header fields. You can use simply the local part of the email address. For example, "example" and "example@" both match "example@gmail.com". This field is case-insensitive.
  """
  to: String
}

enum SizeComparison {
  UNSPECIFIED
  SMALLER
  LARGER
}

"""Settings for a forwarding address."""
type ForwardingAddress {
  """An email address to which messages can be forwarded."""
  forwardingEmail: String

  """
  Indicates whether this address has been verified and is usable for forwarding. Read-only.
  """
  verificationStatus: VerificationStatus2
}

enum VerificationStatus2 {
  VERIFICATIONSTATUSUNSPECIFIED
  ACCEPTED
  PENDING
}

"""IMAP settings for an account."""
type ImapSettings {
  """
  If this value is true, Gmail will immediately expunge a message when it is marked as deleted in IMAP. Otherwise, Gmail will wait for an update from the client before expunging messages marked as deleted.
  """
  autoExpunge: Boolean

  """Whether IMAP is enabled for the account."""
  enabled: Boolean

  """
  The action that will be executed on a message when it is marked as deleted and expunged from the last visible IMAP folder.
  """
  expungeBehavior: ExpungeBehavior

  """
  An optional limit on the number of messages that an IMAP folder may contain. Legal values are 0, 1000, 2000, 5000 or 10000. A value of zero is interpreted to mean that there is no limit.
  """
  maxFolderSize: Int
}

enum ExpungeBehavior {
  EXPUNGEBEHAVIORUNSPECIFIED
  ARCHIVE
  TRASH
  DELETEFOREVER
}

"""
Labels are used to categorize messages and threads within the user's mailbox. The maximum number of labels supported for a user's mailbox is 10,000.
"""
type Label {
  color: LabelColor

  """The immutable ID of the label."""
  id: String

  """
  The visibility of the label in the label list in the Gmail web interface.
  """
  labelListVisibility: LabelListVisibility

  """
  The visibility of messages with this label in the message list in the Gmail web interface.
  """
  messageListVisibility: MessageListVisibility

  """The total number of messages with the label."""
  messagesTotal: Int

  """The number of unread messages with the label."""
  messagesUnread: Int

  """The display name of the label."""
  name: String

  """The total number of threads with the label."""
  threadsTotal: Int

  """The number of unread threads with the label."""
  threadsUnread: Int

  """
  The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the `INBOX` and `UNREAD` labels from messages and threads, but cannot apply or remove the `DRAFTS` or `SENT` labels from messages or threads.
  """
  type: Type
}

type LabelColor {
  """
  The background color represented as hex string #RRGGBB (ex #000000). This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: \#000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, \#fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, \#f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, \#efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, \#e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, \#cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, \#ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, \#822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c \#464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, \#711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, \#594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, \#c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, \#662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765
  """
  backgroundColor: String

  """
  The text color of the label, represented as hex string. This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: \#000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, \#fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, \#f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, \#efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, \#e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, \#cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, \#ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, \#822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c \#464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, \#711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, \#594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, \#c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, \#662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765
  """
  textColor: String
}

enum LabelListVisibility {
  LABELSHOW
  LABELSHOWIFUNREAD
  LABELHIDE
}

enum MessageListVisibility {
  SHOW
  HIDE
}

enum Type {
  SYSTEM
  USER
}

"""
Language settings for an account. These settings correspond to the "Language settings" feature in the web interface.
"""
type LanguageSettings {
  """
  The language to display Gmail in, formatted as an RFC 3066 Language Tag (for example `en-GB`, `fr` or `ja` for British English, French, or Japanese respectively). The set of languages supported by Gmail evolves over time, so please refer to the "Language" dropdown in the Gmail settings for all available options, as described in the language settings help article. A table of sample values is also provided in the Managing Language Settings guide Not all Gmail clients can display the same set of languages. In the case that a user's display language is not available for use on a particular client, said client automatically chooses to display in the closest supported variant (or a reasonable default).
  """
  displayLanguage: String
}

type ListCseIdentitiesResponse {
  """One page of the list of CSE identities configured for the user."""
  cseIdentities: [CseIdentity]

  """
  Pagination token to be passed to a subsequent ListCseIdentities call in order to retrieve the next page of identities. If this value is not returned or is the empty string, then no further pages remain.
  """
  nextPageToken: String
}

type ListCseKeyPairsResponse {
  """One page of the list of CSE key pairs installed for the user."""
  cseKeyPairs: [CseKeyPair]

  """
  Pagination token to be passed to a subsequent ListCseKeyPairs call in order to retrieve the next page of key pairs. If this value is not returned, then no further pages remain.
  """
  nextPageToken: String
}

"""Response for the ListDelegates method."""
type ListDelegatesResponse {
  """
  List of the user's delegates (with any verification status). If an account doesn't have delegates, this field doesn't appear.
  """
  delegates: [Delegate]
}

type ListDraftsResponse {
  """
  List of drafts. Note that the `Message` property in each `Draft` resource only contains an `id` and a `threadId`. The messages.get method can fetch additional message details.
  """
  drafts: [Draft]

  """Token to retrieve the next page of results in the list."""
  nextPageToken: String

  """Estimated total number of results."""
  resultSizeEstimate: Int
}

"""Response for the ListFilters method."""
type ListFiltersResponse {
  """List of a user's filters."""
  filter: [Filter2]
}

"""Response for the ListForwardingAddresses method."""
type ListForwardingAddressesResponse {
  """List of addresses that may be used for forwarding."""
  forwardingAddresses: [ForwardingAddress]
}

type ListHistoryResponse {
  """
  List of history records. Any `messages` contained in the response will typically only have `id` and `threadId` fields populated.
  """
  history: [History2]

  """The ID of the mailbox's current history record."""
  historyId: String

  """Page token to retrieve the next page of results in the list."""
  nextPageToken: String
}

"""
A record of a change to the user's mailbox. Each history change may affect multiple messages in multiple ways.
"""
type History2 {
  """The mailbox sequence ID."""
  id: String

  """Labels added to messages in this history record."""
  labelsAdded: [HistoryLabelAdded]

  """Labels removed from messages in this history record."""
  labelsRemoved: [HistoryLabelRemoved]

  """
  List of messages changed in this history record. The fields for specific change types, such as `messagesAdded` may duplicate messages in this field. We recommend using the specific change-type fields instead of this.
  """
  messages: [Message]

  """Messages added to the mailbox in this history record."""
  messagesAdded: [HistoryMessageAdded]

  """
  Messages deleted (not Trashed) from the mailbox in this history record.
  """
  messagesDeleted: [HistoryMessageDeleted]
}

type HistoryLabelAdded {
  """Label IDs added to the message."""
  labelIds: [String]

  """An email message."""
  message: Message
}

type HistoryLabelRemoved {
  """Label IDs removed from the message."""
  labelIds: [String]

  """An email message."""
  message: Message
}

type HistoryMessageAdded {
  """An email message."""
  message: Message
}

type HistoryMessageDeleted {
  """An email message."""
  message: Message
}

enum HistoryTypesListItem {
  MESSAGEADDED
  MESSAGEDELETED
  LABELADDED
  LABELREMOVED
}

type ListLabelsResponse {
  """
  List of labels. Note that each label resource only contains an `id`, `name`, `messageListVisibility`, `labelListVisibility`, and `type`. The labels.get method can fetch additional label details.
  """
  labels: [Label]
}

type ListMessagesResponse {
  """
  List of messages. Note that each message resource contains only an `id` and a `threadId`. Additional message details can be fetched using the messages.get method.
  """
  messages: [Message]

  """Token to retrieve the next page of results in the list."""
  nextPageToken: String

  """Estimated total number of results."""
  resultSizeEstimate: Int
}

"""Response for the ListSendAs method."""
type ListSendAsResponse {
  """List of send-as aliases."""
  sendAs: [SendAs2]
}

"""
Settings associated with a send-as alias, which can be either the primary login address associated with the account or a custom "from" address. Send-as aliases correspond to the "Send Mail As" feature in the web interface.
"""
type SendAs2 {
  """
  A name that appears in the "From:" header for mail sent using this alias. For custom "from" addresses, when this is empty, Gmail will populate the "From:" header with the name that is used for the primary address associated with the account. If the admin has disabled the ability for users to update their name format, requests to update this field for the primary login will silently fail.
  """
  displayName: String

  """
  Whether this address is selected as the default "From:" address in situations such as composing a new message or sending a vacation auto-reply. Every Gmail account has exactly one default send-as address, so the only legal value that clients may write to this field is `true`. Changing this from `false` to `true` for an address will result in this field becoming `false` for the other previous default address.
  """
  isDefault: Boolean

  """
  Whether this address is the primary address used to login to the account. Every Gmail account has exactly one primary address, and it cannot be deleted from the collection of send-as aliases. This field is read-only.
  """
  isPrimary: Boolean

  """
  An optional email address that is included in a "Reply-To:" header for mail sent using this alias. If this is empty, Gmail will not generate a "Reply-To:" header.
  """
  replyToAddress: String

  """
  The email address that appears in the "From:" header for mail sent using this alias. This is read-only for all operations except create.
  """
  sendAsEmail: String

  """
  An optional HTML signature that is included in messages composed with this alias in the Gmail web UI. This signature is added to new emails only.
  """
  signature: String

  """Configuration for communication with an SMTP service."""
  smtpMsa: SmtpMsa

  """
  Whether Gmail should treat this address as an alias for the user's primary email address. This setting only applies to custom "from" aliases.
  """
  treatAsAlias: Boolean

  """
  Indicates whether this address has been verified for use as a send-as alias. Read-only. This setting only applies to custom "from" aliases.
  """
  verificationStatus: VerificationStatus3
}

"""Configuration for communication with an SMTP service."""
type SmtpMsa {
  """The hostname of the SMTP service. Required."""
  host: String

  """
  The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
  """
  password: String

  """The port of the SMTP service. Required."""
  port: Int

  """
  The protocol that will be used to secure communication with the SMTP service. Required.
  """
  securityMode: SecurityMode

  """
  The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
  """
  username: String
}

enum SecurityMode {
  SECURITYMODEUNSPECIFIED
  NONE
  SSL
  STARTTLS
}

enum VerificationStatus3 {
  VERIFICATIONSTATUSUNSPECIFIED
  ACCEPTED
  PENDING
}

type ListSmimeInfoResponse {
  """List of SmimeInfo."""
  smimeInfo: [SmimeInfo2]
}

"""An S/MIME email config."""
type SmimeInfo2 {
  """Encrypted key password, when key is encrypted."""
  encryptedKeyPassword: String

  """When the certificate expires (in milliseconds since epoch)."""
  expiration: String

  """The immutable ID for the SmimeInfo."""
  id: String

  """
  Whether this SmimeInfo is the default one for this user's send-as address.
  """
  isDefault: Boolean

  """The S/MIME certificate issuer's common name."""
  issuerCn: String

  """
  PEM formatted X509 concatenated certificate string (standard base64 encoding). Format used for returning key, which includes public key as well as certificate chain (not private key).
  """
  pem: String

  """
  PKCS#12 format containing a single private/public key pair and certificate chain. This format is only accepted from client for creating a new SmimeInfo and is never returned, because the private key is not intended to be exported. PKCS#12 may be encrypted, in which case encryptedKeyPassword should be set appropriately.
  """
  pkcs12: String
}

type ListThreadsResponse {
  """Page token to retrieve the next page of results in the list."""
  nextPageToken: String

  """Estimated total number of results."""
  resultSizeEstimate: Int

  """
  List of threads. Note that each thread resource does not contain a list of `messages`. The list of `messages` for a given thread can be fetched using the threads.get method.
  """
  threads: [Thread]
}

"""A collection of messages representing a conversation."""
type Thread {
  """The ID of the last history record that modified this thread."""
  historyId: String

  """The unique ID of the thread."""
  id: String

  """The list of messages in the thread."""
  messages: [Message]

  """A short part of the message text."""
  snippet: String
}

"""POP settings for an account."""
type PopSettings {
  """The range of messages which are accessible via POP."""
  accessWindow: AccessWindow

  """
  The action that will be executed on a message after it has been fetched via POP.
  """
  disposition: Disposition2
}

enum AccessWindow {
  ACCESSWINDOWUNSPECIFIED
  DISABLED
  FROMNOWON
  ALLMAIL
}

enum Disposition2 {
  DISPOSITIONUNSPECIFIED
  LEAVEININBOX
  ARCHIVE
  TRASH
  MARKREAD
}

"""Profile for a Gmail user."""
type Profile {
  """The user's email address."""
  emailAddress: String

  """The ID of the mailbox's current history record."""
  historyId: String

  """The total number of messages in the mailbox."""
  messagesTotal: Int

  """The total number of threads in the mailbox."""
  threadsTotal: Int
}

enum Format2 {
  FULL
  METADATA
  MINIMAL
}

"""
Vacation auto-reply settings for an account. These settings correspond to the "Vacation responder" feature in the web interface.
"""
type VacationSettings {
  """Flag that controls whether Gmail automatically replies to messages."""
  enableAutoReply: Boolean

  """
  An optional end time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives before the end time. If both `startTime` and `endTime` are specified, `startTime` must precede `endTime`.
  """
  endTime: String

  """
  Response body in HTML format. Gmail will sanitize the HTML before storing it. If both `response_body_plain_text` and `response_body_html` are specified, `response_body_html` will be used.
  """
  responseBodyHtml: String

  """
  Response body in plain text format. If both `response_body_plain_text` and `response_body_html` are specified, `response_body_html` will be used.
  """
  responseBodyPlainText: String

  """
  Optional text to prepend to the subject line in vacation responses. In order to enable auto-replies, either the response subject or the response body must be nonempty.
  """
  responseSubject: String

  """
  Flag that determines whether responses are sent to recipients who are not in the user's list of contacts.
  """
  restrictToContacts: Boolean

  """
  Flag that determines whether responses are sent to recipients who are outside of the user's domain. This feature is only available for Google Workspace users.
  """
  restrictToDomain: Boolean

  """
  An optional start time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives after the start time. If both `startTime` and `endTime` are specified, `startTime` must precede `endTime`.
  """
  startTime: String
}

type Mutation {
  """
  Creates a new draft with the `DRAFT` label.
  
  Equivalent to POST /gmail/v1/users/{userId}/drafts
  """
  gmailUsersDraftsCreate(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """String represents payload of content type 'message/cpim'"""
    messageCpimInput: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Draft

  """
  Sends the specified, existing draft to the recipients in the `To`, `Cc`, and `Bcc` headers.
  
  Equivalent to POST /gmail/v1/users/{userId}/drafts/send
  """
  gmailUsersDraftsSend(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """String represents payload of content type 'message/cpim'"""
    messageCpimInput: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Message

  """
  Replaces a draft's content.
  
  Equivalent to PUT /gmail/v1/users/{userId}/drafts/{id}
  """
  gmailUsersDraftsUpdate(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """The ID of the draft to update."""
    id: String!

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """String represents payload of content type 'message/cpim'"""
    messageCpimInput: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Draft

  """
  Creates a new label.
  
  Equivalent to POST /gmail/v1/users/{userId}/labels
  """
  gmailUsersLabelsCreate(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """
    Labels are used to categorize messages and threads within the user's mailbox. The maximum number of labels supported for a user's mailbox is 10,000.
    """
    labelInput: LabelInput

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Label

  """
  Patch the specified label.
  
  Equivalent to PATCH /gmail/v1/users/{userId}/labels/{id}
  """
  gmailUsersLabelsPatch(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """The ID of the label to update."""
    id: String!

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """
    Labels are used to categorize messages and threads within the user's mailbox. The maximum number of labels supported for a user's mailbox is 10,000.
    """
    labelInput: LabelInput

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Label

  """
  Updates the specified label.
  
  Equivalent to PUT /gmail/v1/users/{userId}/labels/{id}
  """
  gmailUsersLabelsUpdate(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """The ID of the label to update."""
    id: String!

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """
    Labels are used to categorize messages and threads within the user's mailbox. The maximum number of labels supported for a user's mailbox is 10,000.
    """
    labelInput: LabelInput

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Label

  """
  Imports a message into only this user's mailbox, with standard email delivery scanning and classification similar to receiving via SMTP. This method doesn't perform SPF checks, so it might not work for some spam messages, such as those attempting to perform domain spoofing. This method does not send a message. Note: This function doesn't trigger forwarding rules or filters set up by the user.
  
  Equivalent to POST /gmail/v1/users/{userId}/messages/import
  """
  gmailUsersMessagesImport(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """
    Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for Google Workspace accounts.
    """
    deleted: Boolean

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """Source for Gmail's internal date of the message."""
    internalDateSource: InternalDateSource

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """String represents payload of content type 'message/cpim'"""
    messageCpimInput: String

    """
    Ignore the Gmail spam classifier decision and never mark this email as SPAM in the mailbox.
    """
    neverMarkSpam: Boolean

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Process calendar invites in the email and add any extracted meetings to the Google Calendar for this user.
    """
    processForCalendar: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Message

  """
  Directly inserts a message into only this user's mailbox similar to `IMAP APPEND`, bypassing most scanning and classification. Does not send a message.
  
  Equivalent to POST /gmail/v1/users/{userId}/messages
  """
  gmailUsersMessagesInsert(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """
    Mark the email as permanently deleted (not TRASH) and only visible in Google Vault to a Vault administrator. Only used for Google Workspace accounts.
    """
    deleted: Boolean

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """Source for Gmail's internal date of the message."""
    internalDateSource: InternalDateSource

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """String represents payload of content type 'message/cpim'"""
    messageCpimInput: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Message

  """
  Modifies the labels on the specified message.
  
  Equivalent to POST /gmail/v1/users/{userId}/messages/{id}/modify
  """
  gmailUsersMessagesModify(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """The ID of the message to modify."""
    id: String!

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String
    modifyMessageRequestInput: ModifyMessageRequestInput

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Message

  """
  Sends the specified message to the recipients in the `To`, `Cc`, and `Bcc` headers. For example usage, see [Sending email](https://developers.google.com/gmail/api/guides/sending).
  
  Equivalent to POST /gmail/v1/users/{userId}/messages/send
  """
  gmailUsersMessagesSend(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """String represents payload of content type 'message/cpim'"""
    messageCpimInput: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Message

  """
  Moves the specified message to the trash.
  
  Equivalent to POST /gmail/v1/users/{userId}/messages/{id}/trash
  """
  gmailUsersMessagesTrash(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """The ID of the message to Trash."""
    id: String!

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Message

  """
  Removes the specified message from the trash.
  
  Equivalent to POST /gmail/v1/users/{userId}/messages/{id}/untrash
  """
  gmailUsersMessagesUntrash(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """The ID of the message to remove from Trash."""
    id: String!

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Message

  """
  Creates and configures a client-side encryption identity that's authorized to send mail from the user account. Google publishes the S/MIME certificate to a shared domain-wide directory so that people within a Google Workspace organization can encrypt and send mail to the identity.
  
  Equivalent to POST /gmail/v1/users/{userId}/settings/cse/identities
  """
  gmailUsersSettingsCseIdentitiesCreate(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """
    The client-side encryption (CSE) configuration for the email address of an authenticated user. Gmail uses CSE configurations to save drafts of client-side encrypted email messages, and to sign and send encrypted email messages.
    """
    cseIdentityInput: CseIdentityInput

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): CseIdentity

  """
  Associates a different key pair with an existing client-side encryption identity. The updated key pair must validate against Google's [S/MIME certificate profiles](https://support.google.com/a/answer/7300887).
  
  Equivalent to PATCH /gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}
  """
  gmailUsersSettingsCseIdentitiesPatch(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """
    The client-side encryption (CSE) configuration for the email address of an authenticated user. Gmail uses CSE configurations to save drafts of client-side encrypted email messages, and to sign and send encrypted email messages.
    """
    cseIdentityInput: CseIdentityInput

    """The email address of the client-side encryption identity to update."""
    emailAddress: String!

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): CseIdentity

  """
  Creates and uploads a client-side encryption S/MIME public key certificate chain and private key metadata for the authenticated user.
  
  Equivalent to POST /gmail/v1/users/{userId}/settings/cse/keypairs
  """
  gmailUsersSettingsCseKeypairsCreate(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """
    A client-side encryption S/MIME key pair, which is comprised of a public key, its certificate chain, and metadata for its paired private key. Gmail uses the key pair to complete the following tasks: - Sign outgoing client-side encrypted messages. - Save and reopen drafts of client-side encrypted messages. - Save and reopen sent messages. - Decrypt incoming or archived S/MIME messages.
    """
    cseKeyPairInput: CseKeyPairInput

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): CseKeyPair

  """
  Turns off a client-side encryption key pair. The authenticated user can no longer use the key pair to decrypt incoming CSE message texts or sign outgoing CSE mail. To regain access, use the EnableCseKeyPair to turn on the key pair. After 30 days, you can permanently delete the key pair by using the ObliterateCseKeyPair method.
  
  Equivalent to POST /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable
  """
  gmailUsersSettingsCseKeypairsDisable(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Requests to turn off a client-side encryption key pair."""
    disableCseKeyPairRequestInput: JSON

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """The identifier of the key pair to turn off."""
    keyPairId: String!

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): CseKeyPair

  """
  Turns on a client-side encryption key pair that was turned off. The key pair becomes active again for any associated client-side encryption identities.
  
  Equivalent to POST /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable
  """
  gmailUsersSettingsCseKeypairsEnable(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Requests to turn on a client-side encryption key pair."""
    enableCseKeyPairRequestInput: JSON

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """The identifier of the key pair to turn on."""
    keyPairId: String!

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The requester's primary email address. To indicate the authenticated user, you can use the special value `me`.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): CseKeyPair

  """
  Adds a delegate with its verification status set directly to `accepted`, without sending any verification email. The delegate user must be a member of the same Google Workspace organization as the delegator user. Gmail imposes limitations on the number of delegates and delegators each user in a Google Workspace organization can have. These limits depend on your organization, but in general each user can have up to 25 delegates and up to 10 delegators. Note that a delegate user must be referred to by their primary email address, and not an email alias. Also note that when a new delegate is created, there may be up to a one minute delay before the new delegate is available for use. This method is only available to service account clients that have been delegated domain-wide authority.
  
  Equivalent to POST /gmail/v1/users/{userId}/settings/delegates
  """
  gmailUsersSettingsDelegatesCreate(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """
    Settings for a delegate. Delegates can read, send, and delete messages, as well as view and add contacts, for the delegator's account. See "Set up mail delegation" for more information about delegates.
    """
    delegateInput: DelegateInput

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Delegate

  """
  Creates a filter. Note: you can only create a maximum of 1,000 filters.
  
  Equivalent to POST /gmail/v1/users/{userId}/settings/filters
  """
  gmailUsersSettingsFiltersCreate(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    Resource definition for Gmail filters. Filters apply to specific messages instead of an entire email thread.
    """
    filter2Input: Filter2Input

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Filter2

  """
  Creates a forwarding address. If ownership verification is required, a message will be sent to the recipient and the resource's verification status will be set to `pending`; otherwise, the resource will be created with verification status set to `accepted`. This method is only available to service account clients that have been delegated domain-wide authority.
  
  Equivalent to POST /gmail/v1/users/{userId}/settings/forwardingAddresses
  """
  gmailUsersSettingsForwardingAddressesCreate(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """Settings for a forwarding address."""
    forwardingAddressInput: ForwardingAddressInput

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): ForwardingAddress

  """
  Creates a custom "from" send-as alias. If an SMTP MSA is specified, Gmail will attempt to connect to the SMTP service to validate the configuration before creating the alias. If ownership verification is required for the alias, a message will be sent to the email address and the resource's verification status will be set to `pending`; otherwise, the resource will be created with verification status set to `accepted`. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. This method is only available to service account clients that have been delegated domain-wide authority.
  
  Equivalent to POST /gmail/v1/users/{userId}/settings/sendAs
  """
  gmailUsersSettingsSendAsCreate(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """
    Settings associated with a send-as alias, which can be either the primary login address associated with the account or a custom "from" address. Send-as aliases correspond to the "Send Mail As" feature in the web interface.
    """
    sendAs2Input: SendAs2Input

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): SendAs2

  """
  Patch the specified send-as alias.
  
  Equivalent to PATCH /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}
  """
  gmailUsersSettingsSendAsPatch(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """
    Settings associated with a send-as alias, which can be either the primary login address associated with the account or a custom "from" address. Send-as aliases correspond to the "Send Mail As" feature in the web interface.
    """
    sendAs2Input: SendAs2Input

    """The send-as alias to be updated."""
    sendAsEmail: String!

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): SendAs2

  """
  Insert (upload) the given S/MIME config for the specified send-as alias. Note that pkcs12 format is required for the key.
  
  Equivalent to POST /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo
  """
  gmailUsersSettingsSendAsSmimeInfoInsert(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """
    The email address that appears in the "From:" header for mail sent using this alias.
    """
    sendAsEmail: String!

    """An S/MIME email config."""
    smimeInfo2Input: SmimeInfo2Input

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): SmimeInfo2

  """
  Updates a send-as alias. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. Addresses other than the primary address for the account can only be updated by service account clients that have been delegated domain-wide authority.
  
  Equivalent to PUT /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}
  """
  gmailUsersSettingsSendAsUpdate(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """
    Settings associated with a send-as alias, which can be either the primary login address associated with the account or a custom "from" address. Send-as aliases correspond to the "Send Mail As" feature in the web interface.
    """
    sendAs2Input: SendAs2Input

    """The send-as alias to be updated."""
    sendAsEmail: String!

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): SendAs2

  """
  Updates the auto-forwarding setting for the specified account. A verified forwarding address must be specified when auto-forwarding is enabled. This method is only available to service account clients that have been delegated domain-wide authority.
  
  Equivalent to PUT /gmail/v1/users/{userId}/settings/autoForwarding
  """
  gmailUsersSettingsUpdateAutoForwarding(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """Auto-forwarding settings for an account."""
    autoForwardingInput: AutoForwardingInput

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): AutoForwarding

  """
  Updates IMAP settings.
  
  Equivalent to PUT /gmail/v1/users/{userId}/settings/imap
  """
  gmailUsersSettingsUpdateImap(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """IMAP settings for an account."""
    imapSettingsInput: ImapSettingsInput

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): ImapSettings

  """
  Updates language settings. If successful, the return object contains the `displayLanguage` that was saved for the user, which may differ from the value passed into the request. This is because the requested `displayLanguage` may not be directly supported by Gmail but have a close variant that is, and so the variant may be chosen and saved instead.
  
  Equivalent to PUT /gmail/v1/users/{userId}/settings/language
  """
  gmailUsersSettingsUpdateLanguage(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """
    Language settings for an account. These settings correspond to the "Language settings" feature in the web interface.
    """
    languageSettingsInput: LanguageSettingsInput

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): LanguageSettings

  """
  Updates POP settings.
  
  Equivalent to PUT /gmail/v1/users/{userId}/settings/pop
  """
  gmailUsersSettingsUpdatePop(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """POP settings for an account."""
    popSettingsInput: PopSettingsInput

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): PopSettings

  """
  Updates vacation responder settings.
  
  Equivalent to PUT /gmail/v1/users/{userId}/settings/vacation
  """
  gmailUsersSettingsUpdateVacation(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    User's email address. The special value "me" can be used to indicate the authenticated user.
    """
    userId: String!

    """
    Vacation auto-reply settings for an account. These settings correspond to the "Vacation responder" feature in the web interface.
    """
    vacationSettingsInput: VacationSettingsInput

    """V1 error format."""
    xgafv: Xgafv
  ): VacationSettings

  """
  Modifies the labels applied to the thread. This applies to all messages in the thread.
  
  Equivalent to POST /gmail/v1/users/{userId}/threads/{id}/modify
  """
  gmailUsersThreadsModify(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """The ID of the thread to modify."""
    id: String!

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String
    modifyThreadRequestInput: ModifyThreadRequestInput

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Thread

  """
  Moves the specified thread to the trash. Any messages that belong to the thread are also moved to the trash.
  
  Equivalent to POST /gmail/v1/users/{userId}/threads/{id}/trash
  """
  gmailUsersThreadsTrash(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """The ID of the thread to Trash."""
    id: String!

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Thread

  """
  Removes the specified thread from the trash. Any messages that belong to the thread are also removed from the trash.
  
  Equivalent to POST /gmail/v1/users/{userId}/threads/{id}/untrash
  """
  gmailUsersThreadsUntrash(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """The ID of the thread to remove from Trash."""
    id: String!

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """V1 error format."""
    xgafv: Xgafv
  ): Thread

  """
  Set up or update a push notification watch on the given user mailbox.
  
  Equivalent to POST /gmail/v1/users/{userId}/watch
  """
  gmailUsersWatch(
    """OAuth access token."""
    accessToken: String

    """Data format for response."""
    alt: Alt

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauthToken: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    uploadProtocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The user's email address. The special value `me` can be used to indicate the authenticated user.
    """
    userId: String!

    """Set up or update a new push notification watch on this user's mailbox."""
    watchRequestInput: WatchRequestInput

    """V1 error format."""
    xgafv: Xgafv
  ): WatchResponse
}

"""
Labels are used to categorize messages and threads within the user's mailbox. The maximum number of labels supported for a user's mailbox is 10,000.
"""
input LabelInput {
  color: LabelColorInput

  """The immutable ID of the label."""
  id: String

  """
  The visibility of the label in the label list in the Gmail web interface.
  """
  labelListVisibility: LabelListVisibility

  """
  The visibility of messages with this label in the message list in the Gmail web interface.
  """
  messageListVisibility: MessageListVisibility

  """The total number of messages with the label."""
  messagesTotal: Int

  """The number of unread messages with the label."""
  messagesUnread: Int

  """The display name of the label."""
  name: String

  """The total number of threads with the label."""
  threadsTotal: Int

  """The number of unread threads with the label."""
  threadsUnread: Int

  """
  The owner type for the label. User labels are created by the user and can be modified and deleted by the user and can be applied to any message or thread. System labels are internally created and cannot be added, modified, or deleted. System labels may be able to be applied to or removed from messages and threads under some circumstances but this is not guaranteed. For example, users can apply and remove the `INBOX` and `UNREAD` labels from messages and threads, but cannot apply or remove the `DRAFTS` or `SENT` labels from messages or threads.
  """
  type: Type
}

input LabelColorInput {
  """
  The background color represented as hex string #RRGGBB (ex #000000). This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: \#000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, \#fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, \#f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, \#efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, \#e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, \#cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, \#ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, \#822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c \#464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, \#711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, \#594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, \#c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, \#662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765
  """
  backgroundColor: String

  """
  The text color of the label, represented as hex string. This field is required in order to set the color of a label. Only the following predefined set of color values are allowed: \#000000, #434343, #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, \#fb4c2f, #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3, \#f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5, #fcdee8, \#efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, \#e66550, #ffbc6b, #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, \#cc3a21, #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798, \#ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b, #b65775, \#822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c \#464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff, \#711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706, #ffdeb5, \#594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, \#c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, \#662e37, #ebdbde, #cca6ac, #094228, #42d692, #16a765
  """
  textColor: String
}

enum InternalDateSource {
  RECEIVEDTIME
  DATEHEADER
}

input ModifyMessageRequestInput {
  """
  A list of IDs of labels to add to this message. You can add up to 100 labels with each update.
  """
  addLabelIds: [String]

  """
  A list IDs of labels to remove from this message. You can remove up to 100 labels with each update.
  """
  removeLabelIds: [String]
}

"""
The client-side encryption (CSE) configuration for the email address of an authenticated user. Gmail uses CSE configurations to save drafts of client-side encrypted email messages, and to sign and send encrypted email messages.
"""
input CseIdentityInput {
  """
  The email address for the sending identity. The email address must be the primary email address of the authenticated user.
  """
  emailAddress: String

  """
  If a key pair is associated, the identifier of the key pair, CseKeyPair.
  """
  primaryKeyPairId: String
}

"""
A client-side encryption S/MIME key pair, which is comprised of a public key, its certificate chain, and metadata for its paired private key. Gmail uses the key pair to complete the following tasks: - Sign outgoing client-side encrypted messages. - Save and reopen drafts of client-side encrypted messages. - Save and reopen sent messages. - Decrypt incoming or archived S/MIME messages.
"""
input CseKeyPairInput {
  """
  Output only. If a key pair is set to `DISABLED`, the time that the key pair's state changed from `ENABLED` to `DISABLED`. This field is present only when the key pair is in state `DISABLED`.
  """
  disableTime: String

  """Output only. The current state of the key pair."""
  enablementState: EnablementState

  """
  Output only. The immutable ID for the client-side encryption S/MIME key pair.
  """
  keyPairId: String

  """
  Output only. The public key and its certificate chain, in [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail) format.
  """
  pem: String

  """
  Input only. The public key and its certificate chain. The chain must be in [PKCS#7](https://en.wikipedia.org/wiki/PKCS_7) format and use PEM encoding and ASCII armor.
  """
  pkcs7: String

  """Metadata for instances of this key pair's private key."""
  privateKeyMetadata: [CsePrivateKeyMetadataInput]

  """
  Output only. The email address identities that are specified on the leaf certificate.
  """
  subjectEmailAddresses: [String]
}

"""Metadata for a private key instance."""
input CsePrivateKeyMetadataInput {
  """
  Metadata for private keys managed by an external key access control list service. For details about managing key access, see [Google Workspace CSE API Reference](https://developers.google.com/workspace/cse/reference).
  """
  kaclsKeyMetadata: KaclsKeyMetadataInput

  """Output only. The immutable ID for the private key metadata instance."""
  privateKeyMetadataId: String
}

"""
Metadata for private keys managed by an external key access control list service. For details about managing key access, see [Google Workspace CSE API Reference](https://developers.google.com/workspace/cse/reference).
"""
input KaclsKeyMetadataInput {
  """
  Opaque data generated and used by the key access control list service. Maximum size: 8 KiB.
  """
  kaclsData: String

  """
  The URI of the key access control list service that manages the private key.
  """
  kaclsUri: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
Settings for a delegate. Delegates can read, send, and delete messages, as well as view and add contacts, for the delegator's account. See "Set up mail delegation" for more information about delegates.
"""
input DelegateInput {
  """The email address of the delegate."""
  delegateEmail: String

  """
  Indicates whether this address has been verified and can act as a delegate for the account. Read-only.
  """
  verificationStatus: VerificationStatus
}

"""
Resource definition for Gmail filters. Filters apply to specific messages instead of an entire email thread.
"""
input Filter2Input {
  """A set of actions to perform on a message."""
  action: FilterActionInput

  """Message matching criteria."""
  criteria: FilterCriteriaInput

  """The server assigned ID of the filter."""
  id: String
}

"""A set of actions to perform on a message."""
input FilterActionInput {
  """List of labels to add to the message."""
  addLabelIds: [String]

  """Email address that the message should be forwarded to."""
  forward: String

  """List of labels to remove from the message."""
  removeLabelIds: [String]
}

"""Message matching criteria."""
input FilterCriteriaInput {
  """Whether the response should exclude chats."""
  excludeChats: Boolean

  """The sender's display name or email address."""
  from: String

  """Whether the message has any attachment."""
  hasAttachment: Boolean

  """
  Only return messages not matching the specified query. Supports the same query format as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
  """
  negatedQuery: String

  """
  Only return messages matching the specified query. Supports the same query format as the Gmail search box. For example, `"from:someuser@example.com rfc822msgid: is:unread"`.
  """
  query: String

  """
  The size of the entire RFC822 message in bytes, including all headers and attachments.
  """
  size: Int

  """How the message size in bytes should be in relation to the size field."""
  sizeComparison: SizeComparison

  """
  Case-insensitive phrase found in the message's subject. Trailing and leading whitespace are be trimmed and adjacent spaces are collapsed.
  """
  subject: String

  """
  The recipient's display name or email address. Includes recipients in the "to", "cc", and "bcc" header fields. You can use simply the local part of the email address. For example, "example" and "example@" both match "example@gmail.com". This field is case-insensitive.
  """
  to: String
}

"""Settings for a forwarding address."""
input ForwardingAddressInput {
  """An email address to which messages can be forwarded."""
  forwardingEmail: String

  """
  Indicates whether this address has been verified and is usable for forwarding. Read-only.
  """
  verificationStatus: VerificationStatus2
}

"""
Settings associated with a send-as alias, which can be either the primary login address associated with the account or a custom "from" address. Send-as aliases correspond to the "Send Mail As" feature in the web interface.
"""
input SendAs2Input {
  """
  A name that appears in the "From:" header for mail sent using this alias. For custom "from" addresses, when this is empty, Gmail will populate the "From:" header with the name that is used for the primary address associated with the account. If the admin has disabled the ability for users to update their name format, requests to update this field for the primary login will silently fail.
  """
  displayName: String

  """
  Whether this address is selected as the default "From:" address in situations such as composing a new message or sending a vacation auto-reply. Every Gmail account has exactly one default send-as address, so the only legal value that clients may write to this field is `true`. Changing this from `false` to `true` for an address will result in this field becoming `false` for the other previous default address.
  """
  isDefault: Boolean

  """
  Whether this address is the primary address used to login to the account. Every Gmail account has exactly one primary address, and it cannot be deleted from the collection of send-as aliases. This field is read-only.
  """
  isPrimary: Boolean

  """
  An optional email address that is included in a "Reply-To:" header for mail sent using this alias. If this is empty, Gmail will not generate a "Reply-To:" header.
  """
  replyToAddress: String

  """
  The email address that appears in the "From:" header for mail sent using this alias. This is read-only for all operations except create.
  """
  sendAsEmail: String

  """
  An optional HTML signature that is included in messages composed with this alias in the Gmail web UI. This signature is added to new emails only.
  """
  signature: String

  """Configuration for communication with an SMTP service."""
  smtpMsa: SmtpMsaInput

  """
  Whether Gmail should treat this address as an alias for the user's primary email address. This setting only applies to custom "from" aliases.
  """
  treatAsAlias: Boolean

  """
  Indicates whether this address has been verified for use as a send-as alias. Read-only. This setting only applies to custom "from" aliases.
  """
  verificationStatus: VerificationStatus3
}

"""Configuration for communication with an SMTP service."""
input SmtpMsaInput {
  """The hostname of the SMTP service. Required."""
  host: String

  """
  The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
  """
  password: String

  """The port of the SMTP service. Required."""
  port: Int

  """
  The protocol that will be used to secure communication with the SMTP service. Required.
  """
  securityMode: SecurityMode

  """
  The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
  """
  username: String
}

"""An S/MIME email config."""
input SmimeInfo2Input {
  """Encrypted key password, when key is encrypted."""
  encryptedKeyPassword: String

  """When the certificate expires (in milliseconds since epoch)."""
  expiration: String

  """The immutable ID for the SmimeInfo."""
  id: String

  """
  Whether this SmimeInfo is the default one for this user's send-as address.
  """
  isDefault: Boolean

  """The S/MIME certificate issuer's common name."""
  issuerCn: String

  """
  PEM formatted X509 concatenated certificate string (standard base64 encoding). Format used for returning key, which includes public key as well as certificate chain (not private key).
  """
  pem: String

  """
  PKCS#12 format containing a single private/public key pair and certificate chain. This format is only accepted from client for creating a new SmimeInfo and is never returned, because the private key is not intended to be exported. PKCS#12 may be encrypted, in which case encryptedKeyPassword should be set appropriately.
  """
  pkcs12: String
}

"""Auto-forwarding settings for an account."""
input AutoForwardingInput {
  """
  The state that a message should be left in after it has been forwarded.
  """
  disposition: Disposition

  """
  Email address to which all incoming messages are forwarded. This email address must be a verified member of the forwarding addresses.
  """
  emailAddress: String

  """
  Whether all incoming mail is automatically forwarded to another address.
  """
  enabled: Boolean
}

"""IMAP settings for an account."""
input ImapSettingsInput {
  """
  If this value is true, Gmail will immediately expunge a message when it is marked as deleted in IMAP. Otherwise, Gmail will wait for an update from the client before expunging messages marked as deleted.
  """
  autoExpunge: Boolean

  """Whether IMAP is enabled for the account."""
  enabled: Boolean

  """
  The action that will be executed on a message when it is marked as deleted and expunged from the last visible IMAP folder.
  """
  expungeBehavior: ExpungeBehavior

  """
  An optional limit on the number of messages that an IMAP folder may contain. Legal values are 0, 1000, 2000, 5000 or 10000. A value of zero is interpreted to mean that there is no limit.
  """
  maxFolderSize: Int
}

"""
Language settings for an account. These settings correspond to the "Language settings" feature in the web interface.
"""
input LanguageSettingsInput {
  """
  The language to display Gmail in, formatted as an RFC 3066 Language Tag (for example `en-GB`, `fr` or `ja` for British English, French, or Japanese respectively). The set of languages supported by Gmail evolves over time, so please refer to the "Language" dropdown in the Gmail settings for all available options, as described in the language settings help article. A table of sample values is also provided in the Managing Language Settings guide Not all Gmail clients can display the same set of languages. In the case that a user's display language is not available for use on a particular client, said client automatically chooses to display in the closest supported variant (or a reasonable default).
  """
  displayLanguage: String
}

"""POP settings for an account."""
input PopSettingsInput {
  """The range of messages which are accessible via POP."""
  accessWindow: AccessWindow

  """
  The action that will be executed on a message after it has been fetched via POP.
  """
  disposition: Disposition2
}

"""
Vacation auto-reply settings for an account. These settings correspond to the "Vacation responder" feature in the web interface.
"""
input VacationSettingsInput {
  """Flag that controls whether Gmail automatically replies to messages."""
  enableAutoReply: Boolean

  """
  An optional end time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives before the end time. If both `startTime` and `endTime` are specified, `startTime` must precede `endTime`.
  """
  endTime: String

  """
  Response body in HTML format. Gmail will sanitize the HTML before storing it. If both `response_body_plain_text` and `response_body_html` are specified, `response_body_html` will be used.
  """
  responseBodyHtml: String

  """
  Response body in plain text format. If both `response_body_plain_text` and `response_body_html` are specified, `response_body_html` will be used.
  """
  responseBodyPlainText: String

  """
  Optional text to prepend to the subject line in vacation responses. In order to enable auto-replies, either the response subject or the response body must be nonempty.
  """
  responseSubject: String

  """
  Flag that determines whether responses are sent to recipients who are not in the user's list of contacts.
  """
  restrictToContacts: Boolean

  """
  Flag that determines whether responses are sent to recipients who are outside of the user's domain. This feature is only available for Google Workspace users.
  """
  restrictToDomain: Boolean

  """
  An optional start time for sending auto-replies (epoch ms). When this is specified, Gmail will automatically reply only to messages that it receives after the start time. If both `startTime` and `endTime` are specified, `startTime` must precede `endTime`.
  """
  startTime: String
}

input ModifyThreadRequestInput {
  """
  A list of IDs of labels to add to this thread. You can add up to 100 labels with each update.
  """
  addLabelIds: [String]

  """
  A list of IDs of labels to remove from this thread. You can remove up to 100 labels with each update.
  """
  removeLabelIds: [String]
}

"""Push notification watch response."""
type WatchResponse {
  """
  When Gmail will stop sending notifications for mailbox updates (epoch millis). Call `watch` again before this time to renew the watch.
  """
  expiration: String

  """The ID of the mailbox's current history record."""
  historyId: String
}

"""Set up or update a new push notification watch on this user's mailbox."""
input WatchRequestInput {
  """Filtering behavior of labelIds list specified."""
  labelFilterAction: LabelFilterAction

  """
  List of label_ids to restrict notifications about. By default, if unspecified, all changes are pushed out. If specified then dictates which labels are required for a push notification to be generated.
  """
  labelIds: [String]

  """
  A fully qualified Google Cloud Pub/Sub API topic name to publish the events to. This topic name **must** already exist in Cloud Pub/Sub and you **must** have already granted gmail "publish" permission on it. For example, "projects/my-project-identifier/topics/my-topic-name" (using the Cloud Pub/Sub "v1" topic naming format). Note that the "my-project-identifier" portion must exactly match your Google developer project id (the one executing this watch request).
  """
  topicName: String
}

enum LabelFilterAction {
  INCLUDE
  EXCLUDE
}
