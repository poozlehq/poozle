directive @enum(value: String) on ENUM_VALUE

directive @dictionary on FIELD_DEFINITION

directive @typescript(type: String) on SCALAR | ENUM

directive @example(value: ObjMap) repeatable on FIELD_DEFINITION | OBJECT | INPUT_OBJECT | ENUM | SCALAR

directive @globalOptions(sourceName: String, endpoint: String, operationHeaders: ObjMap, queryStringOptions: ObjMap, queryParams: ObjMap) on OBJECT

directive @httpOperation(path: String, operationSpecificHeaders: ObjMap, httpMethod: HTTPMethod, isBinary: Boolean, requestBaseBody: ObjMap, queryParamArgMap: ObjMap, queryStringOptionsByParam: ObjMap) on FIELD_DEFINITION

type Query {
  """Retrieves a list of resources, possibly filtered."""
  youtube_activities_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies a comma-separated list of one or more activity resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in an activity resource, the snippet property contains other properties that identify the type of activity, a display title for the activity, and so forth. If you set *part=snippet*, the API response will also contain all of those nested properties.
    """
    part: [String]!
    channelId: String
    home: Boolean

    """
    The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    """
    maxResults: NonNegativeInt
    mine: Boolean

    """
    The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    """
    pageToken: String
    publishedAfter: String
    publishedBefore: String
    regionCode: String
  ): ActivityListResponse

  """Retrieves a list of resources, possibly filtered."""
  youtube_captions_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies a comma-separated list of one or more caption resource parts that the API response will include. The part names that you can include in the parameter value are id and snippet.
    """
    part: [String]!

    """Returns the captions for the specified video."""
    videoId: String!

    """Returns the captions with the given IDs for Stubby or Apiary."""
    id: [String]

    """
    ID of the Google+ Page for the channel that the request is on behalf of.
    """
    onBehalfOf: String

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String
  ): CaptionListResponse

  """Downloads a caption track."""
  youtube_captions_download(
    """The ID of the caption track to download, required for One Platform."""
    id: String!
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    ID of the Google+ Page for the channel that the request is be on behalf of
    """
    onBehalfOf: String

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    Convert the captions into this format. Supported options are sbv, srt, and vtt.
    """
    tfmt: String

    """
    tlang is the language code; machine translate the captions into this language.
    """
    tlang: String
  ): JSON

  """Retrieves a list of resources, possibly filtered."""
  youtube_channelSections_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies a comma-separated list of one or more channelSection resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, and contentDetails. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a channelSection resource, the snippet property contains other properties, such as a display title for the channelSection. If you set *part=snippet*, the API response will also contain all of those nested properties.
    """
    part: [String]!

    """Return the ChannelSections owned by the specified channel ID."""
    channelId: String

    """Return content in specified language"""
    hl: String

    """Return the ChannelSections with the given IDs for Stubby or Apiary."""
    id: [String]

    """Return the ChannelSections owned by the authenticated user."""
    mine: Boolean

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String
  ): ChannelSectionListResponse

  """Retrieves a list of resources, possibly filtered."""
  youtube_channels_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies a comma-separated list of one or more channel resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a channel resource, the contentDetails property contains other properties, such as the uploads properties. As such, if you set *part=contentDetails*, the API response will also contain all of those nested properties.
    """
    part: [String]!

    """Return the channels within the specified guide category ID."""
    categoryId: String

    """Return the channel associated with a YouTube username."""
    forUsername: String

    """
    Stands for "host language". Specifies the localization language of the metadata to be filled into snippet.localized. The field is filled with the default metadata if there is no localization in the specified language. The parameter value must be a language code included in the list returned by the i18nLanguages.list method (e.g. en_US, es_MX).
    """
    hl: String

    """Return the channels with the specified IDs."""
    id: [String]

    """Return the channels managed by the authenticated user."""
    managedByMe: Boolean

    """
    The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    """
    maxResults: NonNegativeInt

    """Return the ids of channels owned by the authenticated user."""
    mine: Boolean

    """Return the channels subscribed to the authenticated user"""
    mySubscribers: Boolean

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    """
    pageToken: String
  ): ChannelListResponse

  """Retrieves a list of resources, possibly filtered."""
  youtube_commentThreads_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies a comma-separated list of one or more commentThread resource properties that the API response will include.
    """
    part: [String]!

    """
    Returns the comment threads of all videos of the channel and the channel comments as well.
    """
    allThreadsRelatedToChannelId: String

    """
    Returns the comment threads for all the channel comments (ie does not include comments left on videos).
    """
    channelId: String

    """Returns the comment threads with the given IDs for Stubby or Apiary."""
    id: [String]

    """
    The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    """
    maxResults: PositiveInt
    moderationStatus: queryInput_youtube_commentThreads_list_moderationStatus
    order: queryInput_youtube_commentThreads_list_order

    """
    The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    """
    pageToken: String

    """
    Limits the returned comment threads to those matching the specified key words. Not compatible with the 'id' filter.
    """
    searchTerms: String
    textFormat: queryInput_youtube_commentThreads_list_textFormat

    """Returns the comment threads of the specified video."""
    videoId: String
  ): CommentThreadListResponse

  """Retrieves a list of resources, possibly filtered."""
  youtube_comments_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies a comma-separated list of one or more comment resource properties that the API response will include.
    """
    part: [String]!

    """Returns the comments with the given IDs for One Platform."""
    id: [String]

    """
    The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    """
    maxResults: PositiveInt

    """
    The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    """
    pageToken: String

    """
    Returns replies to the specified comment. Note, currently YouTube features only one level of replies (ie replies to top level comments). However replies to replies may be supported in the future.
    """
    parentId: String
    textFormat: queryInput_youtube_comments_list_textFormat
  ): CommentListResponse

  """Retrieves a list of resources, possibly filtered."""
  youtube_i18nLanguages_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies the i18nLanguage resource properties that the API response will include. Set the parameter value to snippet.
    """
    part: [String]!
    hl: String
  ): I18nLanguageListResponse

  """Retrieves a list of resources, possibly filtered."""
  youtube_i18nRegions_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies the i18nRegion resource properties that the API response will include. Set the parameter value to snippet.
    """
    part: [String]!
    hl: String
  ): I18nRegionListResponse

  """Retrieve the list of broadcasts associated with the given channel."""
  youtube_liveBroadcasts_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, status and statistics.
    """
    part: [String]!
    broadcastStatus: queryInput_youtube_liveBroadcasts_list_broadcastStatus
    broadcastType: queryInput_youtube_liveBroadcasts_list_broadcastType

    """Return broadcasts with the given ids from Stubby or Apiary."""
    id: [String]

    """
    The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    """
    maxResults: NonNegativeInt
    mine: Boolean

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    """
    onBehalfOfContentOwnerChannel: String

    """
    The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    """
    pageToken: String
  ): LiveBroadcastListResponse

  """Retrieves a list of resources, possibly filtered."""
  youtube_liveChatMessages_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """The id of the live chat for which comments should be returned."""
    liveChatId: String!

    """
    The *part* parameter specifies the liveChatComment resource parts that the API response will include. Supported values are id and snippet.
    """
    part: [String]!

    """
    Specifies the localization language in which the system messages should be returned.
    """
    hl: String

    """
    The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    """
    maxResults: PositiveInt

    """
    The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken property identify other pages that could be retrieved.
    """
    pageToken: String

    """
    Specifies the size of the profile image that should be returned for each user.
    """
    profileImageSize: PositiveInt
  ): LiveChatMessageListResponse

  """Retrieves a list of resources, possibly filtered."""
  youtube_liveChatModerators_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """The id of the live chat for which moderators should be returned."""
    liveChatId: String!

    """
    The *part* parameter specifies the liveChatModerator resource parts that the API response will include. Supported values are id and snippet.
    """
    part: [String]!

    """
    The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    """
    maxResults: NonNegativeInt

    """
    The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    """
    pageToken: String
  ): LiveChatModeratorListResponse

  """Retrieve the list of streams associated with the given channel. --"""
  youtube_liveStreams_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies a comma-separated list of one or more liveStream resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, cdn, and status.
    """
    part: [String]!

    """Return LiveStreams with the given ids from Stubby or Apiary."""
    id: [String]

    """
    The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    """
    maxResults: NonNegativeInt
    mine: Boolean

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    """
    onBehalfOfContentOwnerChannel: String

    """
    The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    """
    pageToken: String
  ): LiveStreamListResponse

  """
  Retrieves a list of members that match the request criteria for a channel.
  """
  youtube_members_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies the member resource parts that the API response will include. Set the parameter value to snippet.
    """
    part: [String]!

    """
    Comma separated list of channel IDs. Only data about members that are part of this list will be included in the response.
    """
    filterByMemberChannelId: String

    """
    Filter members in the results set to the ones that have access to a level.
    """
    hasAccessToLevel: String

    """
    The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    """
    maxResults: NonNegativeInt
    mode: queryInput_youtube_members_list_mode

    """
    The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    """
    pageToken: String
  ): MemberListResponse

  """
  Retrieves a list of all pricing levels offered by a creator to the fans.
  """
  youtube_membershipsLevels_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies the membershipsLevel resource parts that the API response will include. Supported values are id and snippet.
    """
    part: [String]!
  ): MembershipsLevelListResponse

  """Retrieves a list of resources, possibly filtered."""
  youtube_playlistItems_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies a comma-separated list of one or more playlistItem resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a playlistItem resource, the snippet property contains numerous fields, including the title, description, position, and resourceId properties. As such, if you set *part=snippet*, the API response will contain all of those properties.
    """
    part: [String]!
    id: [String]

    """
    The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    """
    maxResults: NonNegativeInt

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    """
    pageToken: String

    """Return the playlist items within the given playlist."""
    playlistId: String

    """Return the playlist items associated with the given video ID."""
    videoId: String
  ): PlaylistItemListResponse

  """Retrieves a list of resources, possibly filtered."""
  youtube_playlists_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies a comma-separated list of one or more playlist resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a playlist resource, the snippet property contains properties like author, title, description, tags, and timeCreated. As such, if you set *part=snippet*, the API response will contain all of those properties.
    """
    part: [String]!

    """Return the playlists owned by the specified channel ID."""
    channelId: String

    """Return content in specified language"""
    hl: String

    """Return the playlists with the given IDs for Stubby or Apiary."""
    id: [String]

    """
    The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    """
    maxResults: NonNegativeInt

    """Return the playlists owned by the authenticated user."""
    mine: Boolean

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    """
    onBehalfOfContentOwnerChannel: String

    """
    The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    """
    pageToken: String
  ): PlaylistListResponse

  """Retrieves a list of search resources"""
  youtube_search_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies a comma-separated list of one or more search resource properties that the API response will include. Set the parameter value to snippet.
    """
    part: [String]!

    """Filter on resources belonging to this channelId."""
    channelId: String
    channelType: queryInput_youtube_search_list_channelType
    eventType: queryInput_youtube_search_list_eventType

    """Search owned by a content owner."""
    forContentOwner: Boolean

    """
    Restrict the search to only retrieve videos uploaded using the project id of the authenticated user.
    """
    forDeveloper: Boolean

    """Search for the private videos of the authenticated user."""
    forMine: Boolean

    """Filter on location of the video"""
    location: String

    """Filter on distance from the location (specified above)."""
    locationRadius: String

    """
    The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    """
    maxResults: NonNegativeInt

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String
    order: queryInput_youtube_search_list_order

    """
    The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    """
    pageToken: String

    """Filter on resources published after this date."""
    publishedAfter: String

    """Filter on resources published before this date."""
    publishedBefore: String

    """Textual search terms to match."""
    q: String

    """Display the content as seen by viewers in this country."""
    regionCode: String

    """Search related to a resource."""
    relatedToVideoId: String

    """Return results relevant to this language."""
    relevanceLanguage: String
    safeSearch: queryInput_youtube_search_list_safeSearch

    """Restrict results to a particular topic."""
    topicId: String

    """
    Restrict results to a particular set of resource types from One Platform.
    """
    type: [String]
    videoCaption: queryInput_youtube_search_list_videoCaption

    """Filter on videos in a specific category."""
    videoCategoryId: String
    videoDefinition: queryInput_youtube_search_list_videoDefinition
    videoDimension: queryInput_youtube_search_list_videoDimension
    videoDuration: queryInput_youtube_search_list_videoDuration
    videoEmbeddable: queryInput_youtube_search_list_videoEmbeddable
    videoLicense: queryInput_youtube_search_list_videoLicense
    videoSyndicated: queryInput_youtube_search_list_videoSyndicated
    videoType: queryInput_youtube_search_list_videoType
  ): SearchListResponse

  """Retrieves a list of resources, possibly filtered."""
  youtube_subscriptions_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies a comma-separated list of one or more subscription resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a subscription resource, the snippet property contains other properties, such as a display title for the subscription. If you set *part=snippet*, the API response will also contain all of those nested properties.
    """
    part: [String]!

    """Return the subscriptions of the given channel owner."""
    channelId: String

    """
    Return the subscriptions to the subset of these channels that the authenticated user is subscribed to.
    """
    forChannelId: String

    """Return the subscriptions with the given IDs for Stubby or Apiary."""
    id: [String]

    """
    The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    """
    maxResults: NonNegativeInt

    """Flag for returning the subscriptions of the authenticated user."""
    mine: Boolean
    myRecentSubscribers: Boolean

    """Return the subscribers of the given channel owner."""
    mySubscribers: Boolean

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    """
    onBehalfOfContentOwnerChannel: String
    order: queryInput_youtube_subscriptions_list_order

    """
    The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    """
    pageToken: String
  ): SubscriptionListResponse

  """Retrieves a list of resources, possibly filtered."""
  youtube_superChatEvents_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies the superChatEvent resource parts that the API response will include. This parameter is currently not supported.
    """
    part: [String]!

    """Return rendered funding amounts in specified language."""
    hl: String

    """
    The *maxResults* parameter specifies the maximum number of items that should be returned in the result set.
    """
    maxResults: PositiveInt

    """
    The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.
    """
    pageToken: String
  ): SuperChatEventListResponse

  """Retrieves a list of resources, possibly filtered."""
  youtube_thirdPartyLinks_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies the thirdPartyLink resource parts that the API response will include. Supported values are linkingToken, status, and snippet.
    """
    part: [String]!

    """Channel ID to which changes should be applied, for delegation."""
    externalChannelId: String

    """Get a third party link with the given linking token."""
    linkingToken: String
    type: queryInput_youtube_thirdPartyLinks_list_type
  ): ThirdPartyLinkListResponse

  """Retrieves a list of resources, possibly filtered."""
  youtube_videoAbuseReportReasons_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies the videoCategory resource parts that the API response will include. Supported values are id and snippet.
    """
    part: [String]!
    hl: String
  ): VideoAbuseReportReasonListResponse

  """Retrieves a list of resources, possibly filtered."""
  youtube_videoCategories_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies the videoCategory resource properties that the API response will include. Set the parameter value to snippet.
    """
    part: [String]!
    hl: String

    """Returns the video categories with the given IDs for Stubby or Apiary."""
    id: [String]
    regionCode: String
  ): VideoCategoryListResponse

  """Retrieves a list of resources, possibly filtered."""
  youtube_videos_list(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies a comma-separated list of one or more video resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a video resource, the snippet property contains the channelId, title, description, tags, and categoryId properties. As such, if you set *part=snippet*, the API response will contain all of those properties.
    """
    part: [String]!
    chart: queryInput_youtube_videos_list_chart

    """
    Stands for "host language". Specifies the localization language of the metadata to be filled into snippet.localized. The field is filled with the default metadata if there is no localization in the specified language. The parameter value must be a language code included in the list returned by the i18nLanguages.list method (e.g. en_US, es_MX).
    """
    hl: String

    """Return videos with the given ids."""
    id: [String]
    locale: String
    maxHeight: PositiveInt

    """
    The *maxResults* parameter specifies the maximum number of items that should be returned in the result set. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter.
    """
    maxResults: PositiveInt

    """Return the player with maximum height specified in"""
    maxWidth: PositiveInt
    myRating: queryInput_youtube_videos_list_myRating

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter.
    """
    pageToken: String

    """Use a chart that is specific to the specified region"""
    regionCode: String

    """Use chart that is specific to the specified video category"""
    videoCategoryId: String
  ): VideoListResponse

  """
  Retrieves the ratings that the authorized user gave to a list of specified videos.
  """
  youtube_videos_getRating(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String
    id: [String]!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String
  ): VideoGetRatingResponse
}

type ActivityListResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String
  items: [Activity]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#activityListResponse".
  """
  kind: String

  """
  The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
  """
  nextPageToken: String
  pageInfo: PageInfo

  """
  The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
  """
  prevPageToken: String

  """Stub token pagination template to suppress results."""
  tokenPagination: JSON

  """The visitorId identifies the visitor."""
  visitorId: String
}

"""
An *activity* resource contains information about an action that a particular channel, or user, has taken on YouTube.The actions reported in activity feeds include rating a video, sharing a video, marking a video as a favorite, commenting on a video, uploading a video, and so forth. Each activity resource identifies the type of action, the channel associated with the action, and the resource(s) associated with the action, such as the video that was rated or uploaded.
"""
type Activity {
  contentDetails: ActivityContentDetails

  """Etag of this resource"""
  etag: String

  """The ID that YouTube uses to uniquely identify the activity."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#activity".
  """
  kind: String
  snippet: ActivitySnippet
}

"""
Details about the content of an activity: the video that was shared, the channel that was subscribed to, etc.
"""
type ActivityContentDetails {
  bulletin: ActivityContentDetailsBulletin
  channelItem: ActivityContentDetailsChannelItem
  comment: ActivityContentDetailsComment
  favorite: ActivityContentDetailsFavorite
  like: ActivityContentDetailsLike
  playlistItem: ActivityContentDetailsPlaylistItem
  promotedItem: ActivityContentDetailsPromotedItem
  recommendation: ActivityContentDetailsRecommendation
  social: ActivityContentDetailsSocial
  subscription: ActivityContentDetailsSubscription
  upload: ActivityContentDetailsUpload
}

"""Details about a channel bulletin post."""
type ActivityContentDetailsBulletin {
  resourceId: ResourceId
}

"""
A resource id is a generic reference that points to another YouTube resource.
"""
type ResourceId {
  """
  The ID that YouTube uses to uniquely identify the referred resource, if that resource is a channel. This property is only present if the resourceId.kind value is youtube#channel.
  """
  channelId: String

  """The type of the API resource."""
  kind: String

  """
  The ID that YouTube uses to uniquely identify the referred resource, if that resource is a playlist. This property is only present if the resourceId.kind value is youtube#playlist.
  """
  playlistId: String

  """
  The ID that YouTube uses to uniquely identify the referred resource, if that resource is a video. This property is only present if the resourceId.kind value is youtube#video.
  """
  videoId: String
}

"""Details about a resource which was added to a channel."""
type ActivityContentDetailsChannelItem {
  resourceId: ResourceId
}

"""Information about a resource that received a comment."""
type ActivityContentDetailsComment {
  resourceId: ResourceId
}

"""Information about a video that was marked as a favorite video."""
type ActivityContentDetailsFavorite {
  resourceId: ResourceId
}

"""Information about a resource that received a positive (like) rating."""
type ActivityContentDetailsLike {
  resourceId: ResourceId
}

"""Information about a new playlist item."""
type ActivityContentDetailsPlaylistItem {
  """The value that YouTube uses to uniquely identify the playlist."""
  playlistId: String

  """ID of the item within the playlist."""
  playlistItemId: String
  resourceId: ResourceId
}

"""Details about a resource which is being promoted."""
type ActivityContentDetailsPromotedItem {
  """The URL the client should fetch to request a promoted item."""
  adTag: String

  """
  The URL the client should ping to indicate that the user clicked through on this promoted item.
  """
  clickTrackingUrl: String

  """
  The URL the client should ping to indicate that the user was shown this promoted item.
  """
  creativeViewUrl: String
  ctaType: query_youtube_activities_list_items_items_contentDetails_promotedItem_ctaType

  """
  The custom call-to-action button text. If specified, it will override the default button text for the cta_type.
  """
  customCtaButtonText: String

  """The text description to accompany the promoted item."""
  descriptionText: String

  """
  The URL the client should direct the user to, if the user chooses to visit the advertiser's website.
  """
  destinationUrl: String

  """
  The list of forecasting URLs. The client should ping all of these URLs when a promoted item is not available, to indicate that a promoted item could have been shown.
  """
  forecastingUrl: [String]

  """
  The list of impression URLs. The client should ping all of these URLs to indicate that the user was shown this promoted item.
  """
  impressionUrl: [String]

  """The ID that YouTube uses to uniquely identify the promoted video."""
  videoId: String
}

"""
The type of call-to-action, a message to the user indicating action that can be taken.
"""
enum query_youtube_activities_list_items_items_contentDetails_promotedItem_ctaType {
  ctaTypeUnspecified
  visitAdvertiserSite
}

"""Information that identifies the recommended resource."""
type ActivityContentDetailsRecommendation {
  reason: query_youtube_activities_list_items_items_contentDetails_recommendation_reason
  resourceId: ResourceId
  seedResourceId: ResourceId
}

"""The reason that the resource is recommended to the user."""
enum query_youtube_activities_list_items_items_contentDetails_recommendation_reason {
  reasonUnspecified
  videoFavorited
  videoLiked
  videoWatched
}

"""Details about a social network post."""
type ActivityContentDetailsSocial {
  """The author of the social network post."""
  author: String

  """An image of the post's author."""
  imageUrl: String

  """The URL of the social network post."""
  referenceUrl: String
  resourceId: ResourceId
  type: query_youtube_activities_list_items_items_contentDetails_social_type
}

"""The name of the social network."""
enum query_youtube_activities_list_items_items_contentDetails_social_type {
  unspecified
  googlePlus
  facebook
  twitter
}

"""Information about a channel that a user subscribed to."""
type ActivityContentDetailsSubscription {
  resourceId: ResourceId
}

"""Information about the uploaded video."""
type ActivityContentDetailsUpload {
  """The ID that YouTube uses to uniquely identify the uploaded video."""
  videoId: String
}

"""
Basic details about an activity, including title, description, thumbnails, activity type and group. Next ID: 12
"""
type ActivitySnippet {
  """
  The ID that YouTube uses to uniquely identify the channel associated with the activity.
  """
  channelId: String

  """Channel title for the channel responsible for this activity"""
  channelTitle: String

  """
  The description of the resource primarily associated with the activity. @mutable youtube.activities.insert
  """
  description: String

  """
  The group ID associated with the activity. A group ID identifies user events that are associated with the same user and resource. For example, if a user rates a video and marks the same video as a favorite, the entries for those events would have the same group ID in the user's activity feed. In your user interface, you can avoid repetition by grouping events with the same groupId value.
  """
  groupId: String

  """The date and time that the video was uploaded."""
  publishedAt: DateTime
  thumbnails: ThumbnailDetails

  """The title of the resource primarily associated with the activity."""
  title: String
  type: query_youtube_activities_list_items_items_snippet_type
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""Internal representation of thumbnails for a YouTube resource."""
type ThumbnailDetails {
  high: Thumbnail
  maxres: Thumbnail
  medium: Thumbnail
  standard: Thumbnail
}

"""A thumbnail is an image representing a YouTube resource."""
type Thumbnail {
  """(Optional) Height of the thumbnail image."""
  height: Int

  """The thumbnail image's URL."""
  url: String

  """(Optional) Width of the thumbnail image."""
  width: Int
}

"""The type of activity that the resource describes."""
enum query_youtube_activities_list_items_items_snippet_type {
  typeUnspecified
  upload
  like
  favorite
  comment
  subscription
  playlistItem
  recommendation
  bulletin
  social
  channelItem
  promotedItem
}

"""
Paging details for lists of resources, including total number of items available and number of resources returned in a single page.
"""
type PageInfo {
  """The number of results included in the API response."""
  resultsPerPage: Int

  """The total number of results in the result set."""
  totalResults: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""V1 error format."""
enum _0xgafv_parameter {
  _1
  _2
}

"""Data format for response."""
enum alt_parameter {
  json
  media
  proto
}

"""Integers that will have a value of 0 or more."""
scalar NonNegativeInt

type CaptionListResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String

  """A list of captions that match the request criteria."""
  items: [Caption]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#captionListResponse".
  """
  kind: String

  """The visitorId identifies the visitor."""
  visitorId: String
}

"""
A *caption* resource represents a YouTube caption track. A caption track is associated with exactly one YouTube video.
"""
type Caption {
  """Etag of this resource."""
  etag: String

  """The ID that YouTube uses to uniquely identify the caption track."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#caption".
  """
  kind: String
  snippet: CaptionSnippet
}

"""Basic details about a caption track, such as its language and name."""
type CaptionSnippet {
  audioTrackType: mutation_youtube_captions_insert_snippet_audioTrackType
  failureReason: mutation_youtube_captions_insert_snippet_failureReason

  """
  Indicates whether YouTube synchronized the caption track to the audio track in the video. The value will be true if a sync was explicitly requested when the caption track was uploaded. For example, when calling the captions.insert or captions.update methods, you can set the sync parameter to true to instruct YouTube to sync the uploaded track to the video. If the value is false, YouTube uses the time codes in the uploaded caption track to determine when to display captions.
  """
  isAutoSynced: Boolean

  """
  Indicates whether the track contains closed captions for the deaf and hard of hearing. The default value is false.
  """
  isCC: Boolean

  """
  Indicates whether the caption track is a draft. If the value is true, then the track is not publicly visible. The default value is false. @mutable youtube.captions.insert youtube.captions.update
  """
  isDraft: Boolean

  """
  Indicates whether caption track is formatted for "easy reader," meaning it is at a third-grade level for language learners. The default value is false.
  """
  isEasyReader: Boolean

  """
  Indicates whether the caption track uses large text for the vision-impaired. The default value is false.
  """
  isLarge: Boolean

  """
  The language of the caption track. The property value is a BCP-47 language tag.
  """
  language: String

  """The date and time when the caption track was last updated."""
  lastUpdated: DateTime

  """
  The name of the caption track. The name is intended to be visible to the user as an option during playback.
  """
  name: String
  status: mutation_youtube_captions_insert_snippet_status
  trackKind: mutation_youtube_captions_insert_snippet_trackKind

  """
  The ID that YouTube uses to uniquely identify the video associated with the caption track. @mutable youtube.captions.insert
  """
  videoId: String
}

"""The type of audio track associated with the caption track."""
enum mutation_youtube_captions_insert_snippet_audioTrackType {
  unknown
  primary
  commentary
  descriptive
}

"""
The reason that YouTube failed to process the caption track. This property is only present if the state property's value is failed.
"""
enum mutation_youtube_captions_insert_snippet_failureReason {
  unknownFormat
  unsupportedFormat
  processingFailed
}

"""The caption track's status."""
enum mutation_youtube_captions_insert_snippet_status {
  serving
  syncing
  failed
}

"""The caption track's type."""
enum mutation_youtube_captions_insert_snippet_trackKind {
  standard
  ASR
  forced
}

type ChannelSectionListResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String

  """A list of ChannelSections that match the request criteria."""
  items: [ChannelSection]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#channelSectionListResponse".
  """
  kind: String

  """The visitorId identifies the visitor."""
  visitorId: String
}

type ChannelSection {
  contentDetails: ChannelSectionContentDetails

  """Etag of this resource."""
  etag: String

  """The ID that YouTube uses to uniquely identify the channel section."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#channelSection".
  """
  kind: String
  localizations: mutation_youtube_channelSections_insert_localizations
  snippet: ChannelSectionSnippet
  targeting: ChannelSectionTargeting
}

"""Details about a channelsection, including playlists and channels."""
type ChannelSectionContentDetails {
  """The channel ids for type multiple_channels."""
  channels: [String]

  """
  The playlist ids for type single_playlist and multiple_playlists. For singlePlaylist, only one playlistId is allowed.
  """
  playlists: [String]
}

"""Localizations for different languages"""
type mutation_youtube_channelSections_insert_localizations {
  additionalProperties: [ChannelSectionLocalization_entry]
}

type ChannelSectionLocalization_entry {
  key: ID!
  value: ChannelSectionLocalization
}

"""ChannelSection localization setting"""
type ChannelSectionLocalization {
  """The localized strings for channel section's title."""
  title: String
}

"""
Basic details about a channel section, including title, style and position.
"""
type ChannelSectionSnippet {
  """
  The ID that YouTube uses to uniquely identify the channel that published the channel section.
  """
  channelId: String

  """The language of the channel section's default title and description."""
  defaultLanguage: String
  localized: ChannelSectionLocalization2

  """The position of the channel section in the channel."""
  position: Int
  style: mutation_youtube_channelSections_insert_snippet_style

  """
  The channel section's title for multiple_playlists and multiple_channels.
  """
  title: String
  type: mutation_youtube_channelSections_insert_snippet_type
}

"""ChannelSection localization setting"""
type ChannelSectionLocalization2 {
  """The localized strings for channel section's title."""
  title: String
}

"""The style of the channel section."""
enum mutation_youtube_channelSections_insert_snippet_style {
  channelsectionStyleUnspecified
  horizontalRow
  verticalList
}

"""The type of the channel section."""
enum mutation_youtube_channelSections_insert_snippet_type {
  channelsectionTypeUndefined
  singlePlaylist
  multiplePlaylists
  popularUploads
  recentUploads
  likes
  allPlaylists
  likedPlaylists
  recentPosts
  recentActivity
  liveEvents
  upcomingEvents
  completedEvents
  multipleChannels
  postedVideos
  postedPlaylists
  subscriptions
}

"""ChannelSection targeting setting."""
type ChannelSectionTargeting {
  """The country the channel section is targeting."""
  countries: [String]

  """The language the channel section is targeting."""
  languages: [String]

  """The region the channel section is targeting."""
  regions: [String]
}

type ChannelListResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String
  items: [Channel]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#channelListResponse".
  """
  kind: String

  """
  The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
  """
  nextPageToken: String
  pageInfo: PageInfo

  """
  The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
  """
  prevPageToken: String

  """Stub token pagination template to suppress results."""
  tokenPagination: JSON

  """The visitorId identifies the visitor."""
  visitorId: String
}

"""A *channel* resource contains information about a YouTube channel."""
type Channel {
  auditDetails: ChannelAuditDetails
  brandingSettings: ChannelBrandingSettings
  contentDetails: ChannelContentDetails
  contentOwnerDetails: ChannelContentOwnerDetails
  conversionPings: ChannelConversionPings

  """Etag of this resource."""
  etag: String

  """The ID that YouTube uses to uniquely identify the channel."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#channel".
  """
  kind: String
  localizations: mutation_youtube_channels_update_localizations
  snippet: ChannelSnippet
  statistics: ChannelStatistics
  status: ChannelStatus
  topicDetails: ChannelTopicDetails
}

"""
The auditDetails object encapsulates channel data that is relevant for YouTube Partners during the audit process.
"""
type ChannelAuditDetails {
  """Whether or not the channel respects the community guidelines."""
  communityGuidelinesGoodStanding: Boolean

  """Whether or not the channel has any unresolved claims."""
  contentIdClaimsGoodStanding: Boolean

  """Whether or not the channel has any copyright strikes."""
  copyrightStrikesGoodStanding: Boolean
}

"""Branding properties of a YouTube channel."""
type ChannelBrandingSettings {
  channel: ChannelSettings

  """Additional experimental branding properties."""
  hints: [PropertyValue]
  image: ImageSettings
  watch: WatchSettings
}

"""Branding properties for the channel view."""
type ChannelSettings {
  """The country of the channel."""
  country: String
  defaultLanguage: String

  """Which content tab users should see when viewing the channel."""
  defaultTab: String

  """Specifies the channel description."""
  description: String

  """Title for the featured channels tab."""
  featuredChannelsTitle: String

  """The list of featured channels."""
  featuredChannelsUrls: [String]

  """Lists keywords associated with the channel, comma-separated."""
  keywords: String

  """
  Whether user-submitted comments left on the channel page need to be approved by the channel owner to be publicly visible.
  """
  moderateComments: Boolean

  """A prominent color that can be rendered on this channel page."""
  profileColor: String

  """Whether the tab to browse the videos should be displayed."""
  showBrowseView: Boolean

  """Whether related channels should be proposed."""
  showRelatedChannels: Boolean

  """Specifies the channel title."""
  title: String

  """
  The ID for a Google Analytics account to track and measure traffic to the channels.
  """
  trackingAnalyticsAccountId: String

  """The trailer of the channel, for users that are not subscribers."""
  unsubscribedTrailer: String
}

"""A pair Property / Value."""
type PropertyValue {
  """A property."""
  property: String

  """The property's value."""
  value: String
}

"""Branding properties for images associated with the channel."""
type ImageSettings {
  backgroundImageUrl: LocalizedProperty

  """
  This is generated when a ChannelBanner.Insert request has succeeded for the given channel.
  """
  bannerExternalUrl: String

  """Banner image. Desktop size (1060x175)."""
  bannerImageUrl: String

  """Banner image. Mobile size high resolution (1440x395)."""
  bannerMobileExtraHdImageUrl: String

  """Banner image. Mobile size high resolution (1280x360)."""
  bannerMobileHdImageUrl: String

  """Banner image. Mobile size (640x175)."""
  bannerMobileImageUrl: String

  """Banner image. Mobile size low resolution (320x88)."""
  bannerMobileLowImageUrl: String

  """Banner image. Mobile size medium/high resolution (960x263)."""
  bannerMobileMediumHdImageUrl: String

  """Banner image. Tablet size extra high resolution (2560x424)."""
  bannerTabletExtraHdImageUrl: String

  """Banner image. Tablet size high resolution (2276x377)."""
  bannerTabletHdImageUrl: String

  """Banner image. Tablet size (1707x283)."""
  bannerTabletImageUrl: String

  """Banner image. Tablet size low resolution (1138x188)."""
  bannerTabletLowImageUrl: String

  """Banner image. TV size high resolution (1920x1080)."""
  bannerTvHighImageUrl: String

  """Banner image. TV size extra high resolution (2120x1192)."""
  bannerTvImageUrl: String

  """Banner image. TV size low resolution (854x480)."""
  bannerTvLowImageUrl: String

  """Banner image. TV size medium resolution (1280x720)."""
  bannerTvMediumImageUrl: String
  largeBrandedBannerImageImapScript: LocalizedProperty
  largeBrandedBannerImageUrl: LocalizedProperty
  smallBrandedBannerImageImapScript: LocalizedProperty
  smallBrandedBannerImageUrl: LocalizedProperty

  """
  The URL for a 1px by 1px tracking pixel that can be used to collect statistics for views of the channel or video pages.
  """
  trackingImageUrl: String
  watchIconImageUrl: String
}

type LocalizedProperty {
  defaultLanguage: LanguageTag
  localized: [LocalizedString]
}

type LanguageTag {
  value: String
}

type LocalizedString {
  language: String
  value: String
}

"""Branding properties for the watch. All deprecated."""
type WatchSettings {
  """The text color for the video watch page's branded area."""
  backgroundColor: String

  """
  An ID that uniquely identifies a playlist that displays next to the video player.
  """
  featuredPlaylistId: String

  """The background color for the video watch page's branded area."""
  textColor: String
}

"""Details about the content of a channel."""
type ChannelContentDetails {
  relatedPlaylists: mutation_youtube_channels_update_contentDetails_relatedPlaylists
}

type mutation_youtube_channels_update_contentDetails_relatedPlaylists {
  """
  The ID of the playlist that contains the channel"s favorite videos. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
  """
  favorites: String

  """
  The ID of the playlist that contains the channel"s liked videos. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
  """
  likes: String

  """
  The ID of the playlist that contains the channel"s uploaded videos. Use the videos.insert method to upload new videos and the videos.delete method to delete previously uploaded videos.
  """
  uploads: String

  """
  The ID of the playlist that contains the channel"s watch history. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
  """
  watchHistory: String

  """
  The ID of the playlist that contains the channel"s watch later playlist. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
  """
  watchLater: String
}

"""
The contentOwnerDetails object encapsulates channel data that is relevant for YouTube Partners linked with the channel.
"""
type ChannelContentOwnerDetails {
  """The ID of the content owner linked to the channel."""
  contentOwner: String

  """The date and time when the channel was linked to the content owner."""
  timeLinked: DateTime
}

"""
The conversionPings object encapsulates information about conversion pings that need to be respected by the channel.
"""
type ChannelConversionPings {
  """
  Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping.
  """
  pings: [ChannelConversionPing]
}

"""
Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping.
"""
type ChannelConversionPing {
  context: mutation_youtube_channels_update_conversionPings_pings_items_context

  """
  The url (without the schema) that the player shall send the ping to. It's at caller's descretion to decide which schema to use (http vs https) Example of a returned url: //googleads.g.doubleclick.net/pagead/ viewthroughconversion/962985656/?data=path%3DtHe_path%3Btype%3D cview%3Butuid%3DGISQtTNGYqaYl4sKxoVvKA&labe=default The caller must append biscotti authentication (ms param in case of mobile, for example) to this ping.
  """
  conversionUrl: String
}

"""Defines the context of the ping."""
enum mutation_youtube_channels_update_conversionPings_pings_items_context {
  subscribe
  unsubscribe
  cview
}

"""Localizations for different languages"""
type mutation_youtube_channels_update_localizations {
  additionalProperties: [ChannelLocalization_entry]
}

type ChannelLocalization_entry {
  key: ID!
  value: ChannelLocalization
}

"""Channel localization setting"""
type ChannelLocalization {
  """The localized strings for channel's description."""
  description: String

  """The localized strings for channel's title."""
  title: String
}

"""
Basic details about a channel, including title, description and thumbnails.
"""
type ChannelSnippet {
  """The country of the channel."""
  country: String

  """The custom url of the channel."""
  customUrl: String

  """The language of the channel's default title and description."""
  defaultLanguage: String

  """The description of the channel."""
  description: String
  localized: ChannelLocalization2

  """The date and time that the channel was created."""
  publishedAt: DateTime
  thumbnails: ThumbnailDetails

  """The channel's title."""
  title: String
}

"""Channel localization setting"""
type ChannelLocalization2 {
  """The localized strings for channel's description."""
  description: String

  """The localized strings for channel's title."""
  title: String
}

"""
Statistics about a channel: number of subscribers, number of videos in the channel, etc.
"""
type ChannelStatistics {
  """The number of comments for the channel."""
  commentCount: String

  """Whether or not the number of subscribers is shown for this user."""
  hiddenSubscriberCount: Boolean

  """The number of subscribers that the channel has."""
  subscriberCount: String

  """The number of videos uploaded to the channel."""
  videoCount: String

  """The number of times the channel has been viewed."""
  viewCount: String
}

"""JSON template for the status part of a channel."""
type ChannelStatus {
  """
  If true, then the user is linked to either a YouTube username or G+ account. Otherwise, the user doesn't have a public YouTube identity.
  """
  isLinked: Boolean
  longUploadsStatus: mutation_youtube_channels_update_status_longUploadsStatus
  madeForKids: Boolean
  privacyStatus: mutation_youtube_channels_update_status_privacyStatus
  selfDeclaredMadeForKids: Boolean
}

"""
The long uploads status of this channel. See https://support.google.com/youtube/answer/71673 for more information.
"""
enum mutation_youtube_channels_update_status_longUploadsStatus {
  longUploadsUnspecified
  allowed
  eligible
  disallowed
}

"""Privacy status of the channel."""
enum mutation_youtube_channels_update_status_privacyStatus {
  public
  unlisted
  private
}

"""Freebase topic information related to the channel."""
type ChannelTopicDetails {
  """A list of Wikipedia URLs that describe the channel's content."""
  topicCategories: [String]

  """
  A list of Freebase topic IDs associated with the channel. You can retrieve information about each topic using the Freebase Topic API.
  """
  topicIds: [String]
}

type CommentThreadListResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String

  """A list of comment threads that match the request criteria."""
  items: [CommentThread]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#commentThreadListResponse".
  """
  kind: String

  """
  The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
  """
  nextPageToken: String
  pageInfo: PageInfo

  """Stub token pagination template to suppress results."""
  tokenPagination: JSON

  """The visitorId identifies the visitor."""
  visitorId: String
}

"""
A *comment thread* represents information that applies to a top level comment and all its replies. It can also include the top level comment itself and some of the replies.
"""
type CommentThread {
  """Etag of this resource."""
  etag: String

  """The ID that YouTube uses to uniquely identify the comment thread."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#commentThread".
  """
  kind: String
  replies: CommentThreadReplies
  snippet: CommentThreadSnippet
}

"""
Comments written in (direct or indirect) reply to the top level comment.
"""
type CommentThreadReplies {
  """
  A limited number of replies. Unless the number of replies returned equals total_reply_count in the snippet the returned replies are only a subset of the total number of replies.
  """
  comments: [Comment]
}

"""A *comment* represents a single YouTube comment."""
type Comment {
  """Etag of this resource."""
  etag: String

  """The ID that YouTube uses to uniquely identify the comment."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#comment".
  """
  kind: String
  snippet: CommentSnippet
}

"""Basic details about a comment, such as its author and text."""
type CommentSnippet {
  authorChannelId: CommentSnippetAuthorChannelId

  """Link to the author's YouTube channel, if any."""
  authorChannelUrl: String

  """The name of the user who posted the comment."""
  authorDisplayName: String

  """The URL for the avatar of the user who posted the comment."""
  authorProfileImageUrl: String

  """Whether the current viewer can rate this comment."""
  canRate: Boolean

  """
  The id of the corresponding YouTube channel. In case of a channel comment this is the channel the comment refers to. In case of a video comment it's the video's channel.
  """
  channelId: String

  """The total number of likes this comment has received."""
  likeCount: Int
  moderationStatus: mutation_youtube_commentThreads_insert_replies_comments_items_snippet_moderationStatus

  """The unique id of the parent comment, only set for replies."""
  parentId: String

  """The date and time when the comment was originally published."""
  publishedAt: DateTime

  """
  The comment's text. The format is either plain text or HTML dependent on what has been requested. Even the plain text representation may differ from the text originally posted in that it may replace video links with video titles etc.
  """
  textDisplay: String

  """
  The comment's original raw text as initially posted or last updated. The original text will only be returned if it is accessible to the viewer, which is only guaranteed if the viewer is the comment's author.
  """
  textOriginal: String

  """The date and time when the comment was last updated."""
  updatedAt: DateTime

  """The ID of the video the comment refers to, if any."""
  videoId: String
  viewerRating: mutation_youtube_commentThreads_insert_replies_comments_items_snippet_viewerRating
}

"""The id of the author's YouTube channel, if any."""
type CommentSnippetAuthorChannelId {
  value: String
}

"""
The comment's moderation status. Will not be set if the comments were requested through the id filter.
"""
enum mutation_youtube_commentThreads_insert_replies_comments_items_snippet_moderationStatus {
  published
  heldForReview
  likelySpam
  rejected
}

"""
The rating the viewer has given to this comment. For the time being this will never return RATE_TYPE_DISLIKE and instead return RATE_TYPE_NONE. This may change in the future.
"""
enum mutation_youtube_commentThreads_insert_replies_comments_items_snippet_viewerRating {
  none
  like
  dislike
}

"""Basic details about a comment thread."""
type CommentThreadSnippet {
  """
  Whether the current viewer of the thread can reply to it. This is viewer specific - other viewers may see a different value for this field.
  """
  canReply: Boolean

  """
  The YouTube channel the comments in the thread refer to or the channel with the video the comments refer to. If video_id isn't set the comments refer to the channel itself.
  """
  channelId: String

  """
  Whether the thread (and therefore all its comments) is visible to all YouTube users.
  """
  isPublic: Boolean
  topLevelComment: Comment

  """The total number of replies (not including the top level comment)."""
  totalReplyCount: Int

  """
  The ID of the video the comments refer to, if any. No video_id implies a channel discussion comment.
  """
  videoId: String
}

"""Integers that will have a value greater than 0."""
scalar PositiveInt

"""
Limits the returned comment threads to those with the specified moderation status. Not compatible with the 'id' filter. Valid values: published, heldForReview, likelySpam.
"""
enum queryInput_youtube_commentThreads_list_moderationStatus {
  published
  heldForReview
  likelySpam
  rejected
}

enum queryInput_youtube_commentThreads_list_order {
  orderUnspecified
  time
  relevance
}

"""The requested text format for the returned comments."""
enum queryInput_youtube_commentThreads_list_textFormat {
  textFormatUnspecified
  html
  plainText
}

type CommentListResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String

  """A list of comments that match the request criteria."""
  items: [Comment]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#commentListResponse".
  """
  kind: String

  """
  The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
  """
  nextPageToken: String
  pageInfo: PageInfo

  """Stub token pagination template to suppress results."""
  tokenPagination: JSON

  """The visitorId identifies the visitor."""
  visitorId: String
}

"""The requested text format for the returned comments."""
enum queryInput_youtube_comments_list_textFormat {
  textFormatUnspecified
  html
  plainText
}

type I18nLanguageListResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String

  """
  A list of supported i18n languages. In this map, the i18n language ID is the map key, and its value is the corresponding i18nLanguage resource.
  """
  items: [I18nLanguage]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#i18nLanguageListResponse".
  """
  kind: String

  """The visitorId identifies the visitor."""
  visitorId: String
}

"""
An *i18nLanguage* resource identifies a UI language currently supported by YouTube.
"""
type I18nLanguage {
  """Etag of this resource."""
  etag: String

  """The ID that YouTube uses to uniquely identify the i18n language."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#i18nLanguage".
  """
  kind: String
  snippet: I18nLanguageSnippet
}

"""
Basic details about an i18n language, such as language code and human-readable name.
"""
type I18nLanguageSnippet {
  """A short BCP-47 code that uniquely identifies a language."""
  hl: String

  """The human-readable name of the language in the language itself."""
  name: String
}

type I18nRegionListResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String

  """
  A list of regions where YouTube is available. In this map, the i18n region ID is the map key, and its value is the corresponding i18nRegion resource.
  """
  items: [I18nRegion]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#i18nRegionListResponse".
  """
  kind: String

  """The visitorId identifies the visitor."""
  visitorId: String
}

"""
A *i18nRegion* resource identifies a region where YouTube is available.
"""
type I18nRegion {
  """Etag of this resource."""
  etag: String

  """The ID that YouTube uses to uniquely identify the i18n region."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#i18nRegion".
  """
  kind: String
  snippet: I18nRegionSnippet
}

"""
Basic details about an i18n region, such as region code and human-readable name.
"""
type I18nRegionSnippet {
  """The region code as a 2-letter ISO country code."""
  gl: String

  """The human-readable name of the region."""
  name: String
}

type LiveBroadcastListResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String

  """A list of broadcasts that match the request criteria."""
  items: [LiveBroadcast]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#liveBroadcastListResponse".
  """
  kind: String

  """
  The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
  """
  nextPageToken: String
  pageInfo: PageInfo

  """
  The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
  """
  prevPageToken: String

  """Stub token pagination template to suppress results."""
  tokenPagination: JSON

  """The visitorId identifies the visitor."""
  visitorId: String
}

"""
A *liveBroadcast* resource represents an event that will be streamed, via live video, on YouTube.
"""
type LiveBroadcast {
  contentDetails: LiveBroadcastContentDetails

  """Etag of this resource."""
  etag: String

  """The ID that YouTube assigns to uniquely identify the broadcast."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#liveBroadcast".
  """
  kind: String
  snippet: LiveBroadcastSnippet
  statistics: LiveBroadcastStatistics
  status: LiveBroadcastStatus
}

"""Detailed settings of a broadcast."""
type LiveBroadcastContentDetails {
  """This value uniquely identifies the live stream bound to the broadcast."""
  boundStreamId: String

  """
  The date and time that the live stream referenced by boundStreamId was last updated.
  """
  boundStreamLastUpdateTimeMs: DateTime
  closedCaptionsType: mutation_youtube_liveBroadcasts_insert_contentDetails_closedCaptionsType

  """
  This setting indicates whether auto start is enabled for this broadcast. The default value for this property is false. This setting can only be used by Events.
  """
  enableAutoStart: Boolean

  """
  This setting indicates whether auto stop is enabled for this broadcast. The default value for this property is false. This setting can only be used by Events.
  """
  enableAutoStop: Boolean

  """
  This setting indicates whether HTTP POST closed captioning is enabled for this broadcast. The ingestion URL of the closed captions is returned through the liveStreams API. This is mutually exclusive with using the closed_captions_type property, and is equivalent to setting closed_captions_type to CLOSED_CAPTIONS_HTTP_POST.
  """
  enableClosedCaptions: Boolean

  """
  This setting indicates whether YouTube should enable content encryption for the broadcast.
  """
  enableContentEncryption: Boolean

  """
  This setting determines whether viewers can access DVR controls while watching the video. DVR controls enable the viewer to control the video playback experience by pausing, rewinding, or fast forwarding content. The default value for this property is true. *Important:* You must set the value to true and also set the enableArchive property's value to true if you want to make playback available immediately after the broadcast ends.
  """
  enableDvr: Boolean

  """
  This setting indicates whether the broadcast video can be played in an embedded player. If you choose to archive the video (using the enableArchive property), this setting will also apply to the archived video.
  """
  enableEmbed: Boolean

  """Indicates whether this broadcast has low latency enabled."""
  enableLowLatency: Boolean
  latencyPreference: mutation_youtube_liveBroadcasts_insert_contentDetails_latencyPreference

  """
  The mesh for projecting the video if projection is mesh. The mesh value must be a UTF-8 string containing the base-64 encoding of 3D mesh data that follows the Spherical Video V2 RFC specification for an mshp box, excluding the box size and type but including the following four reserved zero bytes for the version and flags.
  """
  mesh: Byte
  monitorStream: MonitorStreamInfo
  projection: mutation_youtube_liveBroadcasts_insert_contentDetails_projection

  """
  Automatically start recording after the event goes live. The default value for this property is true. *Important:* You must also set the enableDvr property's value to true if you want the playback to be available immediately after the broadcast ends. If you set this property's value to true but do not also set the enableDvr property to true, there may be a delay of around one day before the archived video will be available for playback.
  """
  recordFromStart: Boolean

  """
  This setting indicates whether the broadcast should automatically begin with an in-stream slate when you update the broadcast's status to live. After updating the status, you then need to send a liveCuepoints.insert request that sets the cuepoint's eventState to end to remove the in-stream slate and make your broadcast stream visible to viewers.
  """
  startWithSlate: Boolean
  stereoLayout: mutation_youtube_liveBroadcasts_insert_contentDetails_stereoLayout
}

enum mutation_youtube_liveBroadcasts_insert_contentDetails_closedCaptionsType {
  closedCaptionsTypeUnspecified
  closedCaptionsDisabled
  closedCaptionsHttpPost
  closedCaptionsEmbedded
}

"""
If both this and enable_low_latency are set, they must match. LATENCY_NORMAL should match enable_low_latency=false LATENCY_LOW should match enable_low_latency=true LATENCY_ULTRA_LOW should have enable_low_latency omitted.
"""
enum mutation_youtube_liveBroadcasts_insert_contentDetails_latencyPreference {
  latencyPreferenceUnspecified
  normal
  low
  ultraLow
}

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Byte

"""Settings and Info of the monitor stream"""
type MonitorStreamInfo {
  """
  If you have set the enableMonitorStream property to true, then this property determines the length of the live broadcast delay.
  """
  broadcastStreamDelayMs: Int

  """HTML code that embeds a player that plays the monitor stream."""
  embedHtml: String

  """
  This value determines whether the monitor stream is enabled for the broadcast. If the monitor stream is enabled, then YouTube will broadcast the event content on a special stream intended only for the broadcaster's consumption. The broadcaster can use the stream to review the event content and also to identify the optimal times to insert cuepoints. You need to set this value to true if you intend to have a broadcast delay for your event. *Note:* This property cannot be updated once the broadcast is in the testing or live state.
  """
  enableMonitorStream: Boolean
}

"""The projection format of this broadcast. This defaults to rectangular."""
enum mutation_youtube_liveBroadcasts_insert_contentDetails_projection {
  projectionUnspecified
  rectangular
  _360
  mesh
}

"""The 3D stereo layout of this broadcast. This defaults to mono."""
enum mutation_youtube_liveBroadcasts_insert_contentDetails_stereoLayout {
  stereoLayoutUnspecified
  mono
  leftRight
  topBottom
}

"""Basic broadcast information."""
type LiveBroadcastSnippet {
  """
  The date and time that the broadcast actually ended. This information is only available once the broadcast's state is complete.
  """
  actualEndTime: DateTime

  """
  The date and time that the broadcast actually started. This information is only available once the broadcast's state is live.
  """
  actualStartTime: DateTime

  """
  The ID that YouTube uses to uniquely identify the channel that is publishing the broadcast.
  """
  channelId: String

  """
  The broadcast's description. As with the title, you can set this field by modifying the broadcast resource or by setting the description field of the corresponding video resource.
  """
  description: String

  """
  Indicates whether this broadcast is the default broadcast. Internal only.
  """
  isDefaultBroadcast: Boolean

  """The id of the live chat for this broadcast."""
  liveChatId: String

  """
  The date and time that the broadcast was added to YouTube's live broadcast schedule.
  """
  publishedAt: DateTime

  """The date and time that the broadcast is scheduled to end."""
  scheduledEndTime: DateTime

  """The date and time that the broadcast is scheduled to start."""
  scheduledStartTime: DateTime
  thumbnails: ThumbnailDetails

  """
  The broadcast's title. Note that the broadcast represents exactly one YouTube video. You can set this field by modifying the broadcast resource or by setting the title field of the corresponding video resource.
  """
  title: String
}

"""
Statistics about the live broadcast. These represent a snapshot of the values at the time of the request. Statistics are only returned for live broadcasts.
"""
type LiveBroadcastStatistics {
  """
  The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended.
  """
  concurrentViewers: String

  """
  The total number of live chat messages currently on the broadcast. The property and its value will be present if the broadcast is public, has the live chat feature enabled, and has at least one message. Note that this field will not be filled after the broadcast ends. So this property would not identify the number of chat messages for an archived video of a completed live broadcast.
  """
  totalChatCount: String
}

"""Live broadcast state."""
type LiveBroadcastStatus {
  lifeCycleStatus: mutation_youtube_liveBroadcasts_insert_status_lifeCycleStatus
  liveBroadcastPriority: mutation_youtube_liveBroadcasts_insert_status_liveBroadcastPriority

  """
  Whether the broadcast is made for kids or not, decided by YouTube instead of the creator. This field is read only.
  """
  madeForKids: Boolean
  privacyStatus: mutation_youtube_liveBroadcasts_insert_status_privacyStatus
  recordingStatus: mutation_youtube_liveBroadcasts_insert_status_recordingStatus

  """
  This field will be set to True if the creator declares the broadcast to be kids only: go/live-cw-work.
  """
  selfDeclaredMadeForKids: Boolean
}

"""
The broadcast's status. The status can be updated using the API's liveBroadcasts.transition method.
"""
enum mutation_youtube_liveBroadcasts_insert_status_lifeCycleStatus {
  lifeCycleStatusUnspecified
  created
  ready
  testing
  live
  complete
  revoked
  testStarting
  liveStarting
}

"""Priority of the live broadcast event (internal state)."""
enum mutation_youtube_liveBroadcasts_insert_status_liveBroadcastPriority {
  liveBroadcastPriorityUnspecified
  low
  normal
  high
}

"""
The broadcast's privacy status. Note that the broadcast represents exactly one YouTube video, so the privacy settings are identical to those supported for videos. In addition, you can set this field by modifying the broadcast resource or by setting the privacyStatus field of the corresponding video resource.
"""
enum mutation_youtube_liveBroadcasts_insert_status_privacyStatus {
  public
  unlisted
  private
}

"""The broadcast's recording status."""
enum mutation_youtube_liveBroadcasts_insert_status_recordingStatus {
  liveBroadcastRecordingStatusUnspecified
  notRecording
  recording
  recorded
}

"""Return broadcasts with a certain status, e.g. active broadcasts."""
enum queryInput_youtube_liveBroadcasts_list_broadcastStatus {
  broadcastStatusFilterUnspecified
  all
  active
  upcoming
  completed
}

"""Return only broadcasts with the selected type."""
enum queryInput_youtube_liveBroadcasts_list_broadcastType {
  broadcastTypeFilterUnspecified
  all
  event
  persistent
}

type LiveChatMessageListResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String
  items: [LiveChatMessage]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatMessageListResponse".
  """
  kind: String
  nextPageToken: String

  """The date and time when the underlying stream went offline."""
  offlineAt: DateTime
  pageInfo: PageInfo

  """The amount of time the client should wait before polling again."""
  pollingIntervalMillis: Int

  """Stub token pagination template to suppress results."""
  tokenPagination: JSON

  """The visitorId identifies the visitor."""
  visitorId: String
}

"""
A *liveChatMessage* resource represents a chat message in a YouTube Live Chat.
"""
type LiveChatMessage {
  authorDetails: LiveChatMessageAuthorDetails

  """Etag of this resource."""
  etag: String

  """The ID that YouTube assigns to uniquely identify the message."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatMessage".
  """
  kind: String
  snippet: LiveChatMessageSnippet
}

type LiveChatMessageAuthorDetails {
  """The YouTube channel ID."""
  channelId: String

  """The channel's URL."""
  channelUrl: String

  """The channel's display name."""
  displayName: String

  """Whether the author is a moderator of the live chat."""
  isChatModerator: Boolean

  """Whether the author is the owner of the live chat."""
  isChatOwner: Boolean

  """Whether the author is a sponsor of the live chat."""
  isChatSponsor: Boolean

  """Whether the author's identity has been verified by YouTube."""
  isVerified: Boolean

  """The channels's avatar URL."""
  profileImageUrl: String
}

"""Next ID: 33"""
type LiveChatMessageSnippet {
  """
  The ID of the user that authored this message, this field is not always filled. textMessageEvent - the user that wrote the message fanFundingEvent - the user that funded the broadcast newSponsorEvent - the user that just became a sponsor memberMilestoneChatEvent - the member that sent the message membershipGiftingEvent - the user that made the purchase giftMembershipReceivedEvent - the user that received the gift membership messageDeletedEvent - the moderator that took the action messageRetractedEvent - the author that retracted their message userBannedEvent - the moderator that took the action superChatEvent - the user that made the purchase superStickerEvent - the user that made the purchase
  """
  authorChannelId: String

  """
  Contains a string that can be displayed to the user. If this field is not present the message is silent, at the moment only messages of type TOMBSTONE and CHAT_ENDED_EVENT are silent.
  """
  displayMessage: String
  fanFundingEventDetails: LiveChatFanFundingEventDetails
  giftMembershipReceivedDetails: LiveChatGiftMembershipReceivedDetails

  """
  Whether the message has display content that should be displayed to users.
  """
  hasDisplayContent: Boolean
  liveChatId: String
  memberMilestoneChatDetails: LiveChatMemberMilestoneChatDetails
  membershipGiftingDetails: LiveChatMembershipGiftingDetails
  messageDeletedDetails: LiveChatMessageDeletedDetails
  messageRetractedDetails: LiveChatMessageRetractedDetails
  newSponsorDetails: LiveChatNewSponsorDetails

  """The date and time when the message was orignally published."""
  publishedAt: DateTime
  superChatDetails: LiveChatSuperChatDetails
  superStickerDetails: LiveChatSuperStickerDetails
  textMessageDetails: LiveChatTextMessageDetails
  type: mutation_youtube_liveChatMessages_insert_snippet_type
  userBannedDetails: LiveChatUserBannedMessageDetails
}

type LiveChatFanFundingEventDetails {
  """
  A rendered string that displays the fund amount and currency to the user.
  """
  amountDisplayString: String

  """The amount of the fund."""
  amountMicros: String

  """The currency in which the fund was made."""
  currency: String

  """The comment added by the user to this fan funding event."""
  userComment: String
}

type LiveChatGiftMembershipReceivedDetails {
  """
  The ID of the membership gifting message that is related to this gift membership. This ID will always refer to a message whose type is 'membershipGiftingEvent'.
  """
  associatedMembershipGiftingMessageId: String

  """
  The ID of the user that made the membership gifting purchase. This matches the `snippet.authorChannelId` of the associated membership gifting message.
  """
  gifterChannelId: String

  """
  The name of the Level at which the viewer is a member. This matches the `snippet.membershipGiftingDetails.giftMembershipsLevelName` of the associated membership gifting message. The Level names are defined by the YouTube channel offering the Membership. In some situations this field isn't filled.
  """
  memberLevelName: String
}

type LiveChatMemberMilestoneChatDetails {
  """
  The name of the Level at which the viever is a member. The Level names are defined by the YouTube channel offering the Membership. In some situations this field isn't filled.
  """
  memberLevelName: String

  """
  The total amount of months (rounded up) the viewer has been a member that granted them this Member Milestone Chat. This is the same number of months as is being displayed to YouTube users.
  """
  memberMonth: Int

  """
  The comment added by the member to this Member Milestone Chat. This field is empty for messages without a comment from the member.
  """
  userComment: String
}

type LiveChatMembershipGiftingDetails {
  """The number of gift memberships purchased by the user."""
  giftMembershipsCount: Int

  """
  The name of the level of the gift memberships purchased by the user. The Level names are defined by the YouTube channel offering the Membership. In some situations this field isn't filled.
  """
  giftMembershipsLevelName: String
}

type LiveChatMessageDeletedDetails {
  deletedMessageId: String
}

type LiveChatMessageRetractedDetails {
  retractedMessageId: String
}

type LiveChatNewSponsorDetails {
  """
  If the viewer just had upgraded from a lower level. For viewers that were not members at the time of purchase, this field is false.
  """
  isUpgrade: Boolean

  """
  The name of the Level that the viewer just had joined. The Level names are defined by the YouTube channel offering the Membership. In some situations this field isn't filled.
  """
  memberLevelName: String
}

type LiveChatSuperChatDetails {
  """
  A rendered string that displays the fund amount and currency to the user.
  """
  amountDisplayString: String

  """The amount purchased by the user, in micros (1,750,000 micros = 1.75)."""
  amountMicros: String

  """The currency in which the purchase was made."""
  currency: String

  """
  The tier in which the amount belongs. Lower amounts belong to lower tiers. The lowest tier is 1.
  """
  tier: Int

  """The comment added by the user to this Super Chat event."""
  userComment: String
}

type LiveChatSuperStickerDetails {
  """
  A rendered string that displays the fund amount and currency to the user.
  """
  amountDisplayString: String

  """The amount purchased by the user, in micros (1,750,000 micros = 1.75)."""
  amountMicros: String

  """The currency in which the purchase was made."""
  currency: String
  superStickerMetadata: SuperStickerMetadata

  """
  The tier in which the amount belongs. Lower amounts belong to lower tiers. The lowest tier is 1.
  """
  tier: Int
}

type SuperStickerMetadata {
  """
  Internationalized alt text that describes the sticker image and any animation associated with it.
  """
  altText: String

  """Specifies the localization language in which the alt text is returned."""
  altTextLanguage: String

  """
  Unique identifier of the Super Sticker. This is a shorter form of the alt_text that includes pack name and a recognizable characteristic of the sticker.
  """
  stickerId: String
}

type LiveChatTextMessageDetails {
  """The user's message."""
  messageText: String
}

"""
The type of message, this will always be present, it determines the contents of the message as well as which fields will be present.
"""
enum mutation_youtube_liveChatMessages_insert_snippet_type {
  invalidType
  textMessageEvent
  tombstone
  fanFundingEvent
  chatEndedEvent
  sponsorOnlyModeStartedEvent
  sponsorOnlyModeEndedEvent
  newSponsorEvent
  memberMilestoneChatEvent
  membershipGiftingEvent
  giftMembershipReceivedEvent
  messageDeletedEvent
  messageRetractedEvent
  userBannedEvent
  superChatEvent
  superStickerEvent
}

type LiveChatUserBannedMessageDetails {
  """
  The duration of the ban. This property is only present if the banType is temporary.
  """
  banDurationSeconds: String
  banType: mutation_youtube_liveChatMessages_insert_snippet_userBannedDetails_banType
  bannedUserDetails: ChannelProfileDetails
}

"""The type of ban."""
enum mutation_youtube_liveChatMessages_insert_snippet_userBannedDetails_banType {
  permanent
  temporary
}

type ChannelProfileDetails {
  """The YouTube channel ID."""
  channelId: String

  """The channel's URL."""
  channelUrl: String

  """The channel's display name."""
  displayName: String

  """The channels's avatar URL."""
  profileImageUrl: String
}

type LiveChatModeratorListResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String

  """A list of moderators that match the request criteria."""
  items: [LiveChatModerator]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatModeratorListResponse".
  """
  kind: String

  """
  The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
  """
  nextPageToken: String
  pageInfo: PageInfo

  """
  The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
  """
  prevPageToken: String

  """Stub token pagination template to suppress results."""
  tokenPagination: JSON

  """The visitorId identifies the visitor."""
  visitorId: String
}

"""
A *liveChatModerator* resource represents a moderator for a YouTube live chat. A chat moderator has the ability to ban/unban users from a chat, remove message, etc.
"""
type LiveChatModerator {
  """Etag of this resource."""
  etag: String

  """The ID that YouTube assigns to uniquely identify the moderator."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatModerator".
  """
  kind: String
  snippet: LiveChatModeratorSnippet
}

type LiveChatModeratorSnippet {
  """The ID of the live chat this moderator can act on."""
  liveChatId: String
  moderatorDetails: ChannelProfileDetails
}

type LiveStreamListResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String

  """A list of live streams that match the request criteria."""
  items: [LiveStream]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#liveStreamListResponse".
  """
  kind: String

  """
  The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
  """
  nextPageToken: String
  pageInfo: PageInfo

  """
  The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
  """
  prevPageToken: String

  """Stub token pagination template to suppress results."""
  tokenPagination: JSON

  """The visitorId identifies the visitor."""
  visitorId: String
}

"""A live stream describes a live ingestion point."""
type LiveStream {
  cdn: CdnSettings
  contentDetails: LiveStreamContentDetails

  """Etag of this resource."""
  etag: String

  """The ID that YouTube assigns to uniquely identify the stream."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#liveStream".
  """
  kind: String
  snippet: LiveStreamSnippet
  status: LiveStreamStatus
}

"""Brief description of the live stream cdn settings."""
type CdnSettings {
  """The format of the video stream that you are sending to Youtube."""
  format: String
  frameRate: mutation_youtube_liveStreams_insert_cdn_frameRate
  ingestionInfo: IngestionInfo
  ingestionType: mutation_youtube_liveStreams_insert_cdn_ingestionType
  resolution: mutation_youtube_liveStreams_insert_cdn_resolution
}

"""The frame rate of the inbound video data."""
enum mutation_youtube_liveStreams_insert_cdn_frameRate {
  _30fps
  _60fps
  variable
}

"""
Describes information necessary for ingesting an RTMP, HTTP, or SRT stream.
"""
type IngestionInfo {
  """
  The backup ingestion URL that you should use to stream video to YouTube. You have the option of simultaneously streaming the content that you are sending to the ingestionAddress to this URL.
  """
  backupIngestionAddress: String

  """
  The primary ingestion URL that you should use to stream video to YouTube. You must stream video to this URL. Depending on which application or tool you use to encode your video stream, you may need to enter the stream URL and stream name separately or you may need to concatenate them in the following format: *STREAM_URL/STREAM_NAME*
  """
  ingestionAddress: String

  """
  This ingestion url may be used instead of backupIngestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams.
  """
  rtmpsBackupIngestionAddress: String

  """
  This ingestion url may be used instead of ingestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams.
  """
  rtmpsIngestionAddress: String

  """The stream name that YouTube assigns to the video stream."""
  streamName: String
}

"""The method or protocol used to transmit the video stream."""
enum mutation_youtube_liveStreams_insert_cdn_ingestionType {
  rtmp
  dash
  webrtc
  hls
}

"""The resolution of the inbound video data."""
enum mutation_youtube_liveStreams_insert_cdn_resolution {
  _240p
  _360p
  _480p
  _720p
  _1080p
  _1440p
  _2160p
  variable
}

"""Detailed settings of a stream."""
type LiveStreamContentDetails {
  """The ingestion URL where the closed captions of this stream are sent."""
  closedCaptionsIngestionUrl: String

  """
  Indicates whether the stream is reusable, which means that it can be bound to multiple broadcasts. It is common for broadcasters to reuse the same stream for many different broadcasts if those broadcasts occur at different times. If you set this value to false, then the stream will not be reusable, which means that it can only be bound to one broadcast. Non-reusable streams differ from reusable streams in the following ways: - A non-reusable stream can only be bound to one broadcast. - A non-reusable stream might be deleted by an automated process after the broadcast ends. - The liveStreams.list method does not list non-reusable streams if you call the method and set the mine parameter to true. The only way to use that method to retrieve the resource for a non-reusable stream is to use the id parameter to identify the stream.
  """
  isReusable: Boolean
}

type LiveStreamSnippet {
  """
  The ID that YouTube uses to uniquely identify the channel that is transmitting the stream.
  """
  channelId: String

  """
  The stream's description. The value cannot be longer than 10000 characters.
  """
  description: String
  isDefaultStream: Boolean

  """The date and time that the stream was created."""
  publishedAt: DateTime

  """
  The stream's title. The value must be between 1 and 128 characters long.
  """
  title: String
}

"""Brief description of the live stream status."""
type LiveStreamStatus {
  healthStatus: LiveStreamHealthStatus
  streamStatus: mutation_youtube_liveStreams_insert_status_streamStatus
}

type LiveStreamHealthStatus {
  """The configurations issues on this stream"""
  configurationIssues: [LiveStreamConfigurationIssue]

  """The last time this status was updated (in seconds)"""
  lastUpdateTimeSeconds: String
  status: mutation_youtube_liveStreams_insert_status_healthStatus_status
}

type LiveStreamConfigurationIssue {
  """The long-form description of the issue and how to resolve it."""
  description: String

  """The short-form reason for this issue."""
  reason: String
  severity: mutation_youtube_liveStreams_insert_status_healthStatus_configurationIssues_items_severity
  type: mutation_youtube_liveStreams_insert_status_healthStatus_configurationIssues_items_type
}

"""How severe this issue is to the stream."""
enum mutation_youtube_liveStreams_insert_status_healthStatus_configurationIssues_items_severity {
  info
  warning
  error
}

"""The kind of error happening."""
enum mutation_youtube_liveStreams_insert_status_healthStatus_configurationIssues_items_type {
  gopSizeOver
  gopSizeLong
  gopSizeShort
  openGop
  badContainer
  audioBitrateHigh
  audioBitrateLow
  audioSampleRate
  bitrateHigh
  bitrateLow
  audioCodec
  videoCodec
  noAudioStream
  noVideoStream
  multipleVideoStreams
  multipleAudioStreams
  audioTooManyChannels
  interlacedVideo
  frameRateHigh
  resolutionMismatch
  videoCodecMismatch
  videoInterlaceMismatch
  videoProfileMismatch
  videoBitrateMismatch
  framerateMismatch
  gopMismatch
  audioSampleRateMismatch
  audioStereoMismatch
  audioCodecMismatch
  audioBitrateMismatch
  videoResolutionSuboptimal
  videoResolutionUnsupported
  videoIngestionStarved
  videoIngestionFasterThanRealtime
}

"""The status code of this stream"""
enum mutation_youtube_liveStreams_insert_status_healthStatus_status {
  good
  ok
  bad
  noData
  revoked
}

enum mutation_youtube_liveStreams_insert_status_streamStatus {
  created
  ready
  active
  inactive
  error
}

type MemberListResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String

  """A list of members that match the request criteria."""
  items: [Member]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#memberListResponse".
  """
  kind: String

  """
  The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
  """
  nextPageToken: String
  pageInfo: PageInfo

  """Stub token pagination template to suppress results."""
  tokenPagination: JSON

  """The visitorId identifies the visitor."""
  visitorId: String
}

"""
A *member* resource represents a member for a YouTube channel. A member provides recurring monetary support to a creator and receives special benefits.
"""
type Member {
  """Etag of this resource."""
  etag: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#member".
  """
  kind: String
  snippet: MemberSnippet
}

type MemberSnippet {
  """The id of the channel that's offering memberships."""
  creatorChannelId: String
  memberDetails: ChannelProfileDetails
  membershipsDetails: MembershipsDetails
}

type MembershipsDetails {
  """
  Ids of all levels that the user has access to. This includes the currently active level and all other levels that are included because of a higher purchase.
  """
  accessibleLevels: [String]

  """Id of the highest level that the user has access to at the moment."""
  highestAccessibleLevel: String

  """
  Display name for the highest level that the user has access to at the moment.
  """
  highestAccessibleLevelDisplayName: String
  membershipsDuration: MembershipsDuration

  """Data about memberships duration on particular pricing levels."""
  membershipsDurationAtLevels: [MembershipsDurationAtLevel]
}

type MembershipsDuration {
  """
  The date and time when the user became a continuous member across all levels.
  """
  memberSince: String

  """
  The cumulative time the user has been a member across all levels in complete months (the time is rounded down to the nearest integer).
  """
  memberTotalDurationMonths: Int
}

type MembershipsDurationAtLevel {
  """Pricing level ID."""
  level: String

  """
  The date and time when the user became a continuous member for the given level.
  """
  memberSince: String

  """
  The cumulative time the user has been a member for the given level in complete months (the time is rounded down to the nearest integer).
  """
  memberTotalDurationMonths: Int
}

"""Parameter that specifies which channel members to return."""
enum queryInput_youtube_members_list_mode {
  listMembersModeUnknown
  updates
  all_current
}

type MembershipsLevelListResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String

  """A list of pricing levels offered by a creator to the fans."""
  items: [MembershipsLevel]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#membershipsLevelListResponse".
  """
  kind: String

  """The visitorId identifies the visitor."""
  visitorId: String
}

"""
A *membershipsLevel* resource represents an offer made by YouTube creators for their fans. Users can become members of the channel by joining one of the available levels. They will provide recurring monetary support and receives special benefits.
"""
type MembershipsLevel {
  """Etag of this resource."""
  etag: String

  """
  The ID that YouTube assigns to uniquely identify the memberships level.
  """
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#membershipsLevelListResponse".
  """
  kind: String
  snippet: MembershipsLevelSnippet
}

type MembershipsLevelSnippet {
  """The id of the channel that's offering channel memberships."""
  creatorChannelId: String
  levelDetails: LevelDetails
}

type LevelDetails {
  """The name that should be used when referring to this level."""
  displayName: String
}

type PlaylistItemListResponse {
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String

  """A list of playlist items that match the request criteria."""
  items: [PlaylistItem]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#playlistItemListResponse". Etag of this resource.
  """
  kind: String

  """
  The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
  """
  nextPageToken: String
  pageInfo: PageInfo

  """
  The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
  """
  prevPageToken: String

  """Stub token pagination template to suppress results."""
  tokenPagination: JSON

  """The visitorId identifies the visitor."""
  visitorId: String
}

"""
A *playlistItem* resource identifies another resource, such as a video, that is included in a playlist. In addition, the playlistItem resource contains details about the included resource that pertain specifically to how that resource is used in that playlist. YouTube uses playlists to identify special collections of videos for a channel, such as: - uploaded videos - favorite videos - positively rated (liked) videos - watch history - watch later To be more specific, these lists are associated with a channel, which is a collection of a person, group, or company's videos, playlists, and other YouTube information. You can retrieve the playlist IDs for each of these lists from the channel resource for a given channel. You can then use the playlistItems.list method to retrieve any of those lists. You can also add or remove items from those lists by calling the playlistItems.insert and playlistItems.delete methods. For example, if a user gives a positive rating to a video, you would insert that video into the liked videos playlist for that user's channel.
"""
type PlaylistItem {
  contentDetails: PlaylistItemContentDetails

  """Etag of this resource."""
  etag: String

  """The ID that YouTube uses to uniquely identify the playlist item."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#playlistItem".
  """
  kind: String
  snippet: PlaylistItemSnippet
  status: PlaylistItemStatus
}

type PlaylistItemContentDetails {
  """
  The time, measured in seconds from the start of the video, when the video should stop playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) By default, assume that the video.endTime is the end of the video.
  """
  endAt: String

  """A user-generated note for this item."""
  note: String

  """
  The time, measured in seconds from the start of the video, when the video should start playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) The default value is 0.
  """
  startAt: String

  """
  The ID that YouTube uses to uniquely identify a video. To retrieve the video resource, set the id query parameter to this value in your API request.
  """
  videoId: String

  """The date and time that the video was published to YouTube."""
  videoPublishedAt: DateTime
}

"""
Basic details about a playlist, including title, description and thumbnails. Basic details of a YouTube Playlist item provided by the author. Next ID: 15
"""
type PlaylistItemSnippet {
  """
  The ID that YouTube uses to uniquely identify the user that added the item to the playlist.
  """
  channelId: String

  """Channel title for the channel that the playlist item belongs to."""
  channelTitle: String

  """The item's description."""
  description: String

  """
  The ID that YouTube uses to uniquely identify thGe playlist that the playlist item is in.
  """
  playlistId: String

  """
  The order in which the item appears in the playlist. The value uses a zero-based index, so the first item has a position of 0, the second item has a position of 1, and so forth.
  """
  position: Int

  """The date and time that the item was added to the playlist."""
  publishedAt: DateTime
  resourceId: ResourceId
  thumbnails: ThumbnailDetails

  """The item's title."""
  title: String

  """Channel id for the channel this video belongs to."""
  videoOwnerChannelId: String

  """Channel title for the channel this video belongs to."""
  videoOwnerChannelTitle: String
}

"""Information about the playlist item's privacy status."""
type PlaylistItemStatus {
  privacyStatus: mutation_youtube_playlistItems_insert_status_privacyStatus
}

"""This resource's privacy status."""
enum mutation_youtube_playlistItems_insert_status_privacyStatus {
  public
  unlisted
  private
}

type PlaylistListResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String

  """A list of playlists that match the request criteria"""
  items: [Playlist]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#playlistListResponse".
  """
  kind: String

  """
  The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
  """
  nextPageToken: String
  pageInfo: PageInfo

  """
  The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
  """
  prevPageToken: String

  """Stub token pagination template to suppress results."""
  tokenPagination: JSON

  """The visitorId identifies the visitor."""
  visitorId: String
}

"""
A *playlist* resource represents a YouTube playlist. A playlist is a collection of videos that can be viewed sequentially and shared with other users. A playlist can contain up to 200 videos, and YouTube does not limit the number of playlists that each user creates. By default, playlists are publicly visible to other users, but playlists can be public or private. YouTube also uses playlists to identify special collections of videos for a channel, such as: - uploaded videos - favorite videos - positively rated (liked) videos - watch history - watch later To be more specific, these lists are associated with a channel, which is a collection of a person, group, or company's videos, playlists, and other YouTube information. You can retrieve the playlist IDs for each of these lists from the channel resource for a given channel. You can then use the playlistItems.list method to retrieve any of those lists. You can also add or remove items from those lists by calling the playlistItems.insert and playlistItems.delete methods.
"""
type Playlist {
  contentDetails: PlaylistContentDetails

  """Etag of this resource."""
  etag: String

  """The ID that YouTube uses to uniquely identify the playlist."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#playlist".
  """
  kind: String
  localizations: mutation_youtube_playlists_insert_localizations
  player: PlaylistPlayer
  snippet: PlaylistSnippet
  status: PlaylistStatus
}

type PlaylistContentDetails {
  """The number of videos in the playlist."""
  itemCount: Int
}

"""Localizations for different languages"""
type mutation_youtube_playlists_insert_localizations {
  additionalProperties: [PlaylistLocalization_entry]
}

type PlaylistLocalization_entry {
  key: ID!
  value: PlaylistLocalization
}

"""Playlist localization setting"""
type PlaylistLocalization {
  """The localized strings for playlist's description."""
  description: String

  """The localized strings for playlist's title."""
  title: String
}

type PlaylistPlayer {
  """An <iframe> tag that embeds a player that will play the playlist."""
  embedHtml: String
}

"""
Basic details about a playlist, including title, description and thumbnails.
"""
type PlaylistSnippet {
  """
  The ID that YouTube uses to uniquely identify the channel that published the playlist.
  """
  channelId: String

  """The channel title of the channel that the video belongs to."""
  channelTitle: String

  """The language of the playlist's default title and description."""
  defaultLanguage: String

  """The playlist's description."""
  description: String
  localized: PlaylistLocalization2

  """The date and time that the playlist was created."""
  publishedAt: DateTime

  """Keyword tags associated with the playlist."""
  tags: [String]

  """
  Note: if the playlist has a custom thumbnail, this field will not be populated. The video id selected by the user that will be used as the thumbnail of this playlist. This field defaults to the first publicly viewable video in the playlist, if: 1. The user has never selected a video to be the thumbnail of the playlist. 2. The user selects a video to be the thumbnail, and then removes that video from the playlist. 3. The user selects a non-owned video to be the thumbnail, but that video becomes private, or gets deleted.
  """
  thumbnailVideoId: String
  thumbnails: ThumbnailDetails

  """The playlist's title."""
  title: String
}

"""Playlist localization setting"""
type PlaylistLocalization2 {
  """The localized strings for playlist's description."""
  description: String

  """The localized strings for playlist's title."""
  title: String
}

type PlaylistStatus {
  privacyStatus: mutation_youtube_playlists_insert_status_privacyStatus
}

"""The playlist's privacy status."""
enum mutation_youtube_playlists_insert_status_privacyStatus {
  public
  unlisted
  private
}

type SearchListResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String

  """Pagination information for token pagination."""
  items: [SearchResult]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#searchListResponse".
  """
  kind: String

  """
  The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
  """
  nextPageToken: String
  pageInfo: PageInfo

  """
  The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
  """
  prevPageToken: String
  regionCode: String

  """Stub token pagination template to suppress results."""
  tokenPagination: JSON

  """The visitorId identifies the visitor."""
  visitorId: String
}

"""
A search result contains information about a YouTube video, channel, or playlist that matches the search parameters specified in an API request. While a search result points to a uniquely identifiable resource, like a video, it does not have its own persistent data.
"""
type SearchResult {
  """Etag of this resource."""
  etag: String
  id: ResourceId

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#searchResult".
  """
  kind: String
  snippet: SearchResultSnippet
}

"""
Basic details about a search result, including title, description and thumbnails of the item referenced by the search result.
"""
type SearchResultSnippet {
  """
  The value that YouTube uses to uniquely identify the channel that published the resource that the search result identifies.
  """
  channelId: String

  """
  The title of the channel that published the resource that the search result identifies.
  """
  channelTitle: String

  """A description of the search result."""
  description: String
  liveBroadcastContent: query_youtube_search_list_items_items_snippet_liveBroadcastContent

  """
  The creation date and time of the resource that the search result identifies.
  """
  publishedAt: DateTime
  thumbnails: ThumbnailDetails

  """The title of the search result."""
  title: String
}

"""
It indicates if the resource (video or channel) has upcoming/active live broadcast content. Or it's "none" if there is not any upcoming/active live broadcasts.
"""
enum query_youtube_search_list_items_items_snippet_liveBroadcastContent {
  none
  upcoming
  live
  completed
}

"""Add a filter on the channel search."""
enum queryInput_youtube_search_list_channelType {
  channelTypeUnspecified
  any
  show
}

"""Filter on the livestream status of the videos."""
enum queryInput_youtube_search_list_eventType {
  none
  upcoming
  live
  completed
}

"""Sort order of the results."""
enum queryInput_youtube_search_list_order {
  searchSortUnspecified
  date
  rating
  viewCount
  relevance
  title
  videoCount
}

"""
Indicates whether the search results should include restricted content as well as standard content.
"""
enum queryInput_youtube_search_list_safeSearch {
  safeSearchSettingUnspecified
  none
  moderate
  strict
}

"""Filter on the presence of captions on the videos."""
enum queryInput_youtube_search_list_videoCaption {
  videoCaptionUnspecified
  any
  closedCaption
  none
}

"""Filter on the definition of the videos."""
enum queryInput_youtube_search_list_videoDefinition {
  any
  standard
  high
}

"""Filter on 3d videos."""
enum queryInput_youtube_search_list_videoDimension {
  any
  _2d
  _3d
}

"""Filter on the duration of the videos."""
enum queryInput_youtube_search_list_videoDuration {
  videoDurationUnspecified
  any
  short
  medium
  long
}

"""Filter on embeddable videos."""
enum queryInput_youtube_search_list_videoEmbeddable {
  videoEmbeddableUnspecified
  any
  TRUE
}

"""Filter on the license of the videos."""
enum queryInput_youtube_search_list_videoLicense {
  any
  youtube
  creativeCommon
}

"""Filter on syndicated videos."""
enum queryInput_youtube_search_list_videoSyndicated {
  videoSyndicatedUnspecified
  any
  TRUE
}

"""Filter on videos of a specific type."""
enum queryInput_youtube_search_list_videoType {
  videoTypeUnspecified
  any
  movie
  episode
}

type SubscriptionListResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String

  """A list of subscriptions that match the request criteria."""
  items: [Subscription_]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#subscriptionListResponse".
  """
  kind: String

  """
  The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
  """
  nextPageToken: String
  pageInfo: PageInfo

  """
  The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
  """
  prevPageToken: String

  """Stub token pagination template to suppress results."""
  tokenPagination: JSON

  """The visitorId identifies the visitor."""
  visitorId: String
}

"""
A *subscription* resource contains information about a YouTube user subscription. A subscription notifies a user when new videos are added to a channel or when another user takes one of several actions on YouTube, such as uploading a video, rating a video, or commenting on a video.
"""
type Subscription_ {
  contentDetails: SubscriptionContentDetails

  """Etag of this resource."""
  etag: String

  """The ID that YouTube uses to uniquely identify the subscription."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#subscription".
  """
  kind: String
  snippet: SubscriptionSnippet
  subscriberSnippet: SubscriptionSubscriberSnippet
}

"""Details about the content to witch a subscription refers."""
type SubscriptionContentDetails {
  activityType: mutation_youtube_subscriptions_insert_contentDetails_activityType

  """
  The number of new items in the subscription since its content was last read.
  """
  newItemCount: Int

  """The approximate number of items that the subscription points to."""
  totalItemCount: Int
}

"""
The type of activity this subscription is for (only uploads, everything).
"""
enum mutation_youtube_subscriptions_insert_contentDetails_activityType {
  subscriptionActivityTypeUnspecified
  all
  uploads
}

"""
Basic details about a subscription, including title, description and thumbnails of the subscribed item.
"""
type SubscriptionSnippet {
  """
  The ID that YouTube uses to uniquely identify the subscriber's channel.
  """
  channelId: String

  """Channel title for the channel that the subscription belongs to."""
  channelTitle: String

  """The subscription's details."""
  description: String

  """The date and time that the subscription was created."""
  publishedAt: DateTime
  resourceId: ResourceId
  thumbnails: ThumbnailDetails

  """The subscription's title."""
  title: String
}

"""
Basic details about a subscription's subscriber including title, description, channel ID and thumbnails.
"""
type SubscriptionSubscriberSnippet {
  """The channel ID of the subscriber."""
  channelId: String

  """The description of the subscriber."""
  description: String
  thumbnails: ThumbnailDetails

  """The title of the subscriber."""
  title: String
}

"""The order of the returned subscriptions"""
enum queryInput_youtube_subscriptions_list_order {
  subscriptionOrderUnspecified
  relevance
  unread
  alphabetical
}

type SuperChatEventListResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String

  """A list of Super Chat purchases that match the request criteria."""
  items: [SuperChatEvent]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#superChatEventListResponse".
  """
  kind: String

  """
  The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
  """
  nextPageToken: String
  pageInfo: PageInfo

  """Stub token pagination template to suppress results."""
  tokenPagination: JSON

  """The visitorId identifies the visitor."""
  visitorId: String
}

"""
A `__superChatEvent__` resource represents a Super Chat purchase on a YouTube channel.
"""
type SuperChatEvent {
  """Etag of this resource."""
  etag: String

  """The ID that YouTube assigns to uniquely identify the Super Chat event."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string `"youtube#superChatEvent"`.
  """
  kind: String
  snippet: SuperChatEventSnippet
}

type SuperChatEventSnippet {
  """
  The purchase amount, in micros of the purchase currency. e.g., 1 is represented as 1000000.
  """
  amountMicros: String

  """Channel id where the event occurred."""
  channelId: String

  """The text contents of the comment left by the user."""
  commentText: String

  """The date and time when the event occurred."""
  createdAt: DateTime

  """The currency in which the purchase was made. ISO 4217."""
  currency: String

  """
  A rendered string that displays the purchase amount and currency (e.g., "$1.00"). The string is rendered for the given language.
  """
  displayString: String

  """True if this event is a Super Sticker event."""
  isSuperStickerEvent: Boolean

  """
  The tier for the paid message, which is based on the amount of money spent to purchase the message.
  """
  messageType: Int
  superStickerMetadata: SuperStickerMetadata
  supporterDetails: ChannelProfileDetails
}

type ThirdPartyLinkListResponse {
  """Etag of this resource."""
  etag: String
  items: [ThirdPartyLink]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#thirdPartyLinkListResponse".
  """
  kind: String
}

"""
A *third party account link* resource represents a link between a YouTube account or a channel and an account on a third-party service.
"""
type ThirdPartyLink {
  """Etag of this resource"""
  etag: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#thirdPartyLink".
  """
  kind: String

  """
  The linking_token identifies a YouTube account and channel with which the third party account is linked.
  """
  linkingToken: String
  snippet: ThirdPartyLinkSnippet
  status: ThirdPartyLinkStatus
}

"""
Basic information about a third party account link, including its type and type-specific information.
"""
type ThirdPartyLinkSnippet {
  channelToStoreLink: ChannelToStoreLinkDetails
  type: mutation_youtube_thirdPartyLinks_insert_snippet_type
}

"""
Information specific to a store on a merchandising platform linked to a YouTube channel.
"""
type ChannelToStoreLinkDetails {
  """Google Merchant Center id of the store."""
  merchantId: String

  """Name of the store."""
  storeName: String

  """Landing page of the store."""
  storeUrl: String
}

"""Type of the link named after the entities that are being linked."""
enum mutation_youtube_thirdPartyLinks_insert_snippet_type {
  linkUnspecified
  channelToStoreLink
}

"""
The third-party link status object contains information about the status of the link.
"""
type ThirdPartyLinkStatus {
  linkStatus: mutation_youtube_thirdPartyLinks_insert_status_linkStatus
}

enum mutation_youtube_thirdPartyLinks_insert_status_linkStatus {
  unknown
  failed
  pending
  linked
}

"""Get a third party link of the given type."""
enum queryInput_youtube_thirdPartyLinks_list_type {
  linkUnspecified
  channelToStoreLink
}

type VideoAbuseReportReasonListResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String

  """A list of valid abuse reasons that are used with `video.ReportAbuse`."""
  items: [VideoAbuseReportReason]

  """
  Identifies what kind of resource this is. Value: the fixed string `"youtube#videoAbuseReportReasonListResponse"`.
  """
  kind: String

  """The `visitorId` identifies the visitor."""
  visitorId: String
}

"""
A `__videoAbuseReportReason__` resource identifies a reason that a video could be reported as abusive. Video abuse report reasons are used with `video.ReportAbuse`.
"""
type VideoAbuseReportReason {
  """Etag of this resource."""
  etag: String

  """The ID of this abuse report reason."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string `"youtube#videoAbuseReportReason"`.
  """
  kind: String
  snippet: VideoAbuseReportReasonSnippet
}

"""Basic details about a video category, such as its localized title."""
type VideoAbuseReportReasonSnippet {
  """The localized label belonging to this abuse report reason."""
  label: String

  """
  The secondary reasons associated with this reason, if any are available. (There might be 0 or more.)
  """
  secondaryReasons: [VideoAbuseReportSecondaryReason]
}

type VideoAbuseReportSecondaryReason {
  """The ID of this abuse report secondary reason."""
  id: String

  """The localized label for this abuse report secondary reason."""
  label: String
}

type VideoCategoryListResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String

  """
  A list of video categories that can be associated with YouTube videos. In this map, the video category ID is the map key, and its value is the corresponding videoCategory resource.
  """
  items: [VideoCategory]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#videoCategoryListResponse".
  """
  kind: String

  """
  The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
  """
  nextPageToken: String
  pageInfo: PageInfo

  """
  The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
  """
  prevPageToken: String

  """Stub token pagination template to suppress results."""
  tokenPagination: JSON

  """The visitorId identifies the visitor."""
  visitorId: String
}

"""
A *videoCategory* resource identifies a category that has been or could be associated with uploaded videos.
"""
type VideoCategory {
  """Etag of this resource."""
  etag: String

  """The ID that YouTube uses to uniquely identify the video category."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#videoCategory".
  """
  kind: String
  snippet: VideoCategorySnippet
}

"""Basic details about a video category, such as its localized title."""
type VideoCategorySnippet {
  assignable: Boolean

  """The YouTube channel that created the video category."""
  channelId: String

  """The video category's title."""
  title: String
}

type VideoListResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String
  items: [Video]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#videoListResponse".
  """
  kind: String

  """
  The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.
  """
  nextPageToken: String
  pageInfo: PageInfo

  """
  The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.
  """
  prevPageToken: String

  """Stub token pagination template to suppress results."""
  tokenPagination: JSON

  """The visitorId identifies the visitor."""
  visitorId: String
}

"""A *video* resource represents a YouTube video."""
type Video {
  ageGating: VideoAgeGating
  contentDetails: VideoContentDetails

  """Etag of this resource."""
  etag: String
  fileDetails: VideoFileDetails

  """The ID that YouTube uses to uniquely identify the video."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#video".
  """
  kind: String
  liveStreamingDetails: VideoLiveStreamingDetails
  localizations: mutation_youtube_videos_insert_localizations
  monetizationDetails: VideoMonetizationDetails
  player: VideoPlayer
  processingDetails: VideoProcessingDetails

  """
  DEPRECATED. b/157517979: This part was never populated after it was added. However, it sees non-zero traffic because there is generated client code in the wild that refers to it [1]. We keep this field and do NOT remove it because otherwise V3 would return an error when this part gets requested [2]. [1] https://developers.google.com/resources/api-libraries/documentation/youtube/v3/csharp/latest/classGoogle_1_1Apis_1_1YouTube_1_1v3_1_1Data_1_1VideoProjectDetails.html [2] http://google3/video/youtube/src/python/servers/data_api/common.py?l=1565-1569&rcl=344141677
  """
  projectDetails: JSON
  recordingDetails: VideoRecordingDetails
  snippet: VideoSnippet
  statistics: VideoStatistics
  status: VideoStatus
  suggestions: VideoSuggestions
  topicDetails: VideoTopicDetails
}

type VideoAgeGating {
  """
  Indicates whether or not the video has alcoholic beverage content. Only users of legal purchasing age in a particular country, as identified by ICAP, can view the content.
  """
  alcoholContent: Boolean

  """
  Age-restricted trailers. For redband trailers and adult-rated video-games. Only users aged 18+ can view the content. The the field is true the content is restricted to viewers aged 18+. Otherwise The field won't be present.
  """
  restricted: Boolean
  videoGameRating: mutation_youtube_videos_insert_ageGating_videoGameRating
}

"""Video game rating, if any."""
enum mutation_youtube_videos_insert_ageGating_videoGameRating {
  anyone
  m15Plus
  m16Plus
  m17Plus
}

"""Details about the content of a YouTube Video."""
type VideoContentDetails {
  caption: mutation_youtube_videos_insert_contentDetails_caption
  contentRating: ContentRating
  countryRestriction: AccessPolicy
  definition: mutation_youtube_videos_insert_contentDetails_definition

  """
  The value of dimension indicates whether the video is available in 3D or in 2D.
  """
  dimension: String

  """
  The length of the video. The tag value is an ISO 8601 duration in the format PT#M#S, in which the letters PT indicate that the value specifies a period of time, and the letters M and S refer to length in minutes and seconds, respectively. The # characters preceding the M and S letters are both integers that specify the number of minutes (or seconds) of the video. For example, a value of PT15M51S indicates that the video is 15 minutes and 51 seconds long.
  """
  duration: String

  """
  Indicates whether the video uploader has provided a custom thumbnail image for the video. This property is only visible to the video uploader.
  """
  hasCustomThumbnail: Boolean

  """
  The value of is_license_content indicates whether the video is licensed content.
  """
  licensedContent: Boolean
  projection: mutation_youtube_videos_insert_contentDetails_projection
  regionRestriction: VideoContentDetailsRegionRestriction
}

"""The value of captions indicates whether the video has captions or not."""
enum mutation_youtube_videos_insert_contentDetails_caption {
  TRUE
  FALSE
}

"""
Ratings schemes. The country-specific ratings are mostly for movies and shows. LINT.IfChange
"""
type ContentRating {
  acbRating: mutation_youtube_videos_insert_contentDetails_contentRating_acbRating
  agcomRating: mutation_youtube_videos_insert_contentDetails_contentRating_agcomRating
  anatelRating: mutation_youtube_videos_insert_contentDetails_contentRating_anatelRating
  bbfcRating: mutation_youtube_videos_insert_contentDetails_contentRating_bbfcRating
  bfvcRating: mutation_youtube_videos_insert_contentDetails_contentRating_bfvcRating
  bmukkRating: mutation_youtube_videos_insert_contentDetails_contentRating_bmukkRating
  catvRating: mutation_youtube_videos_insert_contentDetails_contentRating_catvRating
  catvfrRating: mutation_youtube_videos_insert_contentDetails_contentRating_catvfrRating
  cbfcRating: mutation_youtube_videos_insert_contentDetails_contentRating_cbfcRating
  cccRating: mutation_youtube_videos_insert_contentDetails_contentRating_cccRating
  cceRating: mutation_youtube_videos_insert_contentDetails_contentRating_cceRating
  chfilmRating: mutation_youtube_videos_insert_contentDetails_contentRating_chfilmRating
  chvrsRating: mutation_youtube_videos_insert_contentDetails_contentRating_chvrsRating
  cicfRating: mutation_youtube_videos_insert_contentDetails_contentRating_cicfRating
  cnaRating: mutation_youtube_videos_insert_contentDetails_contentRating_cnaRating
  cncRating: mutation_youtube_videos_insert_contentDetails_contentRating_cncRating
  csaRating: mutation_youtube_videos_insert_contentDetails_contentRating_csaRating
  cscfRating: mutation_youtube_videos_insert_contentDetails_contentRating_cscfRating
  czfilmRating: mutation_youtube_videos_insert_contentDetails_contentRating_czfilmRating
  djctqRating: mutation_youtube_videos_insert_contentDetails_contentRating_djctqRating

  """Reasons that explain why the video received its DJCQT (Brazil) rating."""
  djctqRatingReasons: [mutation_youtube_videos_insert_contentDetails_contentRating_djctqRatingReasons_items]
  ecbmctRating: mutation_youtube_videos_insert_contentDetails_contentRating_ecbmctRating
  eefilmRating: mutation_youtube_videos_insert_contentDetails_contentRating_eefilmRating
  egfilmRating: mutation_youtube_videos_insert_contentDetails_contentRating_egfilmRating
  eirinRating: mutation_youtube_videos_insert_contentDetails_contentRating_eirinRating
  fcbmRating: mutation_youtube_videos_insert_contentDetails_contentRating_fcbmRating
  fcoRating: mutation_youtube_videos_insert_contentDetails_contentRating_fcoRating
  fmocRating: mutation_youtube_videos_insert_contentDetails_contentRating_fmocRating
  fpbRating: mutation_youtube_videos_insert_contentDetails_contentRating_fpbRating

  """
  Reasons that explain why the video received its FPB (South Africa) rating.
  """
  fpbRatingReasons: [mutation_youtube_videos_insert_contentDetails_contentRating_fpbRatingReasons_items]
  fskRating: mutation_youtube_videos_insert_contentDetails_contentRating_fskRating
  grfilmRating: mutation_youtube_videos_insert_contentDetails_contentRating_grfilmRating
  icaaRating: mutation_youtube_videos_insert_contentDetails_contentRating_icaaRating
  ifcoRating: mutation_youtube_videos_insert_contentDetails_contentRating_ifcoRating
  ilfilmRating: mutation_youtube_videos_insert_contentDetails_contentRating_ilfilmRating
  incaaRating: mutation_youtube_videos_insert_contentDetails_contentRating_incaaRating
  kfcbRating: mutation_youtube_videos_insert_contentDetails_contentRating_kfcbRating
  kijkwijzerRating: mutation_youtube_videos_insert_contentDetails_contentRating_kijkwijzerRating
  kmrbRating: mutation_youtube_videos_insert_contentDetails_contentRating_kmrbRating
  lsfRating: mutation_youtube_videos_insert_contentDetails_contentRating_lsfRating
  mccaaRating: mutation_youtube_videos_insert_contentDetails_contentRating_mccaaRating
  mccypRating: mutation_youtube_videos_insert_contentDetails_contentRating_mccypRating
  mcstRating: mutation_youtube_videos_insert_contentDetails_contentRating_mcstRating
  mdaRating: mutation_youtube_videos_insert_contentDetails_contentRating_mdaRating
  medietilsynetRating: mutation_youtube_videos_insert_contentDetails_contentRating_medietilsynetRating
  mekuRating: mutation_youtube_videos_insert_contentDetails_contentRating_mekuRating
  menaMpaaRating: mutation_youtube_videos_insert_contentDetails_contentRating_menaMpaaRating
  mibacRating: mutation_youtube_videos_insert_contentDetails_contentRating_mibacRating
  mocRating: mutation_youtube_videos_insert_contentDetails_contentRating_mocRating
  moctwRating: mutation_youtube_videos_insert_contentDetails_contentRating_moctwRating
  mpaaRating: mutation_youtube_videos_insert_contentDetails_contentRating_mpaaRating
  mpaatRating: mutation_youtube_videos_insert_contentDetails_contentRating_mpaatRating
  mtrcbRating: mutation_youtube_videos_insert_contentDetails_contentRating_mtrcbRating
  nbcRating: mutation_youtube_videos_insert_contentDetails_contentRating_nbcRating
  nbcplRating: mutation_youtube_videos_insert_contentDetails_contentRating_nbcplRating
  nfrcRating: mutation_youtube_videos_insert_contentDetails_contentRating_nfrcRating
  nfvcbRating: mutation_youtube_videos_insert_contentDetails_contentRating_nfvcbRating
  nkclvRating: mutation_youtube_videos_insert_contentDetails_contentRating_nkclvRating
  nmcRating: mutation_youtube_videos_insert_contentDetails_contentRating_nmcRating
  oflcRating: mutation_youtube_videos_insert_contentDetails_contentRating_oflcRating
  pefilmRating: mutation_youtube_videos_insert_contentDetails_contentRating_pefilmRating
  rcnofRating: mutation_youtube_videos_insert_contentDetails_contentRating_rcnofRating
  resorteviolenciaRating: mutation_youtube_videos_insert_contentDetails_contentRating_resorteviolenciaRating
  rtcRating: mutation_youtube_videos_insert_contentDetails_contentRating_rtcRating
  rteRating: mutation_youtube_videos_insert_contentDetails_contentRating_rteRating
  russiaRating: mutation_youtube_videos_insert_contentDetails_contentRating_russiaRating
  skfilmRating: mutation_youtube_videos_insert_contentDetails_contentRating_skfilmRating
  smaisRating: mutation_youtube_videos_insert_contentDetails_contentRating_smaisRating
  smsaRating: mutation_youtube_videos_insert_contentDetails_contentRating_smsaRating
  tvpgRating: mutation_youtube_videos_insert_contentDetails_contentRating_tvpgRating
  ytRating: mutation_youtube_videos_insert_contentDetails_contentRating_ytRating
}

"""
The video's Australian Classification Board (ACB) or Australian Communications and Media Authority (ACMA) rating. ACMA ratings are used to classify children's television programming.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_acbRating {
  acbUnspecified
  acbE
  acbP
  acbC
  acbG
  acbPg
  acbM
  acbMa15plus
  acbR18plus
  acbUnrated
}

"""
The video's rating from Italy's Autorità per le Garanzie nelle Comunicazioni (AGCOM).
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_agcomRating {
  agcomUnspecified
  agcomT
  agcomVm14
  agcomVm18
  agcomUnrated
}

"""
The video's Anatel (Asociación Nacional de Televisión) rating for Chilean television.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_anatelRating {
  anatelUnspecified
  anatelF
  anatelI
  anatelI7
  anatelI10
  anatelI12
  anatelR
  anatelA
  anatelUnrated
}

"""The video's British Board of Film Classification (BBFC) rating."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_bbfcRating {
  bbfcUnspecified
  bbfcU
  bbfcPg
  bbfc12a
  bbfc12
  bbfc15
  bbfc18
  bbfcR18
  bbfcUnrated
}

"""The video's rating from Thailand's Board of Film and Video Censors."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_bfvcRating {
  bfvcUnspecified
  bfvcG
  bfvcE
  bfvc13
  bfvc15
  bfvc18
  bfvc20
  bfvcB
  bfvcUnrated
}

"""
The video's rating from the Austrian Board of Media Classification (Bundesministerium für Unterricht, Kunst und Kultur).
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_bmukkRating {
  bmukkUnspecified
  bmukkAa
  bmukk6
  bmukk8
  bmukk10
  bmukk12
  bmukk14
  bmukk16
  bmukkUnrated
}

"""
Rating system for Canadian TV - Canadian TV Classification System The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian English-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_catvRating {
  catvUnspecified
  catvC
  catvC8
  catvG
  catvPg
  catv14plus
  catv18plus
  catvUnrated
  catvE
}

"""
The video's rating from the Canadian Radio-Television and Telecommunications Commission (CRTC) for Canadian French-language broadcasts. For more information, see the Canadian Broadcast Standards Council website.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_catvfrRating {
  catvfrUnspecified
  catvfrG
  catvfr8plus
  catvfr13plus
  catvfr16plus
  catvfr18plus
  catvfrUnrated
  catvfrE
}

"""The video's Central Board of Film Certification (CBFC - India) rating."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_cbfcRating {
  cbfcUnspecified
  cbfcU
  cbfcUA
  cbfcUA7plus
  cbfcUA13plus
  cbfcUA16plus
  cbfcA
  cbfcS
  cbfcUnrated
}

"""The video's Consejo de Calificación Cinematográfica (Chile) rating."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_cccRating {
  cccUnspecified
  cccTe
  ccc6
  ccc14
  ccc18
  ccc18v
  ccc18s
  cccUnrated
}

"""
The video's rating from Portugal's Comissão de Classificação de Espect´culos.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_cceRating {
  cceUnspecified
  cceM4
  cceM6
  cceM12
  cceM16
  cceM18
  cceUnrated
  cceM14
}

"""The video's rating in Switzerland."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_chfilmRating {
  chfilmUnspecified
  chfilm0
  chfilm6
  chfilm12
  chfilm16
  chfilm18
  chfilmUnrated
}

"""The video's Canadian Home Video Rating System (CHVRS) rating."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_chvrsRating {
  chvrsUnspecified
  chvrsG
  chvrsPg
  chvrs14a
  chvrs18a
  chvrsR
  chvrsE
  chvrsUnrated
}

"""
The video's rating from the Commission de Contrôle des Films (Belgium).
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_cicfRating {
  cicfUnspecified
  cicfE
  cicfKtEa
  cicfKntEna
  cicfUnrated
}

"""
The video's rating from Romania's CONSILIUL NATIONAL AL AUDIOVIZUALULUI (CNA).
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_cnaRating {
  cnaUnspecified
  cnaAp
  cna12
  cna15
  cna18
  cna18plus
  cnaUnrated
}

"""
Rating system in France - Commission de classification cinematographique
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_cncRating {
  cncUnspecified
  cncT
  cnc10
  cnc12
  cnc16
  cnc18
  cncE
  cncInterdiction
  cncUnrated
}

"""
The video's rating from France's Conseil supérieur de l’audiovisuel, which rates broadcast content.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_csaRating {
  csaUnspecified
  csaT
  csa10
  csa12
  csa16
  csa18
  csaInterdiction
  csaUnrated
}

"""
The video's rating from Luxembourg's Commission de surveillance de la classification des films (CSCF).
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_cscfRating {
  cscfUnspecified
  cscfAl
  cscfA
  cscf6
  cscf9
  cscf12
  cscf16
  cscf18
  cscfUnrated
}

"""The video's rating in the Czech Republic."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_czfilmRating {
  czfilmUnspecified
  czfilmU
  czfilm12
  czfilm14
  czfilm18
  czfilmUnrated
}

"""
The video's Departamento de Justiça, Classificação, Qualificação e Títulos (DJCQT - Brazil) rating.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_djctqRating {
  djctqUnspecified
  djctqL
  djctq10
  djctq12
  djctq14
  djctq16
  djctq18
  djctqEr
  djctqL10
  djctqL12
  djctqL14
  djctqL16
  djctqL18
  djctq1012
  djctq1014
  djctq1016
  djctq1018
  djctq1214
  djctq1216
  djctq1218
  djctq1416
  djctq1418
  djctq1618
  djctqUnrated
}

enum mutation_youtube_videos_insert_contentDetails_contentRating_djctqRatingReasons_items {
  djctqRatingReasonUnspecified
  djctqViolence
  djctqExtremeViolence
  djctqSexualContent
  djctqNudity
  djctqSex
  djctqExplicitSex
  djctqDrugs
  djctqLegalDrugs
  djctqIllegalDrugs
  djctqInappropriateLanguage
  djctqCriminalActs
  djctqImpactingContent
}

"""
Rating system in Turkey - Evaluation and Classification Board of the Ministry of Culture and Tourism
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_ecbmctRating {
  ecbmctUnspecified
  ecbmctG
  ecbmct7a
  ecbmct7plus
  ecbmct13a
  ecbmct13plus
  ecbmct15a
  ecbmct15plus
  ecbmct18plus
  ecbmctUnrated
}

"""The video's rating in Estonia."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_eefilmRating {
  eefilmUnspecified
  eefilmPere
  eefilmL
  eefilmMs6
  eefilmK6
  eefilmMs12
  eefilmK12
  eefilmK14
  eefilmK16
  eefilmUnrated
}

"""The video's rating in Egypt."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_egfilmRating {
  egfilmUnspecified
  egfilmGn
  egfilm18
  egfilmBn
  egfilmUnrated
}

"""The video's Eirin (映倫) rating. Eirin is the Japanese rating system."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_eirinRating {
  eirinUnspecified
  eirinG
  eirinPg12
  eirinR15plus
  eirinR18plus
  eirinUnrated
}

"""The video's rating from Malaysia's Film Censorship Board."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_fcbmRating {
  fcbmUnspecified
  fcbmU
  fcbmPg13
  fcbmP13
  fcbm18
  fcbm18sx
  fcbm18pa
  fcbm18sg
  fcbm18pl
  fcbmUnrated
}

"""
The video's rating from Hong Kong's Office for Film, Newspaper and Article Administration.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_fcoRating {
  fcoUnspecified
  fcoI
  fcoIia
  fcoIib
  fcoIi
  fcoIii
  fcoUnrated
}

"""
This property has been deprecated. Use the contentDetails.contentRating.cncRating instead.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_fmocRating {
  fmocUnspecified
  fmocU
  fmoc10
  fmoc12
  fmoc16
  fmoc18
  fmocE
  fmocUnrated
}

"""The video's rating from South Africa's Film and Publication Board."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_fpbRating {
  fpbUnspecified
  fpbA
  fpbPg
  fpb79Pg
  fpb1012Pg
  fpb13
  fpb16
  fpb18
  fpbX18
  fpbXx
  fpbUnrated
  fpb10
}

enum mutation_youtube_videos_insert_contentDetails_contentRating_fpbRatingReasons_items {
  fpbRatingReasonUnspecified
  fpbBlasphemy
  fpbLanguage
  fpbNudity
  fpbPrejudice
  fpbSex
  fpbViolence
  fpbDrugs
  fpbSexualViolence
  fpbHorror
  fpbCriminalTechniques
  fpbImitativeActsTechniques
}

"""
The video's Freiwillige Selbstkontrolle der Filmwirtschaft (FSK - Germany) rating.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_fskRating {
  fskUnspecified
  fsk0
  fsk6
  fsk12
  fsk16
  fsk18
  fskUnrated
}

"""The video's rating in Greece."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_grfilmRating {
  grfilmUnspecified
  grfilmK
  grfilmE
  grfilmK12
  grfilmK13
  grfilmK15
  grfilmK17
  grfilmK18
  grfilmUnrated
}

"""
The video's Instituto de la Cinematografía y de las Artes Audiovisuales (ICAA - Spain) rating.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_icaaRating {
  icaaUnspecified
  icaaApta
  icaa7
  icaa12
  icaa13
  icaa16
  icaa18
  icaaX
  icaaUnrated
}

"""
The video's Irish Film Classification Office (IFCO - Ireland) rating. See the IFCO website for more information.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_ifcoRating {
  ifcoUnspecified
  ifcoG
  ifcoPg
  ifco12
  ifco12a
  ifco15
  ifco15a
  ifco16
  ifco18
  ifcoUnrated
}

"""The video's rating in Israel."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_ilfilmRating {
  ilfilmUnspecified
  ilfilmAa
  ilfilm12
  ilfilm14
  ilfilm16
  ilfilm18
  ilfilmUnrated
}

"""
The video's INCAA (Instituto Nacional de Cine y Artes Audiovisuales - Argentina) rating.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_incaaRating {
  incaaUnspecified
  incaaAtp
  incaaSam13
  incaaSam16
  incaaSam18
  incaaC
  incaaUnrated
}

"""The video's rating from the Kenya Film Classification Board."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_kfcbRating {
  kfcbUnspecified
  kfcbG
  kfcbPg
  kfcb16plus
  kfcbR
  kfcbUnrated
}

"""
The video's NICAM/Kijkwijzer rating from the Nederlands Instituut voor de Classificatie van Audiovisuele Media (Netherlands).
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_kijkwijzerRating {
  kijkwijzerUnspecified
  kijkwijzerAl
  kijkwijzer6
  kijkwijzer9
  kijkwijzer12
  kijkwijzer16
  kijkwijzer18
  kijkwijzerUnrated
}

"""
The video's Korea Media Rating Board (영상물등급위원회) rating. The KMRB rates videos in South Korea.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_kmrbRating {
  kmrbUnspecified
  kmrbAll
  kmrb12plus
  kmrb15plus
  kmrbTeenr
  kmrbR
  kmrbUnrated
}

"""The video's rating from Indonesia's Lembaga Sensor Film."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_lsfRating {
  lsfUnspecified
  lsfSu
  lsfA
  lsfBo
  lsf13
  lsfR
  lsf17
  lsfD
  lsf21
  lsfUnrated
}

"""The video's rating from Malta's Film Age-Classification Board."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_mccaaRating {
  mccaaUnspecified
  mccaaU
  mccaaPg
  mccaa12a
  mccaa12
  mccaa14
  mccaa15
  mccaa16
  mccaa18
  mccaaUnrated
}

"""
The video's rating from the Danish Film Institute's (Det Danske Filminstitut) Media Council for Children and Young People.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_mccypRating {
  mccypUnspecified
  mccypA
  mccyp7
  mccyp11
  mccyp15
  mccypUnrated
}

"""The video's rating system for Vietnam - MCST"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_mcstRating {
  mcstUnspecified
  mcstP
  mcst0
  mcstC13
  mcstC16
  mcst16plus
  mcstC18
  mcstGPg
  mcstUnrated
}

"""
The video's rating from Singapore's Media Development Authority (MDA) and, specifically, it's Board of Film Censors (BFC).
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_mdaRating {
  mdaUnspecified
  mdaG
  mdaPg
  mdaPg13
  mdaNc16
  mdaM18
  mdaR21
  mdaUnrated
}

"""The video's rating from Medietilsynet, the Norwegian Media Authority."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_medietilsynetRating {
  medietilsynetUnspecified
  medietilsynetA
  medietilsynet6
  medietilsynet7
  medietilsynet9
  medietilsynet11
  medietilsynet12
  medietilsynet15
  medietilsynet18
  medietilsynetUnrated
}

"""
The video's rating from Finland's Kansallinen Audiovisuaalinen Instituutti (National Audiovisual Institute).
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_mekuRating {
  mekuUnspecified
  mekuS
  meku7
  meku12
  meku16
  meku18
  mekuUnrated
}

"""
The rating system for MENA countries, a clone of MPAA. It is needed to prevent titles go live w/o additional QC check, since some of them can be inappropriate for the countries at all. See b/33408548 for more details.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_menaMpaaRating {
  menaMpaaUnspecified
  menaMpaaG
  menaMpaaPg
  menaMpaaPg13
  menaMpaaR
  menaMpaaUnrated
}

"""
The video's rating from the Ministero dei Beni e delle Attività Culturali e del Turismo (Italy).
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_mibacRating {
  mibacUnspecified
  mibacT
  mibacVap
  mibacVm6
  mibacVm12
  mibacVm14
  mibacVm16
  mibacVm18
  mibacUnrated
}

"""The video's Ministerio de Cultura (Colombia) rating."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_mocRating {
  mocUnspecified
  mocE
  mocT
  moc7
  moc12
  moc15
  moc18
  mocX
  mocBanned
  mocUnrated
}

"""The video's rating from Taiwan's Ministry of Culture (文化部)."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_moctwRating {
  moctwUnspecified
  moctwG
  moctwP
  moctwPg
  moctwR
  moctwUnrated
  moctwR12
  moctwR15
}

"""The video's Motion Picture Association of America (MPAA) rating."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_mpaaRating {
  mpaaUnspecified
  mpaaG
  mpaaPg
  mpaaPg13
  mpaaR
  mpaaNc17
  mpaaX
  mpaaUnrated
}

"""
The rating system for trailer, DVD, and Ad in the US. See http://movielabs.com/md/ratings/v2.3/html/US_MPAAT_Ratings.html.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_mpaatRating {
  mpaatUnspecified
  mpaatGb
  mpaatRb
}

"""
The video's rating from the Movie and Television Review and Classification Board (Philippines).
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_mtrcbRating {
  mtrcbUnspecified
  mtrcbG
  mtrcbPg
  mtrcbR13
  mtrcbR16
  mtrcbR18
  mtrcbX
  mtrcbUnrated
}

"""
The video's rating from the Maldives National Bureau of Classification.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_nbcRating {
  nbcUnspecified
  nbcG
  nbcPg
  nbc12plus
  nbc15plus
  nbc18plus
  nbc18plusr
  nbcPu
  nbcUnrated
}

"""The video's rating in Poland."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_nbcplRating {
  nbcplUnspecified
  nbcplI
  nbcplIi
  nbcplIii
  nbcplIv
  nbcpl18plus
  nbcplUnrated
}

"""The video's rating from the Bulgarian National Film Center."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_nfrcRating {
  nfrcUnspecified
  nfrcA
  nfrcB
  nfrcC
  nfrcD
  nfrcX
  nfrcUnrated
}

"""
The video's rating from Nigeria's National Film and Video Censors Board.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_nfvcbRating {
  nfvcbUnspecified
  nfvcbG
  nfvcbPg
  nfvcb12
  nfvcb12a
  nfvcb15
  nfvcb18
  nfvcbRe
  nfvcbUnrated
}

"""
The video's rating from the Nacionãlais Kino centrs (National Film Centre of Latvia).
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_nkclvRating {
  nkclvUnspecified
  nkclvU
  nkclv7plus
  nkclv12plus
  nkclv16plus
  nkclv18plus
  nkclvUnrated
}

"""The National Media Council ratings system for United Arab Emirates."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_nmcRating {
  nmcUnspecified
  nmcG
  nmcPg
  nmcPg13
  nmcPg15
  nmc15plus
  nmc18plus
  nmc18tc
  nmcUnrated
}

"""
The video's Office of Film and Literature Classification (OFLC - New Zealand) rating.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_oflcRating {
  oflcUnspecified
  oflcG
  oflcPg
  oflcM
  oflcR13
  oflcR15
  oflcR16
  oflcR18
  oflcUnrated
  oflcRp13
  oflcRp16
  oflcRp18
}

"""The video's rating in Peru."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_pefilmRating {
  pefilmUnspecified
  pefilmPt
  pefilmPg
  pefilm14
  pefilm18
  pefilmUnrated
}

"""
The video's rating from the Hungarian Nemzeti Filmiroda, the Rating Committee of the National Office of Film.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_rcnofRating {
  rcnofUnspecified
  rcnofI
  rcnofIi
  rcnofIii
  rcnofIv
  rcnofV
  rcnofVi
  rcnofUnrated
}

"""The video's rating in Venezuela."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_resorteviolenciaRating {
  resorteviolenciaUnspecified
  resorteviolenciaA
  resorteviolenciaB
  resorteviolenciaC
  resorteviolenciaD
  resorteviolenciaE
  resorteviolenciaUnrated
}

"""
The video's General Directorate of Radio, Television and Cinematography (Mexico) rating.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_rtcRating {
  rtcUnspecified
  rtcAa
  rtcA
  rtcB
  rtcB15
  rtcC
  rtcD
  rtcUnrated
}

"""The video's rating from Ireland's Raidió Teilifís Éireann."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_rteRating {
  rteUnspecified
  rteGa
  rteCh
  rtePs
  rteMa
  rteUnrated
}

"""
The video's National Film Registry of the Russian Federation (MKRF - Russia) rating.
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_russiaRating {
  russiaUnspecified
  russia0
  russia6
  russia12
  russia16
  russia18
  russiaUnrated
}

"""The video's rating in Slovakia."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_skfilmRating {
  skfilmUnspecified
  skfilmG
  skfilmP2
  skfilmP5
  skfilmP8
  skfilmUnrated
}

"""The video's rating in Iceland."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_smaisRating {
  smaisUnspecified
  smaisL
  smais7
  smais12
  smais14
  smais16
  smais18
  smaisUnrated
}

"""
The video's rating from Statens medieråd (Sweden's National Media Council).
"""
enum mutation_youtube_videos_insert_contentDetails_contentRating_smsaRating {
  smsaUnspecified
  smsaA
  smsa7
  smsa11
  smsa15
  smsaUnrated
}

"""The video's TV Parental Guidelines (TVPG) rating."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_tvpgRating {
  tvpgUnspecified
  tvpgY
  tvpgY7
  tvpgY7Fv
  tvpgG
  tvpgPg
  pg14
  tvpgMa
  tvpgUnrated
}

"""A rating that YouTube uses to identify age-restricted content."""
enum mutation_youtube_videos_insert_contentDetails_contentRating_ytRating {
  ytUnspecified
  ytAgeRestricted
}

"""Rights management policy for YouTube resources."""
type AccessPolicy {
  """
  The value of allowed indicates whether the access to the policy is allowed or denied by default.
  """
  allowed: Boolean

  """
  A list of region codes that identify countries where the default policy do not apply.
  """
  exception: [String]
}

"""
The value of definition indicates whether the video is available in high definition or only in standard definition.
"""
enum mutation_youtube_videos_insert_contentDetails_definition {
  sd
  hd
}

"""Specifies the projection format of the video."""
enum mutation_youtube_videos_insert_contentDetails_projection {
  rectangular
  _360
}

"""DEPRECATED Region restriction of the video."""
type VideoContentDetailsRegionRestriction {
  """
  A list of region codes that identify countries where the video is viewable. If this property is present and a country is not listed in its value, then the video is blocked from appearing in that country. If this property is present and contains an empty list, the video is blocked in all countries.
  """
  allowed: [String]

  """
  A list of region codes that identify countries where the video is blocked. If this property is present and a country is not listed in its value, then the video is viewable in that country. If this property is present and contains an empty list, the video is viewable in all countries.
  """
  blocked: [String]
}

"""
Describes original video file properties, including technical details about audio and video streams, but also metadata information like content length, digitization time, or geotagging information.
"""
type VideoFileDetails {
  """
  A list of audio streams contained in the uploaded video file. Each item in the list contains detailed metadata about an audio stream.
  """
  audioStreams: [VideoFileDetailsAudioStream]

  """
  The uploaded video file's combined (video and audio) bitrate in bits per second.
  """
  bitrateBps: String

  """The uploaded video file's container format."""
  container: String

  """
  The date and time when the uploaded video file was created. The value is specified in ISO 8601 format. Currently, the following ISO 8601 formats are supported: - Date only: YYYY-MM-DD - Naive time: YYYY-MM-DDTHH:MM:SS - Time with timezone: YYYY-MM-DDTHH:MM:SS+HH:MM
  """
  creationTime: String

  """The length of the uploaded video in milliseconds."""
  durationMs: String

  """
  The uploaded file's name. This field is present whether a video file or another type of file was uploaded.
  """
  fileName: String

  """
  The uploaded file's size in bytes. This field is present whether a video file or another type of file was uploaded.
  """
  fileSize: String
  fileType: mutation_youtube_videos_insert_fileDetails_fileType

  """
  A list of video streams contained in the uploaded video file. Each item in the list contains detailed metadata about a video stream.
  """
  videoStreams: [VideoFileDetailsVideoStream]
}

"""Information about an audio stream."""
type VideoFileDetailsAudioStream {
  """The audio stream's bitrate, in bits per second."""
  bitrateBps: String

  """The number of audio channels that the stream contains."""
  channelCount: Int

  """The audio codec that the stream uses."""
  codec: String

  """
  A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.
  """
  vendor: String
}

"""
The uploaded file's type as detected by YouTube's video processing engine. Currently, YouTube only processes video files, but this field is present whether a video file or another type of file was uploaded.
"""
enum mutation_youtube_videos_insert_fileDetails_fileType {
  video
  audio
  image
  archive
  document
  project
  other
}

"""Information about a video stream."""
type VideoFileDetailsVideoStream {
  """
  The video content's display aspect ratio, which specifies the aspect ratio in which the video should be displayed.
  """
  aspectRatio: Float

  """The video stream's bitrate, in bits per second."""
  bitrateBps: String

  """The video codec that the stream uses."""
  codec: String

  """The video stream's frame rate, in frames per second."""
  frameRateFps: Float

  """The encoded video content's height in pixels."""
  heightPixels: Int
  rotation: mutation_youtube_videos_insert_fileDetails_videoStreams_items_rotation

  """
  A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.
  """
  vendor: String

  """
  The encoded video content's width in pixels. You can calculate the video's encoding aspect ratio as width_pixels / height_pixels.
  """
  widthPixels: Int
}

"""
The amount that YouTube needs to rotate the original source content to properly display the video.
"""
enum mutation_youtube_videos_insert_fileDetails_videoStreams_items_rotation {
  none
  clockwise
  upsideDown
  counterClockwise
  other
}

"""Details about the live streaming metadata."""
type VideoLiveStreamingDetails {
  """
  The ID of the currently active live chat attached to this video. This field is filled only if the video is a currently live broadcast that has live chat. Once the broadcast transitions to complete this field will be removed and the live chat closed down. For persistent broadcasts that live chat id will no longer be tied to this video but rather to the new video being displayed at the persistent page.
  """
  activeLiveChatId: String

  """
  The time that the broadcast actually ended. This value will not be available until the broadcast is over.
  """
  actualEndTime: DateTime

  """
  The time that the broadcast actually started. This value will not be available until the broadcast begins.
  """
  actualStartTime: DateTime

  """
  The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended.
  """
  concurrentViewers: String

  """
  The time that the broadcast is scheduled to end. If the value is empty or the property is not present, then the broadcast is scheduled to contiue indefinitely.
  """
  scheduledEndTime: DateTime

  """The time that the broadcast is scheduled to begin."""
  scheduledStartTime: DateTime
}

"""
The localizations object contains localized versions of the basic details about the video, such as its title and description.
"""
type mutation_youtube_videos_insert_localizations {
  additionalProperties: [VideoLocalization_entry]
}

type VideoLocalization_entry {
  key: ID!
  value: VideoLocalization
}

"""Localized versions of certain video properties (e.g. title)."""
type VideoLocalization {
  """Localized version of the video's description."""
  description: String

  """Localized version of the video's title."""
  title: String
}

"""Details about monetization of a YouTube Video."""
type VideoMonetizationDetails {
  access: AccessPolicy
}

"""Player to be used for a video playback."""
type VideoPlayer {
  embedHeight: BigInt

  """An <iframe> tag that embeds a player that will play the video."""
  embedHtml: String

  """The embed width"""
  embedWidth: BigInt
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

"""
Describes processing status and progress and availability of some other Video resource parts.
"""
type VideoProcessingDetails {
  """
  This value indicates whether video editing suggestions, which might improve video quality or the playback experience, are available for the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
  """
  editorSuggestionsAvailability: String

  """
  This value indicates whether file details are available for the uploaded video. You can retrieve a video's file details by requesting the fileDetails part in your videos.list() request.
  """
  fileDetailsAvailability: String
  processingFailureReason: mutation_youtube_videos_insert_processingDetails_processingFailureReason

  """
  This value indicates whether the video processing engine has generated suggestions that might improve YouTube's ability to process the the video, warnings that explain video processing problems, or errors that cause video processing problems. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
  """
  processingIssuesAvailability: String
  processingProgress: VideoProcessingDetailsProcessingProgress
  processingStatus: mutation_youtube_videos_insert_processingDetails_processingStatus

  """
  This value indicates whether keyword (tag) suggestions are available for the video. Tags can be added to a video's metadata to make it easier for other users to find the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
  """
  tagSuggestionsAvailability: String

  """
  This value indicates whether thumbnail images have been generated for the video.
  """
  thumbnailsAvailability: String
}

"""
The reason that YouTube failed to process the video. This property will only have a value if the processingStatus property's value is failed.
"""
enum mutation_youtube_videos_insert_processingDetails_processingFailureReason {
  uploadFailed
  transcodeFailed
  streamingFailed
  other
}

"""Video processing progress and completion time estimate."""
type VideoProcessingDetailsProcessingProgress {
  """
  The number of parts of the video that YouTube has already processed. You can estimate the percentage of the video that YouTube has already processed by calculating: 100 * parts_processed / parts_total Note that since the estimated number of parts could increase without a corresponding increase in the number of parts that have already been processed, it is possible that the calculated progress could periodically decrease while YouTube processes a video.
  """
  partsProcessed: String

  """
  An estimate of the total number of parts that need to be processed for the video. The number may be updated with more precise estimates while YouTube processes the video.
  """
  partsTotal: String

  """
  An estimate of the amount of time, in millseconds, that YouTube needs to finish processing the video.
  """
  timeLeftMs: String
}

"""
The video's processing status. This value indicates whether YouTube was able to process the video or if the video is still being processed.
"""
enum mutation_youtube_videos_insert_processingDetails_processingStatus {
  processing
  succeeded
  failed
  terminated
}

"""Recording information associated with the video."""
type VideoRecordingDetails {
  location: GeoPoint

  """The text description of the location where the video was recorded."""
  locationDescription: String

  """The date and time when the video was recorded."""
  recordingDate: DateTime
}

"""Geographical coordinates of a point, in WGS84."""
type GeoPoint {
  """Altitude above the reference ellipsoid, in meters."""
  altitude: Float

  """Latitude in degrees."""
  latitude: Float

  """Longitude in degrees."""
  longitude: Float
}

"""
Basic details about a video, including title, description, uploader, thumbnails and category.
"""
type VideoSnippet {
  """The YouTube video category associated with the video."""
  categoryId: String

  """
  The ID that YouTube uses to uniquely identify the channel that the video was uploaded to.
  """
  channelId: String

  """Channel title for the channel that the video belongs to."""
  channelTitle: String

  """
  The default_audio_language property specifies the language spoken in the video's default audio track.
  """
  defaultAudioLanguage: String

  """The language of the videos's default snippet."""
  defaultLanguage: String

  """
  The video's description. @mutable youtube.videos.insert youtube.videos.update
  """
  description: String
  liveBroadcastContent: mutation_youtube_videos_insert_snippet_liveBroadcastContent
  localized: VideoLocalization2

  """The date and time when the video was uploaded."""
  publishedAt: DateTime

  """
  A list of keyword tags associated with the video. Tags may contain spaces.
  """
  tags: [String]
  thumbnails: ThumbnailDetails

  """
  The video's title. @mutable youtube.videos.insert youtube.videos.update
  """
  title: String
}

"""
Indicates if the video is an upcoming/active live broadcast. Or it's "none" if the video is not an upcoming/active live broadcast.
"""
enum mutation_youtube_videos_insert_snippet_liveBroadcastContent {
  none
  upcoming
  live
  completed
}

"""Localized versions of certain video properties (e.g. title)."""
type VideoLocalization2 {
  """Localized version of the video's description."""
  description: String

  """Localized version of the video's title."""
  title: String
}

"""
Statistics about the video, such as the number of times the video was viewed or liked.
"""
type VideoStatistics {
  """The number of comments for the video."""
  commentCount: String

  """
  The number of users who have indicated that they disliked the video by giving it a negative rating.
  """
  dislikeCount: String

  """
  The number of users who currently have the video marked as a favorite video.
  """
  favoriteCount: String

  """
  The number of users who have indicated that they liked the video by giving it a positive rating.
  """
  likeCount: String

  """The number of times the video has been viewed."""
  viewCount: String
}

"""
Basic details about a video category, such as its localized title. Next Id: 18
"""
type VideoStatus {
  """
  This value indicates if the video can be embedded on another website. @mutable youtube.videos.insert youtube.videos.update
  """
  embeddable: Boolean
  failureReason: mutation_youtube_videos_insert_status_failureReason
  license: mutation_youtube_videos_insert_status_license
  madeForKids: Boolean
  privacyStatus: mutation_youtube_videos_insert_status_privacyStatus

  """
  This value indicates if the extended video statistics on the watch page can be viewed by everyone. Note that the view count, likes, etc will still be visible if this is disabled. @mutable youtube.videos.insert youtube.videos.update
  """
  publicStatsViewable: Boolean

  """
  The date and time when the video is scheduled to publish. It can be set only if the privacy status of the video is private..
  """
  publishAt: DateTime
  rejectionReason: mutation_youtube_videos_insert_status_rejectionReason
  selfDeclaredMadeForKids: Boolean
  uploadStatus: mutation_youtube_videos_insert_status_uploadStatus
}

"""
This value explains why a video failed to upload. This property is only present if the uploadStatus property indicates that the upload failed.
"""
enum mutation_youtube_videos_insert_status_failureReason {
  conversion
  invalidFile
  emptyFile
  tooSmall
  codec
  uploadAborted
}

"""
The video's license. @mutable youtube.videos.insert youtube.videos.update
"""
enum mutation_youtube_videos_insert_status_license {
  youtube
  creativeCommon
}

"""The video's privacy status."""
enum mutation_youtube_videos_insert_status_privacyStatus {
  public
  unlisted
  private
}

"""
This value explains why YouTube rejected an uploaded video. This property is only present if the uploadStatus property indicates that the upload was rejected.
"""
enum mutation_youtube_videos_insert_status_rejectionReason {
  copyright
  inappropriate
  duplicate
  termsOfUse
  uploaderAccountSuspended
  length
  claim
  uploaderAccountClosed
  trademark
  legal
}

"""The status of the uploaded video."""
enum mutation_youtube_videos_insert_status_uploadStatus {
  uploaded
  processed
  failed
  rejected
  deleted
}

"""
Specifies suggestions on how to improve video content, including encoding hints, tag suggestions, and editor suggestions.
"""
type VideoSuggestions {
  """
  A list of video editing operations that might improve the video quality or playback experience of the uploaded video.
  """
  editorSuggestions: [mutation_youtube_videos_insert_suggestions_editorSuggestions_items]

  """
  A list of errors that will prevent YouTube from successfully processing the uploaded video video. These errors indicate that, regardless of the video's current processing status, eventually, that status will almost certainly be failed.
  """
  processingErrors: [mutation_youtube_videos_insert_suggestions_processingErrors_items]

  """
  A list of suggestions that may improve YouTube's ability to process the video.
  """
  processingHints: [mutation_youtube_videos_insert_suggestions_processingHints_items]

  """
  A list of reasons why YouTube may have difficulty transcoding the uploaded video or that might result in an erroneous transcoding. These warnings are generated before YouTube actually processes the uploaded video file. In addition, they identify issues that are unlikely to cause the video processing to fail but that might cause problems such as sync issues, video artifacts, or a missing audio track.
  """
  processingWarnings: [mutation_youtube_videos_insert_suggestions_processingWarnings_items]

  """
  A list of keyword tags that could be added to the video's metadata to increase the likelihood that users will locate your video when searching or browsing on YouTube.
  """
  tagSuggestions: [VideoSuggestionsTagSuggestion]
}

enum mutation_youtube_videos_insert_suggestions_editorSuggestions_items {
  videoAutoLevels
  videoStabilize
  videoCrop
  audioQuietAudioSwap
}

enum mutation_youtube_videos_insert_suggestions_processingErrors_items {
  audioFile
  imageFile
  projectFile
  notAVideoFile
  docFile
  archiveFile
  unsupportedSpatialAudioLayout
}

enum mutation_youtube_videos_insert_suggestions_processingHints_items {
  nonStreamableMov
  sendBestQualityVideo
  sphericalVideo
  spatialAudio
  vrVideo
  hdrVideo
}

enum mutation_youtube_videos_insert_suggestions_processingWarnings_items {
  unknownContainer
  unknownVideoCodec
  unknownAudioCodec
  inconsistentResolution
  hasEditlist
  problematicVideoCodec
  problematicAudioCodec
  unsupportedVrStereoMode
  unsupportedSphericalProjectionType
  unsupportedHdrPixelFormat
  unsupportedHdrColorMetadata
  problematicHdrLookupTable
}

"""A single tag suggestion with it's relevance information."""
type VideoSuggestionsTagSuggestion {
  """
  A set of video categories for which the tag is relevant. You can use this information to display appropriate tag suggestions based on the video category that the video uploader associates with the video. By default, tag suggestions are relevant for all categories if there are no restricts defined for the keyword.
  """
  categoryRestricts: [String]

  """The keyword tag suggested for the video."""
  tag: String
}

"""Freebase topic information related to the video."""
type VideoTopicDetails {
  """
  Similar to topic_id, except that these topics are merely relevant to the video. These are topics that may be mentioned in, or appear in the video. You can retrieve information about each topic using Freebase Topic API.
  """
  relevantTopicIds: [String]

  """
  A list of Wikipedia URLs that provide a high-level description of the video's content.
  """
  topicCategories: [String]

  """
  A list of Freebase topic IDs that are centrally associated with the video. These are topics that are centrally featured in the video, and it can be said that the video is mainly about each of these. You can retrieve information about each topic using the < a href="http://wiki.freebase.com/wiki/Topic_API">Freebase Topic API.
  """
  topicIds: [String]
}

"""Return the videos that are in the specified chart."""
enum queryInput_youtube_videos_list_chart {
  chartUnspecified
  mostPopular
}

"""
Return videos liked/disliked by the authenticated user. Does not support RateType.RATED_TYPE_NONE.
"""
enum queryInput_youtube_videos_list_myRating {
  none
  like
  dislike
}

type VideoGetRatingResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String

  """A list of ratings that match the request criteria."""
  items: [VideoRating]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#videoGetRatingResponse".
  """
  kind: String

  """The visitorId identifies the visitor."""
  visitorId: String
}

"""Basic details about rating of a video."""
type VideoRating {
  rating: query_youtube_videos_getRating_items_items_rating

  """The ID that YouTube uses to uniquely identify the video."""
  videoId: String
}

"""Rating of a video."""
enum query_youtube_videos_getRating_items_items_rating {
  none
  like
  dislike
}

type Mutation {
  """Inserts a new resource into this collection."""
  youtube_abuseReports_insert(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    """
    part: [String]!
    input: AbuseReport_Input
  ): AbuseReport

  """Deletes a resource."""
  youtube_captions_delete(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String
    id: String!

    """
    ID of the Google+ Page for the channel that the request is be on behalf of
    """
    onBehalfOf: String

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String
  ): JSON

  """Inserts a new resource into this collection."""
  youtube_captions_insert(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies the caption resource parts that the API response will include. Set the parameter value to snippet.
    """
    part: [String]!

    """
    ID of the Google+ Page for the channel that the request is be on behalf of
    """
    onBehalfOf: String

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    Extra parameter to allow automatically syncing the uploaded caption/transcript with the audio.
    """
    sync: Boolean
    input: Caption_Input
  ): Caption

  """Updates an existing resource."""
  youtube_captions_update(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies a comma-separated list of one or more caption resource parts that the API response will include. The part names that you can include in the parameter value are id and snippet.
    """
    part: [String]!

    """
    ID of the Google+ Page for the channel that the request is on behalf of.
    """
    onBehalfOf: String

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    Extra parameter to allow automatically syncing the uploaded caption/transcript with the audio.
    """
    sync: Boolean
    input: Caption_Input
  ): Caption

  """Inserts a new resource into this collection."""
  youtube_channelBanners_insert(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    Unused, channel_id is currently derived from the security context of the requestor.
    """
    channelId: String

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    """
    onBehalfOfContentOwnerChannel: String
    input: ChannelBannerResource_Input
  ): ChannelBannerResource

  """Deletes a resource."""
  youtube_channelSections_delete(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String
    id: String!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String
  ): JSON

  """Inserts a new resource into this collection."""
  youtube_channelSections_insert(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part names that you can include in the parameter value are snippet and contentDetails.
    """
    part: [String]!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    """
    onBehalfOfContentOwnerChannel: String
    input: ChannelSection_Input
  ): ChannelSection

  """Updates an existing resource."""
  youtube_channelSections_update(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part names that you can include in the parameter value are snippet and contentDetails.
    """
    part: [String]!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String
    input: ChannelSection_Input
  ): ChannelSection

  """Updates an existing resource."""
  youtube_channels_update(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The API currently only allows the parameter value to be set to either brandingSettings or invideoPromotion. (You cannot update both of those parts with a single request.) Note that this method overrides the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies.
    """
    part: [String]!

    """
    The *onBehalfOfContentOwner* parameter indicates that the authenticated user is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with needs to be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String
    input: Channel_Input
  ): Channel

  """Inserts a new resource into this collection."""
  youtube_commentThreads_insert(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter identifies the properties that the API response will include. Set the parameter value to snippet. The snippet part has a quota cost of 2 units.
    """
    part: [String]!
    input: CommentThread_Input
  ): CommentThread

  """Updates an existing resource."""
  youtube_youtube_v3_updateCommentThreads(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies a comma-separated list of commentThread resource properties that the API response will include. You must at least include the snippet part in the parameter value since that part contains all of the properties that the API request can update.
    """
    part: [String]
    input: CommentThread_Input
  ): CommentThread

  """Deletes a resource."""
  youtube_comments_delete(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String
    id: String!
  ): JSON

  """Inserts a new resource into this collection."""
  youtube_comments_insert(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter identifies the properties that the API response will include. Set the parameter value to snippet. The snippet part has a quota cost of 2 units.
    """
    part: [String]!
    input: Comment_Input
  ): Comment

  """Updates an existing resource."""
  youtube_comments_update(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter identifies the properties that the API response will include. You must at least include the snippet part in the parameter value since that part contains all of the properties that the API request can update.
    """
    part: [String]!
    input: Comment_Input
  ): Comment

  """
  Expresses the caller's opinion that one or more comments should be flagged as spam.
  """
  youtube_comments_markAsSpam(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """Flags the comments with the given IDs as spam in the caller's opinion."""
    id: [String]!
  ): JSON

  """Sets the moderation status of one or more comments."""
  youtube_comments_setModerationStatus(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """Modifies the moderation status of the comments with the given IDs"""
    id: [String]!
    moderationStatus: mutationInput_youtube_comments_setModerationStatus_moderationStatus!

    """
    If set to true the author of the comment gets added to the ban list. This means all future comments of the author will autmomatically be rejected. Only valid in combination with STATUS_REJECTED.
    """
    banAuthor: Boolean
  ): JSON

  """Delete a given broadcast."""
  youtube_liveBroadcasts_delete(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """Broadcast to delete."""
    id: String!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    """
    onBehalfOfContentOwnerChannel: String
  ): JSON

  """Inserts a new stream for the authenticated user."""
  youtube_liveBroadcasts_insert(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, contentDetails, and status.
    """
    part: [String]!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    """
    onBehalfOfContentOwnerChannel: String
    input: LiveBroadcast_Input
  ): LiveBroadcast

  """Updates an existing broadcast for the authenticated user."""
  youtube_liveBroadcasts_update(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, contentDetails, and status. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a broadcast's privacy status is defined in the status part. As such, if your request is updating a private or unlisted broadcast, and the request's part parameter value includes the status part, the broadcast's privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the broadcast will revert to the default privacy setting.
    """
    part: [String]!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    """
    onBehalfOfContentOwnerChannel: String
    input: LiveBroadcast_Input
  ): LiveBroadcast

  """Bind a broadcast to a stream."""
  youtube_liveBroadcasts_bind(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """Broadcast to bind to the stream"""
    id: String!

    """
    The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.
    """
    part: [String]!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    """
    onBehalfOfContentOwnerChannel: String

    """Stream to bind, if not set unbind the current one."""
    streamId: String
  ): LiveBroadcast

  """Insert cuepoints in a broadcast"""
  youtube_liveBroadcasts_insertCuepoint(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    Broadcast to insert ads to, or equivalently `external_video_id` for internal use.
    """
    id: String

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    """
    onBehalfOfContentOwnerChannel: String

    """
    The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.
    """
    part: [String]
    input: Cuepoint_Input
  ): Cuepoint

  """Transition a broadcast to a given status."""
  youtube_liveBroadcasts_transition(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String
    broadcastStatus: mutationInput_youtube_liveBroadcasts_transition_broadcastStatus!

    """Broadcast to transition."""
    id: String!

    """
    The *part* parameter specifies a comma-separated list of one or more liveBroadcast resource properties that the API response will include. The part names that you can include in the parameter value are id, snippet, contentDetails, and status.
    """
    part: [String]!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    """
    onBehalfOfContentOwnerChannel: String
  ): LiveBroadcast

  """Deletes a chat ban."""
  youtube_liveChatBans_delete(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String
    id: String!
  ): JSON

  """Inserts a new resource into this collection."""
  youtube_liveChatBans_insert(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response returns. Set the parameter value to snippet.
    """
    part: [String]!
    input: LiveChatBan_Input
  ): LiveChatBan

  """Deletes a chat message."""
  youtube_liveChatMessages_delete(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String
    id: String!
  ): JSON

  """Inserts a new resource into this collection."""
  youtube_liveChatMessages_insert(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter serves two purposes. It identifies the properties that the write operation will set as well as the properties that the API response will include. Set the parameter value to snippet.
    """
    part: [String]!
    input: LiveChatMessage_Input
  ): LiveChatMessage

  """Deletes a chat moderator."""
  youtube_liveChatModerators_delete(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String
    id: String!
  ): JSON

  """Inserts a new resource into this collection."""
  youtube_liveChatModerators_insert(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response returns. Set the parameter value to snippet.
    """
    part: [String]!
    input: LiveChatModerator_Input
  ): LiveChatModerator

  """Deletes an existing stream for the authenticated user."""
  youtube_liveStreams_delete(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String
    id: String!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    """
    onBehalfOfContentOwnerChannel: String
  ): JSON

  """Inserts a new stream for the authenticated user."""
  youtube_liveStreams_insert(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, cdn, content_details, and status.
    """
    part: [String]!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    """
    onBehalfOfContentOwnerChannel: String
    input: LiveStream_Input
  ): LiveStream

  """Updates an existing stream for the authenticated user."""
  youtube_liveStreams_update(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. The part properties that you can include in the parameter value are id, snippet, cdn, and status. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. If the request body does not specify a value for a mutable property, the existing value for that property will be removed.
    """
    part: [String]!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    """
    onBehalfOfContentOwnerChannel: String
    input: LiveStream_Input
  ): LiveStream

  """Deletes a resource."""
  youtube_playlistItems_delete(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String
    id: String!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String
  ): JSON

  """Inserts a new resource into this collection."""
  youtube_playlistItems_insert(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    """
    part: [String]!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String
    input: PlaylistItem_Input
  ): PlaylistItem

  """Updates an existing resource."""
  youtube_playlistItems_update(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a playlist item can specify a start time and end time, which identify the times portion of the video that should play when users watch the video in the playlist. If your request is updating a playlist item that sets these values, and the request's part parameter value includes the contentDetails part, the playlist item's start and end times will be updated to whatever value the request body specifies. If the request body does not specify values, the existing start and end times will be removed and replaced with the default settings.
    """
    part: [String]!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String
    input: PlaylistItem_Input
  ): PlaylistItem

  """Deletes a resource."""
  youtube_playlists_delete(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String
    id: String!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String
  ): JSON

  """Inserts a new resource into this collection."""
  youtube_playlists_insert(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    """
    part: [String]!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    """
    onBehalfOfContentOwnerChannel: String
    input: Playlist_Input
  ): Playlist

  """Updates an existing resource."""
  youtube_playlists_update(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that this method will override the existing values for mutable properties that are contained in any parts that the request body specifies. For example, a playlist's description is contained in the snippet part, which must be included in the request body. If the request does not specify a value for the snippet.description property, the playlist's existing description will be deleted.
    """
    part: [String]!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String
    input: Playlist_Input
  ): Playlist

  """Deletes a resource."""
  youtube_subscriptions_delete(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String
    id: String!
  ): JSON

  """Inserts a new resource into this collection."""
  youtube_subscriptions_insert(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include.
    """
    part: [String]!
    input: Subscription__Input
  ): Subscription_

  """POST method."""
  youtube_tests_insert(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String
    part: [String]!
    externalChannelId: String
    input: TestItem_Input
  ): TestItem

  """Deletes a resource."""
  youtube_thirdPartyLinks_delete(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """Delete the partner links with the given linking token."""
    linkingToken: String!
    type: mutationInput_youtube_thirdPartyLinks_delete_type!

    """Channel ID to which changes should be applied, for delegation."""
    externalChannelId: String

    """Do not use. Required for compatibility."""
    part: [String]
  ): JSON

  """Inserts a new resource into this collection."""
  youtube_thirdPartyLinks_insert(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies the thirdPartyLink resource parts that the API request and response will include. Supported values are linkingToken, status, and snippet.
    """
    part: [String]!

    """Channel ID to which changes should be applied, for delegation."""
    externalChannelId: String
    input: ThirdPartyLink_Input
  ): ThirdPartyLink

  """Updates an existing resource."""
  youtube_thirdPartyLinks_update(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter specifies the thirdPartyLink resource parts that the API request and response will include. Supported values are linkingToken, status, and snippet.
    """
    part: [String]!

    """Channel ID to which changes should be applied, for delegation."""
    externalChannelId: String
    input: ThirdPartyLink_Input
  ): ThirdPartyLink

  """
  As this is not an insert in a strict sense (it supports uploading/setting of a thumbnail for multiple videos, which doesn't result in creation of a single resource), I use a custom verb here.
  """
  youtube_thumbnails_set(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """Returns the Thumbnail with the given video IDs for Stubby or Apiary."""
    videoId: String!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String
  ): ThumbnailSetResponse

  """Deletes a resource."""
  youtube_videos_delete(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String
    id: String!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String
  ): JSON

  """Inserts a new resource into this collection."""
  youtube_videos_insert(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response.
    """
    part: [String]!

    """Should auto-levels be applied to the upload."""
    autoLevels: Boolean

    """
    Notify the channel subscribers about the new video. As default, the notification is enabled.
    """
    notifySubscribers: Boolean

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String

    """
    This parameter can only be used in a properly authorized request. *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwnerChannel* parameter specifies the YouTube channel ID of the channel to which a video is being added. This parameter is required when a request specifies a value for the onBehalfOfContentOwner parameter, and it can only be used in conjunction with that parameter. In addition, the request must be authorized using a CMS account that is linked to the content owner that the onBehalfOfContentOwner parameter specifies. Finally, the channel that the onBehalfOfContentOwnerChannel parameter value specifies must be linked to the content owner that the onBehalfOfContentOwner parameter specifies. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and perform actions on behalf of the channel specified in the parameter value, without having to provide authentication credentials for each separate channel.
    """
    onBehalfOfContentOwnerChannel: String

    """Should stabilize be applied to the upload."""
    stabilize: Boolean
    input: Video_Input
  ): Video

  """Updates an existing resource."""
  youtube_videos_update(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    The *part* parameter serves two purposes in this operation. It identifies the properties that the write operation will set as well as the properties that the API response will include. Note that this method will override the existing values for all of the mutable properties that are contained in any parts that the parameter value specifies. For example, a video's privacy setting is contained in the status part. As such, if your request is updating a private video, and the request's part parameter value includes the status part, the video's privacy setting will be updated to whatever value the request body specifies. If the request body does not specify a value, the existing privacy setting will be removed and the video will revert to the default privacy setting. In addition, not all parts contain properties that can be set when inserting or updating a video. For example, the statistics object encapsulates statistics that YouTube calculates for a video and does not contain values that you can set or modify. If the parameter value specifies a part that does not contain mutable values, that part will still be included in the API response.
    """
    part: [String]!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The actual CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String
    input: Video_Input
  ): Video

  """
  Adds a like or dislike rating to a video or removes a rating from a video.
  """
  youtube_videos_rate(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String
    id: String!
    rating: mutationInput_youtube_videos_rate_rating!
  ): JSON

  """Report abuse for a video."""
  youtube_videos_reportAbuse(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String
    input: VideoAbuseReport_Input
  ): JSON

  """Allows upload of watermark image and setting it for a channel."""
  youtube_watermarks_set(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String
    channelId: String!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String
    input: InvideoBranding_Input
  ): JSON

  """Allows removal of channel watermark."""
  youtube_watermarks_unset(
    _DOLLAR__xgafv: _0xgafv_parameter

    """OAuth access token."""
    access_token: String
    alt: alt_parameter

    """JSONP"""
    callback: String

    """Selector specifying which fields to include in a partial response."""
    fields: String

    """
    API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
    """
    key: String

    """OAuth 2.0 token for the current user."""
    oauth_token: String

    """Returns response with indentations and line breaks."""
    prettyPrint: Boolean

    """
    Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
    """
    quotaUser: String

    """Upload protocol for media (e.g. "raw", "multipart")."""
    upload_protocol: String

    """Legacy upload protocol for media (e.g. "media", "multipart")."""
    uploadType: String
    channelId: String!

    """
    *Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner.
    """
    onBehalfOfContentOwner: String
  ): JSON
}

type AbuseReport {
  abuseTypes: [AbuseType]
  description: String
  relatedEntities: [RelatedEntity]
  subject: Entity
}

type AbuseType {
  id: String
}

type RelatedEntity {
  entity: Entity
}

type Entity {
  id: String
  typeId: String
  url: String
}

input AbuseReport_Input {
  abuseTypes: [AbuseType_Input]
  description: String
  relatedEntities: [RelatedEntity_Input]
  subject: Entity_Input
}

input AbuseType_Input {
  id: String
}

input RelatedEntity_Input {
  entity: Entity_Input
}

input Entity_Input {
  id: String
  typeId: String
  url: String
}

"""
A *caption* resource represents a YouTube caption track. A caption track is associated with exactly one YouTube video.
"""
input Caption_Input {
  """Etag of this resource."""
  etag: String

  """The ID that YouTube uses to uniquely identify the caption track."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#caption".
  """
  kind: String = "youtube#caption"
  snippet: CaptionSnippet_Input
}

"""Basic details about a caption track, such as its language and name."""
input CaptionSnippet_Input {
  audioTrackType: mutation_youtube_captions_insert_snippet_audioTrackType
  failureReason: mutation_youtube_captions_insert_snippet_failureReason

  """
  Indicates whether YouTube synchronized the caption track to the audio track in the video. The value will be true if a sync was explicitly requested when the caption track was uploaded. For example, when calling the captions.insert or captions.update methods, you can set the sync parameter to true to instruct YouTube to sync the uploaded track to the video. If the value is false, YouTube uses the time codes in the uploaded caption track to determine when to display captions.
  """
  isAutoSynced: Boolean

  """
  Indicates whether the track contains closed captions for the deaf and hard of hearing. The default value is false.
  """
  isCC: Boolean

  """
  Indicates whether the caption track is a draft. If the value is true, then the track is not publicly visible. The default value is false. @mutable youtube.captions.insert youtube.captions.update
  """
  isDraft: Boolean

  """
  Indicates whether caption track is formatted for "easy reader," meaning it is at a third-grade level for language learners. The default value is false.
  """
  isEasyReader: Boolean

  """
  Indicates whether the caption track uses large text for the vision-impaired. The default value is false.
  """
  isLarge: Boolean

  """
  The language of the caption track. The property value is a BCP-47 language tag.
  """
  language: String

  """The date and time when the caption track was last updated."""
  lastUpdated: DateTime

  """
  The name of the caption track. The name is intended to be visible to the user as an option during playback.
  """
  name: String
  status: mutation_youtube_captions_insert_snippet_status
  trackKind: mutation_youtube_captions_insert_snippet_trackKind

  """
  The ID that YouTube uses to uniquely identify the video associated with the caption track. @mutable youtube.captions.insert
  """
  videoId: String
}

"""
A channel banner returned as the response to a channel_banner.insert call.
"""
type ChannelBannerResource {
  etag: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#channelBannerResource".
  """
  kind: String

  """The URL of this banner image."""
  url: String
}

"""
A channel banner returned as the response to a channel_banner.insert call.
"""
input ChannelBannerResource_Input {
  etag: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#channelBannerResource".
  """
  kind: String = "youtube#channelBannerResource"

  """The URL of this banner image."""
  url: String
}

input ChannelSection_Input {
  contentDetails: ChannelSectionContentDetails_Input

  """Etag of this resource."""
  etag: String

  """The ID that YouTube uses to uniquely identify the channel section."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#channelSection".
  """
  kind: String = "youtube#channelSection"
  localizations: JSON
  snippet: ChannelSectionSnippet_Input
  targeting: ChannelSectionTargeting_Input
}

"""Details about a channelsection, including playlists and channels."""
input ChannelSectionContentDetails_Input {
  """The channel ids for type multiple_channels."""
  channels: [String]

  """
  The playlist ids for type single_playlist and multiple_playlists. For singlePlaylist, only one playlistId is allowed.
  """
  playlists: [String]
}

"""
Basic details about a channel section, including title, style and position.
"""
input ChannelSectionSnippet_Input {
  """
  The ID that YouTube uses to uniquely identify the channel that published the channel section.
  """
  channelId: String

  """The language of the channel section's default title and description."""
  defaultLanguage: String
  localized: ChannelSectionLocalization_Input2

  """The position of the channel section in the channel."""
  position: Int
  style: mutation_youtube_channelSections_insert_snippet_style

  """
  The channel section's title for multiple_playlists and multiple_channels.
  """
  title: String
  type: mutation_youtube_channelSections_insert_snippet_type
}

"""ChannelSection localization setting"""
input ChannelSectionLocalization_Input2 {
  """The localized strings for channel section's title."""
  title: String
}

"""ChannelSection targeting setting."""
input ChannelSectionTargeting_Input {
  """The country the channel section is targeting."""
  countries: [String]

  """The language the channel section is targeting."""
  languages: [String]

  """The region the channel section is targeting."""
  regions: [String]
}

"""A *channel* resource contains information about a YouTube channel."""
input Channel_Input {
  auditDetails: ChannelAuditDetails_Input
  brandingSettings: ChannelBrandingSettings_Input
  contentDetails: ChannelContentDetails_Input
  contentOwnerDetails: ChannelContentOwnerDetails_Input
  conversionPings: ChannelConversionPings_Input

  """Etag of this resource."""
  etag: String

  """The ID that YouTube uses to uniquely identify the channel."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#channel".
  """
  kind: String = "youtube#channel"
  localizations: JSON
  snippet: ChannelSnippet_Input
  statistics: ChannelStatistics_Input
  status: ChannelStatus_Input
  topicDetails: ChannelTopicDetails_Input
}

"""
The auditDetails object encapsulates channel data that is relevant for YouTube Partners during the audit process.
"""
input ChannelAuditDetails_Input {
  """Whether or not the channel respects the community guidelines."""
  communityGuidelinesGoodStanding: Boolean

  """Whether or not the channel has any unresolved claims."""
  contentIdClaimsGoodStanding: Boolean

  """Whether or not the channel has any copyright strikes."""
  copyrightStrikesGoodStanding: Boolean
}

"""Branding properties of a YouTube channel."""
input ChannelBrandingSettings_Input {
  channel: ChannelSettings_Input

  """Additional experimental branding properties."""
  hints: [PropertyValue_Input]
  image: ImageSettings_Input
  watch: WatchSettings_Input
}

"""Branding properties for the channel view."""
input ChannelSettings_Input {
  """The country of the channel."""
  country: String
  defaultLanguage: String

  """Which content tab users should see when viewing the channel."""
  defaultTab: String

  """Specifies the channel description."""
  description: String

  """Title for the featured channels tab."""
  featuredChannelsTitle: String

  """The list of featured channels."""
  featuredChannelsUrls: [String]

  """Lists keywords associated with the channel, comma-separated."""
  keywords: String

  """
  Whether user-submitted comments left on the channel page need to be approved by the channel owner to be publicly visible.
  """
  moderateComments: Boolean

  """A prominent color that can be rendered on this channel page."""
  profileColor: String

  """Whether the tab to browse the videos should be displayed."""
  showBrowseView: Boolean

  """Whether related channels should be proposed."""
  showRelatedChannels: Boolean

  """Specifies the channel title."""
  title: String

  """
  The ID for a Google Analytics account to track and measure traffic to the channels.
  """
  trackingAnalyticsAccountId: String

  """The trailer of the channel, for users that are not subscribers."""
  unsubscribedTrailer: String
}

"""A pair Property / Value."""
input PropertyValue_Input {
  """A property."""
  property: String

  """The property's value."""
  value: String
}

"""Branding properties for images associated with the channel."""
input ImageSettings_Input {
  backgroundImageUrl: LocalizedProperty_Input

  """
  This is generated when a ChannelBanner.Insert request has succeeded for the given channel.
  """
  bannerExternalUrl: String

  """Banner image. Desktop size (1060x175)."""
  bannerImageUrl: String

  """Banner image. Mobile size high resolution (1440x395)."""
  bannerMobileExtraHdImageUrl: String

  """Banner image. Mobile size high resolution (1280x360)."""
  bannerMobileHdImageUrl: String

  """Banner image. Mobile size (640x175)."""
  bannerMobileImageUrl: String

  """Banner image. Mobile size low resolution (320x88)."""
  bannerMobileLowImageUrl: String

  """Banner image. Mobile size medium/high resolution (960x263)."""
  bannerMobileMediumHdImageUrl: String

  """Banner image. Tablet size extra high resolution (2560x424)."""
  bannerTabletExtraHdImageUrl: String

  """Banner image. Tablet size high resolution (2276x377)."""
  bannerTabletHdImageUrl: String

  """Banner image. Tablet size (1707x283)."""
  bannerTabletImageUrl: String

  """Banner image. Tablet size low resolution (1138x188)."""
  bannerTabletLowImageUrl: String

  """Banner image. TV size high resolution (1920x1080)."""
  bannerTvHighImageUrl: String

  """Banner image. TV size extra high resolution (2120x1192)."""
  bannerTvImageUrl: String

  """Banner image. TV size low resolution (854x480)."""
  bannerTvLowImageUrl: String

  """Banner image. TV size medium resolution (1280x720)."""
  bannerTvMediumImageUrl: String
  largeBrandedBannerImageImapScript: LocalizedProperty_Input
  largeBrandedBannerImageUrl: LocalizedProperty_Input
  smallBrandedBannerImageImapScript: LocalizedProperty_Input
  smallBrandedBannerImageUrl: LocalizedProperty_Input

  """
  The URL for a 1px by 1px tracking pixel that can be used to collect statistics for views of the channel or video pages.
  """
  trackingImageUrl: String
  watchIconImageUrl: String
}

input LocalizedProperty_Input {
  defaultLanguage: LanguageTag_Input
  localized: [LocalizedString_Input]
}

input LanguageTag_Input {
  value: String
}

input LocalizedString_Input {
  language: String
  value: String
}

"""Branding properties for the watch. All deprecated."""
input WatchSettings_Input {
  """The text color for the video watch page's branded area."""
  backgroundColor: String

  """
  An ID that uniquely identifies a playlist that displays next to the video player.
  """
  featuredPlaylistId: String

  """The background color for the video watch page's branded area."""
  textColor: String
}

"""Details about the content of a channel."""
input ChannelContentDetails_Input {
  relatedPlaylists: mutation_youtube_channels_update_contentDetails_relatedPlaylists_Input
}

input mutation_youtube_channels_update_contentDetails_relatedPlaylists_Input {
  """
  The ID of the playlist that contains the channel"s favorite videos. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
  """
  favorites: String

  """
  The ID of the playlist that contains the channel"s liked videos. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
  """
  likes: String

  """
  The ID of the playlist that contains the channel"s uploaded videos. Use the videos.insert method to upload new videos and the videos.delete method to delete previously uploaded videos.
  """
  uploads: String

  """
  The ID of the playlist that contains the channel"s watch history. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
  """
  watchHistory: String

  """
  The ID of the playlist that contains the channel"s watch later playlist. Use the playlistItems.insert and playlistItems.delete to add or remove items from that list.
  """
  watchLater: String
}

"""
The contentOwnerDetails object encapsulates channel data that is relevant for YouTube Partners linked with the channel.
"""
input ChannelContentOwnerDetails_Input {
  """The ID of the content owner linked to the channel."""
  contentOwner: String

  """The date and time when the channel was linked to the content owner."""
  timeLinked: DateTime
}

"""
The conversionPings object encapsulates information about conversion pings that need to be respected by the channel.
"""
input ChannelConversionPings_Input {
  """
  Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping.
  """
  pings: [ChannelConversionPing_Input]
}

"""
Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping.
"""
input ChannelConversionPing_Input {
  context: mutation_youtube_channels_update_conversionPings_pings_items_context

  """
  The url (without the schema) that the player shall send the ping to. It's at caller's descretion to decide which schema to use (http vs https) Example of a returned url: //googleads.g.doubleclick.net/pagead/ viewthroughconversion/962985656/?data=path%3DtHe_path%3Btype%3D cview%3Butuid%3DGISQtTNGYqaYl4sKxoVvKA&labe=default The caller must append biscotti authentication (ms param in case of mobile, for example) to this ping.
  """
  conversionUrl: String
}

"""
Basic details about a channel, including title, description and thumbnails.
"""
input ChannelSnippet_Input {
  """The country of the channel."""
  country: String

  """The custom url of the channel."""
  customUrl: String

  """The language of the channel's default title and description."""
  defaultLanguage: String

  """The description of the channel."""
  description: String
  localized: ChannelLocalization_Input2

  """The date and time that the channel was created."""
  publishedAt: DateTime
  thumbnails: ThumbnailDetails_Input

  """The channel's title."""
  title: String
}

"""Channel localization setting"""
input ChannelLocalization_Input2 {
  """The localized strings for channel's description."""
  description: String

  """The localized strings for channel's title."""
  title: String
}

"""Internal representation of thumbnails for a YouTube resource."""
input ThumbnailDetails_Input {
  high: Thumbnail_Input
  maxres: Thumbnail_Input
  medium: Thumbnail_Input
  standard: Thumbnail_Input
}

"""A thumbnail is an image representing a YouTube resource."""
input Thumbnail_Input {
  """(Optional) Height of the thumbnail image."""
  height: Int

  """The thumbnail image's URL."""
  url: String

  """(Optional) Width of the thumbnail image."""
  width: Int
}

"""
Statistics about a channel: number of subscribers, number of videos in the channel, etc.
"""
input ChannelStatistics_Input {
  """The number of comments for the channel."""
  commentCount: String

  """Whether or not the number of subscribers is shown for this user."""
  hiddenSubscriberCount: Boolean

  """The number of subscribers that the channel has."""
  subscriberCount: String

  """The number of videos uploaded to the channel."""
  videoCount: String

  """The number of times the channel has been viewed."""
  viewCount: String
}

"""JSON template for the status part of a channel."""
input ChannelStatus_Input {
  """
  If true, then the user is linked to either a YouTube username or G+ account. Otherwise, the user doesn't have a public YouTube identity.
  """
  isLinked: Boolean
  longUploadsStatus: mutation_youtube_channels_update_status_longUploadsStatus
  madeForKids: Boolean
  privacyStatus: mutation_youtube_channels_update_status_privacyStatus
  selfDeclaredMadeForKids: Boolean
}

"""Freebase topic information related to the channel."""
input ChannelTopicDetails_Input {
  """A list of Wikipedia URLs that describe the channel's content."""
  topicCategories: [String]

  """
  A list of Freebase topic IDs associated with the channel. You can retrieve information about each topic using the Freebase Topic API.
  """
  topicIds: [String]
}

"""
A *comment thread* represents information that applies to a top level comment and all its replies. It can also include the top level comment itself and some of the replies.
"""
input CommentThread_Input {
  """Etag of this resource."""
  etag: String

  """The ID that YouTube uses to uniquely identify the comment thread."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#commentThread".
  """
  kind: String = "youtube#commentThread"
  replies: CommentThreadReplies_Input
  snippet: CommentThreadSnippet_Input
}

"""
Comments written in (direct or indirect) reply to the top level comment.
"""
input CommentThreadReplies_Input {
  """
  A limited number of replies. Unless the number of replies returned equals total_reply_count in the snippet the returned replies are only a subset of the total number of replies.
  """
  comments: [Comment_Input]
}

"""A *comment* represents a single YouTube comment."""
input Comment_Input {
  """Etag of this resource."""
  etag: String

  """The ID that YouTube uses to uniquely identify the comment."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#comment".
  """
  kind: String = "youtube#comment"
  snippet: CommentSnippet_Input
}

"""Basic details about a comment, such as its author and text."""
input CommentSnippet_Input {
  authorChannelId: CommentSnippetAuthorChannelId_Input

  """Link to the author's YouTube channel, if any."""
  authorChannelUrl: String

  """The name of the user who posted the comment."""
  authorDisplayName: String

  """The URL for the avatar of the user who posted the comment."""
  authorProfileImageUrl: String

  """Whether the current viewer can rate this comment."""
  canRate: Boolean

  """
  The id of the corresponding YouTube channel. In case of a channel comment this is the channel the comment refers to. In case of a video comment it's the video's channel.
  """
  channelId: String

  """The total number of likes this comment has received."""
  likeCount: Int
  moderationStatus: mutation_youtube_commentThreads_insert_replies_comments_items_snippet_moderationStatus

  """The unique id of the parent comment, only set for replies."""
  parentId: String

  """The date and time when the comment was originally published."""
  publishedAt: DateTime

  """
  The comment's text. The format is either plain text or HTML dependent on what has been requested. Even the plain text representation may differ from the text originally posted in that it may replace video links with video titles etc.
  """
  textDisplay: String

  """
  The comment's original raw text as initially posted or last updated. The original text will only be returned if it is accessible to the viewer, which is only guaranteed if the viewer is the comment's author.
  """
  textOriginal: String

  """The date and time when the comment was last updated."""
  updatedAt: DateTime

  """The ID of the video the comment refers to, if any."""
  videoId: String
  viewerRating: mutation_youtube_commentThreads_insert_replies_comments_items_snippet_viewerRating
}

"""The id of the author's YouTube channel, if any."""
input CommentSnippetAuthorChannelId_Input {
  value: String
}

"""Basic details about a comment thread."""
input CommentThreadSnippet_Input {
  """
  Whether the current viewer of the thread can reply to it. This is viewer specific - other viewers may see a different value for this field.
  """
  canReply: Boolean

  """
  The YouTube channel the comments in the thread refer to or the channel with the video the comments refer to. If video_id isn't set the comments refer to the channel itself.
  """
  channelId: String

  """
  Whether the thread (and therefore all its comments) is visible to all YouTube users.
  """
  isPublic: Boolean
  topLevelComment: Comment_Input

  """The total number of replies (not including the top level comment)."""
  totalReplyCount: Int

  """
  The ID of the video the comments refer to, if any. No video_id implies a channel discussion comment.
  """
  videoId: String
}

"""
Specifies the requested moderation status. Note, comments can be in statuses, which are not available through this call. For example, this call does not allow to mark a comment as 'likely spam'. Valid values: MODERATION_STATUS_PUBLISHED, MODERATION_STATUS_HELD_FOR_REVIEW, MODERATION_STATUS_REJECTED.
"""
enum mutationInput_youtube_comments_setModerationStatus_moderationStatus {
  published
  heldForReview
  likelySpam
  rejected
}

"""
A *liveBroadcast* resource represents an event that will be streamed, via live video, on YouTube.
"""
input LiveBroadcast_Input {
  contentDetails: LiveBroadcastContentDetails_Input

  """Etag of this resource."""
  etag: String

  """The ID that YouTube assigns to uniquely identify the broadcast."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#liveBroadcast".
  """
  kind: String = "youtube#liveBroadcast"
  snippet: LiveBroadcastSnippet_Input
  statistics: LiveBroadcastStatistics_Input
  status: LiveBroadcastStatus_Input
}

"""Detailed settings of a broadcast."""
input LiveBroadcastContentDetails_Input {
  """This value uniquely identifies the live stream bound to the broadcast."""
  boundStreamId: String

  """
  The date and time that the live stream referenced by boundStreamId was last updated.
  """
  boundStreamLastUpdateTimeMs: DateTime
  closedCaptionsType: mutation_youtube_liveBroadcasts_insert_contentDetails_closedCaptionsType

  """
  This setting indicates whether auto start is enabled for this broadcast. The default value for this property is false. This setting can only be used by Events.
  """
  enableAutoStart: Boolean

  """
  This setting indicates whether auto stop is enabled for this broadcast. The default value for this property is false. This setting can only be used by Events.
  """
  enableAutoStop: Boolean

  """
  This setting indicates whether HTTP POST closed captioning is enabled for this broadcast. The ingestion URL of the closed captions is returned through the liveStreams API. This is mutually exclusive with using the closed_captions_type property, and is equivalent to setting closed_captions_type to CLOSED_CAPTIONS_HTTP_POST.
  """
  enableClosedCaptions: Boolean

  """
  This setting indicates whether YouTube should enable content encryption for the broadcast.
  """
  enableContentEncryption: Boolean

  """
  This setting determines whether viewers can access DVR controls while watching the video. DVR controls enable the viewer to control the video playback experience by pausing, rewinding, or fast forwarding content. The default value for this property is true. *Important:* You must set the value to true and also set the enableArchive property's value to true if you want to make playback available immediately after the broadcast ends.
  """
  enableDvr: Boolean

  """
  This setting indicates whether the broadcast video can be played in an embedded player. If you choose to archive the video (using the enableArchive property), this setting will also apply to the archived video.
  """
  enableEmbed: Boolean

  """Indicates whether this broadcast has low latency enabled."""
  enableLowLatency: Boolean
  latencyPreference: mutation_youtube_liveBroadcasts_insert_contentDetails_latencyPreference

  """
  The mesh for projecting the video if projection is mesh. The mesh value must be a UTF-8 string containing the base-64 encoding of 3D mesh data that follows the Spherical Video V2 RFC specification for an mshp box, excluding the box size and type but including the following four reserved zero bytes for the version and flags.
  """
  mesh: Byte
  monitorStream: MonitorStreamInfo_Input
  projection: mutation_youtube_liveBroadcasts_insert_contentDetails_projection

  """
  Automatically start recording after the event goes live. The default value for this property is true. *Important:* You must also set the enableDvr property's value to true if you want the playback to be available immediately after the broadcast ends. If you set this property's value to true but do not also set the enableDvr property to true, there may be a delay of around one day before the archived video will be available for playback.
  """
  recordFromStart: Boolean

  """
  This setting indicates whether the broadcast should automatically begin with an in-stream slate when you update the broadcast's status to live. After updating the status, you then need to send a liveCuepoints.insert request that sets the cuepoint's eventState to end to remove the in-stream slate and make your broadcast stream visible to viewers.
  """
  startWithSlate: Boolean
  stereoLayout: mutation_youtube_liveBroadcasts_insert_contentDetails_stereoLayout
}

"""Settings and Info of the monitor stream"""
input MonitorStreamInfo_Input {
  """
  If you have set the enableMonitorStream property to true, then this property determines the length of the live broadcast delay.
  """
  broadcastStreamDelayMs: Int

  """HTML code that embeds a player that plays the monitor stream."""
  embedHtml: String

  """
  This value determines whether the monitor stream is enabled for the broadcast. If the monitor stream is enabled, then YouTube will broadcast the event content on a special stream intended only for the broadcaster's consumption. The broadcaster can use the stream to review the event content and also to identify the optimal times to insert cuepoints. You need to set this value to true if you intend to have a broadcast delay for your event. *Note:* This property cannot be updated once the broadcast is in the testing or live state.
  """
  enableMonitorStream: Boolean
}

"""Basic broadcast information."""
input LiveBroadcastSnippet_Input {
  """
  The date and time that the broadcast actually ended. This information is only available once the broadcast's state is complete.
  """
  actualEndTime: DateTime

  """
  The date and time that the broadcast actually started. This information is only available once the broadcast's state is live.
  """
  actualStartTime: DateTime

  """
  The ID that YouTube uses to uniquely identify the channel that is publishing the broadcast.
  """
  channelId: String

  """
  The broadcast's description. As with the title, you can set this field by modifying the broadcast resource or by setting the description field of the corresponding video resource.
  """
  description: String

  """
  Indicates whether this broadcast is the default broadcast. Internal only.
  """
  isDefaultBroadcast: Boolean

  """The id of the live chat for this broadcast."""
  liveChatId: String

  """
  The date and time that the broadcast was added to YouTube's live broadcast schedule.
  """
  publishedAt: DateTime

  """The date and time that the broadcast is scheduled to end."""
  scheduledEndTime: DateTime

  """The date and time that the broadcast is scheduled to start."""
  scheduledStartTime: DateTime
  thumbnails: ThumbnailDetails_Input

  """
  The broadcast's title. Note that the broadcast represents exactly one YouTube video. You can set this field by modifying the broadcast resource or by setting the title field of the corresponding video resource.
  """
  title: String
}

"""
Statistics about the live broadcast. These represent a snapshot of the values at the time of the request. Statistics are only returned for live broadcasts.
"""
input LiveBroadcastStatistics_Input {
  """
  The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended.
  """
  concurrentViewers: String

  """
  The total number of live chat messages currently on the broadcast. The property and its value will be present if the broadcast is public, has the live chat feature enabled, and has at least one message. Note that this field will not be filled after the broadcast ends. So this property would not identify the number of chat messages for an archived video of a completed live broadcast.
  """
  totalChatCount: String
}

"""Live broadcast state."""
input LiveBroadcastStatus_Input {
  lifeCycleStatus: mutation_youtube_liveBroadcasts_insert_status_lifeCycleStatus
  liveBroadcastPriority: mutation_youtube_liveBroadcasts_insert_status_liveBroadcastPriority

  """
  Whether the broadcast is made for kids or not, decided by YouTube instead of the creator. This field is read only.
  """
  madeForKids: Boolean
  privacyStatus: mutation_youtube_liveBroadcasts_insert_status_privacyStatus
  recordingStatus: mutation_youtube_liveBroadcasts_insert_status_recordingStatus

  """
  This field will be set to True if the creator declares the broadcast to be kids only: go/live-cw-work.
  """
  selfDeclaredMadeForKids: Boolean
}

"""
Note that there may be a 5-second end-point resolution issue. For instance, if a cuepoint comes in for 22:03:27, we may stuff the cuepoint into 22:03:25 or 22:03:30, depending. This is an artifact of HLS.
"""
type Cuepoint {
  cueType: mutation_youtube_liveBroadcasts_insertCuepoint_cueType

  """The duration of this cuepoint."""
  durationSecs: Int
  etag: String

  """The identifier for cuepoint resource."""
  id: String

  """
  The time when the cuepoint should be inserted by offset to the broadcast actual start time.
  """
  insertionOffsetTimeMs: BigInt

  """
  The wall clock time at which the cuepoint should be inserted. Only one of insertion_offset_time_ms and walltime_ms may be set at a time.
  """
  walltimeMs: String
}

enum mutation_youtube_liveBroadcasts_insertCuepoint_cueType {
  cueTypeUnspecified
  cueTypeAd
}

"""
Note that there may be a 5-second end-point resolution issue. For instance, if a cuepoint comes in for 22:03:27, we may stuff the cuepoint into 22:03:25 or 22:03:30, depending. This is an artifact of HLS.
"""
input Cuepoint_Input {
  cueType: mutation_youtube_liveBroadcasts_insertCuepoint_cueType

  """The duration of this cuepoint."""
  durationSecs: Int
  etag: String

  """The identifier for cuepoint resource."""
  id: String

  """
  The time when the cuepoint should be inserted by offset to the broadcast actual start time.
  """
  insertionOffsetTimeMs: BigInt

  """
  The wall clock time at which the cuepoint should be inserted. Only one of insertion_offset_time_ms and walltime_ms may be set at a time.
  """
  walltimeMs: String
}

"""The status to which the broadcast is going to transition."""
enum mutationInput_youtube_liveBroadcasts_transition_broadcastStatus {
  statusUnspecified
  testing
  live
  complete
}

"""A `__liveChatBan__` resource represents a ban for a YouTube live chat."""
type LiveChatBan {
  """Etag of this resource."""
  etag: String

  """The ID that YouTube assigns to uniquely identify the ban."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string `"youtube#liveChatBan"`.
  """
  kind: String
  snippet: LiveChatBanSnippet
}

type LiveChatBanSnippet {
  """The duration of a ban, only filled if the ban has type TEMPORARY."""
  banDurationSeconds: String
  bannedUserDetails: ChannelProfileDetails

  """The chat this ban is pertinent to."""
  liveChatId: String
  type: mutation_youtube_liveChatBans_insert_snippet_type
}

"""The type of ban."""
enum mutation_youtube_liveChatBans_insert_snippet_type {
  liveChatBanTypeUnspecified
  permanent
  temporary
}

"""A `__liveChatBan__` resource represents a ban for a YouTube live chat."""
input LiveChatBan_Input {
  """Etag of this resource."""
  etag: String

  """The ID that YouTube assigns to uniquely identify the ban."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string `"youtube#liveChatBan"`.
  """
  kind: String = "youtube#liveChatBan"
  snippet: LiveChatBanSnippet_Input
}

input LiveChatBanSnippet_Input {
  """The duration of a ban, only filled if the ban has type TEMPORARY."""
  banDurationSeconds: String
  bannedUserDetails: ChannelProfileDetails_Input

  """The chat this ban is pertinent to."""
  liveChatId: String
  type: mutation_youtube_liveChatBans_insert_snippet_type
}

input ChannelProfileDetails_Input {
  """The YouTube channel ID."""
  channelId: String

  """The channel's URL."""
  channelUrl: String

  """The channel's display name."""
  displayName: String

  """The channels's avatar URL."""
  profileImageUrl: String
}

"""
A *liveChatMessage* resource represents a chat message in a YouTube Live Chat.
"""
input LiveChatMessage_Input {
  authorDetails: LiveChatMessageAuthorDetails_Input

  """Etag of this resource."""
  etag: String

  """The ID that YouTube assigns to uniquely identify the message."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatMessage".
  """
  kind: String = "youtube#liveChatMessage"
  snippet: LiveChatMessageSnippet_Input
}

input LiveChatMessageAuthorDetails_Input {
  """The YouTube channel ID."""
  channelId: String

  """The channel's URL."""
  channelUrl: String

  """The channel's display name."""
  displayName: String

  """Whether the author is a moderator of the live chat."""
  isChatModerator: Boolean

  """Whether the author is the owner of the live chat."""
  isChatOwner: Boolean

  """Whether the author is a sponsor of the live chat."""
  isChatSponsor: Boolean

  """Whether the author's identity has been verified by YouTube."""
  isVerified: Boolean

  """The channels's avatar URL."""
  profileImageUrl: String
}

"""Next ID: 33"""
input LiveChatMessageSnippet_Input {
  """
  The ID of the user that authored this message, this field is not always filled. textMessageEvent - the user that wrote the message fanFundingEvent - the user that funded the broadcast newSponsorEvent - the user that just became a sponsor memberMilestoneChatEvent - the member that sent the message membershipGiftingEvent - the user that made the purchase giftMembershipReceivedEvent - the user that received the gift membership messageDeletedEvent - the moderator that took the action messageRetractedEvent - the author that retracted their message userBannedEvent - the moderator that took the action superChatEvent - the user that made the purchase superStickerEvent - the user that made the purchase
  """
  authorChannelId: String

  """
  Contains a string that can be displayed to the user. If this field is not present the message is silent, at the moment only messages of type TOMBSTONE and CHAT_ENDED_EVENT are silent.
  """
  displayMessage: String
  fanFundingEventDetails: LiveChatFanFundingEventDetails_Input
  giftMembershipReceivedDetails: LiveChatGiftMembershipReceivedDetails_Input

  """
  Whether the message has display content that should be displayed to users.
  """
  hasDisplayContent: Boolean
  liveChatId: String
  memberMilestoneChatDetails: LiveChatMemberMilestoneChatDetails_Input
  membershipGiftingDetails: LiveChatMembershipGiftingDetails_Input
  messageDeletedDetails: LiveChatMessageDeletedDetails_Input
  messageRetractedDetails: LiveChatMessageRetractedDetails_Input
  newSponsorDetails: LiveChatNewSponsorDetails_Input

  """The date and time when the message was orignally published."""
  publishedAt: DateTime
  superChatDetails: LiveChatSuperChatDetails_Input
  superStickerDetails: LiveChatSuperStickerDetails_Input
  textMessageDetails: LiveChatTextMessageDetails_Input
  type: mutation_youtube_liveChatMessages_insert_snippet_type
  userBannedDetails: LiveChatUserBannedMessageDetails_Input
}

input LiveChatFanFundingEventDetails_Input {
  """
  A rendered string that displays the fund amount and currency to the user.
  """
  amountDisplayString: String

  """The amount of the fund."""
  amountMicros: String

  """The currency in which the fund was made."""
  currency: String

  """The comment added by the user to this fan funding event."""
  userComment: String
}

input LiveChatGiftMembershipReceivedDetails_Input {
  """
  The ID of the membership gifting message that is related to this gift membership. This ID will always refer to a message whose type is 'membershipGiftingEvent'.
  """
  associatedMembershipGiftingMessageId: String

  """
  The ID of the user that made the membership gifting purchase. This matches the `snippet.authorChannelId` of the associated membership gifting message.
  """
  gifterChannelId: String

  """
  The name of the Level at which the viewer is a member. This matches the `snippet.membershipGiftingDetails.giftMembershipsLevelName` of the associated membership gifting message. The Level names are defined by the YouTube channel offering the Membership. In some situations this field isn't filled.
  """
  memberLevelName: String
}

input LiveChatMemberMilestoneChatDetails_Input {
  """
  The name of the Level at which the viever is a member. The Level names are defined by the YouTube channel offering the Membership. In some situations this field isn't filled.
  """
  memberLevelName: String

  """
  The total amount of months (rounded up) the viewer has been a member that granted them this Member Milestone Chat. This is the same number of months as is being displayed to YouTube users.
  """
  memberMonth: Int

  """
  The comment added by the member to this Member Milestone Chat. This field is empty for messages without a comment from the member.
  """
  userComment: String
}

input LiveChatMembershipGiftingDetails_Input {
  """The number of gift memberships purchased by the user."""
  giftMembershipsCount: Int

  """
  The name of the level of the gift memberships purchased by the user. The Level names are defined by the YouTube channel offering the Membership. In some situations this field isn't filled.
  """
  giftMembershipsLevelName: String
}

input LiveChatMessageDeletedDetails_Input {
  deletedMessageId: String
}

input LiveChatMessageRetractedDetails_Input {
  retractedMessageId: String
}

input LiveChatNewSponsorDetails_Input {
  """
  If the viewer just had upgraded from a lower level. For viewers that were not members at the time of purchase, this field is false.
  """
  isUpgrade: Boolean

  """
  The name of the Level that the viewer just had joined. The Level names are defined by the YouTube channel offering the Membership. In some situations this field isn't filled.
  """
  memberLevelName: String
}

input LiveChatSuperChatDetails_Input {
  """
  A rendered string that displays the fund amount and currency to the user.
  """
  amountDisplayString: String

  """The amount purchased by the user, in micros (1,750,000 micros = 1.75)."""
  amountMicros: String

  """The currency in which the purchase was made."""
  currency: String

  """
  The tier in which the amount belongs. Lower amounts belong to lower tiers. The lowest tier is 1.
  """
  tier: Int

  """The comment added by the user to this Super Chat event."""
  userComment: String
}

input LiveChatSuperStickerDetails_Input {
  """
  A rendered string that displays the fund amount and currency to the user.
  """
  amountDisplayString: String

  """The amount purchased by the user, in micros (1,750,000 micros = 1.75)."""
  amountMicros: String

  """The currency in which the purchase was made."""
  currency: String
  superStickerMetadata: SuperStickerMetadata_Input

  """
  The tier in which the amount belongs. Lower amounts belong to lower tiers. The lowest tier is 1.
  """
  tier: Int
}

input SuperStickerMetadata_Input {
  """
  Internationalized alt text that describes the sticker image and any animation associated with it.
  """
  altText: String

  """Specifies the localization language in which the alt text is returned."""
  altTextLanguage: String

  """
  Unique identifier of the Super Sticker. This is a shorter form of the alt_text that includes pack name and a recognizable characteristic of the sticker.
  """
  stickerId: String
}

input LiveChatTextMessageDetails_Input {
  """The user's message."""
  messageText: String
}

input LiveChatUserBannedMessageDetails_Input {
  """
  The duration of the ban. This property is only present if the banType is temporary.
  """
  banDurationSeconds: String
  banType: mutation_youtube_liveChatMessages_insert_snippet_userBannedDetails_banType
  bannedUserDetails: ChannelProfileDetails_Input
}

"""
A *liveChatModerator* resource represents a moderator for a YouTube live chat. A chat moderator has the ability to ban/unban users from a chat, remove message, etc.
"""
input LiveChatModerator_Input {
  """Etag of this resource."""
  etag: String

  """The ID that YouTube assigns to uniquely identify the moderator."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#liveChatModerator".
  """
  kind: String = "youtube#liveChatModerator"
  snippet: LiveChatModeratorSnippet_Input
}

input LiveChatModeratorSnippet_Input {
  """The ID of the live chat this moderator can act on."""
  liveChatId: String
  moderatorDetails: ChannelProfileDetails_Input
}

"""A live stream describes a live ingestion point."""
input LiveStream_Input {
  cdn: CdnSettings_Input
  contentDetails: LiveStreamContentDetails_Input

  """Etag of this resource."""
  etag: String

  """The ID that YouTube assigns to uniquely identify the stream."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#liveStream".
  """
  kind: String = "youtube#liveStream"
  snippet: LiveStreamSnippet_Input
  status: LiveStreamStatus_Input
}

"""Brief description of the live stream cdn settings."""
input CdnSettings_Input {
  """The format of the video stream that you are sending to Youtube."""
  format: String
  frameRate: mutation_youtube_liveStreams_insert_cdn_frameRate
  ingestionInfo: IngestionInfo_Input
  ingestionType: mutation_youtube_liveStreams_insert_cdn_ingestionType
  resolution: mutation_youtube_liveStreams_insert_cdn_resolution
}

"""
Describes information necessary for ingesting an RTMP, HTTP, or SRT stream.
"""
input IngestionInfo_Input {
  """
  The backup ingestion URL that you should use to stream video to YouTube. You have the option of simultaneously streaming the content that you are sending to the ingestionAddress to this URL.
  """
  backupIngestionAddress: String

  """
  The primary ingestion URL that you should use to stream video to YouTube. You must stream video to this URL. Depending on which application or tool you use to encode your video stream, you may need to enter the stream URL and stream name separately or you may need to concatenate them in the following format: *STREAM_URL/STREAM_NAME*
  """
  ingestionAddress: String

  """
  This ingestion url may be used instead of backupIngestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams.
  """
  rtmpsBackupIngestionAddress: String

  """
  This ingestion url may be used instead of ingestionAddress in order to stream via RTMPS. Not applicable to non-RTMP streams.
  """
  rtmpsIngestionAddress: String

  """The stream name that YouTube assigns to the video stream."""
  streamName: String
}

"""Detailed settings of a stream."""
input LiveStreamContentDetails_Input {
  """The ingestion URL where the closed captions of this stream are sent."""
  closedCaptionsIngestionUrl: String

  """
  Indicates whether the stream is reusable, which means that it can be bound to multiple broadcasts. It is common for broadcasters to reuse the same stream for many different broadcasts if those broadcasts occur at different times. If you set this value to false, then the stream will not be reusable, which means that it can only be bound to one broadcast. Non-reusable streams differ from reusable streams in the following ways: - A non-reusable stream can only be bound to one broadcast. - A non-reusable stream might be deleted by an automated process after the broadcast ends. - The liveStreams.list method does not list non-reusable streams if you call the method and set the mine parameter to true. The only way to use that method to retrieve the resource for a non-reusable stream is to use the id parameter to identify the stream.
  """
  isReusable: Boolean
}

input LiveStreamSnippet_Input {
  """
  The ID that YouTube uses to uniquely identify the channel that is transmitting the stream.
  """
  channelId: String

  """
  The stream's description. The value cannot be longer than 10000 characters.
  """
  description: String
  isDefaultStream: Boolean

  """The date and time that the stream was created."""
  publishedAt: DateTime

  """
  The stream's title. The value must be between 1 and 128 characters long.
  """
  title: String
}

"""Brief description of the live stream status."""
input LiveStreamStatus_Input {
  healthStatus: LiveStreamHealthStatus_Input
  streamStatus: mutation_youtube_liveStreams_insert_status_streamStatus
}

input LiveStreamHealthStatus_Input {
  """The configurations issues on this stream"""
  configurationIssues: [LiveStreamConfigurationIssue_Input]

  """The last time this status was updated (in seconds)"""
  lastUpdateTimeSeconds: String
  status: mutation_youtube_liveStreams_insert_status_healthStatus_status
}

input LiveStreamConfigurationIssue_Input {
  """The long-form description of the issue and how to resolve it."""
  description: String

  """The short-form reason for this issue."""
  reason: String
  severity: mutation_youtube_liveStreams_insert_status_healthStatus_configurationIssues_items_severity
  type: mutation_youtube_liveStreams_insert_status_healthStatus_configurationIssues_items_type
}

"""
A *playlistItem* resource identifies another resource, such as a video, that is included in a playlist. In addition, the playlistItem resource contains details about the included resource that pertain specifically to how that resource is used in that playlist. YouTube uses playlists to identify special collections of videos for a channel, such as: - uploaded videos - favorite videos - positively rated (liked) videos - watch history - watch later To be more specific, these lists are associated with a channel, which is a collection of a person, group, or company's videos, playlists, and other YouTube information. You can retrieve the playlist IDs for each of these lists from the channel resource for a given channel. You can then use the playlistItems.list method to retrieve any of those lists. You can also add or remove items from those lists by calling the playlistItems.insert and playlistItems.delete methods. For example, if a user gives a positive rating to a video, you would insert that video into the liked videos playlist for that user's channel.
"""
input PlaylistItem_Input {
  contentDetails: PlaylistItemContentDetails_Input

  """Etag of this resource."""
  etag: String

  """The ID that YouTube uses to uniquely identify the playlist item."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#playlistItem".
  """
  kind: String = "youtube#playlistItem"
  snippet: PlaylistItemSnippet_Input
  status: PlaylistItemStatus_Input
}

input PlaylistItemContentDetails_Input {
  """
  The time, measured in seconds from the start of the video, when the video should stop playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) By default, assume that the video.endTime is the end of the video.
  """
  endAt: String

  """A user-generated note for this item."""
  note: String

  """
  The time, measured in seconds from the start of the video, when the video should start playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) The default value is 0.
  """
  startAt: String

  """
  The ID that YouTube uses to uniquely identify a video. To retrieve the video resource, set the id query parameter to this value in your API request.
  """
  videoId: String

  """The date and time that the video was published to YouTube."""
  videoPublishedAt: DateTime
}

"""
Basic details about a playlist, including title, description and thumbnails. Basic details of a YouTube Playlist item provided by the author. Next ID: 15
"""
input PlaylistItemSnippet_Input {
  """
  The ID that YouTube uses to uniquely identify the user that added the item to the playlist.
  """
  channelId: String

  """Channel title for the channel that the playlist item belongs to."""
  channelTitle: String

  """The item's description."""
  description: String

  """
  The ID that YouTube uses to uniquely identify thGe playlist that the playlist item is in.
  """
  playlistId: String

  """
  The order in which the item appears in the playlist. The value uses a zero-based index, so the first item has a position of 0, the second item has a position of 1, and so forth.
  """
  position: Int

  """The date and time that the item was added to the playlist."""
  publishedAt: DateTime
  resourceId: ResourceId_Input
  thumbnails: ThumbnailDetails_Input

  """The item's title."""
  title: String

  """Channel id for the channel this video belongs to."""
  videoOwnerChannelId: String

  """Channel title for the channel this video belongs to."""
  videoOwnerChannelTitle: String
}

"""
A resource id is a generic reference that points to another YouTube resource.
"""
input ResourceId_Input {
  """
  The ID that YouTube uses to uniquely identify the referred resource, if that resource is a channel. This property is only present if the resourceId.kind value is youtube#channel.
  """
  channelId: String

  """The type of the API resource."""
  kind: String

  """
  The ID that YouTube uses to uniquely identify the referred resource, if that resource is a playlist. This property is only present if the resourceId.kind value is youtube#playlist.
  """
  playlistId: String

  """
  The ID that YouTube uses to uniquely identify the referred resource, if that resource is a video. This property is only present if the resourceId.kind value is youtube#video.
  """
  videoId: String
}

"""Information about the playlist item's privacy status."""
input PlaylistItemStatus_Input {
  privacyStatus: mutation_youtube_playlistItems_insert_status_privacyStatus
}

"""
A *playlist* resource represents a YouTube playlist. A playlist is a collection of videos that can be viewed sequentially and shared with other users. A playlist can contain up to 200 videos, and YouTube does not limit the number of playlists that each user creates. By default, playlists are publicly visible to other users, but playlists can be public or private. YouTube also uses playlists to identify special collections of videos for a channel, such as: - uploaded videos - favorite videos - positively rated (liked) videos - watch history - watch later To be more specific, these lists are associated with a channel, which is a collection of a person, group, or company's videos, playlists, and other YouTube information. You can retrieve the playlist IDs for each of these lists from the channel resource for a given channel. You can then use the playlistItems.list method to retrieve any of those lists. You can also add or remove items from those lists by calling the playlistItems.insert and playlistItems.delete methods.
"""
input Playlist_Input {
  contentDetails: PlaylistContentDetails_Input

  """Etag of this resource."""
  etag: String

  """The ID that YouTube uses to uniquely identify the playlist."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#playlist".
  """
  kind: String = "youtube#playlist"
  localizations: JSON
  player: PlaylistPlayer_Input
  snippet: PlaylistSnippet_Input
  status: PlaylistStatus_Input
}

input PlaylistContentDetails_Input {
  """The number of videos in the playlist."""
  itemCount: Int
}

input PlaylistPlayer_Input {
  """An <iframe> tag that embeds a player that will play the playlist."""
  embedHtml: String
}

"""
Basic details about a playlist, including title, description and thumbnails.
"""
input PlaylistSnippet_Input {
  """
  The ID that YouTube uses to uniquely identify the channel that published the playlist.
  """
  channelId: String

  """The channel title of the channel that the video belongs to."""
  channelTitle: String

  """The language of the playlist's default title and description."""
  defaultLanguage: String

  """The playlist's description."""
  description: String
  localized: PlaylistLocalization_Input2

  """The date and time that the playlist was created."""
  publishedAt: DateTime

  """Keyword tags associated with the playlist."""
  tags: [String]

  """
  Note: if the playlist has a custom thumbnail, this field will not be populated. The video id selected by the user that will be used as the thumbnail of this playlist. This field defaults to the first publicly viewable video in the playlist, if: 1. The user has never selected a video to be the thumbnail of the playlist. 2. The user selects a video to be the thumbnail, and then removes that video from the playlist. 3. The user selects a non-owned video to be the thumbnail, but that video becomes private, or gets deleted.
  """
  thumbnailVideoId: String
  thumbnails: ThumbnailDetails_Input

  """The playlist's title."""
  title: String
}

"""Playlist localization setting"""
input PlaylistLocalization_Input2 {
  """The localized strings for playlist's description."""
  description: String

  """The localized strings for playlist's title."""
  title: String
}

input PlaylistStatus_Input {
  privacyStatus: mutation_youtube_playlists_insert_status_privacyStatus
}

"""
A *subscription* resource contains information about a YouTube user subscription. A subscription notifies a user when new videos are added to a channel or when another user takes one of several actions on YouTube, such as uploading a video, rating a video, or commenting on a video.
"""
input Subscription__Input {
  contentDetails: SubscriptionContentDetails_Input

  """Etag of this resource."""
  etag: String

  """The ID that YouTube uses to uniquely identify the subscription."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#subscription".
  """
  kind: String = "youtube#subscription"
  snippet: SubscriptionSnippet_Input
  subscriberSnippet: SubscriptionSubscriberSnippet_Input
}

"""Details about the content to witch a subscription refers."""
input SubscriptionContentDetails_Input {
  activityType: mutation_youtube_subscriptions_insert_contentDetails_activityType

  """
  The number of new items in the subscription since its content was last read.
  """
  newItemCount: Int

  """The approximate number of items that the subscription points to."""
  totalItemCount: Int
}

"""
Basic details about a subscription, including title, description and thumbnails of the subscribed item.
"""
input SubscriptionSnippet_Input {
  """
  The ID that YouTube uses to uniquely identify the subscriber's channel.
  """
  channelId: String

  """Channel title for the channel that the subscription belongs to."""
  channelTitle: String

  """The subscription's details."""
  description: String

  """The date and time that the subscription was created."""
  publishedAt: DateTime
  resourceId: ResourceId_Input
  thumbnails: ThumbnailDetails_Input

  """The subscription's title."""
  title: String
}

"""
Basic details about a subscription's subscriber including title, description, channel ID and thumbnails.
"""
input SubscriptionSubscriberSnippet_Input {
  """The channel ID of the subscriber."""
  channelId: String

  """The description of the subscriber."""
  description: String
  thumbnails: ThumbnailDetails_Input

  """The title of the subscriber."""
  title: String
}

type TestItem {
  featuredPart: Boolean
  gaia: BigInt
  id: String
  snippet: JSON
}

input TestItem_Input {
  featuredPart: Boolean
  gaia: BigInt
  id: String
  snippet: JSON
}

"""Type of the link to be deleted."""
enum mutationInput_youtube_thirdPartyLinks_delete_type {
  linkUnspecified
  channelToStoreLink
}

"""
A *third party account link* resource represents a link between a YouTube account or a channel and an account on a third-party service.
"""
input ThirdPartyLink_Input {
  """Etag of this resource"""
  etag: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#thirdPartyLink".
  """
  kind: String = "youtube#thirdPartyLink"

  """
  The linking_token identifies a YouTube account and channel with which the third party account is linked.
  """
  linkingToken: String
  snippet: ThirdPartyLinkSnippet_Input
  status: ThirdPartyLinkStatus_Input
}

"""
Basic information about a third party account link, including its type and type-specific information.
"""
input ThirdPartyLinkSnippet_Input {
  channelToStoreLink: ChannelToStoreLinkDetails_Input
  type: mutation_youtube_thirdPartyLinks_insert_snippet_type
}

"""
Information specific to a store on a merchandising platform linked to a YouTube channel.
"""
input ChannelToStoreLinkDetails_Input {
  """Google Merchant Center id of the store."""
  merchantId: String

  """Name of the store."""
  storeName: String

  """Landing page of the store."""
  storeUrl: String
}

"""
The third-party link status object contains information about the status of the link.
"""
input ThirdPartyLinkStatus_Input {
  linkStatus: mutation_youtube_thirdPartyLinks_insert_status_linkStatus
}

type ThumbnailSetResponse {
  """Etag of this resource."""
  etag: String

  """Serialized EventId of the request which produced this response."""
  eventId: String

  """A list of thumbnails."""
  items: [ThumbnailDetails]

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#thumbnailSetResponse".
  """
  kind: String

  """The visitorId identifies the visitor."""
  visitorId: String
}

"""A *video* resource represents a YouTube video."""
input Video_Input {
  ageGating: VideoAgeGating_Input
  contentDetails: VideoContentDetails_Input

  """Etag of this resource."""
  etag: String
  fileDetails: VideoFileDetails_Input

  """The ID that YouTube uses to uniquely identify the video."""
  id: String

  """
  Identifies what kind of resource this is. Value: the fixed string "youtube#video".
  """
  kind: String = "youtube#video"
  liveStreamingDetails: VideoLiveStreamingDetails_Input
  localizations: JSON
  monetizationDetails: VideoMonetizationDetails_Input
  player: VideoPlayer_Input
  processingDetails: VideoProcessingDetails_Input

  """
  DEPRECATED. b/157517979: This part was never populated after it was added. However, it sees non-zero traffic because there is generated client code in the wild that refers to it [1]. We keep this field and do NOT remove it because otherwise V3 would return an error when this part gets requested [2]. [1] https://developers.google.com/resources/api-libraries/documentation/youtube/v3/csharp/latest/classGoogle_1_1Apis_1_1YouTube_1_1v3_1_1Data_1_1VideoProjectDetails.html [2] http://google3/video/youtube/src/python/servers/data_api/common.py?l=1565-1569&rcl=344141677
  """
  projectDetails: JSON
  recordingDetails: VideoRecordingDetails_Input
  snippet: VideoSnippet_Input
  statistics: VideoStatistics_Input
  status: VideoStatus_Input
  suggestions: VideoSuggestions_Input
  topicDetails: VideoTopicDetails_Input
}

input VideoAgeGating_Input {
  """
  Indicates whether or not the video has alcoholic beverage content. Only users of legal purchasing age in a particular country, as identified by ICAP, can view the content.
  """
  alcoholContent: Boolean

  """
  Age-restricted trailers. For redband trailers and adult-rated video-games. Only users aged 18+ can view the content. The the field is true the content is restricted to viewers aged 18+. Otherwise The field won't be present.
  """
  restricted: Boolean
  videoGameRating: mutation_youtube_videos_insert_ageGating_videoGameRating
}

"""Details about the content of a YouTube Video."""
input VideoContentDetails_Input {
  caption: mutation_youtube_videos_insert_contentDetails_caption
  contentRating: ContentRating_Input
  countryRestriction: AccessPolicy_Input
  definition: mutation_youtube_videos_insert_contentDetails_definition

  """
  The value of dimension indicates whether the video is available in 3D or in 2D.
  """
  dimension: String

  """
  The length of the video. The tag value is an ISO 8601 duration in the format PT#M#S, in which the letters PT indicate that the value specifies a period of time, and the letters M and S refer to length in minutes and seconds, respectively. The # characters preceding the M and S letters are both integers that specify the number of minutes (or seconds) of the video. For example, a value of PT15M51S indicates that the video is 15 minutes and 51 seconds long.
  """
  duration: String

  """
  Indicates whether the video uploader has provided a custom thumbnail image for the video. This property is only visible to the video uploader.
  """
  hasCustomThumbnail: Boolean

  """
  The value of is_license_content indicates whether the video is licensed content.
  """
  licensedContent: Boolean
  projection: mutation_youtube_videos_insert_contentDetails_projection
  regionRestriction: VideoContentDetailsRegionRestriction_Input
}

"""
Ratings schemes. The country-specific ratings are mostly for movies and shows. LINT.IfChange
"""
input ContentRating_Input {
  acbRating: mutation_youtube_videos_insert_contentDetails_contentRating_acbRating
  agcomRating: mutation_youtube_videos_insert_contentDetails_contentRating_agcomRating
  anatelRating: mutation_youtube_videos_insert_contentDetails_contentRating_anatelRating
  bbfcRating: mutation_youtube_videos_insert_contentDetails_contentRating_bbfcRating
  bfvcRating: mutation_youtube_videos_insert_contentDetails_contentRating_bfvcRating
  bmukkRating: mutation_youtube_videos_insert_contentDetails_contentRating_bmukkRating
  catvRating: mutation_youtube_videos_insert_contentDetails_contentRating_catvRating
  catvfrRating: mutation_youtube_videos_insert_contentDetails_contentRating_catvfrRating
  cbfcRating: mutation_youtube_videos_insert_contentDetails_contentRating_cbfcRating
  cccRating: mutation_youtube_videos_insert_contentDetails_contentRating_cccRating
  cceRating: mutation_youtube_videos_insert_contentDetails_contentRating_cceRating
  chfilmRating: mutation_youtube_videos_insert_contentDetails_contentRating_chfilmRating
  chvrsRating: mutation_youtube_videos_insert_contentDetails_contentRating_chvrsRating
  cicfRating: mutation_youtube_videos_insert_contentDetails_contentRating_cicfRating
  cnaRating: mutation_youtube_videos_insert_contentDetails_contentRating_cnaRating
  cncRating: mutation_youtube_videos_insert_contentDetails_contentRating_cncRating
  csaRating: mutation_youtube_videos_insert_contentDetails_contentRating_csaRating
  cscfRating: mutation_youtube_videos_insert_contentDetails_contentRating_cscfRating
  czfilmRating: mutation_youtube_videos_insert_contentDetails_contentRating_czfilmRating
  djctqRating: mutation_youtube_videos_insert_contentDetails_contentRating_djctqRating

  """Reasons that explain why the video received its DJCQT (Brazil) rating."""
  djctqRatingReasons: [mutation_youtube_videos_insert_contentDetails_contentRating_djctqRatingReasons_items]
  ecbmctRating: mutation_youtube_videos_insert_contentDetails_contentRating_ecbmctRating
  eefilmRating: mutation_youtube_videos_insert_contentDetails_contentRating_eefilmRating
  egfilmRating: mutation_youtube_videos_insert_contentDetails_contentRating_egfilmRating
  eirinRating: mutation_youtube_videos_insert_contentDetails_contentRating_eirinRating
  fcbmRating: mutation_youtube_videos_insert_contentDetails_contentRating_fcbmRating
  fcoRating: mutation_youtube_videos_insert_contentDetails_contentRating_fcoRating
  fmocRating: mutation_youtube_videos_insert_contentDetails_contentRating_fmocRating
  fpbRating: mutation_youtube_videos_insert_contentDetails_contentRating_fpbRating

  """
  Reasons that explain why the video received its FPB (South Africa) rating.
  """
  fpbRatingReasons: [mutation_youtube_videos_insert_contentDetails_contentRating_fpbRatingReasons_items]
  fskRating: mutation_youtube_videos_insert_contentDetails_contentRating_fskRating
  grfilmRating: mutation_youtube_videos_insert_contentDetails_contentRating_grfilmRating
  icaaRating: mutation_youtube_videos_insert_contentDetails_contentRating_icaaRating
  ifcoRating: mutation_youtube_videos_insert_contentDetails_contentRating_ifcoRating
  ilfilmRating: mutation_youtube_videos_insert_contentDetails_contentRating_ilfilmRating
  incaaRating: mutation_youtube_videos_insert_contentDetails_contentRating_incaaRating
  kfcbRating: mutation_youtube_videos_insert_contentDetails_contentRating_kfcbRating
  kijkwijzerRating: mutation_youtube_videos_insert_contentDetails_contentRating_kijkwijzerRating
  kmrbRating: mutation_youtube_videos_insert_contentDetails_contentRating_kmrbRating
  lsfRating: mutation_youtube_videos_insert_contentDetails_contentRating_lsfRating
  mccaaRating: mutation_youtube_videos_insert_contentDetails_contentRating_mccaaRating
  mccypRating: mutation_youtube_videos_insert_contentDetails_contentRating_mccypRating
  mcstRating: mutation_youtube_videos_insert_contentDetails_contentRating_mcstRating
  mdaRating: mutation_youtube_videos_insert_contentDetails_contentRating_mdaRating
  medietilsynetRating: mutation_youtube_videos_insert_contentDetails_contentRating_medietilsynetRating
  mekuRating: mutation_youtube_videos_insert_contentDetails_contentRating_mekuRating
  menaMpaaRating: mutation_youtube_videos_insert_contentDetails_contentRating_menaMpaaRating
  mibacRating: mutation_youtube_videos_insert_contentDetails_contentRating_mibacRating
  mocRating: mutation_youtube_videos_insert_contentDetails_contentRating_mocRating
  moctwRating: mutation_youtube_videos_insert_contentDetails_contentRating_moctwRating
  mpaaRating: mutation_youtube_videos_insert_contentDetails_contentRating_mpaaRating
  mpaatRating: mutation_youtube_videos_insert_contentDetails_contentRating_mpaatRating
  mtrcbRating: mutation_youtube_videos_insert_contentDetails_contentRating_mtrcbRating
  nbcRating: mutation_youtube_videos_insert_contentDetails_contentRating_nbcRating
  nbcplRating: mutation_youtube_videos_insert_contentDetails_contentRating_nbcplRating
  nfrcRating: mutation_youtube_videos_insert_contentDetails_contentRating_nfrcRating
  nfvcbRating: mutation_youtube_videos_insert_contentDetails_contentRating_nfvcbRating
  nkclvRating: mutation_youtube_videos_insert_contentDetails_contentRating_nkclvRating
  nmcRating: mutation_youtube_videos_insert_contentDetails_contentRating_nmcRating
  oflcRating: mutation_youtube_videos_insert_contentDetails_contentRating_oflcRating
  pefilmRating: mutation_youtube_videos_insert_contentDetails_contentRating_pefilmRating
  rcnofRating: mutation_youtube_videos_insert_contentDetails_contentRating_rcnofRating
  resorteviolenciaRating: mutation_youtube_videos_insert_contentDetails_contentRating_resorteviolenciaRating
  rtcRating: mutation_youtube_videos_insert_contentDetails_contentRating_rtcRating
  rteRating: mutation_youtube_videos_insert_contentDetails_contentRating_rteRating
  russiaRating: mutation_youtube_videos_insert_contentDetails_contentRating_russiaRating
  skfilmRating: mutation_youtube_videos_insert_contentDetails_contentRating_skfilmRating
  smaisRating: mutation_youtube_videos_insert_contentDetails_contentRating_smaisRating
  smsaRating: mutation_youtube_videos_insert_contentDetails_contentRating_smsaRating
  tvpgRating: mutation_youtube_videos_insert_contentDetails_contentRating_tvpgRating
  ytRating: mutation_youtube_videos_insert_contentDetails_contentRating_ytRating
}

"""Rights management policy for YouTube resources."""
input AccessPolicy_Input {
  """
  The value of allowed indicates whether the access to the policy is allowed or denied by default.
  """
  allowed: Boolean

  """
  A list of region codes that identify countries where the default policy do not apply.
  """
  exception: [String]
}

"""DEPRECATED Region restriction of the video."""
input VideoContentDetailsRegionRestriction_Input {
  """
  A list of region codes that identify countries where the video is viewable. If this property is present and a country is not listed in its value, then the video is blocked from appearing in that country. If this property is present and contains an empty list, the video is blocked in all countries.
  """
  allowed: [String]

  """
  A list of region codes that identify countries where the video is blocked. If this property is present and a country is not listed in its value, then the video is viewable in that country. If this property is present and contains an empty list, the video is viewable in all countries.
  """
  blocked: [String]
}

"""
Describes original video file properties, including technical details about audio and video streams, but also metadata information like content length, digitization time, or geotagging information.
"""
input VideoFileDetails_Input {
  """
  A list of audio streams contained in the uploaded video file. Each item in the list contains detailed metadata about an audio stream.
  """
  audioStreams: [VideoFileDetailsAudioStream_Input]

  """
  The uploaded video file's combined (video and audio) bitrate in bits per second.
  """
  bitrateBps: String

  """The uploaded video file's container format."""
  container: String

  """
  The date and time when the uploaded video file was created. The value is specified in ISO 8601 format. Currently, the following ISO 8601 formats are supported: - Date only: YYYY-MM-DD - Naive time: YYYY-MM-DDTHH:MM:SS - Time with timezone: YYYY-MM-DDTHH:MM:SS+HH:MM
  """
  creationTime: String

  """The length of the uploaded video in milliseconds."""
  durationMs: String

  """
  The uploaded file's name. This field is present whether a video file or another type of file was uploaded.
  """
  fileName: String

  """
  The uploaded file's size in bytes. This field is present whether a video file or another type of file was uploaded.
  """
  fileSize: String
  fileType: mutation_youtube_videos_insert_fileDetails_fileType

  """
  A list of video streams contained in the uploaded video file. Each item in the list contains detailed metadata about a video stream.
  """
  videoStreams: [VideoFileDetailsVideoStream_Input]
}

"""Information about an audio stream."""
input VideoFileDetailsAudioStream_Input {
  """The audio stream's bitrate, in bits per second."""
  bitrateBps: String

  """The number of audio channels that the stream contains."""
  channelCount: Int

  """The audio codec that the stream uses."""
  codec: String

  """
  A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.
  """
  vendor: String
}

"""Information about a video stream."""
input VideoFileDetailsVideoStream_Input {
  """
  The video content's display aspect ratio, which specifies the aspect ratio in which the video should be displayed.
  """
  aspectRatio: Float

  """The video stream's bitrate, in bits per second."""
  bitrateBps: String

  """The video codec that the stream uses."""
  codec: String

  """The video stream's frame rate, in frames per second."""
  frameRateFps: Float

  """The encoded video content's height in pixels."""
  heightPixels: Int
  rotation: mutation_youtube_videos_insert_fileDetails_videoStreams_items_rotation

  """
  A value that uniquely identifies a video vendor. Typically, the value is a four-letter vendor code.
  """
  vendor: String

  """
  The encoded video content's width in pixels. You can calculate the video's encoding aspect ratio as width_pixels / height_pixels.
  """
  widthPixels: Int
}

"""Details about the live streaming metadata."""
input VideoLiveStreamingDetails_Input {
  """
  The ID of the currently active live chat attached to this video. This field is filled only if the video is a currently live broadcast that has live chat. Once the broadcast transitions to complete this field will be removed and the live chat closed down. For persistent broadcasts that live chat id will no longer be tied to this video but rather to the new video being displayed at the persistent page.
  """
  activeLiveChatId: String

  """
  The time that the broadcast actually ended. This value will not be available until the broadcast is over.
  """
  actualEndTime: DateTime

  """
  The time that the broadcast actually started. This value will not be available until the broadcast begins.
  """
  actualStartTime: DateTime

  """
  The number of viewers currently watching the broadcast. The property and its value will be present if the broadcast has current viewers and the broadcast owner has not hidden the viewcount for the video. Note that YouTube stops tracking the number of concurrent viewers for a broadcast when the broadcast ends. So, this property would not identify the number of viewers watching an archived video of a live broadcast that already ended.
  """
  concurrentViewers: String

  """
  The time that the broadcast is scheduled to end. If the value is empty or the property is not present, then the broadcast is scheduled to contiue indefinitely.
  """
  scheduledEndTime: DateTime

  """The time that the broadcast is scheduled to begin."""
  scheduledStartTime: DateTime
}

"""Details about monetization of a YouTube Video."""
input VideoMonetizationDetails_Input {
  access: AccessPolicy_Input
}

"""Player to be used for a video playback."""
input VideoPlayer_Input {
  embedHeight: BigInt

  """An <iframe> tag that embeds a player that will play the video."""
  embedHtml: String

  """The embed width"""
  embedWidth: BigInt
}

"""
Describes processing status and progress and availability of some other Video resource parts.
"""
input VideoProcessingDetails_Input {
  """
  This value indicates whether video editing suggestions, which might improve video quality or the playback experience, are available for the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
  """
  editorSuggestionsAvailability: String

  """
  This value indicates whether file details are available for the uploaded video. You can retrieve a video's file details by requesting the fileDetails part in your videos.list() request.
  """
  fileDetailsAvailability: String
  processingFailureReason: mutation_youtube_videos_insert_processingDetails_processingFailureReason

  """
  This value indicates whether the video processing engine has generated suggestions that might improve YouTube's ability to process the the video, warnings that explain video processing problems, or errors that cause video processing problems. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
  """
  processingIssuesAvailability: String
  processingProgress: VideoProcessingDetailsProcessingProgress_Input
  processingStatus: mutation_youtube_videos_insert_processingDetails_processingStatus

  """
  This value indicates whether keyword (tag) suggestions are available for the video. Tags can be added to a video's metadata to make it easier for other users to find the video. You can retrieve these suggestions by requesting the suggestions part in your videos.list() request.
  """
  tagSuggestionsAvailability: String

  """
  This value indicates whether thumbnail images have been generated for the video.
  """
  thumbnailsAvailability: String
}

"""Video processing progress and completion time estimate."""
input VideoProcessingDetailsProcessingProgress_Input {
  """
  The number of parts of the video that YouTube has already processed. You can estimate the percentage of the video that YouTube has already processed by calculating: 100 * parts_processed / parts_total Note that since the estimated number of parts could increase without a corresponding increase in the number of parts that have already been processed, it is possible that the calculated progress could periodically decrease while YouTube processes a video.
  """
  partsProcessed: String

  """
  An estimate of the total number of parts that need to be processed for the video. The number may be updated with more precise estimates while YouTube processes the video.
  """
  partsTotal: String

  """
  An estimate of the amount of time, in millseconds, that YouTube needs to finish processing the video.
  """
  timeLeftMs: String
}

"""Recording information associated with the video."""
input VideoRecordingDetails_Input {
  location: GeoPoint_Input

  """The text description of the location where the video was recorded."""
  locationDescription: String

  """The date and time when the video was recorded."""
  recordingDate: DateTime
}

"""Geographical coordinates of a point, in WGS84."""
input GeoPoint_Input {
  """Altitude above the reference ellipsoid, in meters."""
  altitude: Float

  """Latitude in degrees."""
  latitude: Float

  """Longitude in degrees."""
  longitude: Float
}

"""
Basic details about a video, including title, description, uploader, thumbnails and category.
"""
input VideoSnippet_Input {
  """The YouTube video category associated with the video."""
  categoryId: String

  """
  The ID that YouTube uses to uniquely identify the channel that the video was uploaded to.
  """
  channelId: String

  """Channel title for the channel that the video belongs to."""
  channelTitle: String

  """
  The default_audio_language property specifies the language spoken in the video's default audio track.
  """
  defaultAudioLanguage: String

  """The language of the videos's default snippet."""
  defaultLanguage: String

  """
  The video's description. @mutable youtube.videos.insert youtube.videos.update
  """
  description: String
  liveBroadcastContent: mutation_youtube_videos_insert_snippet_liveBroadcastContent
  localized: VideoLocalization_Input2

  """The date and time when the video was uploaded."""
  publishedAt: DateTime

  """
  A list of keyword tags associated with the video. Tags may contain spaces.
  """
  tags: [String]
  thumbnails: ThumbnailDetails_Input

  """
  The video's title. @mutable youtube.videos.insert youtube.videos.update
  """
  title: String
}

"""Localized versions of certain video properties (e.g. title)."""
input VideoLocalization_Input2 {
  """Localized version of the video's description."""
  description: String

  """Localized version of the video's title."""
  title: String
}

"""
Statistics about the video, such as the number of times the video was viewed or liked.
"""
input VideoStatistics_Input {
  """The number of comments for the video."""
  commentCount: String

  """
  The number of users who have indicated that they disliked the video by giving it a negative rating.
  """
  dislikeCount: String

  """
  The number of users who currently have the video marked as a favorite video.
  """
  favoriteCount: String

  """
  The number of users who have indicated that they liked the video by giving it a positive rating.
  """
  likeCount: String

  """The number of times the video has been viewed."""
  viewCount: String
}

"""
Basic details about a video category, such as its localized title. Next Id: 18
"""
input VideoStatus_Input {
  """
  This value indicates if the video can be embedded on another website. @mutable youtube.videos.insert youtube.videos.update
  """
  embeddable: Boolean
  failureReason: mutation_youtube_videos_insert_status_failureReason
  license: mutation_youtube_videos_insert_status_license
  madeForKids: Boolean
  privacyStatus: mutation_youtube_videos_insert_status_privacyStatus

  """
  This value indicates if the extended video statistics on the watch page can be viewed by everyone. Note that the view count, likes, etc will still be visible if this is disabled. @mutable youtube.videos.insert youtube.videos.update
  """
  publicStatsViewable: Boolean

  """
  The date and time when the video is scheduled to publish. It can be set only if the privacy status of the video is private..
  """
  publishAt: DateTime
  rejectionReason: mutation_youtube_videos_insert_status_rejectionReason
  selfDeclaredMadeForKids: Boolean
  uploadStatus: mutation_youtube_videos_insert_status_uploadStatus
}

"""
Specifies suggestions on how to improve video content, including encoding hints, tag suggestions, and editor suggestions.
"""
input VideoSuggestions_Input {
  """
  A list of video editing operations that might improve the video quality or playback experience of the uploaded video.
  """
  editorSuggestions: [mutation_youtube_videos_insert_suggestions_editorSuggestions_items]

  """
  A list of errors that will prevent YouTube from successfully processing the uploaded video video. These errors indicate that, regardless of the video's current processing status, eventually, that status will almost certainly be failed.
  """
  processingErrors: [mutation_youtube_videos_insert_suggestions_processingErrors_items]

  """
  A list of suggestions that may improve YouTube's ability to process the video.
  """
  processingHints: [mutation_youtube_videos_insert_suggestions_processingHints_items]

  """
  A list of reasons why YouTube may have difficulty transcoding the uploaded video or that might result in an erroneous transcoding. These warnings are generated before YouTube actually processes the uploaded video file. In addition, they identify issues that are unlikely to cause the video processing to fail but that might cause problems such as sync issues, video artifacts, or a missing audio track.
  """
  processingWarnings: [mutation_youtube_videos_insert_suggestions_processingWarnings_items]

  """
  A list of keyword tags that could be added to the video's metadata to increase the likelihood that users will locate your video when searching or browsing on YouTube.
  """
  tagSuggestions: [VideoSuggestionsTagSuggestion_Input]
}

"""A single tag suggestion with it's relevance information."""
input VideoSuggestionsTagSuggestion_Input {
  """
  A set of video categories for which the tag is relevant. You can use this information to display appropriate tag suggestions based on the video category that the video uploader associates with the video. By default, tag suggestions are relevant for all categories if there are no restricts defined for the keyword.
  """
  categoryRestricts: [String]

  """The keyword tag suggested for the video."""
  tag: String
}

"""Freebase topic information related to the video."""
input VideoTopicDetails_Input {
  """
  Similar to topic_id, except that these topics are merely relevant to the video. These are topics that may be mentioned in, or appear in the video. You can retrieve information about each topic using Freebase Topic API.
  """
  relevantTopicIds: [String]

  """
  A list of Wikipedia URLs that provide a high-level description of the video's content.
  """
  topicCategories: [String]

  """
  A list of Freebase topic IDs that are centrally associated with the video. These are topics that are centrally featured in the video, and it can be said that the video is mainly about each of these. You can retrieve information about each topic using the < a href="http://wiki.freebase.com/wiki/Topic_API">Freebase Topic API.
  """
  topicIds: [String]
}

enum mutationInput_youtube_videos_rate_rating {
  none
  like
  dislike
}

input VideoAbuseReport_Input {
  """Additional comments regarding the abuse report."""
  comments: String

  """The language that the content was viewed in."""
  language: String

  """
  The high-level, or primary, reason that the content is abusive. The value is an abuse report reason ID.
  """
  reasonId: String

  """
  The specific, or secondary, reason that this content is abusive (if available). The value is an abuse report reason ID that is a valid secondary reason for the primary reason.
  """
  secondaryReasonId: String

  """The ID that YouTube uses to uniquely identify the video."""
  videoId: String
}

"""LINT.IfChange Describes an invideo branding."""
input InvideoBranding_Input {
  """
  The bytes the uploaded image. Only used in api to youtube communication.
  """
  imageBytes: Byte

  """
  The url of the uploaded image. Only used in apiary to api communication.
  """
  imageUrl: String
  position: InvideoPosition_Input

  """
  The channel to which this branding links. If not present it defaults to the current channel.
  """
  targetChannelId: String
  timing: InvideoTiming_Input
}

"""
Describes the spatial position of a visual widget inside a video. It is a union of various position types, out of which only will be set one.
"""
input InvideoPosition_Input {
  cornerPosition: mutationInput_youtube_watermarks_set_input_position_cornerPosition
  type: corner_const
}

"""Describes in which corner of the video the visual widget will appear."""
enum mutationInput_youtube_watermarks_set_input_position_cornerPosition {
  topLeft
  topRight
  bottomLeft
  bottomRight
}

enum corner_const {
  corner
}

"""Describes a temporal position of a visual widget inside a video."""
input InvideoTiming_Input {
  """
  Defines the duration in milliseconds for which the promotion should be displayed. If missing, the client should use the default.
  """
  durationMs: String

  """
  Defines the time at which the promotion will appear. Depending on the value of type the value of the offsetMs field will represent a time offset from the start or from the end of the video, expressed in milliseconds.
  """
  offsetMs: String
  type: mutationInput_youtube_watermarks_set_input_timing_type
}

"""
Describes a timing type. If the value is offsetFromStart, then the offsetMs field represents an offset from the start of the video. If the value is offsetFromEnd, then the offsetMs field represents an offset from the end of the video.
"""
enum mutationInput_youtube_watermarks_set_input_timing_type {
  offsetFromStart
  offsetFromEnd
}

scalar ObjMap

enum HTTPMethod {
  GET
  HEAD
  POST
  PUT
  DELETE
  CONNECT
  OPTIONS
  TRACE
  PATCH
}