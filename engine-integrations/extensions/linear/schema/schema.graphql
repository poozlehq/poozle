type PageInfo {
  """Indicates if there are more results when paginating backward."""
  hasPreviousPage: Boolean!

  """Indicates if there are more results when paginating forward."""
  hasNextPage: Boolean!

  """Cursor representing the first result in the paginated results."""
  startCursor: String

  """Cursor representing the last result in the paginated results."""
  endCursor: String
}

"""An API key. Grants access to the user's resources."""
type ApiKey implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The label of the API key."""
  label: String!
}

"""
Represents a date and time in ISO 8601 format. Accepts shortcuts like `2021` to represent midnight Fri Jan 01 2021. Also accepts ISO 8601 durations strings which are added to the current date to create the represented date (e.g '-P2W1D' represents the date that was two weeks and 1 day ago) 
"""
scalar DateTime

type ApiKeyEdge {
  node: ApiKey!

  """Used in `before` and `after` args"""
  cursor: String!
}

type ApiKeyConnection {
  edges: [ApiKeyEdge!]!
  nodes: [ApiKey!]!
  pageInfo: PageInfo!
}

type AuthResolverResponse {
  """User account ID."""
  id: String!

  """JWT token for authentication of the account."""
  token: String

  """Email for the authenticated account."""
  email: String

  """Should the signup flow allow access for the domain."""
  allowDomainAccess: Boolean

  """Users belonging to this account."""
  users: [User!]!

  """Organizations this account has access to, but is not yet a member."""
  availableOrganizations: [Organization!]

  """ID of the organization last accessed by the user."""
  lastUsedOrganizationId: String
}

"""A state in a team workflow."""
type WorkflowState implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The state's name."""
  name: String!

  """The state's UI color as a HEX string."""
  color: String!

  """Description of the state."""
  description: String

  """The position of the state in the team flow."""
  position: Float!

  """The type of the state."""
  type: String!

  """The team to which this state belongs to."""
  team: Team!

  """Issues belonging in this state."""
  issues(
    """Filter returned issues."""
    filter: IssueFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
}

"""By which field should the pagination order by"""
enum PaginationOrderBy {
  createdAt
  updatedAt
}

type WorkflowStateEdge {
  node: WorkflowState!

  """Used in `before` and `after` args"""
  cursor: String!
}

type WorkflowStateConnection {
  edges: [WorkflowStateEdge!]!
  nodes: [WorkflowState!]!
  pageInfo: PageInfo!
}

"""An import job for data from an external service"""
type IssueImport implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """New team's name in cases when teamId not set"""
  teamName: String

  """The id for the user that started the job."""
  creatorId: String!

  """The service from which data will be imported."""
  service: String!

  """The status for the import job."""
  status: String!

  """The data mapping configuration for the import job."""
  mapping: JSONObject

  """User readable error message, if one has occurred during the import."""
  error: String

  """Current step progress in % (0-100)."""
  progress: Float
}

"""
The `JSONObject` scalar type represents arbitrary values as *embedded* JSON
"""
scalar JSONObject

"""A set of issues to be resolved in a specified amount of time."""
type Cycle implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The number of the cycle."""
  number: Float!

  """The custom name of the cycle."""
  name: String

  """The cycle's description."""
  description: String

  """The start time of the cycle."""
  startsAt: DateTime!

  """The end time of the cycle."""
  endsAt: DateTime!

  """
  The completion time of the cycle. If null, the cycle hasn't been completed.
  """
  completedAt: DateTime

  """
  The time at which the cycle was automatically archived by the auto pruning process.
  """
  autoArchivedAt: DateTime

  """The total number of issues in the cycle after each day."""
  issueCountHistory: [Float!]!

  """The number of completed issues in the cycle after each day."""
  completedIssueCountHistory: [Float!]!

  """The total number of estimation points after each day."""
  scopeHistory: [Float!]!

  """The number of completed estimation points after each day."""
  completedScopeHistory: [Float!]!

  """The number of in progress estimation points after each day."""
  inProgressScopeHistory: [Float!]!

  """The team that the cycle is associated with."""
  team: Team!

  """Issues associated with the cycle."""
  issues(
    """Filter returned issues."""
    filter: IssueFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!

  """Issues that weren't completed when the cycle was closed."""
  uncompletedIssuesUponClose(
    """Filter returned issues."""
    filter: IssueFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!

  """
  The overall progress of the cycle. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points.
  """
  progress: Float!
}

type CycleEdge {
  node: Cycle!

  """Used in `before` and `after` args"""
  cursor: String!
}

type CycleConnection {
  edges: [CycleEdge!]!
  nodes: [Cycle!]!
  pageInfo: PageInfo!
}

"""An issue."""
type Issue implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The issue's unique number."""
  number: Float!

  """The issue's title."""
  title: String!

  """
  The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low.
  """
  priority: Float!

  """The estimate of the complexity of the issue.."""
  estimate: Float

  """The order of the item in its column on the board."""
  boardOrder: Float! @deprecated(reason: "Will be removed in near future, please use `sortOrder` instead")

  """The order of the item in relation to other items in the organization."""
  sortOrder: Float!

  """The time at which the issue was moved into started state."""
  startedAt: DateTime

  """The time at which the issue was moved into completed state."""
  completedAt: DateTime

  """The time at which the issue entered triage."""
  startedTriageAt: DateTime

  """The time at which the issue left triage."""
  triagedAt: DateTime

  """The time at which the issue was moved into canceled state."""
  canceledAt: DateTime

  """
  The time at which the issue was automatically closed by the auto pruning process.
  """
  autoClosedAt: DateTime

  """
  The time at which the issue was automatically archived by the auto pruning process.
  """
  autoArchivedAt: DateTime

  """The date at which the issue is due."""
  dueDate: TimelessDate

  """[Internal] The time at which the issue's SLA began."""
  slaStartedAt: DateTime

  """[Internal] The time at which the issue's SLA will breach."""
  slaBreachesAt: DateTime

  """A flag that indicates whether the issue is in the trash bin."""
  trashed: Boolean

  """The time until an issue will be snoozed in Triage view."""
  snoozedUntilAt: DateTime

  """The team that the issue is associated with."""
  team: Team!

  """The cycle that the issue is associated with."""
  cycle: Cycle

  """The project that the issue is associated with."""
  project: Project

  """The projectMilestone that the issue is associated with."""
  projectMilestone: ProjectMilestone

  """Previous identifiers of the issue if it has been moved between teams."""
  previousIdentifiers: [String!]!

  """The user who created the issue."""
  creator: User

  """[ALPHA] The external user who created the issue."""
  externalUserCreator: ExternalUser

  """The user to whom the issue is assigned to."""
  assignee: User

  """The user who snoozed the issue."""
  snoozedBy: User

  """The workflow state that the issue is associated with."""
  state: WorkflowState!

  """The parent of the issue."""
  parent: Issue

  """
  The order of the item in the sub-issue list. Only set if the issue has a parent.
  """
  subIssueSortOrder: Float

  """Label for the priority."""
  priorityLabel: String!

  """Issue's human readable identifier (e.g. ENG-123)."""
  identifier: String!

  """Issue URL."""
  url: String!

  """Suggested branch name for the issue."""
  branchName: String!

  """
  Returns the number of Attachment resources which are created by customer support ticketing systems (e.g. Zendesk).
  """
  customerTicketCount: Int!

  """Users who are subscribed to the issue."""
  subscribers(
    """Filter returned subscribers."""
    filter: UserFilter

    """Should query return disabled/suspended users (default: false)."""
    includeDisabled: Boolean

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): UserConnection!

  """Children of the issue."""
  children(
    """Filter returned issues."""
    filter: IssueFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!

  """Comments associated with the issue."""
  comments(
    """Filter returned comments."""
    filter: CommentFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CommentConnection!

  """History entries associated with the issue."""
  history(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueHistoryConnection!

  """Labels associated with this issue."""
  labels(
    """Filter returned issue labels."""
    filter: IssueLabelFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueLabelConnection!

  """Relations associated with this issue."""
  relations(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueRelationConnection!

  """Inverse relations associated with this issue."""
  inverseRelations(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueRelationConnection!

  """Attachments associated with the issue."""
  attachments(
    """Filter returned attachments."""
    filter: AttachmentFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): AttachmentConnection!

  """The issue's description in markdown format."""
  description: String

  """[Internal] The issue's description as a Prosemirror document."""
  descriptionData: JSON
}

"""
Represents a date in ISO 8601 format. Accepts shortcuts like `2021` to represent midnight Fri Jan 01 2021. Also accepts ISO 8601 durations strings which are added to the current date to create the represented date (e.g '-P2W1D' represents the date that was two weeks and 1 day ago) 
"""
scalar TimelessDate

"""
The `JSON` scalar type represents arbitrary values as *stringified* JSON
"""
scalar JSON

type IssueEdge {
  node: Issue!

  """Used in `before` and `after` args"""
  cursor: String!
}

type IssueConnection {
  edges: [IssueEdge!]!
  nodes: [Issue!]!
  pageInfo: PageInfo!
}

"""Labels that can be associated with issues."""
type IssueLabel implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The label's name."""
  name: String!

  """The label's description."""
  description: String

  """The label's color as a HEX string."""
  color: String!
  organization: Organization! @deprecated(reason: "Workspace labels are identified by their team being null.")

  """
  The team that the label is associated with. If null, the label is associated with the global workspace.
  """
  team: Team

  """The user who created the label."""
  creator: User

  """The parent label."""
  parent: IssueLabel

  """Issues associated with the label."""
  issues(
    """Filter returned issues."""
    filter: IssueFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!

  """Children of the label."""
  children(
    """Filter returned issue labels."""
    filter: IssueLabelFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueLabelConnection!
}

type IssueLabelEdge {
  node: IssueLabel!

  """Used in `before` and `after` args"""
  cursor: String!
}

type IssueLabelConnection {
  edges: [IssueLabelEdge!]!
  nodes: [IssueLabel!]!
  pageInfo: PageInfo!
}

"""An external link for a project."""
type ProjectLink implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The link's URL."""
  url: String!

  """The link's label."""
  label: String!

  """The user who created the link."""
  creator: User!

  """The project that the link is associated with."""
  project: Project!
}

type ProjectLinkEdge {
  node: ProjectLink!

  """Used in `before` and `after` args"""
  cursor: String!
}

type ProjectLinkConnection {
  edges: [ProjectLinkEdge!]!
  nodes: [ProjectLink!]!
  pageInfo: PageInfo!
}

"""Join table between projects and roadmaps"""
type RoadmapToProject implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The project that the roadmap is associated with."""
  project: Project!

  """The roadmap that the project is associated with."""
  roadmap: Roadmap!

  """The sort order of the project within the roadmap."""
  sortOrder: String!
}

type RoadmapToProjectEdge {
  node: RoadmapToProject!

  """Used in `before` and `after` args"""
  cursor: String!
}

type RoadmapToProjectConnection {
  edges: [RoadmapToProjectEdge!]!
  nodes: [RoadmapToProject!]!
  pageInfo: PageInfo!
}

"""A project."""
type Project implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The project's name."""
  name: String!

  """The project's description."""
  description: String!

  """The project's unique URL slug."""
  slugId: String!

  """The icon of the project."""
  icon: String

  """The project's color."""
  color: String!

  """The type of the state."""
  state: String!

  """The user who created the project."""
  creator: User!

  """The project lead."""
  lead: User

  """The time until which project update reminders are paused."""
  projectUpdateRemindersPausedUntilAt: DateTime

  """[Internal] The estimated start date of the project."""
  startDate: TimelessDate

  """The estimated completion date of the project."""
  targetDate: TimelessDate

  """The time at which the project was moved into started state."""
  startedAt: DateTime

  """The time at which the project was moved into completed state."""
  completedAt: DateTime

  """The time at which the project was moved into canceled state."""
  canceledAt: DateTime

  """
  The time at which the project was automatically archived by the auto pruning process.
  """
  autoArchivedAt: DateTime

  """The sort order for the project within the organization."""
  sortOrder: Float!

  """The project was created based on this issue."""
  convertedFromIssue: Issue

  """The total number of issues in the project after each week."""
  issueCountHistory: [Float!]!

  """The number of completed issues in the project after each week."""
  completedIssueCountHistory: [Float!]!

  """The total number of estimation points after each week."""
  scopeHistory: [Float!]!

  """The number of completed estimation points after each week."""
  completedScopeHistory: [Float!]!

  """The number of in progress estimation points after each week."""
  inProgressScopeHistory: [Float!]!

  """Whether to send new issue notifications to Slack."""
  slackNewIssue: Boolean!

  """Whether to send new issue comment notifications to Slack."""
  slackIssueComments: Boolean!

  """Whether to send new issue status updates to Slack."""
  slackIssueStatuses: Boolean!

  """Project URL."""
  url: String!

  """Teams associated with this project."""
  teams(
    """Filter returned teams."""
    filter: TeamFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamConnection!

  """Users that are members of the project."""
  members(
    """Filter returned users."""
    filter: UserFilter

    """Should query return disabled/suspended users (default: false)."""
    includeDisabled: Boolean

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): UserConnection!

  """Project updates associated with the project."""
  projectUpdates(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectUpdateConnection!

  """Documents associated with the project."""
  documents(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): DocumentConnection!

  """Milestones associated with the project."""
  projectMilestones(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectMilestoneConnection!

  """Issues associated with the project."""
  issues(
    """Filter returned issues."""
    filter: IssueFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!

  """Links associated with the project."""
  links(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectLinkConnection!

  """
  The overall progress of the project. This is the (completed estimate points + 0.25 * in progress estimate points) / total estimate points.
  """
  progress: Float!

  """The overall scope (total estimate points) of the project."""
  scope: Float!

  """Settings for all integrations associated with that project."""
  integrationsSettings: IntegrationsSettings
}

type ProjectEdge {
  node: Project!

  """Used in `before` and `after` args"""
  cursor: String!
}

type ProjectConnection {
  edges: [ProjectEdge!]!
  nodes: [Project!]!
  pageInfo: PageInfo!
}

"""[Internal] A draft issue."""
type IssueDraft implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The draft's title."""
  title: String!

  """The draft's description in markdown format."""
  description: String

  """The priority of the draft."""
  priority: Float!

  """The estimate of the complexity of the draft."""
  estimate: Float

  """The date at which the issue would be due."""
  dueDate: TimelessDate

  """The team associated with the draft."""
  teamId: String!

  """The cycle associated with the draft."""
  cycleId: String

  """The project associated with the draft."""
  projectId: String

  """The project milestone associated with the draft."""
  projectMilestoneId: String

  """The user who created the draft."""
  creator: User!

  """The user assigned to the draft."""
  assigneeId: String

  """The workflow state associated with the draft."""
  stateId: String!

  """The parent draft of the draft."""
  parent: IssueDraft

  """The parent issue of the draft."""
  parentIssue: Issue

  """
  The order of items in the sub-draft list. Only set if the draft has `parent` set.
  """
  subIssueSortOrder: Float

  """Label for the priority."""
  priorityLabel: String!

  """[Internal] The draft's description as a Prosemirror document."""
  descriptionData: JSON

  """Serialized array of JSONs representing attachments."""
  attachments: JSONObject!
}

"""An organizational unit that contains issues."""
type Team implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The team's name."""
  name: String!

  """The team's unique key. The key is used in URLs."""
  key: String!

  """The team's description."""
  description: String

  """The icon of the team."""
  icon: String

  """The team's color."""
  color: String

  """The organization that the team is associated with."""
  organization: Organization!

  """Whether the team uses cycles."""
  cyclesEnabled: Boolean!

  """The day of the week that a new cycle starts."""
  cycleStartDay: Float!

  """The duration of a cycle in weeks."""
  cycleDuration: Float!

  """The cooldown time after each cycle in weeks."""
  cycleCooldownTime: Float!

  """Auto assign started issues to current cycle."""
  cycleIssueAutoAssignStarted: Boolean!

  """Auto assign completed issues to current cycle."""
  cycleIssueAutoAssignCompleted: Boolean!

  """Only allow issues issues with cycles in Active Issues."""
  cycleLockToActive: Boolean!

  """How many upcoming cycles to create."""
  upcomingCycleCount: Float!

  """
  The timezone of the team. Defaults to "America/Los_Angeles"
  """
  timezone: String!

  """Unique hash for the team to be used in invite URLs."""
  inviteHash: String!

  """The issue estimation type to use."""
  issueEstimationType: String!

  """Whether issues without priority should be sorted first."""
  issueOrderingNoPriorityFirst: Boolean!

  """Whether to allow zeros in issues estimates."""
  issueEstimationAllowZero: Boolean!

  """Whether to move issues to bottom of the column when changing state."""
  issueSortOrderDefaultToBottom: Boolean!

  """Whether to add additional points to the estimate scale."""
  issueEstimationExtended: Boolean!

  """What to use as an default estimate for unestimated issues."""
  defaultIssueEstimate: Float!

  """Whether triage mode is enabled for the team or not."""
  triageEnabled: Boolean!

  """Whether an issue needs to have a priority set before leaving triage"""
  requirePriorityToLeaveTriage: Boolean!

  """
  The default workflow state into which issues are set when they are opened by team members.
  """
  defaultIssueState: WorkflowState

  """
  The default template to use for new issues created by members of the team.
  """
  defaultTemplateForMembers: Template

  """
  The id of the default template to use for new issues created by members of the team.
  """
  defaultTemplateForMembersId: String @deprecated(reason: "Use defaultTemplateForMembers instead")

  """
  The default template to use for new issues created by non-members of the team.
  """
  defaultTemplateForNonMembers: Template

  """
  The id of the default template to use for new issues created by non-members of the team.
  """
  defaultTemplateForNonMembersId: String @deprecated(reason: "Use defaultTemplateForNonMembers instead")

  """
  The workflow state into which issues are set when they are opened by non-team members or integrations if triage is enabled.
  """
  triageIssueState: WorkflowState

  """Whether the team is private or not."""
  private: Boolean!

  """
  The workflow state into which issues are moved when a PR has been opened as draft.
  """
  draftWorkflowState: WorkflowState

  """
  The workflow state into which issues are moved when a PR has been opened.
  """
  startWorkflowState: WorkflowState

  """
  The workflow state into which issues are moved when a review has been requested for the PR.
  """
  reviewWorkflowState: WorkflowState

  """
  The workflow state into which issues are moved when a PR has been merged.
  """
  mergeWorkflowState: WorkflowState

  """Whether to group recent issue history entries."""
  groupIssueHistory: Boolean!

  """Whether to send new issue notifications to Slack."""
  slackNewIssue: Boolean!

  """Whether to send new issue comment notifications to Slack."""
  slackIssueComments: Boolean!

  """Whether to send new issue status updates to Slack."""
  slackIssueStatuses: Boolean!

  """
  Period after which issues are automatically closed in months. Null/undefined means disabled.
  """
  autoClosePeriod: Float

  """
  The canceled workflow state which auto closed issues will be set to. Defaults to the first canceled state.
  """
  autoCloseStateId: String

  """
  Period after which automatically closed and completed issues are automatically archived in months.
  """
  autoArchivePeriod: Float!

  """
  The workflow state into which issues are moved when they are marked as a duplicate of another issue. Defaults to the first canceled state.
  """
  markedAsDuplicateWorkflowState: WorkflowState

  """Calendar feed URL (iCal) for cycles."""
  cycleCalenderUrl: String!

  """Issues associated with the team."""
  issues(
    """Filter returned issues."""
    filter: IssueFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!

  """Cycles associated with the team."""
  cycles(
    """Filter returned cycles."""
    filter: CycleFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CycleConnection!

  """Team's currently active cycle."""
  activeCycle: Cycle

  """Users who are members of this team."""
  members(
    """Filter returned users."""
    filter: UserFilter

    """Should query return disabled/suspended users (default: false)."""
    includeDisabled: Boolean

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): UserConnection!

  """
  Memberships associated with the team. For easier access of the same data, use `members` query.
  """
  memberships(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamMembershipConnection!

  """Projects associated with the team."""
  projects(
    """Filter returned projects."""
    filter: ProjectFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectConnection!

  """The states that define the workflow associated with the team."""
  states(
    """Filter returned workflow states."""
    filter: WorkflowStateFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): WorkflowStateConnection!

  """Templates associated with the team."""
  templates(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TemplateConnection!

  """Labels associated with the team."""
  labels(
    """Filter returned issue labels."""
    filter: IssueLabelFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueLabelConnection!

  """Webhooks associated with the team."""
  webhooks(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): WebhookConnection!

  """Settings for all integrations associated with that team."""
  integrationsSettings: IntegrationsSettings
}

type TeamEdge {
  node: Team!

  """Used in `before` and `after` args"""
  cursor: String!
}

type TeamConnection {
  edges: [TeamEdge!]!
  nodes: [Team!]!
  pageInfo: PageInfo!
}

"""A user account."""
type UserAccount {
  """The models identifier."""
  id: ID!

  """The time at which the model was created."""
  createdAt: DateTime!

  """The time at which the model was updated."""
  updatedAt: DateTime!

  """The time at which the model was archived."""
  archivedAt: DateTime

  """The user's name."""
  name: String

  """The user's email address."""
  email: String!

  """The authentication service used to create the account."""
  service: String!

  """Users belonging to the account."""
  users: [User!]!
}

"""A personal note for a user"""
type PersonalNote implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The user that owns the note."""
  user: User!

  """The note content as JSON."""
  contentData: JSONObject
}

"""A user that has access to the the resources of an organization."""
type User implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The user's full name."""
  name: String!

  """The user's display (nick) name. Unique within each organization."""
  displayName: String!

  """The user's email address."""
  email: String!

  """An URL to the user's avatar image."""
  avatarUrl: String

  """Reason why is the account disabled."""
  disableReason: String

  """Unique hash for the user to be used in invite URLs."""
  inviteHash: String!

  """[DEPRECATED] Hash for the user to be used in calendar URLs."""
  calendarHash: String

  """A short description of the user, either its title or bio."""
  description: String

  """The emoji to represent the user current status."""
  statusEmoji: String

  """The label of the user current status."""
  statusLabel: String

  """A date at which the user current status should be cleared."""
  statusUntilAt: DateTime

  """The local timezone of the user."""
  timezone: String

  """Organization the user belongs to."""
  organization: Organization!

  """
  The last time the user was seen online. If null, the user is currently online.
  """
  lastSeen: DateTime

  """
  Whether the user is a guest in the workspace and limited to accessing a subset of teams.
  """
  guest: Boolean!

  """Whether the user account is active or disabled (suspended)."""
  active: Boolean!

  """User's profile URL."""
  url: String!

  """Issues assigned to the user."""
  assignedIssues(
    """Filter returned issues."""
    filter: IssueFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!

  """Issues created by the user."""
  createdIssues(
    """Filter returned issues."""
    filter: IssueFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!

  """Number of issues created."""
  createdIssueCount: Int!

  """Teams the user is part of."""
  teams(
    """Filter returned teams."""
    filter: TeamFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamConnection!

  """
  Memberships associated with the user. For easier access of the same data, use `teams` query.
  """
  teamMemberships(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamMembershipConnection!

  """Whether the user is the currently authenticated user."""
  isMe: Boolean!

  """Whether the user is an organization administrator."""
  admin: Boolean!
}

type UserEdge {
  node: User!

  """Used in `before` and `after` args"""
  cursor: String!
}

type UserConnection {
  edges: [UserEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
}

"""Join table between templates and integrations"""
type IntegrationTemplate implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The template that the integration is associated with."""
  template: Template!

  """The integration that the template is associated with."""
  integration: Integration!
}

type IntegrationTemplateEdge {
  node: IntegrationTemplate!

  """Used in `before` and `after` args"""
  cursor: String!
}

type IntegrationTemplateConnection {
  edges: [IntegrationTemplateEdge!]!
  nodes: [IntegrationTemplate!]!
  pageInfo: PageInfo!
}

"""A template object used for creating entities faster."""
type Template implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The entity type this template is for."""
  type: String!

  """The name of the template."""
  name: String!

  """Template description."""
  description: String

  """Template data."""
  templateData: JSON!

  """
  The organization that the template is associated with. If null, the template is associated with a particular team.
  """
  organization: Organization

  """
  The team that the template is associated with. If null, the template is global to the workspace.
  """
  team: Team

  """The user who created the template."""
  creator: User

  """The user who last updated the template."""
  lastUpdatedBy: User
}

type TemplateEdge {
  node: Template!

  """Used in `before` and `after` args"""
  cursor: String!
}

type TemplateConnection {
  edges: [TemplateEdge!]!
  nodes: [Template!]!
  pageInfo: PageInfo!
}

"""The organization's SAML configuration"""
type SamlConfigurationPayload {
  """Sign in endpoint URL for the identity provider."""
  ssoEndpoint: String

  """
  Binding method for authentication call. Can be either `post` (default) or `redirect`.
  """
  ssoBinding: String

  """
  The algorithm of the Signing Certificate. Can be one of `sha1`, `sha256` (default), or `sha512`.
  """
  ssoSignAlgo: String

  """The issuer's custom entity ID."""
  issuerEntityId: String
}

type SamlConfiguration {
  """Sign in endpoint URL for the identity provider."""
  ssoEndpoint: String

  """
  Binding method for authentication call. Can be either `post` (default) or `redirect`.
  """
  ssoBinding: String

  """
  The algorithm of the Signing Certificate. Can be one of `sha1`, `sha256` (default), or `sha512`.
  """
  ssoSignAlgo: String

  """The issuer's custom entity ID."""
  issuerEntityId: String

  """X.509 Signing Certificate in string form."""
  ssoSigningCert: String
}

"""
An organization. Organizations are root-level objects that contain user accounts and teams.
"""
type Organization implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The organization's name."""
  name: String!

  """The organization's unique URL key."""
  urlKey: String!

  """The organization's logo URL."""
  logoUrl: String

  """Rolling 30-day total upload volume for the organization, in megabytes."""
  periodUploadVolume: Float!

  """
  How git branches are formatted. If null, default formatting will be used.
  """
  gitBranchFormat: String

  """
  Whether the Git integration linkback messages should be sent to private repositories.
  """
  gitLinkbackMessagesEnabled: Boolean!

  """
  Whether the Git integration linkback messages should be sent to public repositories.
  """
  gitPublicLinkbackMessagesEnabled: Boolean!

  """Whether the organization is using a roadmap."""
  roadmapEnabled: Boolean!

  """The frequency at which to prompt for project updates."""
  projectUpdatesReminderFrequency: ProjectUpdateReminderFrequency!

  """The day at which to prompt for project updates."""
  projectUpdateRemindersDay: Day!

  """The hour at which to prompt for project updates."""
  projectUpdateRemindersHour: Float!

  """Whether SAML authentication is enabled for organization."""
  samlEnabled: Boolean!

  """Whether SCIM provisioning is enabled for organization."""
  scimEnabled: Boolean!

  """Allowed authentication providers, empty array means all are allowed"""
  allowedAuthServices: [String!]!

  """The time at which deletion of the organization was requested."""
  deletionRequestedAt: DateTime

  """The time at which the trial of the plus plan will end."""
  trialEndsAt: DateTime

  """
  Previously used URL keys for the organization (last 3 are kept and redirected).
  """
  previousUrlKeys: [String!]!

  """The feature release channel the organization belongs to."""
  releaseChannel: ReleaseChannel!

  """Users associated with the organization."""
  users(
    """Should query return disabled/suspended users (default: false)."""
    includeDisabled: Boolean

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): UserConnection!

  """Teams associated with the organization."""
  teams(
    """Filter returned teams."""
    filter: TeamFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamConnection!

  """Integrations associated with the organization."""
  integrations(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IntegrationConnection!

  """The organization's subscription to a paid plan."""
  subscription: PaidSubscription

  """Number of active users in the organization."""
  userCount: Int!

  """Number of issues in the organization."""
  createdIssueCount: Int!

  """Templates associated with the organization."""
  templates(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TemplateConnection!

  """Labels associated with the organization."""
  labels(
    """Filter returned issue labels."""
    filter: IssueLabelFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueLabelConnection!
}

"""The frequency at which to send project update reminders."""
enum ProjectUpdateReminderFrequency {
  week
  twoWeeks
  never
}

"""The day of the week."""
enum Day {
  Sunday
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
}

"""Features release channel"""
enum ReleaseChannel {
  internal
  beta
  preRelease
  public
}

"""
Contains either the full serialized state of the application or delta packets that the requester can 
  apply to the local data set in order to be up-to-date.
"""
type SyncResponse {
  """
  The full state of the organization as a serialized JSON object.
      Mutually exclusive with the delta property
  """
  state: String

  """
  JSON serialized delta changes that the client can apply to its local state 
      in order to catch up with the state of the world.
  """
  delta: String

  """The sync groups that the user is subscribed to."""
  subscribedSyncGroups: [String!]!

  """The last sync id covered by the response."""
  lastSyncId: Float!

  """
  The version of the remote database. Incremented by 1 for each migration run on the database.
  """
  databaseVersion: Float!
}

"""OAuth2 client application"""
type OauthClient implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """OAuth application's client ID."""
  clientId: String!

  """OAuth application's client name."""
  name: String!

  """Information about the application."""
  description: String

  """Name of the developer."""
  developer: String!

  """Url of the developer."""
  developerUrl: String!

  """Image of the application."""
  imageUrl: String

  """OAuth application's client secret."""
  clientSecret: String!

  """List of allowed redirect URIs for the application."""
  redirectUris: [String!]!

  """
  Whether the OAuth application is publicly visible, or only visible to the creating workspace.
  """
  publicEnabled: Boolean!

  """The user who created the OAuthClient."""
  creator: User!

  """The organization that the OAuthClient is associated with."""
  organization: Organization!

  """The resource types to request when creating new webhooks."""
  webhookResourceTypes: [String!]!

  """Webhook URL"""
  webhookUrl: String

  """Webhook secret token for verifying the origin on the recipient side."""
  webhookSecret: String
}

type OauthClientEdge {
  node: OauthClient!

  """Used in `before` and `after` args"""
  cursor: String!
}

type OauthClientConnection {
  edges: [OauthClientEdge!]!
  nodes: [OauthClient!]!
  pageInfo: PageInfo!
}

"""Issue attachment (e.g. support ticket, pull request)."""
type Attachment implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """Content for the title line in the Linear attachment widget."""
  title: String!

  """Content for the subtitle line in the Linear attachment widget."""
  subtitle: String

  """Location of the attachment which is also used as an identifier."""
  url: String!

  """The creator of the attachment."""
  creator: User

  """Custom metadata related to the attachment."""
  metadata: JSONObject!

  """Information about the source which created the attachment."""
  source: JSONObject

  """
  An accessor helper to source.type, defines the source type of the attachment.
  """
  sourceType: String

  """
  Indicates if attachments for the same source application should be grouped in the Linear UI.
  """
  groupBySource: Boolean!

  """The issue this attachment belongs to."""
  issue: Issue!
}

type AttachmentEdge {
  node: Attachment!

  """Used in `before` and `after` args"""
  cursor: String!
}

type AttachmentConnection {
  edges: [AttachmentEdge!]!
  nodes: [Attachment!]!
  pageInfo: PageInfo!
}

"""Workspace audit log entry object."""
type AuditEntry implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  type: String!

  """The organization the audit log belongs to."""
  organization: Organization

  """The user that caused the audit entry to be created."""
  actor: User

  """The ID of the user that caused the audit entry to be created."""
  actorId: String

  """IP from actor when entry was recorded."""
  ip: String

  """Country code of request resulting to audit entry."""
  countryCode: String

  """Additional metadata related to the audit entry."""
  metadata: JSONObject

  """
  Additional information related to the request which performed the action.
  """
  requestInformation: JSONObject
}

type NotificationSubscriptionEdge {
  node: NotificationSubscription!

  """Used in `before` and `after` args"""
  cursor: String!
}

type NotificationSubscriptionConnection {
  edges: [NotificationSubscriptionEdge!]!
  nodes: [NotificationSubscription!]!
  pageInfo: PageInfo!
}

"""A basic entity."""
interface Entity implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
}

"""The type of a project notification subscription."""
enum ProjectNotificationSubscriptionType {
  importantOnly
  custom
  all
}

"""
Holds information about when a user has interacted with a project update.
"""
type ProjectUpdateInteraction implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The user that has interacted with the project update."""
  user: User!

  """The project update that has been interacted with."""
  projectUpdate: ProjectUpdate!

  """The time at which the user read the project update."""
  readAt: DateTime!
}

type ProjectUpdateInteractionEdge {
  node: ProjectUpdateInteraction!

  """Used in `before` and `after` args"""
  cursor: String!
}

type ProjectUpdateInteractionConnection {
  edges: [ProjectUpdateInteractionEdge!]!
  nodes: [ProjectUpdateInteraction!]!
  pageInfo: PageInfo!
}

"""A update associated with an project."""
type ProjectUpdate implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The update content in markdown format."""
  body: String!

  """The project that the update is associated with."""
  project: Project!

  """The health of the project at the time of the update."""
  health: ProjectUpdateHealthType!

  """The user who wrote the update."""
  user: User!

  """The time the project update was edited."""
  editedAt: DateTime

  """The URL to the project update."""
  url: String!
}

"""The health type of a project when the update is created."""
enum ProjectUpdateHealthType {
  onTrack
  atRisk
  offTrack
}

type ProjectUpdateEdge {
  node: ProjectUpdate!

  """Used in `before` and `after` args"""
  cursor: String!
}

type ProjectUpdateConnection {
  edges: [ProjectUpdateEdge!]!
  nodes: [ProjectUpdate!]!
  pageInfo: PageInfo!
}

"""A reaction associated with a comment or a project update."""
type Reaction implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """Name of the reaction's emoji."""
  emoji: String!

  """The user who reacted."""
  user: User!
}

"""A comment associated with an issue."""
type Comment implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The comment content in markdown format."""
  body: String!

  """The issue that the comment is associated with."""
  issue: Issue!

  """The parent comment under which the current comment is nested."""
  parent: Comment

  """The user who wrote the comment."""
  user: User

  """[ALPHA] The external user who wrote the comment."""
  externalUser: ExternalUser

  """The time user edited the comment."""
  editedAt: DateTime

  """The comment content as a Prosemirror document."""
  bodyData: String!

  """Emoji reaction summary, grouped by emoji type"""
  reactionData: JSONObject!

  """Comment's URL."""
  url: String!

  """The children of the comment."""
  children(
    """Filter returned comments."""
    filter: CommentFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CommentConnection!
}

type CommentEdge {
  node: Comment!

  """Used in `before` and `after` args"""
  cursor: String!
}

type CommentConnection {
  edges: [CommentEdge!]!
  nodes: [Comment!]!
  pageInfo: PageInfo!
}

"""A custom view that has been saved by a user."""
type CustomView implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The name of the custom view."""
  name: String!

  """The description of the custom view."""
  description: String

  """The icon of the custom view."""
  icon: String

  """The color of the icon of the custom view."""
  color: String

  """The organization of the custom view."""
  organization: Organization!

  """The team associated with the custom view."""
  team: Team

  """The user who created the custom view."""
  creator: User!

  """The filters applied to issues in the custom view."""
  filters: JSONObject! @deprecated(reason: "Will be replaced by `filterData` in a future update")

  """The filter applied to issues in the custom view."""
  filterData: JSONObject!

  """[ALPHA] The filter applied to projects in the custom view."""
  projectFilterData: JSONObject

  """Whether the custom view is shared with everyone in the organization."""
  shared: Boolean!
}

type CustomViewEdge {
  node: CustomView!

  """Used in `before` and `after` args"""
  cursor: String!
}

type CustomViewConnection {
  edges: [CustomViewEdge!]!
  nodes: [CustomView!]!
  pageInfo: PageInfo!
}

"""A document for a project."""
type Document implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The document title."""
  title: String!

  """The document content in markdown format."""
  content: String

  """The document content as JSON."""
  contentData: JSONObject

  """The icon of the document."""
  icon: String

  """The color of the icon."""
  color: String

  """The user who created the document."""
  creator: User!

  """The user who last updated the document."""
  updatedBy: User!

  """The project that the document is associated with."""
  project: Project!

  """The document's unique URL slug."""
  slugId: String!
}

type DocumentEdge {
  node: Document!

  """Used in `before` and `after` args"""
  cursor: String!
}

type DocumentConnection {
  edges: [DocumentEdge!]!
  nodes: [Document!]!
  pageInfo: PageInfo!
}

"""A custom emoji."""
type Emoji implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The emoji's name."""
  name: String!

  """The emoji image URL."""
  url: String!

  """The source of the emoji."""
  source: String!

  """The user who created the emoji."""
  creator: User!

  """The organization that the emoji belongs to."""
  organization: Organization!
}

type EmojiEdge {
  node: Emoji!

  """Used in `before` and `after` args"""
  cursor: String!
}

type EmojiConnection {
  edges: [EmojiEdge!]!
  nodes: [Emoji!]!
  pageInfo: PageInfo!
}

"""
[ALPHA] An external authenticated (e.g., through Slack) user which doesn't have a Linear account, but can create and update entities in Linear from the external system that authenticated them.
"""
type ExternalUser implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The external user's full name."""
  name: String!

  """
  The external user's display name. Unique within each organization. Can match the display name of an actual user.
  """
  displayName: String!

  """The external user's email address."""
  email: String!

  """An URL to the external user's avatar image."""
  avatarUrl: String

  """Organization the external user belongs to."""
  organization: Organization!

  """The last time the external user was seen interacting with Linear."""
  lastSeen: DateTime
}

type ExternalUserEdge {
  node: ExternalUser!

  """Used in `before` and `after` args"""
  cursor: String!
}

type ExternalUserConnection {
  edges: [ExternalUserEdge!]!
  nodes: [ExternalUser!]!
  pageInfo: PageInfo!
}

"""User favorites presented in the sidebar."""
type Favorite implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The type of the favorite."""
  type: String!

  """The parent folder of the favorite."""
  parent: Favorite

  """The name of the folder. Only applies to favorites of type folder."""
  folderName: String

  """The favorited issue."""
  issue: Issue

  """The favorited project."""
  project: Project

  """The favorited team of the project."""
  projectTeam: Team

  """The favorited cycle."""
  cycle: Cycle

  """The favorited custom view."""
  customView: CustomView

  """The team of the favorited predefiend view. """
  predefinedViewTeam: Team

  """The type of favorited predefiend view."""
  predefinedViewType: String

  """The favorited document."""
  document: Document

  """The favorited roadmap."""
  roadmap: Roadmap

  """The favorited label."""
  label: IssueLabel

  """The owner of the favorite."""
  user: User!

  """The order of the item in the favorites list."""
  sortOrder: Float!

  """Children of the favorite. Only applies to favorites of type folder."""
  children(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): FavoriteConnection!
}

type FavoriteEdge {
  node: Favorite!

  """Used in `before` and `after` args"""
  cursor: String!
}

type FavoriteConnection {
  edges: [FavoriteEdge!]!
  nodes: [Favorite!]!
  pageInfo: PageInfo!
}

"""A roadmap for projects."""
type Roadmap implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The name of the roadmap."""
  name: String!

  """The description of the roadmap."""
  description: String

  """The organization of the roadmap."""
  organization: Organization!

  """The user who created the roadmap."""
  creator: User!

  """The user who owns the roadmap."""
  owner: User!

  """The roadmap's unique URL slug."""
  slugId: String!

  """The sort order of the roadmap within the organization."""
  sortOrder: Float!

  """The roadmap's color."""
  color: String

  """Projects associated with the roadmap."""
  projects(
    """Filter returned projects."""
    filter: ProjectFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectConnection!
}

type RoadmapEdge {
  node: Roadmap!

  """Used in `before` and `after` args"""
  cursor: String!
}

type RoadmapConnection {
  edges: [RoadmapEdge!]!
  nodes: [Roadmap!]!
  pageInfo: PageInfo!
}

"""Intercom specific settings."""
type IntercomSettings {
  """
  Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled).
  """
  sendNoteOnStatusChange: Boolean

  """
  Whether an internal message should be added when someone comments on an issue.
  """
  sendNoteOnComment: Boolean

  """
  Whether a ticket should be automatically reopened when its linked Linear issue is completed.
  """
  automateTicketReopeningOnCompletion: Boolean

  """
  Whether a ticket should be automatically reopened when its linked Linear issue is cancelled.
  """
  automateTicketReopeningOnCancellation: Boolean

  """
  Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue
  """
  automateTicketReopeningOnComment: Boolean
}

"""Front specific settings."""
type FrontSettings {
  """
  Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled).
  """
  sendNoteOnStatusChange: Boolean

  """
  Whether an internal message should be added when someone comments on an issue.
  """
  sendNoteOnComment: Boolean

  """
  Whether a ticket should be automatically reopened when its linked Linear issue is completed.
  """
  automateTicketReopeningOnCompletion: Boolean

  """
  Whether a ticket should be automatically reopened when its linked Linear issue is cancelled.
  """
  automateTicketReopeningOnCancellation: Boolean

  """
  Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue
  """
  automateTicketReopeningOnComment: Boolean
}

"""Slack notification specific settings."""
type SlackPostSettings {
  channel: String!
  channelId: String!
  configurationUrl: String!
}

"""Metadata and settings for a GitHub integration."""
type GitHubSettings {
  """The avatar URL for the GitHub organization"""
  orgAvatarUrl: String!

  """The GitHub organization's name"""
  orgLogin: String!
}

"""Google Sheets specific settings."""
type GoogleSheetsSettings {
  spreadsheetId: String!
  spreadsheetUrl: String!
  sheetId: Float!
  updatedIssuesAt: DateTime!
}

"""Metadata about a Jira project."""
type JiraProjectData {
  """The Jira id for this project."""
  id: String!

  """The Jira key for this project, such as ENG."""
  key: String!

  """The Jira name for this project, such as Engineering."""
  name: String!
}

"""Tuple for mapping Jira projects to Linear teams."""
type JiraLinearMapping {
  """The Jira id for this project."""
  jiraProjectId: String!

  """The Linear team id to map to the given project."""
  linearTeamId: String!
}

"""Jira specific settings."""
type JiraSettings {
  """The mapping of Jira project id => Linear team id."""
  projectMapping: [JiraLinearMapping!]

  """The Jira projects for the organization."""
  projects: [JiraProjectData!]!
}

"""Notion specific settings."""
type NotionSettings {
  """The ID of the Notion workspace being connected."""
  workspaceId: String!

  """The name of the Notion workspace being connected."""
  workspaceName: String!
}

"""Sentry specific settings."""
type SentrySettings {
  """The slug of the Sentry organization being connected."""
  organizationSlug: String!
}

"""Zendesk specific settings."""
type ZendeskSettings {
  """
  Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled).
  """
  sendNoteOnStatusChange: Boolean

  """
  Whether an internal message should be added when someone comments on an issue.
  """
  sendNoteOnComment: Boolean

  """
  Whether a ticket should be automatically reopened when its linked Linear issue is completed.
  """
  automateTicketReopeningOnCompletion: Boolean

  """
  Whether a ticket should be automatically reopened when its linked Linear issue is cancelled.
  """
  automateTicketReopeningOnCancellation: Boolean

  """
  Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue
  """
  automateTicketReopeningOnComment: Boolean

  """The subdomain of the Zendesk organization being connected."""
  subdomain: String!

  """The URL of the connected Zendesk organization."""
  url: String!

  """The ID of the Linear bot user."""
  botUserId: String
}

"""The integration resource's settings"""
type IntegrationSettings {
  slackPost: SlackPostSettings
  slackProjectPost: SlackPostSettings
  slackOrgProjectUpdatesPost: SlackPostSettings
  googleSheets: GoogleSheetsSettings
  gitHub: GitHubSettings
  sentry: SentrySettings
  zendesk: ZendeskSettings
  intercom: IntercomSettings
  front: FrontSettings
  jira: JiraSettings
  notion: NotionSettings
}

"""An integration with an external service."""
type Integration implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The integration's type."""
  service: String!

  """The organization that the integration is associated with."""
  organization: Organization!

  """The team that the integration is associated with."""
  team: Team

  """The user that added the integration."""
  creator: User!
}

type IntegrationEdge {
  node: Integration!

  """Used in `before` and `after` args"""
  cursor: String!
}

type IntegrationConnection {
  edges: [IntegrationEdge!]!
  nodes: [Integration!]!
  pageInfo: PageInfo!
}

"""The configuration of all integrations for a project or a team."""
type IntegrationsSettings implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """
  Whether to send a Slack message when a new issue is created for the project or the team.
  """
  slackIssueCreated: Boolean

  """
  Whether to send a Slack message when a comment is created on any of the project or team's issues.
  """
  slackIssueNewComment: Boolean

  """
  Whether to send a Slack message when any of the project or team's issues change to completed or cancelled.
  """
  slackIssueStatusChangedDone: Boolean

  """
  Whether to send a Slack message when any of the project or team's issues has a change in status.
  """
  slackIssueStatusChangedAll: Boolean

  """Whether to send a Slack message when a project update is created."""
  slackProjectUpdateCreated: Boolean

  """Whether to send a new project update to team Slack channels."""
  slackProjectUpdateCreatedToTeam: Boolean

  """Whether to send a new project update to workspace Slack channel."""
  slackProjectUpdateCreatedToWorkspace: Boolean

  """Whether to send a Slack message when a new issue is added to triage."""
  slackIssueAddedToTriage: Boolean

  """Whether to send a Slack message when an SLA is at high risk"""
  slackIssueSlaHighRisk: Boolean

  """Whether to send a Slack message when an SLA is breached"""
  slackIssueSlaBreached: Boolean

  """Team which those settings apply to."""
  team: Team

  """Project which those settings apply to."""
  project: Project
}

type IntegrationsSettingsEdge {
  node: IntegrationsSettings!

  """Used in `before` and `after` args"""
  cursor: String!
}

type IntegrationsSettingsConnection {
  edges: [IntegrationsSettingsEdge!]!
  nodes: [IntegrationsSettings!]!
  pageInfo: PageInfo!
}

"""Issue relation history's payload"""
type IssueRelationHistoryPayload {
  """The identifier of the related issue."""
  identifier: String!

  """The type of the change."""
  type: String!
}

"""A record of changes to an issue."""
type IssueHistory implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The issue that was changed."""
  issue: Issue!

  """
  The user who made these changes. If null, possibly means that the change made by an integration.
  """
  actor: User

  """
  The id of user who made these changes. If null, possibly means that the change made by an integration.
  """
  actorId: String

  """Whether the issue's description was updated."""
  updatedDescription: Boolean

  """What the title was changed from."""
  fromTitle: String

  """What the title was changed to."""
  toTitle: String

  """The user from whom the issue was re-assigned from."""
  fromAssignee: User

  """The id of user from whom the issue was re-assigned from."""
  fromAssigneeId: String

  """The user to whom the issue was assigned to."""
  toAssignee: User

  """The id of user to whom the issue was assigned to."""
  toAssigneeId: String

  """What the priority was changed from."""
  fromPriority: Float

  """What the priority was changed to."""
  toPriority: Float

  """The team from which the issue was moved from."""
  fromTeam: Team

  """The id of team from which the issue was moved from."""
  fromTeamId: String

  """The team to which the issue was moved to."""
  toTeam: Team

  """The id of team to which the issue was moved to."""
  toTeamId: String

  """The previous parent of the issue."""
  fromParent: Issue

  """The id of previous parent of the issue."""
  fromParentId: String

  """The new parent of the issue."""
  toParent: Issue

  """The id of new parent of the issue."""
  toParentId: String

  """The previous workflow state of the issue."""
  fromState: WorkflowState

  """The id of previous workflow state of the issue."""
  fromStateId: String

  """The new workflow state of the issue."""
  toState: WorkflowState

  """The id of new workflow state of the issue."""
  toStateId: String

  """The previous cycle of the issue."""
  fromCycle: Cycle

  """The id of previous cycle of the issue."""
  fromCycleId: String

  """The new cycle of the issue."""
  toCycle: Cycle

  """The id of new cycle of the issue."""
  toCycleId: String

  """The new project created from the issue."""
  toConvertedProject: Project

  """The id of new project created from the issue."""
  toConvertedProjectId: String

  """The previous project of the issue."""
  fromProject: Project

  """The id of previous project of the issue."""
  fromProjectId: String

  """The new project of the issue."""
  toProject: Project

  """The id of new project of the issue."""
  toProjectId: String

  """What the estimate was changed from."""
  fromEstimate: Float

  """What the estimate was changed to."""
  toEstimate: Float

  """Whether the issue was archived or un-archived."""
  archived: Boolean

  """Whether the issue was trashed or un-trashed."""
  trashed: Boolean

  """The import record."""
  issueImport: IssueImport

  """The linked attachment."""
  attachment: Attachment

  """The id of linked attachment."""
  attachmentId: String

  """ID's of labels that were added."""
  addedLabelIds: [String!]

  """ID's of labels that were removed."""
  removedLabelIds: [String!]

  """Changed issue relationships."""
  relationChanges: [IssueRelationHistoryPayload!]

  """Whether the issue was auto-closed."""
  autoClosed: Boolean

  """Whether the issue was auto-archived."""
  autoArchived: Boolean

  """What the due date was changed from"""
  fromDueDate: TimelessDate

  """What the due date was changed to"""
  toDueDate: TimelessDate

  """
  [Internal] Serialized JSON representing changes for certain non-relational properties.
  """
  changes: JSONObject
}

type IssueHistoryEdge {
  node: IssueHistory!

  """Used in `before` and `after` args"""
  cursor: String!
}

type IssueHistoryConnection {
  edges: [IssueHistoryEdge!]!
  nodes: [IssueHistory!]!
  pageInfo: PageInfo!
}

"""A relation between two issues."""
type IssueRelation implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The relationship of the issue with the related issue."""
  type: String!

  """The issue whose relationship is being described."""
  issue: Issue!

  """The related issue."""
  relatedIssue: Issue!
}

type IssueRelationEdge {
  node: IssueRelation!

  """Used in `before` and `after` args"""
  cursor: String!
}

type IssueRelationConnection {
  edges: [IssueRelationEdge!]!
  nodes: [IssueRelation!]!
  pageInfo: PageInfo!
}

"""
Request to install OAuth clients on organizations and the response to the request.
"""
type OauthClientApproval implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The uuid of the OAuth client being requested for installation."""
  oauthClientId: String!

  """The person who requested installing the OAuth client."""
  requesterId: String!

  """The person who responded to the request to install the OAuth client."""
  responderId: String

  """The status for the OAuth client approval request."""
  status: OAuthClientApprovalStatus!

  """The scopes the app has requested."""
  scopes: [String!]!

  """The reason the person wants to install this OAuth client."""
  requestReason: String

  """The reason the request for the OAuth client approval was denied."""
  denyReason: String
}

"""
The different requests statuses possible for an OAuth client approval request
"""
enum OAuthClientApprovalStatus {
  requested
  approved
  denied
}

"""Defines the use of a domain by an organization."""
type OrganizationDomain implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """Domain name"""
  name: String!

  """Is this domain verified"""
  verified: Boolean!

  """E-mail used to verify this domain"""
  verificationEmail: String

  """The user who added the domain."""
  creator: User

  """What type of auth is the domain used for"""
  authType: OrganizationDomainAuthType!

  """
  Whether the domains was claimed by the organization through DNS verification.
  """
  claimed: Boolean
}

"""What type of auth is the domain used for."""
enum OrganizationDomainAuthType {
  saml
  general
}

"""An invitation to the organization that has been sent via email."""
type OrganizationInvite implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The invitees email address."""
  email: String!

  """The user role that the invitee will receive upon accepting the invite."""
  role: UserRoleType!

  """The invite was sent to external address."""
  external: Boolean!

  """
  The time at which the invite was accepted. Null, if the invite hasn't been accepted
  """
  acceptedAt: DateTime

  """
  The time at which the invite will be expiring. Null, if the invite shouldn't expire
  """
  expiresAt: DateTime

  """The user who created the invitation."""
  inviter: User!

  """
  The user who has accepted the invite. Null, if the invite hasn't been accepted.
  """
  invitee: User

  """The organization that the invite is associated with."""
  organization: Organization!
}

"""The different permission roles available to users on an organization"""
enum UserRoleType {
  admin
  guest
  user
}

type OrganizationInviteEdge {
  node: OrganizationInvite!

  """Used in `before` and `after` args"""
  cursor: String!
}

type OrganizationInviteConnection {
  edges: [OrganizationInviteEdge!]!
  nodes: [OrganizationInvite!]!
  pageInfo: PageInfo!
}

"""A milestone for a project."""
type ProjectMilestone implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The name of the project milestone."""
  name: String!

  """The description of the project milestone."""
  description: String

  """The planned completion date of the milestone."""
  targetDate: TimelessDate

  """The project of the milestone."""
  project: Project!

  """
  The order of the milestone in relation to other milestones within a project.
  """
  sortOrder: Float!
}

type ProjectMilestoneEdge {
  node: ProjectMilestone!

  """Used in `before` and `after` args"""
  cursor: String!
}

type ProjectMilestoneConnection {
  edges: [ProjectMilestoneEdge!]!
  nodes: [ProjectMilestone!]!
  pageInfo: PageInfo!
}

"""A user's web browser push notification subscription."""
type PushSubscription implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
}

type PushSubscriptionEdge {
  node: PushSubscription!

  """Used in `before` and `after` args"""
  cursor: String!
}

type PushSubscriptionConnection {
  edges: [PushSubscriptionEdge!]!
  nodes: [PushSubscription!]!
  pageInfo: PageInfo!
}

"""The paid subscription of an organization."""
type PaidSubscription implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The subscription type."""
  type: String!

  """The number of seats in the subscription."""
  seats: Float!

  """The minimum number of seats that will be billed in the subscription."""
  seatsMinimum: Float

  """The maximum number of seats that will be billed in the subscription."""
  seatsMaximum: Float

  """The creator of the subscription."""
  creator: User

  """The organization that the subscription is associated with."""
  organization: Organization!

  """The date the subscription was canceled, if any."""
  canceledAt: DateTime

  """The subscription type of a pending change. Null if no change pending."""
  pendingChangeType: String

  """The date the subscription will be billed next."""
  nextBillingAt: DateTime
}

"""Defines the membership of a user to a team."""
type TeamMembership implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The user that the membership is associated with."""
  user: User!

  """The team that the membership is associated with."""
  team: Team!

  """Whether the user is the owner of the team"""
  owner: Boolean

  """The order of the item in the users team list."""
  sortOrder: Float!
}

type TeamMembershipEdge {
  node: TeamMembership!

  """Used in `before` and `after` args"""
  cursor: String!
}

type TeamMembershipConnection {
  edges: [TeamMembershipEdge!]!
  nodes: [TeamMembership!]!
  pageInfo: PageInfo!
}

"""[INTERNAL] An email change verification challenge."""
type UserAccountEmailChange {
  """The model's identifier."""
  id: ID!

  """The time at which the model was updated."""
  updatedAt: DateTime!

  """The time at which the model was archived."""
  archivedAt: DateTime

  """The user account's current email."""
  oldEmail: String!

  """The timestamp the old email was verified at."""
  oldEmailVerifiedAt: DateTime

  """The new email the user account wants to change to."""
  newEmail: String!

  """The timestamp the new email was verified at."""
  newEmailVerifiedAt: DateTime

  """The timestamp the verification codes expire at."""
  expiresAt: DateTime!

  """The timestamp this verification challenge was canceled at."""
  canceledAt: DateTime
}

"""The settings of a user as a JSON object."""
type UserSettings implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The notification channel settings the user has selected."""
  notificationPreferences: JSONObject!

  """The email types the user has unsubscribed from."""
  unsubscribedFrom: [String!]!

  """The user associated with these settings."""
  user: User!

  """Hash for the user to be used in calendar URLs."""
  calendarHash: String
}

"""View preferences."""
type ViewPreferences implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The view preference type."""
  type: String!

  """The view type."""
  viewType: String!
}

"""A webhook used to send HTTP notifications over data updates"""
type Webhook implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """Webhook label"""
  label: String

  """Webhook URL"""
  url: String

  """Whether the Webhook is enabled."""
  enabled: Boolean!

  """
  The team that the webhook is associated with. If null, the webhook is associated with all public teams of the organization.
  """
  team: Team

  """
  Whether the Webhook is enabled for all public teams, including teams created after the webhook was created.
  """
  allPublicTeams: Boolean!

  """The user who created the webhook."""
  creator: User

  """Secret token for verifying the origin on the recipient side."""
  secret: String

  """The resource types this webhook is subscribed to."""
  resourceTypes: [String!]!
}

type WebhookEdge {
  node: Webhook!

  """Used in `before` and `after` args"""
  cursor: String!
}

type WebhookConnection {
  edges: [WebhookEdge!]!
  nodes: [Webhook!]!
  pageInfo: PageInfo!
}

type WorkflowCronJobDefinition implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The name of the workflow cron job."""
  name: String!

  """The description of the workflow cron job."""
  description: String
  enabled: Boolean!

  """The team associated with the workflow cron job."""
  team: Team!

  """The user who created the workflow cron job."""
  creator: User!

  """Cron schedule which is used to execute the workflow cron job."""
  schedule: JSONObject!

  """
  An array of activities that will be executed as part of the workflow cron job.
  """
  activities: JSONObject!

  """
  The sort order of the workflow cron job definition within its siblings.
  """
  sortOrder: String!
}

type WorkflowCronJobDefinitionEdge {
  node: WorkflowCronJobDefinition!

  """Used in `before` and `after` args"""
  cursor: String!
}

type WorkflowCronJobDefinitionConnection {
  edges: [WorkflowCronJobDefinitionEdge!]!
  nodes: [WorkflowCronJobDefinition!]!
  pageInfo: PageInfo!
}

type WorkflowDefinition implements Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The name of the workflow."""
  name: String!

  """The name of the group that the workflow belongs to."""
  groupName: String

  """The description of the workflow."""
  description: String

  """The type of the workflow."""
  type: WorkflowType!

  """The type of the event that triggers off the workflow."""
  trigger: WorkflowTrigger!

  """The object type (e.g. Issue) that triggers this workflow."""
  triggerType: WorkflowTriggerType!

  """The conditions that need to be match for the workflow to be triggered."""
  conditions: JSONObject!
  enabled: Boolean!

  """
  The team associated with the workflow. If not set, the workflow is associated with the entire organization.
  """
  team: Team

  """The user who created the workflow."""
  creator: User!

  """An array of activities that will be executed as part of the workflow."""
  activities: JSONObject!

  """The sort order of the workflow definition within its siblings."""
  sortOrder: String!
}

enum WorkflowType {
  sla
  custom
}

enum WorkflowTrigger {
  entityCreated
  entityUpdated
  entityCreatedOrUpdated
  entityRemoved
  entityUnarchived
}

enum WorkflowTriggerType {
  issue
  project
}

type WorkflowDefinitionEdge {
  node: WorkflowDefinition!

  """Used in `before` and `after` args"""
  cursor: String!
}

type WorkflowDefinitionConnection {
  edges: [WorkflowDefinitionEdge!]!
  nodes: [WorkflowDefinition!]!
  pageInfo: PageInfo!
}

type SynchronizedPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!
}

type ArchivePayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """Whether the operation was successful."""
  success: Boolean!
}

type EventPayload {
  """Whether the operation was successful."""
  success: Boolean!
}

type ApiKeyPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The API key that was created."""
  apiKey: ApiKey!

  """Whether the operation was successful."""
  success: Boolean!
}

"""Public information of the OAuth application."""
type Application {
  """OAuth application's ID."""
  id: String!

  """OAuth application's client ID."""
  clientId: String!

  """Application name."""
  name: String!

  """Information about the application."""
  description: String

  """Name of the developer."""
  developer: String!

  """Url of the developer (homepage or docs)."""
  developerUrl: String!

  """Image of the application."""
  imageUrl: String
}

"""
Public information of the OAuth application, plus whether the application has been authorized for the given scopes.
"""
type UserAuthorizedApplication {
  """OAuth application's ID."""
  id: String!

  """OAuth application's client ID."""
  clientId: String!

  """Application name."""
  name: String!

  """Information about the application."""
  description: String

  """Name of the developer."""
  developer: String!

  """Url of the developer (homepage or docs)."""
  developerUrl: String!

  """Image of the application."""
  imageUrl: String

  """Whether the user has authorized the application for the given scopes."""
  isAuthorized: Boolean!

  """Whether the application was created by Linear."""
  createdByLinear: Boolean!

  """Whether or not webhooks are enabled for the application."""
  webhooksEnabled: Boolean!

  """
  Error associated with the application needing to be requested for approval in the workspace
  """
  approvalErrorCode: String
}

"""
[INTERNAL] Public information of the OAuth application, plus the authorized scopes for a given user.
"""
type AuthorizedApplication {
  """Application name."""
  name: String!

  """Image of the application."""
  imageUrl: String

  """Scopes that are authorized for this application for a given user."""
  scope: [String!]!

  """OAuth application's ID."""
  appId: String!

  """OAuth application's client ID."""
  clientId: String!

  """Whether or not webhooks are enabled for the application."""
  webhooksEnabled: Boolean!
}

"""[INTERNAL] An OAuth userId/createdDate tuple"""
type AuthMembership {
  """The authorizing userId"""
  userId: String!

  """The date of the authorization"""
  createdAt: DateTime!
}

"""
[INTERNAL] Public information of the OAuth application, plus the userIds and scopes for those users.
"""
type WorkspaceAuthorizedApplication {
  """Application name."""
  name: String!

  """Image of the application."""
  imageUrl: String

  """Scopes that are authorized for this application for a given user."""
  scope: [String!]!

  """OAuth application's ID."""
  appId: String!

  """OAuth application's client ID."""
  clientId: String!

  """Whether or not webhooks are enabled for the application."""
  webhooksEnabled: Boolean!

  """Total number of members that authorized the application"""
  totalMembers: Float!

  """
  UserIds and membership dates of everyone who has authorized the application with the set of scopes
  """
  memberships: [AuthMembership!]!
}

type AttachmentPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The issue attachment that was created."""
  attachment: Attachment!

  """Whether the operation was successful."""
  success: Boolean!
}

type FrontAttachmentPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """Whether the operation was successful."""
  success: Boolean!
}

type AuditEntryEdge {
  node: AuditEntry!

  """Used in `before` and `after` args"""
  cursor: String!
}

type AuditEntryConnection {
  edges: [AuditEntryEdge!]!
  nodes: [AuditEntry!]!
  pageInfo: PageInfo!
}

type AuditEntryType {
  """The audit entry type."""
  type: String!

  """Description of the audit entry type."""
  description: String!
}

type CreateOrJoinOrganizationResponse {
  organization: Organization!
  user: User!
}

type EmailUserAccountAuthChallengeResponse {
  """Whether the operation was successful."""
  success: Boolean!

  """
  Supported challenge for this user account. Can be either verificationCode or password.
  """
  authType: String!
}

type SsoUrlFromEmailResponse {
  """Whether the operation was successful."""
  success: Boolean!

  """SAML SSO sign-in URL."""
  samlSsoUrl: String!
}

type LogoutResponse {
  """Whether the operation was successful."""
  success: Boolean!
}

type CommentPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The comment that was created or updated."""
  comment: Comment!

  """Whether the operation was successful."""
  success: Boolean!
}

type ContactPayload {
  """Whether the operation was successful."""
  success: Boolean!
}

type CustomViewPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The custom view that was created or updated."""
  customView: CustomView!

  """Whether the operation was successful."""
  success: Boolean!
}

type CustomViewSuggestionPayload {
  """The suggested view name."""
  suggestedName: String

  """The suggested view description."""
  suggestedDescription: String

  """The suggested view icon."""
  suggestedIcon: String
}

type CyclePayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The Cycle that was created or updated."""
  cycle: Cycle

  """Whether the operation was successful."""
  success: Boolean!
}

type DocumentPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The document that was created or updated."""
  document: Document!

  """Whether the operation was successful."""
  success: Boolean!
}

type EmailSubscribePayload {
  """[INTERNAL] Whether the operation was successful."""
  success: Boolean!
}

type EmailUnsubscribePayload {
  """Whether the operation was successful."""
  success: Boolean!
}

type EmojiPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The emoji that was created."""
  emoji: Emoji!

  """Whether the operation was successful."""
  success: Boolean!
}

type FavoritePayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The object that was added as a favorite."""
  favorite: Favorite!

  """Whether the operation was successful."""
  success: Boolean!
}

"""Object representing Figma preview information."""
type FigmaEmbed {
  """Figma file name."""
  name: String!

  """Date when the file was updated at the time of embedding."""
  lastModified: DateTime!

  """Node name."""
  nodeName: String

  """Figma screenshot URL."""
  url: String
}

type FigmaEmbedPayload {
  """Figma embed information."""
  figmaEmbed: FigmaEmbed

  """Whether the operation was successful."""
  success: Boolean!
}

type UploadFileHeader {
  """Upload file header key."""
  key: String!

  """Upload file header value."""
  value: String!
}

"""Object representing Google Cloud upload policy, plus additional data."""
type UploadFile {
  """The filename."""
  filename: String!

  """The content type."""
  contentType: String!

  """The size of the uploaded file."""
  size: Int!

  """The signed URL the for the uploaded file. (assigned automatically)"""
  uploadUrl: String!

  """The asset URL for the uploaded file. (assigned automatically)"""
  assetUrl: String!
  metaData: JSONObject
  headers: [UploadFileHeader!]!
}

type UploadPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """Object describing the file to be uploaded."""
  uploadFile: UploadFile

  """Whether the operation was successful."""
  success: Boolean!
}

type ImageUploadFromUrlPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The URL containing the image."""
  url: String

  """Whether the operation was successful."""
  success: Boolean!
}

type IntegrationRequestPayload {
  """Whether the operation was successful."""
  success: Boolean!
}

type IntegrationPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The integration that was created or updated."""
  integration: Integration

  """Whether the operation was successful."""
  success: Boolean!
}

type GitHubCommitIntegrationPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The integration that was created or updated."""
  integration: Integration

  """Whether the operation was successful."""
  success: Boolean!

  """The webhook secret to provide to GitHub."""
  webhookSecret: String!
}

type IntegrationsSettingsPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The settings that were created or updated."""
  integrationsSettings: IntegrationsSettings!

  """Whether the operation was successful."""
  success: Boolean!
}

type IntegrationTemplatePayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The IntegrationTemplate that was created or updated."""
  integrationTemplate: IntegrationTemplate!

  """Whether the operation was successful."""
  success: Boolean!
}

type IssueImportPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The import job that was created or updated."""
  issueImport: IssueImport

  """Whether the operation was successful."""
  success: Boolean!
}

type IssueImportDeletePayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The import job that was deleted."""
  issueImport: IssueImport

  """Whether the operation was successful."""
  success: Boolean!
}

"""Relevant information for the GitHub repository."""
type GithubRepo {
  """The id of the GitHub repository."""
  id: String!

  """The name of the GitHub repository."""
  name: String!
}

"""Relevant information for the GitHub organization."""
type GithubOrg {
  """GitHub organization id."""
  id: String!

  """The name of the GitHub organization."""
  name: String!

  """The login for the GitHub organization."""
  login: String!

  """Repositories that the organization owns."""
  repositories: [GithubRepo!]!

  """Whether or not this org is the user's personal repositories."""
  isPersonal: Boolean
}

"""
GitHub OAuth token, plus information about the organizations the user is a member of.
"""
type GithubOAuthTokenPayload {
  """The OAuth token if the operation to fetch it was successful."""
  token: String

  """
  A list of the GitHub organizations the user is a member of with attached repositories.
  """
  organizations: [GithubOrg!]
}

type IssueLabelPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The label that was created or updated."""
  issueLabel: IssueLabel!

  """Whether the operation was successful."""
  success: Boolean!
}

type IssueRelationPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The issue relation that was created or updated."""
  issueRelation: IssueRelation!

  """Whether the operation was successful."""
  success: Boolean!
}

type IssuePayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The issue that was created or updated."""
  issue: Issue

  """Whether the operation was successful."""
  success: Boolean!
}

type IssueBatchPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The issues that were updated."""
  issues: [Issue!]!

  """Whether the operation was successful."""
  success: Boolean!
}

type IssuePriorityValue {
  """Priority's number value."""
  priority: Int!

  """Priority's label."""
  label: String!
}

type NotificationPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The notification that was created or updated."""
  notification: Notification!

  """Whether the operation was successful."""
  success: Boolean!
}

type NotificationEdge {
  node: Notification!

  """Used in `before` and `after` args"""
  cursor: String!
}

type NotificationConnection {
  edges: [NotificationEdge!]!
  nodes: [Notification!]!
  pageInfo: PageInfo!
}

type NotificationSubscriptionPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The notification subscription that was created or updated."""
  notificationSubscription: NotificationSubscription!

  """Whether the operation was successful."""
  success: Boolean!
}

"""[INTERNAL] Organization domain operation response."""
type OrganizationDomainPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The organization domain that was created or updated."""
  organizationDomain: OrganizationDomain!

  """Whether the operation was successful."""
  success: Boolean!
}

"""[INTERNAL] Organization domain operation response."""
type OrganizationDomainSimplePayload {
  """Whether the operation was successful."""
  success: Boolean!
}

"""[INTERNAL] Domain claim request response."""
type OrganizationDomainClaimPayload {
  """String to put into DNS for verification."""
  verificationString: String!
}

type OrganizationInvitePayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The organization invite that was created or updated."""
  organizationInvite: OrganizationInvite!

  """Whether the operation was successful."""
  success: Boolean!
}

type OrganizationInviteDetailsPayload {
  """The name of the inviter"""
  inviter: String!

  """The email of the invitee"""
  email: String!

  """What user role the invite should grant."""
  role: UserRoleType!

  """When the invite was created."""
  createdAt: DateTime!

  """Name of the workspace the invite is for."""
  organizationName: String!

  """ID of the workspace the invite is for."""
  organizationId: String!

  """URL of the workspace logo the invite is for."""
  organizationLogoUrl: String

  """Whether the invite has already been accepted."""
  accepted: Boolean!

  """Whether the invite has expired."""
  expired: Boolean!
}

type OrganizationPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The organization that was created or updated."""
  organization: Organization

  """Whether the operation was successful."""
  success: Boolean!
}

type OrganizationDeletePayload {
  """Whether the operation was successful."""
  success: Boolean!
}

type OrganizationCancelDeletePayload {
  """Whether the operation was successful."""
  success: Boolean!
}

type OrganizationStartPlusTrialPayload {
  """Whether the operation was successful."""
  success: Boolean!
}

type OrganizationExistsPayload {
  """Whether the operation was successful."""
  success: Boolean!

  """Whether the organization exists."""
  exists: Boolean!
}

type ProjectLinkPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The project that was created or updated."""
  projectLink: ProjectLink!

  """Whether the operation was successful."""
  success: Boolean!
}

type ProjectMilestonePayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The project milestone that was created or updated."""
  projectMilestone: ProjectMilestone!

  """Whether the operation was successful."""
  success: Boolean!
}

type ProjectPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The project that was created or updated."""
  project: Project

  """Whether the operation was successful."""
  success: Boolean!
}

type ProjectUpdateInteractionPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The project update interaction that was created or updated."""
  projectUpdateInteraction: ProjectUpdateInteraction!

  """Whether the operation was successful."""
  success: Boolean!
}

type ProjectUpdatePayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The project update that was created or updated."""
  projectUpdate: ProjectUpdate!

  """Whether the operation was successful."""
  success: Boolean!
}

type ProjectUpdateWithInteractionPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The project update that was created or updated."""
  projectUpdate: ProjectUpdate!

  """Whether the operation was successful."""
  success: Boolean!

  """The project update that was created or updated."""
  interaction: ProjectUpdateInteraction!
}

type PushSubscriptionPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """Whether the operation was successful."""
  success: Boolean!
}

type PushSubscriptionTestPayload {
  """Whether the operation was successful."""
  success: Boolean!
}

type RateLimitPayload {
  """The identifier we rate limit on."""
  identifier: String

  """The kind of rate limit selected for this request."""
  kind: String!

  """The state of the rate limit."""
  limits: [RateLimitResultPayload!]!
}

type RateLimitResultPayload {
  """What is being rate limited."""
  type: String!

  """The requested quantity for this type of limit."""
  requestedAmount: Float!

  """The total allowed quantity for this type of limit."""
  allowedAmount: Float!

  """The period in which the rate limit is fully replenished in ms."""
  period: Float!

  """The remaining quantity for this type of limit after this request."""
  remainingAmount: Float!

  """
  The timestamp after the rate limit is fully replenished as a UNIX timestamp.
  """
  reset: Float!
}

type ReactionPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!
  reaction: Reaction!
  success: Boolean!
}

type ReactionEdge {
  node: Reaction!

  """Used in `before` and `after` args"""
  cursor: String!
}

type ReactionConnection {
  edges: [ReactionEdge!]!
  nodes: [Reaction!]!
  pageInfo: PageInfo!
}

type CreateCsvExportReportPayload {
  """Whether the operation was successful."""
  success: Boolean!
}

type RoadmapPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The roadmap that was created or updated."""
  roadmap: Roadmap!

  """Whether the operation was successful."""
  success: Boolean!
}

type RoadmapToProjectPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The roadmapToProject that was created or updated."""
  roadmapToProject: RoadmapToProject!

  """Whether the operation was successful."""
  success: Boolean!
}

type TeamMembershipPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The team membership that was created or updated."""
  teamMembership: TeamMembership

  """Whether the operation was successful."""
  success: Boolean!
}

type TeamPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The team that was created or updated."""
  team: Team

  """Whether the operation was successful."""
  success: Boolean!
}

type TemplatePayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The template that was created or updated."""
  template: Template!

  """Whether the operation was successful."""
  success: Boolean!
}

"""[INTERNAL] Result of looking up a user account by email."""
type UserAccountExistsPayload {
  """[INTERNAL] Whether the operation was successful."""
  success: Boolean!
}

type UserPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The user that was created or updated."""
  user: User

  """Whether the operation was successful."""
  success: Boolean!
}

type UserAdminPayload {
  """Whether the operation was successful."""
  success: Boolean!
}

type UserSettingsPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The user's settings."""
  userSettings: UserSettings!

  """Whether the operation was successful."""
  success: Boolean!
}

type UserSettingsFlagPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The flag key which was updated."""
  flag: String!

  """The flag value after update."""
  value: Int!

  """Whether the operation was successful."""
  success: Boolean!
}

type UserSettingsFlagsResetPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """Whether the operation was successful."""
  success: Boolean!
}

type ViewPreferencesPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The view preferences entity being mutated."""
  viewPreferences: ViewPreferences!

  """Whether the operation was successful."""
  success: Boolean!
}

type WebhookPayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The webhook entity being mutated."""
  webhook: Webhook!

  """Whether the operation was successful."""
  success: Boolean!
}

type WorkflowStatePayload {
  """The identifier of the last sync operation."""
  lastSyncId: Float!

  """The state that was created or updated."""
  workflowState: WorkflowState!

  """Whether the operation was successful."""
  success: Boolean!
}

interface Node {
  """The unique identifier of the entity."""
  id: ID!
}

"""Notification subscriptions for models."""
interface NotificationSubscription implements Entity & Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The type of the subscription."""
  type: String!

  """The user associated with notification subscriptions."""
  user: User!

  """Subscribed team."""
  team: Team

  """Subscribed project."""
  project: Project
}

"""A notification sent to a user."""
interface Notification implements Entity & Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """Notification type"""
  type: String!

  """The user that caused the notification. If empty it's Linear itself."""
  actor: User

  """The user that received the notification."""
  user: User!

  """
  The time at when the user marked the notification as read. Null, if the the user hasn't read the notification
  """
  readAt: DateTime

  """
  The time at when an email reminder for this notification was sent to the user. Null, if no email
      reminder has been sent.
  """
  emailedAt: DateTime

  """
  The time until a notification will be snoozed. After that it will appear in the inbox again.
  """
  snoozedUntilAt: DateTime

  """The time at which a notification was unsnoozed.."""
  unsnoozedAt: DateTime
}

"""Issue import mapping input"""
input IssueImportMappingInput {
  """The mapping configuration for users"""
  users: JSONObject

  """The mapping configuration for workflow states"""
  workflowStates: JSONObject

  """The mapping configuration for epics"""
  epics: JSONObject
}

input SamlConfigurationInput {
  """X.509 Signing Certificate in string form."""
  ssoSigningCert: String

  """Sign in endpoint URL for the identity provider."""
  ssoEndpoint: String

  """
  Binding method for authentication call. Can be either `post` (default) or `redirect`.
  """
  ssoBinding: String

  """
  The algorithm of the Signing Certificate. Can be one of `sha1`, `sha256` (default), or `sha512`.
  """
  ssoSignAlgo: String

  """The issuer's custom entity ID."""
  issuerEntityId: String
}

input IntercomSettingsInput {
  """
  Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled).
  """
  sendNoteOnStatusChange: Boolean

  """
  Whether an internal message should be added when someone comments on an issue.
  """
  sendNoteOnComment: Boolean

  """
  Whether a ticket should be automatically reopened when its linked Linear issue is completed.
  """
  automateTicketReopeningOnCompletion: Boolean

  """
  Whether a ticket should be automatically reopened when its linked Linear issue is cancelled.
  """
  automateTicketReopeningOnCancellation: Boolean

  """
  Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue
  """
  automateTicketReopeningOnComment: Boolean
}

input FrontSettingsInput {
  """
  Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled).
  """
  sendNoteOnStatusChange: Boolean

  """
  Whether an internal message should be added when someone comments on an issue.
  """
  sendNoteOnComment: Boolean

  """
  Whether a ticket should be automatically reopened when its linked Linear issue is completed.
  """
  automateTicketReopeningOnCompletion: Boolean

  """
  Whether a ticket should be automatically reopened when its linked Linear issue is cancelled.
  """
  automateTicketReopeningOnCancellation: Boolean

  """
  Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue
  """
  automateTicketReopeningOnComment: Boolean
}

input SlackPostSettingsInput {
  channel: String!
  channelId: String!
  configurationUrl: String!
}

input GitHubSettingsInput {
  """The avatar URL for the GitHub organization"""
  orgAvatarUrl: String!

  """The GitHub organization's name"""
  orgLogin: String!
}

input GoogleSheetsSettingsInput {
  spreadsheetId: String!
  spreadsheetUrl: String!
  sheetId: Float!
  updatedIssuesAt: DateTime!
}

input JiraProjectDataInput {
  """The Jira id for this project."""
  id: String!

  """The Jira key for this project, such as ENG."""
  key: String!

  """The Jira name for this project, such as Engineering."""
  name: String!
}

input JiraLinearMappingInput {
  """The Jira id for this project."""
  jiraProjectId: String!

  """The Linear team id to map to the given project."""
  linearTeamId: String!
}

input JiraSettingsInput {
  """The mapping of Jira project id => Linear team id."""
  projectMapping: [JiraLinearMappingInput!]

  """The Jira projects for the organization."""
  projects: [JiraProjectDataInput!]!
}

input NotionSettingsInput {
  """The ID of the Notion workspace being connected."""
  workspaceId: String!

  """The name of the Notion workspace being connected."""
  workspaceName: String!
}

input SentrySettingsInput {
  """The slug of the Sentry organization being connected."""
  organizationSlug: String!
}

input ZendeskSettingsInput {
  """
  Whether an internal message should be added when a Linear issue changes status (for status types except completed or canceled).
  """
  sendNoteOnStatusChange: Boolean

  """
  Whether an internal message should be added when someone comments on an issue.
  """
  sendNoteOnComment: Boolean

  """
  Whether a ticket should be automatically reopened when its linked Linear issue is completed.
  """
  automateTicketReopeningOnCompletion: Boolean

  """
  Whether a ticket should be automatically reopened when its linked Linear issue is cancelled.
  """
  automateTicketReopeningOnCancellation: Boolean

  """
  Whether a ticket should be automatically reopened when a comment is posted on its linked Linear issue
  """
  automateTicketReopeningOnComment: Boolean

  """The subdomain of the Zendesk organization being connected."""
  subdomain: String!

  """The URL of the connected Zendesk organization."""
  url: String!

  """The ID of the Linear bot user."""
  botUserId: String
}

input IntegrationSettingsInput {
  slackPost: SlackPostSettingsInput
  slackProjectPost: SlackPostSettingsInput
  slackOrgProjectUpdatesPost: SlackPostSettingsInput
  googleSheets: GoogleSheetsSettingsInput
  gitHub: GitHubSettingsInput
  sentry: SentrySettingsInput
  zendesk: ZendeskSettingsInput
  intercom: IntercomSettingsInput
  front: FrontSettingsInput
  jira: JiraSettingsInput
  notion: NotionSettingsInput
}

"""Comparator for booleans."""
input BooleanComparator {
  """Equals constraint."""
  eq: Boolean

  """Not equals constraint."""
  neq: Boolean
}

"""Comparator for dates."""
input DateComparator {
  """Equals constraint."""
  eq: DateTime

  """Not-equals constraint."""
  neq: DateTime

  """In-array constraint."""
  in: [DateTime!]

  """Not-in-array constraint."""
  nin: [DateTime!]

  """
  Less-than constraint. Matches any values that are less than the given value.
  """
  lt: DateTime

  """
  Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
  """
  lte: DateTime

  """
  Greater-than constraint. Matches any values that are greater than the given value.
  """
  gt: DateTime

  """
  Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
  """
  gte: DateTime
}

"""Comparator for optional dates."""
input NullableDateComparator {
  """Equals constraint."""
  eq: DateTime

  """Not-equals constraint."""
  neq: DateTime

  """In-array constraint."""
  in: [DateTime!]

  """Not-in-array constraint."""
  nin: [DateTime!]

  """
  Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
  """
  null: Boolean

  """
  Less-than constraint. Matches any values that are less than the given value.
  """
  lt: DateTime

  """
  Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
  """
  lte: DateTime

  """
  Greater-than constraint. Matches any values that are greater than the given value.
  """
  gt: DateTime

  """
  Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
  """
  gte: DateTime
}

"""Comparator for identifiers."""
input IDComparator {
  """Equals constraint."""
  eq: ID

  """Not-equals constraint."""
  neq: ID

  """In-array constraint."""
  in: [ID!]

  """Not-in-array constraint."""
  nin: [ID!]
}

"""Comparator for strings."""
input StringComparator {
  """Equals constraint."""
  eq: String

  """Not-equals constraint."""
  neq: String

  """In-array constraint."""
  in: [String!]

  """Not-in-array constraint."""
  nin: [String!]

  """
  Equals case insensitive. Matches any values that matches the given string case insensitive.
  """
  eqIgnoreCase: String

  """
  Not-equals case insensitive. Matches any values that don't match the given string case insensitive.
  """
  neqIgnoreCase: String

  """
  Starts with constraint. Matches any values that start with the given string.
  """
  startsWith: String

  """
  Doesn't start with constraint. Matches any values that don't start with the given string.
  """
  notStartsWith: String

  """
  Ends with constraint. Matches any values that end with the given string.
  """
  endsWith: String

  """
  Doesn't end with constraint. Matches any values that don't end with the given string.
  """
  notEndsWith: String

  """Contains constraint. Matches any values that contain the given string."""
  contains: String

  """
  Contains case insensitive constraint. Matches any values that contain the given string case insensitive.
  """
  containsIgnoreCase: String

  """
  Doesn't contain constraint. Matches any values that don't contain the given string.
  """
  notContains: String

  """
  Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive.
  """
  notContainsIgnoreCase: String
}

"""Comparator for optional strings."""
input NullableStringComparator {
  """Equals constraint."""
  eq: String

  """Not-equals constraint."""
  neq: String

  """In-array constraint."""
  in: [String!]

  """Not-in-array constraint."""
  nin: [String!]

  """
  Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
  """
  null: Boolean

  """
  Equals case insensitive. Matches any values that matches the given string case insensitive.
  """
  eqIgnoreCase: String

  """
  Not-equals case insensitive. Matches any values that don't match the given string case insensitive.
  """
  neqIgnoreCase: String

  """
  Starts with constraint. Matches any values that start with the given string.
  """
  startsWith: String

  """
  Doesn't start with constraint. Matches any values that don't start with the given string.
  """
  notStartsWith: String

  """
  Ends with constraint. Matches any values that end with the given string.
  """
  endsWith: String

  """
  Doesn't end with constraint. Matches any values that don't end with the given string.
  """
  notEndsWith: String

  """Contains constraint. Matches any values that contain the given string."""
  contains: String

  """
  Contains case insensitive constraint. Matches any values that contain the given string case insensitive.
  """
  containsIgnoreCase: String

  """
  Doesn't contain constraint. Matches any values that don't contain the given string.
  """
  notContains: String

  """
  Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive.
  """
  notContainsIgnoreCase: String
}

"""Team filtering options."""
input TeamFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Comparator for the team name."""
  name: StringComparator

  """Comparator for the team key."""
  key: StringComparator

  """Comparator for the team description."""
  description: NullableStringComparator

  """Filters that the teams issues must satisfy."""
  issues: IssueCollectionFilter

  """Compound filters, all of which need to be matched by the team."""
  and: [TeamFilter!]

  """Compound filters, one of which need to be matched by the team."""
  or: [TeamFilter!]
}

"""Comparator for numbers."""
input NumberComparator {
  """Equals constraint."""
  eq: Float

  """Not-equals constraint."""
  neq: Float

  """In-array constraint."""
  in: [Float!]

  """Not-in-array constraint."""
  nin: [Float!]

  """
  Less-than constraint. Matches any values that are less than the given value.
  """
  lt: Float

  """
  Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
  """
  lte: Float

  """
  Greater-than constraint. Matches any values that are greater than the given value.
  """
  gt: Float

  """
  Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
  """
  gte: Float
}

"""Comparator for optional numbers."""
input NullableNumberComparator {
  """Equals constraint."""
  eq: Float

  """Not-equals constraint."""
  neq: Float

  """In-array constraint."""
  in: [Float!]

  """Not-in-array constraint."""
  nin: [Float!]

  """
  Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
  """
  null: Boolean

  """
  Less-than constraint. Matches any values that are less than the given value.
  """
  lt: Float

  """
  Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
  """
  lte: Float

  """
  Greater-than constraint. Matches any values that are greater than the given value.
  """
  gt: Float

  """
  Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
  """
  gte: Float
}

"""User filtering options."""
input UserFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Comparator for the user's name."""
  name: StringComparator

  """Comparator for the user's display name."""
  displayName: StringComparator

  """Comparator for the user's email."""
  email: StringComparator

  """Comparator for the user's activity status."""
  active: BooleanComparator

  """Filters that the users assigned issues must satisfy."""
  assignedIssues: IssueCollectionFilter

  """Comparator for the user's admin status."""
  admin: BooleanComparator

  """
  Filter based on the currently authenticated user. Set to true to filter for the authenticated user, false for any other user.
  """
  isMe: BooleanComparator

  """Compound filters, all of which need to be matched by the user."""
  and: [UserFilter!]

  """Compound filters, one of which need to be matched by the user."""
  or: [UserFilter!]
}

"""User filtering options."""
input NullableUserFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Comparator for the user's name."""
  name: StringComparator

  """Comparator for the user's display name."""
  displayName: StringComparator

  """Comparator for the user's email."""
  email: StringComparator

  """Comparator for the user's activity status."""
  active: BooleanComparator

  """Filters that the users assigned issues must satisfy."""
  assignedIssues: IssueCollectionFilter

  """Comparator for the user's admin status."""
  admin: BooleanComparator

  """
  Filter based on the currently authenticated user. Set to true to filter for the authenticated user, false for any other user.
  """
  isMe: BooleanComparator

  """Filter based on the existence of the relation."""
  null: Boolean

  """Compound filters, all of which need to be matched by the user."""
  and: [NullableUserFilter!]

  """Compound filters, one of which need to be matched by the user."""
  or: [NullableUserFilter!]
}

"""User filtering options."""
input UserCollectionFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Comparator for the user's name."""
  name: StringComparator

  """Comparator for the user's display name."""
  displayName: StringComparator

  """Comparator for the user's email."""
  email: StringComparator

  """Comparator for the user's activity status."""
  active: BooleanComparator

  """Filters that the users assigned issues must satisfy."""
  assignedIssues: IssueCollectionFilter

  """Comparator for the user's admin status."""
  admin: BooleanComparator

  """
  Filter based on the currently authenticated user. Set to true to filter for the authenticated user, false for any other user.
  """
  isMe: BooleanComparator

  """Compound filters, all of which need to be matched by the user."""
  and: [UserCollectionFilter!]

  """Compound filters, one of which need to be matched by the user."""
  or: [UserCollectionFilter!]

  """Filters that needs to be matched by some users."""
  some: UserFilter

  """Filters that needs to be matched by all users."""
  every: UserFilter

  """Comparator for the collection length."""
  length: NumberComparator
}

"""Issue label filtering options."""
input IssueLabelFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Comparator for the name."""
  name: StringComparator

  """Filters that the issue labels creator must satisfy."""
  creator: NullableUserFilter

  """Filters that the issue labels team must satisfy."""
  team: TeamFilter

  """Filters that the issue label's parent label must satisfy."""
  parent: IssueLabelFilter

  """Compound filters, all of which need to be matched by the label."""
  and: [IssueLabelFilter!]

  """Compound filters, one of which need to be matched by the label."""
  or: [IssueLabelFilter!]
}

"""Issue label filtering options."""
input IssueLabelCollectionFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Comparator for the name."""
  name: StringComparator

  """Filters that the issue labels creator must satisfy."""
  creator: NullableUserFilter

  """Filters that the issue labels team must satisfy."""
  team: TeamFilter

  """Filters that the issue label's parent label must satisfy."""
  parent: IssueLabelFilter

  """Compound filters, all of which need to be matched by the label."""
  and: [IssueLabelCollectionFilter!]

  """Compound filters, one of which need to be matched by the label."""
  or: [IssueLabelCollectionFilter!]

  """Filters that needs to be matched by some issue labels."""
  some: IssueLabelFilter

  """Filters that needs to be matched by all issue labels."""
  every: IssueLabelFilter

  """Comparator for the collection length."""
  length: NumberComparator
}

"""Comparator for timeless dates."""
input TimelessDateComparator {
  """Equals constraint."""
  eq: TimelessDate

  """Not-equals constraint."""
  neq: TimelessDate

  """In-array constraint."""
  in: [TimelessDate!]

  """Not-in-array constraint."""
  nin: [TimelessDate!]

  """
  Less-than constraint. Matches any values that are less than the given value.
  """
  lt: TimelessDate

  """
  Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
  """
  lte: TimelessDate

  """
  Greater-than constraint. Matches any values that are greater than the given value.
  """
  gt: TimelessDate

  """
  Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
  """
  gte: TimelessDate
}

input NullableTimelessDateComparator {
  """Equals constraint."""
  eq: TimelessDate

  """Not-equals constraint."""
  neq: TimelessDate

  """In-array constraint."""
  in: [TimelessDate!]

  """Not-in-array constraint."""
  nin: [TimelessDate!]

  """
  Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
  """
  null: Boolean

  """
  Less-than constraint. Matches any values that are less than the given value.
  """
  lt: TimelessDate

  """
  Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
  """
  lte: TimelessDate

  """
  Greater-than constraint. Matches any values that are greater than the given value.
  """
  gt: TimelessDate

  """
  Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
  """
  gte: TimelessDate
}

"""Cycle filtering options."""
input CycleFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Comparator for the cycle number."""
  number: NumberComparator

  """Comparator for the cycle name."""
  name: StringComparator

  """Comparator for the cycle start date."""
  startsAt: DateComparator

  """Comparator for the cycle ends at date."""
  endsAt: DateComparator

  """Comparator for the cycle completed at date."""
  completedAt: DateComparator

  """Comparator for the filtering active cycle."""
  isActive: BooleanComparator

  """Comparator for the filtering next cycle."""
  isNext: BooleanComparator

  """Comparator for the filtering previous cycle."""
  isPrevious: BooleanComparator

  """Comparator for the filtering future cycles."""
  isFuture: BooleanComparator

  """Comparator for the filtering past cycles."""
  isPast: BooleanComparator

  """Filters that the cycles team must satisfy."""
  team: TeamFilter

  """Filters that the cycles issues must satisfy."""
  issues: IssueCollectionFilter

  """Compound filters, all of which need to be matched by the cycle."""
  and: [CycleFilter!]

  """Compound filters, one of which need to be matched by the cycle."""
  or: [CycleFilter!]
}

"""Cycle filtering options."""
input NullableCycleFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Comparator for the cycle number."""
  number: NumberComparator

  """Comparator for the cycle name."""
  name: StringComparator

  """Comparator for the cycle start date."""
  startsAt: DateComparator

  """Comparator for the cycle ends at date."""
  endsAt: DateComparator

  """Comparator for the cycle completed at date."""
  completedAt: DateComparator

  """Comparator for the filtering active cycle."""
  isActive: BooleanComparator

  """Comparator for the filtering next cycle."""
  isNext: BooleanComparator

  """Comparator for the filtering previous cycle."""
  isPrevious: BooleanComparator

  """Comparator for the filtering future cycles."""
  isFuture: BooleanComparator

  """Comparator for the filtering past cycles."""
  isPast: BooleanComparator

  """Filters that the cycles team must satisfy."""
  team: TeamFilter

  """Filters that the cycles issues must satisfy."""
  issues: IssueCollectionFilter

  """Filter based on the existence of the relation."""
  null: Boolean

  """Compound filters, one of which need to be matched by the cycle."""
  and: [NullableCycleFilter!]

  """Compound filters, one of which need to be matched by the cycle."""
  or: [NullableCycleFilter!]
}

"""Roadmap filtering options."""
input RoadmapFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Comparator for the roadmap name."""
  name: StringComparator

  """Comparator for the roadmap slug ID."""
  slugId: StringComparator

  """Filters that the roadmap creator must satisfy."""
  creator: UserFilter

  """Compound filters, all of which need to be matched by the roadmap."""
  and: [RoadmapFilter!]

  """Compound filters, one of which need to be matched by the roadmap."""
  or: [RoadmapFilter!]
}

"""Roadmap collection filtering options."""
input RoadmapCollectionFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Comparator for the roadmap name."""
  name: StringComparator

  """Comparator for the roadmap slug ID."""
  slugId: StringComparator

  """Filters that the roadmap creator must satisfy."""
  creator: UserFilter

  """Compound filters, all of which need to be matched by the roadmap."""
  and: [RoadmapCollectionFilter!]

  """Compound filters, one of which need to be matched by the roadmap."""
  or: [RoadmapCollectionFilter!]

  """Filters that needs to be matched by some roadmaps."""
  some: RoadmapFilter

  """Filters that needs to be matched by all roadmaps."""
  every: RoadmapFilter

  """Comparator for the collection length."""
  length: NumberComparator
}

"""Project filtering options."""
input ProjectFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Comparator for the project name."""
  name: StringComparator

  """Comparator for the project slug ID."""
  slugId: StringComparator

  """Comparator for the project state."""
  state: StringComparator

  """Comparator for the project start date."""
  startDate: NullableDateComparator

  """Comparator for the project target date."""
  targetDate: NullableDateComparator

  """Filters that the projects creator must satisfy."""
  creator: UserFilter

  """Filters that the projects lead must satisfy."""
  lead: NullableUserFilter

  """Filters that the projects members must satisfy."""
  members: UserFilter

  """Filters that the projects issues must satisfy."""
  issues: IssueCollectionFilter

  """Filters that the projects roadmaps must satisfy."""
  roadmaps: RoadmapCollectionFilter

  """Compound filters, all of which need to be matched by the project."""
  and: [ProjectFilter!]

  """Compound filters, one of which need to be matched by the project."""
  or: [ProjectFilter!]
}

"""Project filtering options."""
input NullableProjectFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Comparator for the project name."""
  name: StringComparator

  """Comparator for the project slug ID."""
  slugId: StringComparator

  """Comparator for the project state."""
  state: StringComparator

  """Comparator for the project start date."""
  startDate: NullableDateComparator

  """Comparator for the project target date."""
  targetDate: NullableDateComparator

  """Filters that the projects creator must satisfy."""
  creator: UserFilter

  """Filters that the projects lead must satisfy."""
  lead: NullableUserFilter

  """Filters that the projects members must satisfy."""
  members: UserFilter

  """Filters that the projects issues must satisfy."""
  issues: IssueCollectionFilter

  """Filters that the projects roadmaps must satisfy."""
  roadmaps: RoadmapCollectionFilter

  """Filter based on the existence of the relation."""
  null: Boolean

  """Compound filters, all of which need to be matched by the project."""
  and: [NullableProjectFilter!]

  """Compound filters, one of which need to be matched by the project."""
  or: [NullableProjectFilter!]
}

"""Project filtering options."""
input ProjectCollectionFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Comparator for the project name."""
  name: StringComparator

  """Comparator for the project slug ID."""
  slugId: StringComparator

  """Comparator for the project state."""
  state: StringComparator

  """Comparator for the project start date."""
  startDate: NullableDateComparator

  """Comparator for the project target date."""
  targetDate: NullableDateComparator

  """Filters that the projects creator must satisfy."""
  creator: UserFilter

  """Filters that the projects lead must satisfy."""
  lead: NullableUserFilter

  """Filters that the projects members must satisfy."""
  members: UserFilter

  """Filters that the projects issues must satisfy."""
  issues: IssueCollectionFilter

  """Filters that the projects roadmaps must satisfy."""
  roadmaps: RoadmapCollectionFilter

  """Compound filters, all of which need to be matched by the project."""
  and: [ProjectCollectionFilter!]

  """Compound filters, one of which need to be matched by the project."""
  or: [ProjectCollectionFilter!]

  """Filters that needs to be matched by some projects."""
  some: ProjectFilter

  """Filters that needs to be matched by all projects."""
  every: ProjectFilter

  """Comparator for the collection length."""
  length: NumberComparator
}

"""Workflow state filtering options."""
input WorkflowStateFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Comparator for the workflow state name."""
  name: StringComparator

  """Comparator for the workflow state description."""
  description: StringComparator

  """Comparator for the workflow state position."""
  position: NumberComparator

  """Comparator for the workflow state type."""
  type: StringComparator

  """Filters that the workflow states team must satisfy."""
  team: TeamFilter

  """Filters that the workflow states issues must satisfy."""
  issues: IssueCollectionFilter

  """
  Compound filters, all of which need to be matched by the workflow state.
  """
  and: [WorkflowStateFilter!]

  """
  Compound filters, one of which need to be matched by the workflow state.
  """
  or: [WorkflowStateFilter!]
}

"""Comparator for `sourceType` field."""
input SourceTypeComparator {
  """Equals constraint."""
  eq: String

  """Not-equals constraint."""
  neq: String

  """In-array constraint."""
  in: [String!]

  """Not-in-array constraint."""
  nin: [String!]

  """
  Equals case insensitive. Matches any values that matches the given string case insensitive.
  """
  eqIgnoreCase: String

  """
  Not-equals case insensitive. Matches any values that don't match the given string case insensitive.
  """
  neqIgnoreCase: String

  """
  Starts with constraint. Matches any values that start with the given string.
  """
  startsWith: String

  """
  Doesn't start with constraint. Matches any values that don't start with the given string.
  """
  notStartsWith: String

  """
  Ends with constraint. Matches any values that end with the given string.
  """
  endsWith: String

  """
  Doesn't end with constraint. Matches any values that don't end with the given string.
  """
  notEndsWith: String

  """Contains constraint. Matches any values that contain the given string."""
  contains: String

  """
  Contains case insensitive constraint. Matches any values that contain the given string case insensitive.
  """
  containsIgnoreCase: String

  """
  Doesn't contain constraint. Matches any values that don't contain the given string.
  """
  notContains: String

  """
  Doesn't contain case insensitive constraint. Matches any values that don't contain the given string case insensitive.
  """
  notContainsIgnoreCase: String
}

"""Attachment filtering options."""
input AttachmentFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Comparator for the title."""
  title: StringComparator

  """Comparator for the subtitle."""
  subtitle: NullableStringComparator

  """Comparator for the url."""
  url: StringComparator

  """Filters that the attachments creator must satisfy."""
  creator: NullableUserFilter

  """Comparator for the source type."""
  sourceType: SourceTypeComparator

  """Compound filters, all of which need to be matched by the attachment."""
  and: [AttachmentFilter!]

  """Compound filters, one of which need to be matched by the attachment."""
  or: [AttachmentFilter!]
}

"""Attachment collection filtering options."""
input AttachmentCollectionFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Comparator for the title."""
  title: StringComparator

  """Comparator for the subtitle."""
  subtitle: NullableStringComparator

  """Comparator for the url."""
  url: StringComparator

  """Filters that the attachments creator must satisfy."""
  creator: NullableUserFilter

  """Comparator for the source type."""
  sourceType: SourceTypeComparator

  """Compound filters, all of which need to be matched by the attachment."""
  and: [AttachmentCollectionFilter!]

  """Compound filters, one of which need to be matched by the attachment."""
  or: [AttachmentCollectionFilter!]

  """Filters that needs to be matched by some attachments."""
  some: AttachmentFilter

  """Filters that needs to be matched by all attachments."""
  every: AttachmentFilter

  """Comparator for the collection length."""
  length: NumberComparator
}

"""Comment filtering options."""
input CommentFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Comparator for the comments body."""
  body: StringComparator

  """Filters that the comments creator must satisfy."""
  user: UserFilter

  """Filters that the comments issue must satisfy."""
  issue: IssueFilter

  """Compound filters, all of which need to be matched by the comment."""
  and: [CommentFilter!]

  """Compound filters, one of which need to be matched by the comment."""
  or: [CommentFilter!]
}

"""Comment filtering options."""
input CommentCollectionFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Comparator for the comments body."""
  body: StringComparator

  """Filters that the comments creator must satisfy."""
  user: UserFilter

  """Filters that the comments issue must satisfy."""
  issue: IssueFilter

  """Compound filters, all of which need to be matched by the comment."""
  and: [CommentCollectionFilter!]

  """Compound filters, one of which need to be matched by the comment."""
  or: [CommentCollectionFilter!]

  """Filters that needs to be matched by some comments."""
  some: CommentFilter

  """Filters that needs to be matched by all comments."""
  every: CommentFilter

  """Comparator for the collection length."""
  length: NumberComparator
}

"""[Internal] Comparator for content."""
input ContentComparator {
  """[Internal] Contains constraint."""
  contains: String

  """[Internal] Not-contains constraint."""
  notContains: String
}

"""Comparator for estimates."""
input EstimateComparator {
  """Equals constraint."""
  eq: Float

  """Not-equals constraint."""
  neq: Float

  """In-array constraint."""
  in: [Float!]

  """Not-in-array constraint."""
  nin: [Float!]

  """
  Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
  """
  null: Boolean

  """
  Less-than constraint. Matches any values that are less than the given value.
  """
  lt: Float

  """
  Less-than-or-equal constraint. Matches any values that are less than or equal to the given value.
  """
  lte: Float

  """
  Greater-than constraint. Matches any values that are greater than the given value.
  """
  gt: Float

  """
  Greater-than-or-equal constraint. Matches any values that are greater than or equal to the given value.
  """
  gte: Float

  """Compound filters, all of which need to be matched by the estimate."""
  or: [NullableNumberComparator!]

  """Compound filters, one of which need to be matched by the estimate."""
  and: [NullableNumberComparator!]
}

"""Comparator for relation existence."""
input RelationExistsComparator {
  """Equals constraint."""
  eq: Boolean

  """Not equals constraint."""
  neq: Boolean
}

"""Project milestone filtering options."""
input NullableProjectMilestoneFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Filter based on the existence of the relation."""
  null: Boolean

  """
  Compound filters, all of which need to be matched by the project milestone.
  """
  and: [NullableProjectMilestoneFilter!]

  """
  Compound filters, one of which need to be matched by the project milestone.
  """
  or: [NullableProjectMilestoneFilter!]
}

"""Comparator for sla status."""
input SlaStatusComparator {
  """Equals constraint."""
  eq: SlaStatus

  """Not-equals constraint."""
  neq: SlaStatus

  """In-array constraint."""
  in: [SlaStatus!]

  """Not-in-array constraint."""
  nin: [SlaStatus!]

  """
  Null constraint. Matches any non-null values if the given value is false, otherwise it matches null values.
  """
  null: Boolean
}

enum SlaStatus {
  Breached
  HighRisk
  MediumRisk
  LowRisk
  Completed
  Failed
}

"""Issue filtering options."""
input NullableIssueFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Comparator for the issues number."""
  number: NumberComparator

  """Comparator for the issues title."""
  title: StringComparator

  """Comparator for the issues description."""
  description: NullableStringComparator

  """Comparator for the issues priority."""
  priority: NullableNumberComparator

  """Comparator for the issues estimate."""
  estimate: EstimateComparator

  """Comparator for the issues started at date."""
  startedAt: NullableDateComparator

  """Comparator for the issues triaged at date."""
  triagedAt: NullableDateComparator

  """Comparator for the issues completed at date."""
  completedAt: NullableDateComparator

  """Comparator for the issues canceled at date."""
  canceledAt: NullableDateComparator

  """Comparator for the issues auto closed at date."""
  autoClosedAt: NullableDateComparator

  """Comparator for the issues auto archived at date."""
  autoArchivedAt: NullableDateComparator

  """Comparator for the issues due date."""
  dueDate: NullableTimelessDateComparator

  """Comparator for the issues snoozed until date."""
  snoozedUntilAt: NullableDateComparator

  """Filters that the issues assignee must satisfy."""
  assignee: NullableUserFilter

  """Filters that the issues creator must satisfy."""
  creator: NullableUserFilter

  """Filters that the issue parent must satisfy."""
  parent: NullableIssueFilter

  """Filters that the issues snoozer must satisfy."""
  snoozedBy: NullableUserFilter

  """Filters that issue labels must satisfy."""
  labels: IssueLabelCollectionFilter

  """Filters that issue subscribers must satisfy."""
  subscribers: UserCollectionFilter

  """Filters that the issues team must satisfy."""
  team: TeamFilter

  """Filters that the issues project milestone must satisfy."""
  projectMilestone: NullableProjectMilestoneFilter

  """Filters that the issues comments must satisfy."""
  comments: CommentCollectionFilter

  """Filters that the issues cycle must satisfy."""
  cycle: NullableCycleFilter

  """Filters that the issues project must satisfy."""
  project: NullableProjectFilter

  """Filters that the issues state must satisfy."""
  state: WorkflowStateFilter

  """Filters that the child issues must satisfy."""
  children: IssueCollectionFilter

  """Filters that the issues attachments must satisfy."""
  attachments: AttachmentCollectionFilter

  """[Internal] Comparator for the issues content."""
  searchableContent: ContentComparator

  """Comparator for filtering issues with relations."""
  hasRelatedRelations: RelationExistsComparator

  """Comparator for filtering issues which are duplicates."""
  hasDuplicateRelations: RelationExistsComparator

  """Comparator for filtering issues which are blocked."""
  hasBlockedByRelations: RelationExistsComparator

  """Comparator for filtering issues which are blocking."""
  hasBlockingRelations: RelationExistsComparator

  """Comparator for the issues sla status."""
  slaStatus: SlaStatusComparator

  """Filter based on the existence of the relation."""
  null: Boolean

  """Compound filters, all of which need to be matched by the issue."""
  and: [NullableIssueFilter!]

  """Compound filters, one of which need to be matched by the issue."""
  or: [NullableIssueFilter!]
}

"""Issue filtering options."""
input IssueFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Comparator for the issues number."""
  number: NumberComparator

  """Comparator for the issues title."""
  title: StringComparator

  """Comparator for the issues description."""
  description: NullableStringComparator

  """Comparator for the issues priority."""
  priority: NullableNumberComparator

  """Comparator for the issues estimate."""
  estimate: EstimateComparator

  """Comparator for the issues started at date."""
  startedAt: NullableDateComparator

  """Comparator for the issues triaged at date."""
  triagedAt: NullableDateComparator

  """Comparator for the issues completed at date."""
  completedAt: NullableDateComparator

  """Comparator for the issues canceled at date."""
  canceledAt: NullableDateComparator

  """Comparator for the issues auto closed at date."""
  autoClosedAt: NullableDateComparator

  """Comparator for the issues auto archived at date."""
  autoArchivedAt: NullableDateComparator

  """Comparator for the issues due date."""
  dueDate: NullableTimelessDateComparator

  """Comparator for the issues snoozed until date."""
  snoozedUntilAt: NullableDateComparator

  """Filters that the issues assignee must satisfy."""
  assignee: NullableUserFilter

  """Filters that the issues creator must satisfy."""
  creator: NullableUserFilter

  """Filters that the issue parent must satisfy."""
  parent: NullableIssueFilter

  """Filters that the issues snoozer must satisfy."""
  snoozedBy: NullableUserFilter

  """Filters that issue labels must satisfy."""
  labels: IssueLabelCollectionFilter

  """Filters that issue subscribers must satisfy."""
  subscribers: UserCollectionFilter

  """Filters that the issues team must satisfy."""
  team: TeamFilter

  """Filters that the issues project milestone must satisfy."""
  projectMilestone: NullableProjectMilestoneFilter

  """Filters that the issues comments must satisfy."""
  comments: CommentCollectionFilter

  """Filters that the issues cycle must satisfy."""
  cycle: NullableCycleFilter

  """Filters that the issues project must satisfy."""
  project: NullableProjectFilter

  """Filters that the issues state must satisfy."""
  state: WorkflowStateFilter

  """Filters that the child issues must satisfy."""
  children: IssueCollectionFilter

  """Filters that the issues attachments must satisfy."""
  attachments: AttachmentCollectionFilter

  """[Internal] Comparator for the issues content."""
  searchableContent: ContentComparator

  """Comparator for filtering issues with relations."""
  hasRelatedRelations: RelationExistsComparator

  """Comparator for filtering issues which are duplicates."""
  hasDuplicateRelations: RelationExistsComparator

  """Comparator for filtering issues which are blocked."""
  hasBlockedByRelations: RelationExistsComparator

  """Comparator for filtering issues which are blocking."""
  hasBlockingRelations: RelationExistsComparator

  """Comparator for the issues sla status."""
  slaStatus: SlaStatusComparator

  """Compound filters, all of which need to be matched by the issue."""
  and: [IssueFilter!]

  """Compound filters, one of which need to be matched by the issue."""
  or: [IssueFilter!]
}

"""Issue filtering options."""
input IssueCollectionFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Comparator for the issues number."""
  number: NumberComparator

  """Comparator for the issues title."""
  title: StringComparator

  """Comparator for the issues description."""
  description: NullableStringComparator

  """Comparator for the issues priority."""
  priority: NullableNumberComparator

  """Comparator for the issues estimate."""
  estimate: EstimateComparator

  """Comparator for the issues started at date."""
  startedAt: NullableDateComparator

  """Comparator for the issues triaged at date."""
  triagedAt: NullableDateComparator

  """Comparator for the issues completed at date."""
  completedAt: NullableDateComparator

  """Comparator for the issues canceled at date."""
  canceledAt: NullableDateComparator

  """Comparator for the issues auto closed at date."""
  autoClosedAt: NullableDateComparator

  """Comparator for the issues auto archived at date."""
  autoArchivedAt: NullableDateComparator

  """Comparator for the issues due date."""
  dueDate: NullableTimelessDateComparator

  """Comparator for the issues snoozed until date."""
  snoozedUntilAt: NullableDateComparator

  """Filters that the issues assignee must satisfy."""
  assignee: NullableUserFilter

  """Filters that the issues creator must satisfy."""
  creator: NullableUserFilter

  """Filters that the issue parent must satisfy."""
  parent: NullableIssueFilter

  """Filters that the issues snoozer must satisfy."""
  snoozedBy: NullableUserFilter

  """Filters that issue labels must satisfy."""
  labels: IssueLabelCollectionFilter

  """Filters that issue subscribers must satisfy."""
  subscribers: UserCollectionFilter

  """Filters that the issues team must satisfy."""
  team: TeamFilter

  """Filters that the issues project milestone must satisfy."""
  projectMilestone: NullableProjectMilestoneFilter

  """Filters that the issues comments must satisfy."""
  comments: CommentCollectionFilter

  """Filters that the issues cycle must satisfy."""
  cycle: NullableCycleFilter

  """Filters that the issues project must satisfy."""
  project: NullableProjectFilter

  """Filters that the issues state must satisfy."""
  state: WorkflowStateFilter

  """Filters that the child issues must satisfy."""
  children: IssueCollectionFilter

  """Filters that the issues attachments must satisfy."""
  attachments: AttachmentCollectionFilter

  """[Internal] Comparator for the issues content."""
  searchableContent: ContentComparator

  """Comparator for filtering issues with relations."""
  hasRelatedRelations: RelationExistsComparator

  """Comparator for filtering issues which are duplicates."""
  hasDuplicateRelations: RelationExistsComparator

  """Comparator for filtering issues which are blocked."""
  hasBlockedByRelations: RelationExistsComparator

  """Comparator for filtering issues which are blocking."""
  hasBlockingRelations: RelationExistsComparator

  """Comparator for the issues sla status."""
  slaStatus: SlaStatusComparator

  """Compound filters, all of which need to be matched by the issue."""
  and: [IssueCollectionFilter!]

  """Compound filters, one of which need to be matched by the issue."""
  or: [IssueCollectionFilter!]

  """Filters that needs to be matched by some issues."""
  some: IssueFilter

  """Filters that needs to be matched by all issues."""
  every: IssueFilter

  """Comparator for the collection length."""
  length: NumberComparator
}

"""A condition to match for the workflow to be triggered."""
input WorkflowCondition {
  """
  Trigger the workflow when an issue matches the filter. Can only be used when the trigger type is `Issue`.
  """
  issueFilter: IssueFilter

  """
  Triggers the workflow when a project matches the filter. Can only be used when the trigger type is `Project`.
  """
  projectFilter: ProjectFilter
}

input EventCreateInput {
  """The category of the event to create."""
  category: String!

  """The subject of the event."""
  subject: String!

  """The target identifier of the event."""
  targetId: String

  """The value of the event."""
  value: Float

  """Additional data of the event, encoded as JSON."""
  data: JSON
}

input ApiKeyCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The label for the API key."""
  label: String!

  """The API key value."""
  key: String!
}

input AttachmentCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The attachment title."""
  title: String!

  """The attachment subtitle."""
  subtitle: String

  """
  Attachment location which is also used as an unique identifier for the attachment. If another attachment is created with the same `url` value, existing record is updated instead.
  """
  url: String!

  """The issue to associate the attachment with."""
  issueId: String!

  """
  An icon url to display with the attachment. Should be of jpg or png format. Maximum of 1MB in size. Dimensions should be 20x20px for optimal display quality.
  """
  iconUrl: String

  """Attachment metadata object with string and number values."""
  metadata: JSONObject

  """
  Indicates if attachments for the same source application should be grouped in the Linear UI.
  """
  groupBySource: Boolean

  """Create a linked comment with markdown body."""
  commentBody: String

  """
  Create a linked comment with Prosemirror body. Please use `commentBody` instead
  """
  commentBodyData: JSONObject

  """
  Create attachment as a user with the provided name. This option is only available to OAuth applications creating attachments in `actor=application` mode.
  """
  createAsUser: String
}

input AttachmentUpdateInput {
  """The attachment title."""
  title: String!

  """The attachment subtitle."""
  subtitle: String

  """Attachment metadata object with string and number values."""
  metadata: JSONObject

  """
  An icon url to display with the attachment. Should be of jpg or png format. Maximum of 1MB in size. Dimensions should be 20x20px for optimal display quality.
  """
  iconUrl: String
}

"""Audit entry filtering options."""
input AuditEntryFilter {
  """Comparator for the identifier."""
  id: IDComparator

  """Comparator for the created at date."""
  createdAt: DateComparator

  """Comparator for the updated at date."""
  updatedAt: DateComparator

  """Comparator for the type."""
  type: StringComparator

  """Comparator for the IP address."""
  ip: StringComparator

  """Comparator for the country code."""
  countryCode: StringComparator

  """Filters that the audit entry actor must satisfy."""
  actor: NullableUserFilter
}

input OnboardingCustomerSurvey {
  companyRole: String
  companySize: String
}

input CreateOrganizationInput {
  """The name of the organization."""
  name: String!

  """The URL key of the organization."""
  urlKey: String!

  """Whether the organization should allow email domain access."""
  domainAccess: Boolean

  """The timezone of the organization, passed in by client."""
  timezone: String

  """
  JSON serialized UTM parameters associated with the creation of the workspace.
  """
  utm: String
}

input JoinOrganizationInput {
  """The identifier of the organization."""
  organizationId: String!
}

input EmailUserAccountAuthChallengeInput {
  """The email for which to generate the magic login code."""
  email: String!

  """Whether the login was requested from the desktop app."""
  isDesktop: Boolean

  """Auth code for the client initiating the sequence."""
  clientAuthCode: String

  """Signup code."""
  signupCode: String
}

input TokenUserAccountAuthInput {
  """The email which to login via the magic login code."""
  email: String!

  """The magic login code."""
  token: String!

  """The timezone of the user's browser."""
  timezone: String!

  """The identifiers of the teams to auto-join."""
  teamIdsToJoin: [String!]
}

input GoogleUserAccountAuthInput {
  """Code returned from Google's OAuth flow."""
  code: String!

  """The URI to redirect the user to."""
  redirectUri: String

  """The timezone of the user's browser."""
  timezone: String!

  """The identifiers of the teams to auto-join."""
  teamIdsToJoin: [String!]

  """Signup code."""
  signupCode: String
}

input CommentCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The comment content in markdown format."""
  body: String

  """The comment content as a Prosemirror document."""
  bodyData: JSON

  """The issue to associate the comment with."""
  issueId: String!

  """The parent comment under which to nest a current comment."""
  parentId: String

  """
  Create comment as a user with the provided name. This option is only available to OAuth applications creating comments in `actor=application` mode.
  """
  createAsUser: String

  """
  Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=application` mode.
  """
  displayIconUrl: String

  """
  The date when the comment was created (e.g. if importing from another system). Must be a date in the past. If none is provided, the backend will generate the time as now.
  """
  createdAt: DateTime

  """
  Flag to prevent auto subscription to the issue the comment is created on.
  """
  doNotSubscribeToIssue: Boolean
}

input CommentUpdateInput {
  """The comment content."""
  body: String

  """The comment content as a Prosemirror document."""
  bodyData: JSON
}

input ContactCreateInput {
  """The type of support contact."""
  type: String!

  """The message the user sent."""
  message: String!

  """User's operating system."""
  operatingSystem: String

  """User's browser information."""
  browser: String

  """User's device information."""
  device: String

  """User's Linear client information."""
  clientVersion: String

  """How disappointed the user would be if they could no longer use Linear."""
  disappointmentRating: Int
}

"""[INTERNAL] Input for sending a message to the Linear Sales team"""
input ContactSalesCreateInput {
  """Name of the person requesting information."""
  name: String!

  """Work email of the person requesting information."""
  email: String!

  """The message the user sent."""
  message: String
}

input CustomViewCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The name of the custom view."""
  name: String!

  """The description of the custom view."""
  description: String

  """The icon of the custom view."""
  icon: String

  """The color of the icon of the custom view."""
  color: String

  """The id of the team associated with the custom view."""
  teamId: String

  """The filters applied to issues in the custom view."""
  filters: JSONObject

  """The filter applied to issues in the custom view."""
  filterData: JSONObject

  """[ALPHA] The project filter applied to issues in the custom view."""
  projectFilterData: JSONObject

  """Whether the custom view is shared with everyone in the organization."""
  shared: Boolean
}

input CustomViewUpdateInput {
  """The name of the custom view."""
  name: String

  """The description of the custom view."""
  description: String

  """The icon of the custom view."""
  icon: String

  """The color of the icon of the custom view."""
  color: String

  """The id of the team associated with the custom view."""
  teamId: String

  """The filters applied to issues in the custom view."""
  filters: JSONObject

  """The filter applied to issues in the custom view."""
  filterData: JSONObject

  """[ALPHA] The project filter applied to issues in the custom view."""
  projectFilterData: JSONObject

  """Whether the custom view is shared with everyone in the organization."""
  shared: Boolean
}

input CycleCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The custom name of the cycle."""
  name: String

  """The description of the cycle."""
  description: String

  """The team to associate the cycle with."""
  teamId: String!

  """The start date of the cycle."""
  startsAt: DateTime!

  """The end date of the cycle."""
  endsAt: DateTime!

  """
  The completion time of the cycle. If null, the cycle hasn't been completed.
  """
  completedAt: DateTime
}

input CycleUpdateInput {
  """The custom name of the cycle."""
  name: String

  """The description of the cycle."""
  description: String

  """The start date of the cycle."""
  startsAt: DateTime

  """The end date of the cycle."""
  endsAt: DateTime

  """The end date of the cycle."""
  completedAt: DateTime
}

input DocumentCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The title of the document."""
  title: String!

  """The icon of the document."""
  icon: String

  """The color of the icon."""
  color: String

  """The document content as a Prosemirror document."""
  contentData: JSONObject

  """The document content as markdown."""
  content: String

  """Related project for the document."""
  projectId: String!
}

input DocumentUpdateInput {
  """The title of the document."""
  title: String

  """The icon of the document."""
  icon: String

  """The color of the icon."""
  color: String

  """The document content as a Prosemirror document."""
  contentData: JSONObject

  """The document content as markdown."""
  content: String

  """Related project for the document."""
  projectId: String
}

input EmailSubscribeInput {
  """[INTERNAL] Email to subscribe."""
  email: String!
}

input EmailUnsubscribeInput {
  """Email type to unsubscribed from."""
  type: String!

  """The user's email validation token."""
  token: String!

  """The identifier of the user."""
  userId: String!
}

input EmojiCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The name of the custom emoji."""
  name: String!

  """The URL for the emoji."""
  url: String!
}

input FavoriteCreateInput {
  """The identifier. If none is provided, the backend will generate one."""
  id: String

  """The name of the favorite folder."""
  folderName: String

  """The parent folder of the favorite."""
  parentId: String

  """The identifier of the issue to favorite."""
  issueId: String

  """The identifier of the project to favorite."""
  projectId: String

  """The identifier of the project team to favorite."""
  projectTeamId: String

  """The type of the predefined view to favorite."""
  predefinedViewType: String

  """The identifier of team for the predefined view to favorite."""
  predefinedViewTeamId: String

  """The identifier of the cycle to favorite."""
  cycleId: String

  """The identifier of the custom view to favorite."""
  customViewId: String

  """The identifier of the document to favorite."""
  documentId: String

  """The identifier of the roadmap to favorite."""
  roadmapId: String

  """The identifier of the label to favorite."""
  labelId: String

  """The position of the item in the favorites list."""
  sortOrder: Float
}

input FavoriteUpdateInput {
  """The position of the item in the favorites list."""
  sortOrder: Float

  """
  The identifier (in UUID v4 format) of the folder to move the favorite under.
  """
  parentId: String

  """The name of the favorite folder."""
  folderName: String
}

input IntegrationRequestInput {
  """Email associated with the request."""
  email: String

  """Name of the requested integration."""
  name: String!
}

input JiraConfigurationInput {
  """The Jira personal access token."""
  accessToken: String!

  """The Jira user's email address."""
  email: String!

  """The Jira installation hostname."""
  hostname: String!

  """The Jira project keys to scope the integration to."""
  project: String
}

input AirbyteConfigurationInput {
  """Linear export API key."""
  apiKey: String!
}

input IntegrationsSettingsCreateInput {
  """
  Whether to send a Slack message when a new issue is created for the project or the team.
  """
  slackIssueCreated: Boolean

  """
  Whether to send a Slack message when a comment is created on any of the project or team's issues.
  """
  slackIssueNewComment: Boolean

  """
  Whether to send a Slack message when any of the project or team's issues change to completed or cancelled.
  """
  slackIssueStatusChangedDone: Boolean

  """
  Whether to send a Slack message when any of the project or team's issues has a change in status.
  """
  slackIssueStatusChangedAll: Boolean

  """Whether to send a Slack message when a project update is created."""
  slackProjectUpdateCreated: Boolean

  """
  Whether to send a Slack message when a project update is created to team channels.
  """
  slackProjectUpdateCreatedToTeam: Boolean

  """
  Whether to send a Slack message when a project update is created to workspace channel.
  """
  slackProjectUpdateCreatedToWorkspace: Boolean

  """Whether to send a Slack message when a new issue is added to triage."""
  slackIssueAddedToTriage: Boolean

  """Whether to send a Slack message when an SLA is at high risk"""
  slackIssueSlaHighRisk: Boolean

  """Whether to receive notification when an SLA has breached on Slack."""
  slackIssueSlaBreached: Boolean

  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The identifier of the team to create settings for."""
  teamId: String

  """The identifier of the project to create settings for."""
  projectId: String
}

input IntegrationsSettingsUpdateInput {
  """
  Whether to send a Slack message when a new issue is created for the project or the team.
  """
  slackIssueCreated: Boolean

  """
  Whether to send a Slack message when a comment is created on any of the project or team's issues.
  """
  slackIssueNewComment: Boolean

  """
  Whether to send a Slack message when any of the project or team's issues change to completed or cancelled.
  """
  slackIssueStatusChangedDone: Boolean

  """
  Whether to send a Slack message when any of the project or team's issues has a change in status.
  """
  slackIssueStatusChangedAll: Boolean

  """Whether to send a Slack message when a project update is created."""
  slackProjectUpdateCreated: Boolean

  """
  Whether to send a Slack message when a project update is created to team channels.
  """
  slackProjectUpdateCreatedToTeam: Boolean

  """
  Whether to send a Slack message when a project update is created to workspace channel.
  """
  slackProjectUpdateCreatedToWorkspace: Boolean

  """Whether to send a Slack message when a new issue is added to triage."""
  slackIssueAddedToTriage: Boolean

  """Whether to send a Slack message when an SLA is at high risk"""
  slackIssueSlaHighRisk: Boolean

  """Whether to receive notification when an SLA has breached on Slack."""
  slackIssueSlaBreached: Boolean
}

input IntegrationTemplateCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The identifier of the integration."""
  integrationId: String!

  """The identifier of the template."""
  templateId: String!
}

input IssueImportUpdateInput {
  """The mapping configuration for the import."""
  mapping: JSONObject!
}

input IssueLabelCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The name of the label."""
  name: String!

  """The description of the label."""
  description: String

  """The color of the label."""
  color: String

  """The identifier of the parent label."""
  parentId: String

  """
  The team associated with the label. If not given, the label will be associated with the entire workspace.
  """
  teamId: String
}

input IssueLabelUpdateInput {
  """The name of the label."""
  name: String

  """The description of the label."""
  description: String

  """The identifier of the parent label."""
  parentId: String

  """The color of the label."""
  color: String
}

input IssueRelationCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The type of relation of the issue to the related issue."""
  type: IssueRelationType!

  """The identifier of the issue that is related to another issue."""
  issueId: String!

  """The identifier of the related issue."""
  relatedIssueId: String!
}

"""The type of the issue relation."""
enum IssueRelationType {
  blocks
  duplicate
  related
}

input IssueRelationUpdateInput {
  """The type of relation of the issue to the related issue."""
  type: String

  """The identifier of the issue that is related to another issue."""
  issueId: String

  """The identifier of the related issue."""
  relatedIssueId: String
}

input IssueCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The title of the issue."""
  title: String!

  """The issue description in markdown format."""
  description: String

  """The issue description as a Prosemirror document."""
  descriptionData: JSON

  """The identifier of the user to assign the issue to."""
  assigneeId: String

  """The identifier of the parent issue."""
  parentId: String

  """
  The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low.
  """
  priority: Int

  """The estimated complexity of the issue."""
  estimate: Int

  """The identifiers of the users subscribing to this ticket."""
  subscriberIds: [String!]

  """The identifiers of the issue labels associated with this ticket."""
  labelIds: [String!]

  """The identifier or key of the team associated with the issue."""
  teamId: String!

  """The cycle associated with the issue."""
  cycleId: String

  """The project associated with the issue."""
  projectId: String

  """The project milestone associated with the issue."""
  projectMilestoneId: String

  """The team state of the issue."""
  stateId: String

  """The comment the issue is referencing."""
  referenceCommentId: String

  """The position of the issue in its column on the board view."""
  boardOrder: Float

  """The position of the issue related to other issues."""
  sortOrder: Float

  """The position of the issue in parent's sub-issue list."""
  subIssueSortOrder: Float

  """The date at which the issue is due."""
  dueDate: TimelessDate

  """
  Create issue as a user with the provided name. This option is only available to OAuth applications creating issues in `actor=application` mode.
  """
  createAsUser: String

  """
  Provide an external user avatar URL. Can only be used in conjunction with the `createAsUser` options. This option is only available to OAuth applications creating comments in `actor=application` mode.
  """
  displayIconUrl: String

  """
  The date when the issue was created (e.g. if importing from another system). Must be a date in the past. If none is provided, the backend will generate the time as now.
  """
  createdAt: DateTime

  """
  [Internal] The timestamp at which an issue will be considered in breach of SLA.
  """
  slaBreachesAt: DateTime
}

input IssueUpdateInput {
  """The issue title."""
  title: String

  """The issue description in markdown format."""
  description: String

  """The issue description as a Prosemirror document."""
  descriptionData: JSON

  """The identifier of the user to assign the issue to."""
  assigneeId: String

  """The identifier of the parent issue."""
  parentId: String

  """
  The priority of the issue. 0 = No priority, 1 = Urgent, 2 = High, 3 = Normal, 4 = Low.
  """
  priority: Int

  """The estimated complexity of the issue."""
  estimate: Int

  """The identifiers of the users subscribing to this ticket."""
  subscriberIds: [String!]

  """The identifiers of the issue labels associated with this ticket."""
  labelIds: [String!]

  """The identifier or key of the team associated with the issue."""
  teamId: String

  """The cycle associated with the issue."""
  cycleId: String

  """The project associated with the issue."""
  projectId: String

  """The project milestone associated with the issue."""
  projectMilestoneId: String

  """The team state of the issue."""
  stateId: String

  """The position of the issue in its column on the board view."""
  boardOrder: Float

  """The position of the issue related to other issues."""
  sortOrder: Float

  """The position of the issue in parent's sub-issue list."""
  subIssueSortOrder: Float

  """The date at which the issue is due."""
  dueDate: TimelessDate

  """Wether the issue has been trashed."""
  trashed: Boolean

  """
  [Internal] The timestamp at which an issue will be considered in breach of SLA.
  """
  slaBreachesAt: DateTime

  """The time until an issue will be snoozed in Triage view."""
  snoozedUntilAt: DateTime

  """The identifier of the user who snoozed the issue."""
  snoozedById: String
}

input NotificationUpdateInput {
  """The time when notification was marked as read."""
  readAt: DateTime

  """
  The time until a notification will be snoozed. After that it will appear in the inbox again.
  """
  snoozedUntilAt: DateTime

  """The id of the project update related to the notification."""
  projectUpdateId: String
}

input NotificationSubscriptionCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The identifier of the team to subscribe to."""
  teamId: String

  """The identifier of the project to subscribe to."""
  projectId: String

  """The type of the project subscription."""
  projectNotificationSubscriptionType: ProjectNotificationSubscriptionType

  """The types of notifications of the team subscription."""
  teamNotificationSubscriptionTypes: [String!]
}

input NotificationSubscriptionUpdateInput {
  """The type of the project subscription."""
  projectNotificationSubscriptionType: ProjectNotificationSubscriptionType

  """The types of notifications of the team subscription."""
  teamNotificationSubscriptionTypes: [String!]
}

input OrganizationDomainCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The domain name to add."""
  name: String!

  """The email address to which to send the verification code."""
  verificationEmail: String

  """The authentication type this domain is for."""
  authType: String = "general"
}

input OrganizationDomainVerificationInput {
  """The identifier in UUID v4 format of the domain being verified."""
  organizationDomainId: String!

  """The verification code sent via email."""
  verificationCode: String!
}

input OrganizationInviteCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The email of the invitee."""
  email: String!

  """What user role the invite should grant."""
  role: UserRoleType = user

  """The message to send to the invitee."""
  message: String

  """The teams that the user has been invited to."""
  teamIds: [String!]
}

input OrganizationInviteUpdateInput {
  """The teams that the user has been invited to."""
  teamIds: [String!]!
}

input UpdateOrganizationInput {
  """The name of the organization."""
  name: String

  """The logo of the organization."""
  logoUrl: String

  """The URL key of the organization."""
  urlKey: String

  """
  How git branches are formatted. If null, default formatting will be used.
  """
  gitBranchFormat: String

  """
  Whether the Git integration linkback messages should be sent for private repositories.
  """
  gitLinkbackMessagesEnabled: Boolean

  """
  Whether the Git integration linkback messages should be sent for public repositories.
  """
  gitPublicLinkbackMessagesEnabled: Boolean

  """Whether the organization is using roadmap."""
  roadmapEnabled: Boolean

  """The frequency at which project updates are sent."""
  projectUpdatesReminderFrequency: ProjectUpdateReminderFrequency

  """The day at which project updates are sent."""
  projectUpdateRemindersDay: Day

  """The hour at which project updates are sent."""
  projectUpdateRemindersHour: Float

  """
  Whether the organization has opted for reduced customer support attachment information.
  """
  reducedPersonalInformation: Boolean

  """
  Whether the organization has opted for having to approve all OAuth applications for install.
  """
  oauthAppReview: Boolean

  """Linear Preview feature flags"""
  linearPreviewFlags: JSONObject

  """List of services that are allowed to be used for login."""
  allowedAuthServices: [String!]

  """Internal. Whether SLAs have been enabled for the organization."""
  slaEnabled: Boolean
}

input DeleteOrganizationInput {
  """The deletion code to confirm operation."""
  deletionCode: String!
}

input ProjectLinkCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The URL of the link."""
  url: String!

  """The label for the link."""
  label: String!

  """Related project for the link."""
  projectId: String!
}

input ProjectLinkUpdateInput {
  """The URL of the link."""
  url: String

  """The label for the link."""
  label: String
}

input ProjectMilestoneCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The name of the project milestone."""
  name: String!

  """The description of the project milestone."""
  description: String

  """The planned target date of the project milestone."""
  targetDate: TimelessDate

  """Related project for the project milestone."""
  projectId: String!

  """The sort order for the project milestone within a project."""
  sortOrder: Float
}

input ProjectMilestoneUpdateInput {
  """The name of the project milestone."""
  name: String

  """The description of the project milestone."""
  description: String

  """The planned target date of the project milestone."""
  targetDate: TimelessDate

  """Related project for the project milestone."""
  projectId: String

  """The sort order for the project milestone within a project."""
  sortOrder: Float
}

input ProjectCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The name of the project."""
  name: String!

  """The icon of the project."""
  icon: String

  """The color of the project."""
  color: String

  """The state of the project."""
  state: String

  """The description for the project."""
  description: String

  """The identifiers of the teams this project is associated with."""
  teamIds: [String!]!

  """The ID of the issue from which that project is created."""
  convertedFromIssueId: String

  """The identifier of the project lead."""
  leadId: String

  """The identifiers of the members of this project."""
  memberIds: [String!]

  """The planned start date of the project."""
  startDate: TimelessDate

  """The planned target date of the project."""
  targetDate: TimelessDate

  """The sort order for the project within shared views."""
  sortOrder: Float
}

input ProjectUpdateInput {
  """The state of the project."""
  state: String

  """The name of the project."""
  name: String

  """The description for the project."""
  description: String

  """The ID of the issue from which that project is created."""
  convertedFromIssueId: String

  """The icon of the project."""
  icon: String

  """The color of the project."""
  color: String

  """The identifiers of the teams this project is associated with."""
  teamIds: [String!]

  """The time until which project update reminders are paused."""
  projectUpdateRemindersPausedUntilAt: DateTime

  """The identifier of the project lead."""
  leadId: String

  """The identifiers of the members of this project."""
  memberIds: [String!]

  """The planned start date of the project."""
  startDate: TimelessDate

  """The planned target date of the project."""
  targetDate: TimelessDate

  """The date when the project was completed."""
  completedAt: DateTime

  """The date when the project was canceled."""
  canceledAt: DateTime

  """Whether to send new issue notifications to Slack."""
  slackNewIssue: Boolean

  """Whether to send new issue comment notifications to Slack."""
  slackIssueComments: Boolean

  """Whether to send issue status update notifications to Slack."""
  slackIssueStatuses: Boolean

  """The sort order for the project in shared views."""
  sortOrder: Float
}

input ProjectUpdateInteractionCreateInput {
  """The identifier. If none is provided, the backend will generate one."""
  id: String

  """The id of the project update that has been interacted with."""
  projectUpdateId: String!

  """The time at which the user read the project update."""
  readAt: DateTime!
}

input ProjectUpdateCreateInput {
  """The identifier. If none is provided, the backend will generate one."""
  id: String

  """The content of the project update in markdown format."""
  body: String

  """The content of the project update as a Prosemirror document."""
  bodyData: JSON

  """The project to associate the project update with."""
  projectId: String!

  """The health of the project at the time of the update."""
  health: ProjectUpdateHealthType
}

input ProjectUpdateUpdateInput {
  """The content of the project update in markdown format."""
  body: String

  """The content of the project update as a Prosemirror document."""
  bodyData: JSON

  """The health of the project at the time of the update."""
  health: ProjectUpdateHealthType
}

input PushSubscriptionCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The user identifier of the subscription."""
  userId: String!

  """The data of the subscription in stringified JSON format."""
  data: String!

  """
  Whether this is a subscription payload for Google Cloud Messaging or Apple Push Notification service
  """
  type: PushSubscriptionType = web
}

"""The different push subscription types"""
enum PushSubscriptionType {
  web
  apple
}

input ReactionCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one
  """
  id: String

  """The emoji the user reacted with."""
  emoji: String

  """The comment to associate the reaction with."""
  commentId: String

  """The project update to associate the reaction with."""
  projectUpdateId: String
}

input RoadmapCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The name of the roadmap."""
  name: String!

  """The description of the roadmap."""
  description: String

  """The owner of the roadmap"""
  ownerId: String

  """The sort order of the roadmap within the organization."""
  sortOrder: Float

  """The roadmap's color."""
  color: String
}

input RoadmapUpdateInput {
  """The name of the roadmap."""
  name: String

  """The description of the roadmap."""
  description: String

  """The owner of the roadmap"""
  ownerId: String

  """The sort order of the roadmap within the organization."""
  sortOrder: Float

  """The roadmap's color."""
  color: String
}

input RoadmapToProjectCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The identifier of the project."""
  projectId: String!

  """The identifier of the roadmap."""
  roadmapId: String!

  """The sort order for the project within its organization."""
  sortOrder: Float
}

input RoadmapToProjectUpdateInput {
  """The sort order for the project within its organization."""
  sortOrder: Float
}

input TeamMembershipCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The identifier of the user associated with the membership."""
  userId: String!

  """The identifier of the team associated with the membership."""
  teamId: String!

  """Internal. Whether the user is the owner of the team."""
  owner: Boolean

  """The position of the item in the users list."""
  sortOrder: Float
}

input TeamMembershipUpdateInput {
  """Internal. Whether the user is the owner of the team."""
  owner: Boolean

  """The position of the item in the users list."""
  sortOrder: Float
}

input TeamCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The name of the team."""
  name: String!

  """The description of the team."""
  description: String

  """
  The key of the team. If not given, the key will be generated based on the name of the team.
  """
  key: String

  """The icon of the team."""
  icon: String

  """The color of the team."""
  color: String

  """The organization associated with the team."""
  organizationId: String

  """Whether the team uses cycles."""
  cyclesEnabled: Boolean

  """The day of the week that a new cycle starts."""
  cycleStartDay: Float

  """The duration of each cycle in weeks."""
  cycleDuration: Int

  """The cooldown time after each cycle in weeks."""
  cycleCooldownTime: Int

  """Auto assign started issues to current active cycle setting."""
  cycleIssueAutoAssignStarted: Boolean

  """Auto assign completed issues to current active cycle setting."""
  cycleIssueAutoAssignCompleted: Boolean

  """Only allow issues issues with cycles in Active Issues."""
  cycleLockToActive: Boolean

  """How many upcoming cycles to create."""
  upcomingCycleCount: Float

  """Whether triage mode is enabled for the team."""
  triageEnabled: Boolean

  """Whether an issue needs to have a priority set before leaving triage."""
  requirePriorityToLeaveTriage: Boolean

  """The timezone of the team."""
  timezone: String

  """Whether issues without priority should be sorted first."""
  issueOrderingNoPriorityFirst: Boolean

  """The issue estimation type to use."""
  issueEstimationType: String

  """Whether to allow zeros in issues estimates."""
  issueEstimationAllowZero: Boolean

  """Whether to move issues to bottom of the column when changing state."""
  issueSortOrderDefaultToBottom: Boolean

  """Whether to add additional points to the estimate scale."""
  issueEstimationExtended: Boolean

  """What to use as an default estimate for unestimated issues."""
  defaultIssueEstimate: Float

  """Whether to group recent issue history entries."""
  groupIssueHistory: Boolean

  """The identifier of the default template for members of this team."""
  defaultTemplateForMembersId: String

  """The identifier of the default template for non-members of this team."""
  defaultTemplateForNonMembersId: String

  """Internal. Whether the team is private or not."""
  private: Boolean

  """Period after which issues are automatically closed, in months."""
  autoClosePeriod: Float

  """The canceled workflow state which auto closed issues will be set to."""
  autoCloseStateId: String

  """
  Period after which closed and completed issues are automatically archived, in months. 0 means disabled.
  """
  autoArchivePeriod: Float

  """
  The workflow state into which issues are moved when they are marked as a duplicate of another issue.
  """
  markedAsDuplicateWorkflowStateId: String
}

input TeamUpdateInput {
  """The name of the team."""
  name: String

  """The description of the team."""
  description: String

  """The key of the team."""
  key: String

  """The icon of the team."""
  icon: String

  """The color of the team."""
  color: String

  """Whether the team uses cycles."""
  cyclesEnabled: Boolean

  """The day of the week that a new cycle starts."""
  cycleStartDay: Float

  """The duration of each cycle in weeks."""
  cycleDuration: Int

  """The cooldown time after each cycle in weeks."""
  cycleCooldownTime: Int

  """Auto assign started issues to current active cycle setting."""
  cycleIssueAutoAssignStarted: Boolean

  """Auto assign completed issues to current active cycle setting."""
  cycleIssueAutoAssignCompleted: Boolean

  """Only allow issues with cycles in Active Issues."""
  cycleLockToActive: Boolean

  """Whether the first cycle should start in the current or the next week."""
  cycleEnabledStartWeek: String

  """How many upcoming cycles to create."""
  upcomingCycleCount: Float

  """The timezone of the team."""
  timezone: String

  """Whether issues without priority should be sorted first."""
  issueOrderingNoPriorityFirst: Boolean

  """The issue estimation type to use."""
  issueEstimationType: String

  """Whether to allow zeros in issues estimates."""
  issueEstimationAllowZero: Boolean

  """Whether to move issues to bottom of the column when changing state."""
  issueSortOrderDefaultToBottom: Boolean

  """Whether to add additional points to the estimate scale."""
  issueEstimationExtended: Boolean

  """What to use as an default estimate for unestimated issues."""
  defaultIssueEstimate: Float

  """
  The workflow state into which issues are moved when a draft PR has been opened.
  """
  draftWorkflowStateId: String

  """
  The workflow state into which issues are moved when a PR has been opened.
  """
  startWorkflowStateId: String

  """
  The workflow state into which issues are moved when a review has been requested for the PR.
  """
  reviewWorkflowStateId: String

  """
  The workflow state into which issues are moved when a PR has been merged.
  """
  mergeWorkflowStateId: String

  """Whether to send new issue notifications to Slack."""
  slackNewIssue: Boolean

  """Whether to send new issue comment notifications to Slack."""
  slackIssueComments: Boolean

  """Whether to send issue status update notifications to Slack."""
  slackIssueStatuses: Boolean

  """Whether to group recent issue history entries."""
  groupIssueHistory: Boolean

  """The identifier of the default template for members of this team."""
  defaultTemplateForMembersId: String

  """The identifier of the default template for non-members of this team."""
  defaultTemplateForNonMembersId: String

  """Whether the team is private or not."""
  private: Boolean

  """Whether triage mode is enabled for the team."""
  triageEnabled: Boolean

  """Whether an issue needs to have a priority set before leaving triage."""
  requirePriorityToLeaveTriage: Boolean

  """Default status for newly created issues."""
  defaultIssueStateId: String

  """Period after which issues are automatically closed, in months."""
  autoClosePeriod: Float

  """The canceled workflow state which auto closed issues will be set to."""
  autoCloseStateId: String

  """
  Period after which closed and completed issues are automatically archived, in months.
  """
  autoArchivePeriod: Float

  """
  The workflow state into which issues are moved when they are marked as a duplicate of another issue.
  """
  markedAsDuplicateWorkflowStateId: String
}

input TemplateCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The template type, e.g. 'issue'."""
  type: String!

  """
  The identifier or key of the team associated with the template. If not given, the template will be shared across all teams.
  """
  teamId: String

  """The template name."""
  name: String!

  """The template description."""
  description: String

  """
  The template data as JSON encoded attributes of the type of entity, such as an issue.
  """
  templateData: JSON!
}

input TemplateUpdateInput {
  """The template name."""
  name: String

  """The template description."""
  description: String

  """
  The identifier or key of the team associated with the template. If set to null, the template will be shared across all teams.
  """
  teamId: String

  """
  The template data as JSON encoded attributes of the type of entity, such as an issue.
  """
  templateData: JSON
}

input UpdateUserInput {
  """The name of the user."""
  name: String

  """The display name of the user."""
  displayName: String

  """The avatar image URL of the user."""
  avatarUrl: String

  """Whether the user account is active."""
  active: Boolean

  """Reason for deactivation."""
  disableReason: String

  """Whether the user account has admin privileges."""
  admin: Boolean

  """The user description or a short bio."""
  description: String

  """The emoji part of the user status."""
  statusEmoji: String

  """The label part of the user status."""
  statusLabel: String

  """When the user status should be cleared."""
  statusUntilAt: DateTime

  """The local timezone of the user."""
  timezone: String
}

input UserSettingsUpdateInput {
  """The user's settings."""
  settings: JSONObject

  """The types of emails the user has unsubscribed from."""
  unsubscribedFrom: [String!]

  """The user's notification preferences."""
  notificationPreferences: JSONObject
}

input ViewPreferencesCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """
  The type of view preferences (either user or organization level preferences).
  """
  type: ViewPreferencesType!

  """The view type of the view preferences are associated with."""
  viewType: ViewType!

  """View preferences object."""
  preferences: JSONObject!

  """The team these view preferences are associated with."""
  teamId: String

  """The project these view preferences are associated with."""
  projectId: String

  """The roadmap these view preferences are associated with."""
  roadmapId: String

  """The label these view preferences are associated with."""
  labelId: String

  """The user profile these view preferences are associated with."""
  userId: String

  """The cycle these view preferences are associated with."""
  cycleId: String

  """The custom view these view preferences are associated with."""
  customViewId: String
}

"""
The type of view preferences (either user or organization level preferences).
"""
enum ViewPreferencesType {
  organization
  user
}

"""The client view this custom view is targeting."""
enum ViewType {
  inbox
  myIssues
  myIssuesCreatedByMe
  myIssuesSubscribedTo
  myIssuesActivity
  userProfile
  userProfileCreatedByUser
  board
  completedCycle
  cycle
  project
  label
  triage
  activeIssues
  backlog
  allIssues
  customView
  customRoadmap
  roadmap
  roadmaps
  roadmapAll
  roadmapClosed
  roadmapBacklog
  projects
  projectsAll
  projectsBacklog
  projectsClosed
  search
  teams
  archive
}

input ViewPreferencesUpdateInput {
  """View preferences."""
  preferences: JSONObject!
}

input WebhookCreateInput {
  """Label for the webhook."""
  label: String

  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """Whether this webhook is enabled."""
  enabled: Boolean = true

  """A secret token used to sign the webhook payload."""
  secret: String

  """The URL that will be called on data changes."""
  url: String!

  """List of resources the webhook should subscribe to."""
  resourceTypes: [String!]!

  """The identifier or key of the team associated with the Webhook."""
  teamId: String

  """Whether this webhook is enabled for all public teams."""
  allPublicTeams: Boolean
}

input WebhookUpdateInput {
  """Label for the webhook."""
  label: String

  """A secret token used to sign the webhook payload."""
  secret: String

  """Whether this webhook is enabled."""
  enabled: Boolean

  """The URL that will be called on data changes."""
  url: String

  """List of resources the webhook should subscribe to."""
  resourceTypes: [String!]
}

input WorkflowStateCreateInput {
  """
  The identifier in UUID v4 format. If none is provided, the backend will generate one.
  """
  id: String

  """The workflow type."""
  type: String!

  """The name of the state."""
  name: String!

  """The color of the state."""
  color: String!

  """The description of the state."""
  description: String

  """The position of the state."""
  position: Float

  """The team associated with the state."""
  teamId: String!
}

input WorkflowStateUpdateInput {
  """The name of the state."""
  name: String

  """The color of the state."""
  color: String

  """The description of the state."""
  description: String

  """The position of the state."""
  position: Float
}

"""A project notification subscription."""
type ProjectNotificationSubscription implements NotificationSubscription & Entity & Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The type of the subscription."""
  type: String!

  """The user associated with notification subscriptions."""
  user: User!

  """Subscribed team."""
  team: Team

  """The project subscribed to."""
  project: Project!

  """The type of the project subscription."""
  projectNotificationSubscriptionType: ProjectNotificationSubscriptionType!
}

"""A team notification subscription."""
type TeamNotificationSubscription implements NotificationSubscription & Entity & Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """The type of the subscription."""
  type: String!

  """The user associated with notification subscriptions."""
  user: User!

  """The team subscribed to."""
  team: Team!

  """Subscribed project."""
  project: Project
}

"""An issue related notification"""
type IssueNotification implements Notification & Entity & Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """Notification type"""
  type: String!

  """The user that caused the notification. If empty it's Linear itself."""
  actor: User

  """The user that received the notification."""
  user: User!

  """
  The time at when the user marked the notification as read. Null, if the the user hasn't read the notification
  """
  readAt: DateTime

  """
  The time at when an email reminder for this notification was sent to the user. Null, if no email
      reminder has been sent.
  """
  emailedAt: DateTime

  """
  The time until a notification will be snoozed. After that it will appear in the inbox again.
  """
  snoozedUntilAt: DateTime

  """The time at which a notification was unsnoozed.."""
  unsnoozedAt: DateTime

  """The issue related to the notification."""
  issue: Issue!

  """The team related to the notification."""
  team: Team!

  """The comment related to the notification."""
  comment: Comment

  """Name of the reaction emoji related to the notification."""
  reactionEmoji: String
}

"""A project related notification"""
type ProjectNotification implements Notification & Entity & Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """Notification type"""
  type: String!

  """The user that caused the notification. If empty it's Linear itself."""
  actor: User

  """The user that received the notification."""
  user: User!

  """
  The time at when the user marked the notification as read. Null, if the the user hasn't read the notification
  """
  readAt: DateTime

  """
  The time at when an email reminder for this notification was sent to the user. Null, if no email
      reminder has been sent.
  """
  emailedAt: DateTime

  """
  The time until a notification will be snoozed. After that it will appear in the inbox again.
  """
  snoozedUntilAt: DateTime

  """The time at which a notification was unsnoozed.."""
  unsnoozedAt: DateTime

  """The project related to the notification."""
  project: Project!

  """The project update related to the notification."""
  projectUpdate: ProjectUpdate
}

"""An oauth client approval related notification"""
type OauthClientApprovalNotification implements Notification & Entity & Node {
  """The unique identifier of the entity."""
  id: ID!

  """The time at which the entity was created."""
  createdAt: DateTime!

  """
  The last time at which the entity was meaningfully updated, i.e. for all changes of syncable properties except those
      for which updates should not produce an update to updatedAt (see skipUpdatedAtKeys). This is the same as the creation time if the entity hasn't
      been updated after creation.
  """
  updatedAt: DateTime!

  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime

  """Notification type"""
  type: String!

  """The user that caused the notification. If empty it's Linear itself."""
  actor: User

  """The user that received the notification."""
  user: User!

  """
  The time at when the user marked the notification as read. Null, if the the user hasn't read the notification
  """
  readAt: DateTime

  """
  The time at when an email reminder for this notification was sent to the user. Null, if no email
      reminder has been sent.
  """
  emailedAt: DateTime

  """
  The time until a notification will be snoozed. After that it will appear in the inbox again.
  """
  snoozedUntilAt: DateTime

  """The time at which a notification was unsnoozed.."""
  unsnoozedAt: DateTime

  """The OAuth client approval request related to the notification."""
  oauthClientApproval: OauthClientApproval!
}

type Query {
  """All API keys for the user."""
  apiKeys(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ApiKeyConnection!

  """Get basic information for an application."""
  applicationInfo(
    """The client ID of the application."""
    clientId: String!
  ): Application!

  """[INTERNAL] Get basic information for a list of applications"""
  applicationInfoByIds(
    """The IDs of the applications."""
    ids: [String!]!
  ): [Application!]!

  """
  Get information for an application and whether a user has approved it for the given scopes.
  """
  applicationWithAuthorization(
    """Actor mode used for the authorization."""
    actor: String = "user"

    """Redirect URI for the application."""
    redirectUri: String

    """Scopes being requested by the application"""
    scope: [String!]!

    """The client ID of the application."""
    clientId: String!
  ): UserAuthorizedApplication!

  """[INTERNAL] Get all authorized applications for a user"""
  authorizedApplications: [AuthorizedApplication!]!

  """
  [INTERNAL] Get all authorized applications (with limited fields) for a workspace
  """
  workspaceAuthorizedApplications: [WorkspaceAuthorizedApplication!]!

  """
  All issue attachments.
  
  To get attachments for a given URL, use `attachmentsForURL` query.
  """
  attachments(
    """Filter returned attachments."""
    filter: AttachmentFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): AttachmentConnection!

  """
  
  One specific issue attachment.
  [Deprecated] 'url' can no longer be used as the 'id' parameter. Use 'attachmentsForUrl' instead
  """
  attachment(id: String!): Attachment!

  """Returns issue attachments for a given `url`."""
  attachmentsForURL(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy

    """The attachment URL."""
    url: String!
  ): AttachmentConnection!

  """
  
  Query an issue by its associated attachment, and its id.
  
  """
  attachmentIssue(
    """
    `id` of the attachment for which you'll want to get the issue for. [Deprecated] `url` as the `id` parameter.
    """
    id: String!
  ): Issue! @deprecated(reason: "Will be removed in near future, please use `attachmentsForURL` to get attachments and their issues instead.")

  """List of audit entry types."""
  auditEntryTypes: [AuditEntryType!]!

  """All audit log entries."""
  auditEntries(
    """Filter returned audit entries."""
    filter: AuditEntryFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): AuditEntryConnection!

  """Fetch users belonging to this user account."""
  availableUsers: AuthResolverResponse!

  """Fetch SSO login URL for the email provided."""
  ssoUrlFromEmail(
    """Whether the client is the desktop app."""
    isDesktop: Boolean

    """Email to query the SSO login URL by."""
    email: String!
  ): SsoUrlFromEmailResponse!

  """All comments."""
  comments(
    """Filter returned comments."""
    filter: CommentFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CommentConnection!

  """A specific comment."""
  comment(
    """The identifier of the comment to retrieve."""
    id: String!
  ): Comment!

  """Custom views for the user."""
  customViews(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CustomViewConnection!

  """One specific custom view."""
  customView(id: String!): CustomView!

  """[INTERNAL] Suggests metadata for a view based on it's filters."""
  customViewSuggestion(filter: JSONObject!): CustomViewSuggestionPayload!

  """All cycles."""
  cycles(
    """Filter returned users."""
    filter: CycleFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CycleConnection!

  """One specific cycle."""
  cycle(id: String!): Cycle!

  """All documents for the project."""
  documents(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): DocumentConnection!

  """One specific document."""
  document(id: String!): Document!

  """All custom emojis."""
  emojis(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): EmojiConnection!

  """A specific emoji."""
  emoji(
    """The identifier of the emoji to retrieve."""
    id: String!
  ): Emoji!

  """All external users for the organization."""
  externalUsers(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ExternalUserConnection!

  """One specific external user."""
  externalUser(
    """The identifier of the external user to retrieve."""
    id: String!
  ): ExternalUser!

  """The user's favorites."""
  favorites(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): FavoriteConnection!

  """One specific favorite."""
  favorite(id: String!): Favorite!

  """
  Fetch Figma screenshot and other information with file and node identifiers.
  """
  figmaEmbedInfo(
    """Figma node identifier."""
    nodeId: String

    """Figma file identifier."""
    fileId: String!
  ): FigmaEmbedPayload!

  """All integrations."""
  integrations(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IntegrationConnection!

  """One specific integration."""
  integration(id: String!): Integration!

  """All project updates."""
  projectUpdates(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectUpdateConnection!

  """One specific set of settings."""
  integrationsSettings(id: String!): IntegrationsSettings!

  """Template and integration connections."""
  integrationTemplates(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IntegrationTemplateConnection!

  """One specific integrationTemplate."""
  integrationTemplate(id: String!): IntegrationTemplate!

  """Fetches the GitHub token, completing the OAuth flow."""
  issueImportFinishGithubOAuth(
    """OAuth code."""
    code: String!
  ): GithubOAuthTokenPayload!

  """All issue labels."""
  issueLabels(
    """Filter returned issue labels."""
    filter: IssueLabelFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueLabelConnection!

  """One specific label."""
  issueLabel(id: String!): IssueLabel!

  """All issue relationships."""
  issueRelations(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueRelationConnection!

  """One specific issue relation."""
  issueRelation(id: String!): IssueRelation!

  """All issues."""
  issues(
    """Filter returned issues."""
    filter: IssueFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!

  """One specific issue."""
  issue(id: String!): Issue!

  """
  [ALPHA] Search issues. This query is experimental and is subject to change without notice.
  """
  issueSearch(
    """Filter returned issues."""
    filter: IssueFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy

    """[Deprecated] Search string to look for."""
    query: String
  ): IssueConnection!

  """Find issue based on the VCS branch name."""
  issueVcsBranchSearch(
    """The VCS branch name to search for."""
    branchName: String!
  ): Issue

  """Issue priority values and corresponding labels."""
  issuePriorityValues: [IssuePriorityValue!]!

  """All notifications."""
  notifications(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): NotificationConnection!

  """One specific notification."""
  notification(id: String!): Notification!

  """The user's notification subscriptions."""
  notificationSubscriptions(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): NotificationSubscriptionConnection!

  """One specific notification subscription."""
  notificationSubscription(id: String!): NotificationSubscription!

  """[INTERNAL] Checks whether the domain can be claimed."""
  organizationDomainClaimRequest(
    """The ID of the organization domain to claim."""
    id: String!
  ): OrganizationDomainClaimPayload!

  """All invites for the organization."""
  organizationInvites(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): OrganizationInviteConnection!

  """One specific organization invite."""
  organizationInvite(id: String!): OrganizationInvite!

  """One specific organization invite."""
  organizationInviteDetails(id: String!): OrganizationInviteDetailsPayload!

  """The user's organization."""
  organization: Organization!

  """Does the organization exist."""
  organizationExists(urlKey: String!): OrganizationExistsPayload!

  """All links for the project."""
  projectLinks(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectLinkConnection!

  """One specific project link."""
  projectLink(id: String!): ProjectLink!

  """All milestones for the project."""
  ProjectMilestones(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectMilestoneConnection!

  """One specific project milestone."""
  ProjectMilestone(id: String!): ProjectMilestone!

  """All projects."""
  projects(
    """Filter returned projects."""
    filter: ProjectFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectConnection!

  """One specific project."""
  project(id: String!): Project!

  """All interactions on project updates."""
  projectUpdateInteractions(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectUpdateInteractionConnection!

  """A specific interaction on a project update."""
  projectUpdateInteraction(
    """The identifier of the project update interaction to retrieve."""
    id: String!
  ): ProjectUpdateInteraction!

  """A specific project update."""
  projectUpdate(
    """The identifier of the project update to retrieve."""
    id: String!
  ): ProjectUpdate!

  """Sends a test push message."""
  pushSubscriptionTest: PushSubscriptionTestPayload!

  """The status of the rate limiter."""
  rateLimitStatus: RateLimitPayload!

  """All roadmaps in the workspace."""
  roadmaps(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): RoadmapConnection!

  """One specific roadmap."""
  roadmap(id: String!): Roadmap!

  """Custom views for the user."""
  roadmapToProjects(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): RoadmapToProjectConnection!

  """One specific roadmapToProject."""
  roadmapToProject(id: String!): RoadmapToProject!

  """All team memberships."""
  teamMemberships(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamMembershipConnection!

  """One specific team membership."""
  teamMembership(id: String!): TeamMembership!

  """
  All teams whose issues can be accessed by the user. This might be different from `administrableTeams`, which also includes teams whose settings can be changed by the user.
  """
  teams(
    """Filter returned teams."""
    filter: TeamFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamConnection!

  """
  All teams you the user can administrate. Administrable teams are teams whose settings the user can change, but to whose issues the user doesn't necessarily have access to.
  """
  administrableTeams(
    """Filter returned teams."""
    filter: TeamFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamConnection!

  """One specific team."""
  team(id: String!): Team!

  """All templates from all users."""
  templates: [Template!]!

  """A specific template."""
  template(
    """The identifier of the template to retrieve."""
    id: String!
  ): Template!

  """Finds a user account by email."""
  userAccountExists(
    """The email to find the user account by."""
    email: String!
  ): UserAccountExistsPayload

  """All users for the organization."""
  users(
    """Filter returned users."""
    filter: UserFilter

    """Should query return disabled/suspended users (default: false)."""
    includeDisabled: Boolean

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): UserConnection!

  """One specific user."""
  user(
    """
    The identifier of the user to retrieve. To retrieve the authenticated user, use `viewer` query.
    """
    id: String!
  ): User!

  """The currently authenticated user."""
  viewer: User!

  """The user's settings."""
  userSettings: UserSettings!

  """All webhooks."""
  webhooks(
    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): WebhookConnection!

  """A specific webhook."""
  webhook(
    """The identifier of the webhook to retrieve."""
    id: String!
  ): Webhook!

  """All issue workflow states."""
  workflowStates(
    """Filter returned workflow states."""
    filter: WorkflowStateFilter

    """A cursor to be used with last for backward pagination."""
    before: String

    """A cursor to be used with first for forward pagination"""
    after: String

    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int

    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int

    """Should archived resources be included (default: false)"""
    includeArchived: Boolean

    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): WorkflowStateConnection!

  """One specific state."""
  workflowState(id: String!): WorkflowState!
}

type Mutation {
  """[Deprecated] Creates a new event."""
  eventCreate(
    """The event to create."""
    input: EventCreateInput!
  ): EventPayload!

  """Creates a new API key."""
  apiKeyCreate(
    """The api key object to create."""
    input: ApiKeyCreateInput!
  ): ApiKeyPayload!

  """Deletes an API key."""
  apiKeyDelete(
    """The identifier of the API key to delete."""
    id: String!
  ): ArchivePayload!

  """
  Creates a new attachment, or updates existing if the same `url` and `issueId` is used.
  """
  attachmentCreate(
    """The attachment object to create."""
    input: AttachmentCreateInput!
  ): AttachmentPayload!

  """Updates an existing issue attachment."""
  attachmentUpdate(
    """A partial attachment object to update the attachment with."""
    input: AttachmentUpdateInput!

    """The identifier of the attachment to update."""
    id: String!
  ): AttachmentPayload!

  """Link any url to an issue."""
  attachmentLinkURL(
    """The title to use for the attachment."""
    title: String

    """The id for the attachment."""
    id: String

    """The issue for which to link the url."""
    issueId: String!

    """The url to link."""
    url: String!
  ): AttachmentPayload!

  """Link an existing Zendesk ticket to an issue."""
  attachmentLinkZendesk(
    """The issue for which to link the Zendesk ticket."""
    issueId: String!

    """The Zendesk ticket ID to link."""
    ticketId: String!
  ): AttachmentPayload!

  """Link an existing Discord message to an issue."""
  attachmentLinkDiscord(
    """The issue for which to link the Discord message."""
    issueId: String!

    """The Discord channel ID for the message to link."""
    channelId: String!

    """The Discord message ID for the message to link."""
    messageId: String!

    """The Discord message URL for the message to link."""
    url: String!
  ): AttachmentPayload!

  """Link an existing Front conversation to an issue."""
  attachmentLinkFront(
    """The issue for which to link the Front conversation."""
    issueId: String!

    """The Front conversation ID to link."""
    conversationId: String!
  ): FrontAttachmentPayload!

  """Link an existing Intercom conversation to an issue."""
  attachmentLinkIntercom(
    """The issue for which to link the Intercom conversation."""
    issueId: String!

    """The Intercom conversation ID to link."""
    conversationId: String!
  ): AttachmentPayload!

  """Link an existing Jira issue to an issue."""
  attachmentLinkJiraIssue(
    """The issue for which to link the Jira issue."""
    issueId: String!

    """The Jira issue key or ID to link."""
    jiraIssueId: String!
  ): AttachmentPayload!

  """[DEPRECATED] Archives an issue attachment."""
  attachmentArchive(
    """The identifier of the attachment to archive."""
    id: String!
  ): ArchivePayload! @deprecated(reason: "This mutation is deprecated, please use `attachmentDelete` instead")

  """Deletes an issue attachment."""
  attachmentDelete(
    """The identifier of the attachment to delete."""
    id: String!
  ): ArchivePayload!

  """
  Finds or creates a new user account by email and sends an email with token.
  """
  emailUserAccountAuthChallenge(
    """The data used for email authentication."""
    input: EmailUserAccountAuthChallengeInput!
  ): EmailUserAccountAuthChallengeResponse!

  """Authenticates a user account via email and authentication token."""
  emailTokenUserAccountAuth(
    """The data used for token authentication."""
    input: TokenUserAccountAuthInput!
  ): AuthResolverResponse!

  """
  Authenticates a user account via email and authentication token for SAML.
  """
  samlTokenUserAccountAuth(
    """The data used for token authentication."""
    input: TokenUserAccountAuthInput!
  ): AuthResolverResponse!

  """
  Authenticate user account through Google OAuth. This is the 2nd step of OAuth flow.
  """
  googleUserAccountAuth(
    """The data used for Google authentication."""
    input: GoogleUserAccountAuthInput!
  ): AuthResolverResponse!

  """Creates an organization from onboarding."""
  createOrganizationFromOnboarding(
    """Onboarding survey."""
    survey: OnboardingCustomerSurvey

    """Organization details for the new organization."""
    input: CreateOrganizationInput!
  ): CreateOrJoinOrganizationResponse!

  """Join an organization from onboarding."""
  joinOrganizationFromOnboarding(
    """Organization details for the organization to join."""
    input: JoinOrganizationInput!
  ): CreateOrJoinOrganizationResponse!

  """Leave an organization."""
  leaveOrganization(
    """ID of the organization to leave."""
    organizationId: String!
  ): CreateOrJoinOrganizationResponse!

  """Logout of all clients."""
  logout: LogoutResponse!

  """Creates a new comment."""
  commentCreate(
    """The comment object to create."""
    input: CommentCreateInput!
  ): CommentPayload!

  """Updates a comment."""
  commentUpdate(
    """A partial comment object to update the comment with."""
    input: CommentUpdateInput!

    """The identifier of the comment to update."""
    id: String!
  ): CommentPayload!

  """Deletes a comment."""
  commentDelete(
    """The identifier of the comment to delete."""
    id: String!
  ): ArchivePayload!

  """Saves user message."""
  contactCreate(
    """The contact entry to create."""
    input: ContactCreateInput!
  ): ContactPayload!

  """[INTERNAL] Saves sales pricing inquiry to Front."""
  contactSalesCreate(
    """The contact entry to create."""
    input: ContactSalesCreateInput!
  ): ContactPayload!

  """Creates a new custom view."""
  customViewCreate(
    """The properties of the custom view to create."""
    input: CustomViewCreateInput!
  ): CustomViewPayload!

  """Updates a custom view."""
  customViewUpdate(
    """The properties of the custom view to update."""
    input: CustomViewUpdateInput!

    """The identifier of the custom view to update."""
    id: String!
  ): CustomViewPayload!

  """Deletes a custom view."""
  customViewDelete(
    """The identifier of the custom view to delete."""
    id: String!
  ): ArchivePayload!

  """Creates a new cycle."""
  cycleCreate(
    """The cycle object to create."""
    input: CycleCreateInput!
  ): CyclePayload!

  """Updates a cycle."""
  cycleUpdate(
    """A partial cycle object to update the cycle with."""
    input: CycleUpdateInput!

    """The identifier of the cycle to update."""
    id: String!
  ): CyclePayload!

  """Archives a cycle."""
  cycleArchive(
    """The identifier of the cycle to archive."""
    id: String!
  ): ArchivePayload!

  """Creates a new document."""
  documentCreate(
    """The document to create."""
    input: DocumentCreateInput!
  ): DocumentPayload!

  """Updates a document."""
  documentUpdate(
    """A partial document object to update the document with."""
    input: DocumentUpdateInput!

    """
    The identifier of the document to update. Also the identifier from the URL is accepted.
    """
    id: String!
  ): DocumentPayload!

  """Deletes a document."""
  documentDelete(
    """The identifier of the document to delete."""
    id: String!
  ): ArchivePayload!

  """[INTERNAL] Subscribes the email to the newsletter."""
  emailSubscribe(
    """Subscription details."""
    input: EmailSubscribeInput!
  ): EmailSubscribePayload!

  """Unsubscribes the user from one type of emails."""
  emailUnsubscribe(
    """Unsubscription details."""
    input: EmailUnsubscribeInput!
  ): EmailUnsubscribePayload!

  """Creates a custom emoji."""
  emojiCreate(
    """The emoji object to create."""
    input: EmojiCreateInput!
  ): EmojiPayload!

  """Deletes an emoji."""
  emojiDelete(
    """The identifier of the emoji to delete."""
    id: String!
  ): ArchivePayload!

  """Creates a new favorite (project, cycle etc)."""
  favoriteCreate(
    """The favorite object to create."""
    input: FavoriteCreateInput!
  ): FavoritePayload!

  """Updates a favorite."""
  favoriteUpdate(
    """A partial favorite object to update the favorite with."""
    input: FavoriteUpdateInput!

    """The identifier of the favorite to update."""
    id: String!
  ): FavoritePayload!

  """Deletes a favorite reference."""
  favoriteDelete(
    """The identifier of the favorite reference to delete."""
    id: String!
  ): ArchivePayload!

  """
  XHR request payload to upload an images, video and other attachments directly to Linear's cloud storage.
  """
  fileUpload(
    """Optional metadata."""
    metaData: JSON

    """Should the file be made publicly accessible (default: false)."""
    makePublic: Boolean

    """File size of the uploaded file."""
    size: Int!

    """MIME type of the uploaded file."""
    contentType: String!

    """Filename of the uploaded file."""
    filename: String!
  ): UploadPayload!

  """Upload an image from an URL to Linear."""
  imageUploadFromUrl(
    """URL of the file to be uploaded to Linear."""
    url: String!
  ): ImageUploadFromUrlPayload!

  """Requests a currently unavailable integration."""
  integrationRequest(
    """Integration request details."""
    input: IntegrationRequestInput!
  ): IntegrationRequestPayload!

  """[INTERNAL] Updates the integration."""
  integrationSettingsUpdate(
    """An integration settings object."""
    input: IntegrationSettingsInput!

    """The identifier of the integration to update."""
    id: String!
  ): IntegrationPayload!

  """Generates a webhook for the GitHub commit integration."""
  integrationGithubCommitCreate: GitHubCommitIntegrationPayload!

  """Connects the organization with the GitHub App."""
  integrationGithubConnect(
    """The GitHub data to connect with."""
    installationId: String!
  ): IntegrationPayload!

  """Connects the organization with a GitLab Access Token."""
  integrationGitlabConnect(
    """The URL of the GitLab installation"""
    gitlabUrl: String!

    """The GitLab Access Token to connect with."""
    accessToken: String!
  ): IntegrationPayload!

  """Creates an integration api key for Airbyte to connect with Linear"""
  airbyteIntegrationConnect(
    """Airbyte integration settings."""
    input: AirbyteConfigurationInput!
  ): IntegrationPayload!

  """
  [INTERNAL] Connects the organization with a Jira Personal Access Token.
  """
  jiraIntegrationConnect(
    """Jira integration settings."""
    input: JiraConfigurationInput!
  ): IntegrationPayload!

  """Integrates the organization with Intercom."""
  integrationIntercom(
    """
    The Intercom domain URL to use for the integration. Defaults to app.intercom.com if not provided.
    """
    domainUrl: String

    """The Intercom OAuth redirect URI."""
    redirectUri: String!

    """The Intercom OAuth code."""
    code: String!
  ): IntegrationPayload!

  """Disconnects the organization from Intercom."""
  integrationIntercomDelete: IntegrationPayload!

  """[DEPRECATED] Updates settings on the Intercom integration."""
  integrationIntercomSettingsUpdate(
    """
    A partial Intercom integration settings object to update the integration settings with.
    """
    input: IntercomSettingsInput!
  ): IntegrationPayload! @deprecated(reason: "This mutation is deprecated, please use `integrationSettingsUpdate` instead")

  """Integrates the organization with Discord."""
  integrationDiscord(
    """The Discord OAuth redirect URI."""
    redirectUri: String!

    """The Discord OAuth code."""
    code: String!
  ): IntegrationPayload!

  """Integrates the organization with Slack."""
  integrationSlack(
    """
    [DEPRECATED] Whether or not v2 of Slack OAuth should be used. No longer used.
    """
    shouldUseV2Auth: Boolean

    """The Slack OAuth redirect URI."""
    redirectUri: String!

    """The Slack OAuth code."""
    code: String!
  ): IntegrationPayload!

  """Integrates the organization with Slack for issue intake."""
  integrationSlackIntake(
    """The Slack OAuth redirect URI."""
    redirectUri: String!

    """The Slack OAuth code."""
    code: String!
  ): IntegrationPayload!

  """Integrates your personal notifications with Slack."""
  integrationSlackPersonal(
    """The Slack OAuth redirect URI."""
    redirectUri: String!

    """The Slack OAuth code."""
    code: String!
  ): IntegrationPayload!

  """Slack webhook integration."""
  integrationSlackPost(
    """
    [DEPRECATED] Whether or not v2 of Slack OAuth should be used. No longer used.
    """
    shouldUseV2Auth: Boolean

    """The Slack OAuth redirect URI."""
    redirectUri: String!

    """Integration's associated team."""
    teamId: String!

    """The Slack OAuth code."""
    code: String!
  ): IntegrationPayload!

  """Slack integration for project notifications."""
  integrationSlackProjectPost(
    """
    The service to enable once connected, either 'notifications' or 'updates'.
    """
    service: String!

    """The Slack OAuth redirect URI."""
    redirectUri: String!

    """Integration's associated project."""
    projectId: String!

    """The Slack OAuth code."""
    code: String!
  ): IntegrationPayload!

  """Slack integration for organization level project update notifications."""
  integrationSlackOrgProjectUpdatesPost(
    """The Slack OAuth redirect URI."""
    redirectUri: String!

    """The Slack OAuth code."""
    code: String!
  ): IntegrationPayload!

  """Imports custom emojis from your Slack workspace."""
  integrationSlackImportEmojis(
    """The Slack OAuth redirect URI."""
    redirectUri: String!

    """The Slack OAuth code."""
    code: String!
  ): IntegrationPayload!

  """Integrates the organization with Figma."""
  integrationFigma(
    """The Figma OAuth redirect URI."""
    redirectUri: String!

    """The Figma OAuth code."""
    code: String!
  ): IntegrationPayload!

  """Integrates the organization with Google Sheets."""
  integrationGoogleSheets(
    """The Google OAuth code."""
    code: String!
  ): IntegrationPayload!

  """Manually update Google Sheets data."""
  refreshGoogleSheetsData(
    """The identifier of the Google Sheets integration to update."""
    id: String!
  ): IntegrationPayload!

  """Integrates the organization with Sentry."""
  integrationSentryConnect(
    """The slug of the Sentry organization being connected."""
    organizationSlug: String!

    """The Sentry grant code that's exchanged for OAuth tokens."""
    code: String!

    """The Sentry installationId to connect with."""
    installationId: String!
  ): IntegrationPayload!

  """Integrates the organization with Front."""
  integrationFront(
    """The Front OAuth redirect URI."""
    redirectUri: String!

    """The Front OAuth code."""
    code: String!
  ): IntegrationPayload!

  """Integrates the organization with Zendesk."""
  integrationZendesk(
    """The Zendesk installation subdomain."""
    subdomain: String!

    """The Zendesk OAuth code."""
    code: String!

    """The Zendesk OAuth scopes."""
    scope: String!

    """The Zendesk OAuth redirect URI."""
    redirectUri: String!
  ): IntegrationPayload!

  """Enables Loom integration for the organization."""
  integrationLoom: IntegrationPayload! @deprecated(reason: "Not available.")

  """Deletes an integration."""
  integrationDelete(
    """The identifier of the integration to delete."""
    id: String!
  ): ArchivePayload!

  """Creates new settings for one or more integrations."""
  integrationsSettingsCreate(
    """The settings to create."""
    input: IntegrationsSettingsCreateInput!
  ): IntegrationsSettingsPayload!

  """Updates settings related to integrations for a project or a team."""
  integrationsSettingsUpdate(
    """A settings object to update the settings with."""
    input: IntegrationsSettingsUpdateInput!

    """The identifier of the settings to update."""
    id: String!
  ): IntegrationsSettingsPayload!

  """Creates a new integrationTemplate join."""
  integrationTemplateCreate(
    """The properties of the integrationTemplate to create."""
    input: IntegrationTemplateCreateInput!
  ): IntegrationTemplatePayload!

  """Deletes a integrationTemplate."""
  integrationTemplateDelete(
    """The identifier of the integrationTemplate to delete."""
    id: String!
  ): ArchivePayload!

  """Kicks off a GitHub import job."""
  issueImportCreateGithub(
    """ID of issue import. If not provided it will be generated."""
    id: String

    """Whether or not we should collect the data for closed issues."""
    includeClosedIssues: Boolean

    """
    Whether to instantly process the import with the default configuration mapping.
    """
    instantProcess: Boolean

    """Whether or not we should import GitHub organization level projects."""
    githubShouldImportOrgProjects: Boolean

    """
    GitHub owner (user or org) for the repository from which we will import data.
    """
    githubRepoOwner: String!

    """GitHub repository name from which we will import data."""
    githubRepoName: String!

    """GitHub token to fetch information from the GitHub API."""
    githubToken: String!

    """Name of new team. When teamId is not set."""
    teamName: String

    """ID of the team into which to import data."""
    teamId: String

    """ID of the organization into which to import data."""
    organizationId: String
  ): IssueImportPayload!

  """Kicks off a Jira import job."""
  issueImportCreateJira(
    """ID of issue import. If not provided it will be generated."""
    id: String

    """Whether or not we should collect the data for closed issues."""
    includeClosedIssues: Boolean

    """
    Whether to instantly process the import with the default configuration mapping.
    """
    instantProcess: Boolean

    """Jira installation or cloud hostname."""
    jiraHostname: String!

    """Jira user account email."""
    jiraEmail: String!

    """Jira project key from which we will import data."""
    jiraProject: String!

    """Jira personal access token to access Jira REST API."""
    jiraToken: String!

    """Name of new team. When teamId is not set."""
    teamName: String

    """ID of the team into which to import data. Empty to create new team."""
    teamId: String

    """ID of the organization into which to import data."""
    organizationId: String
  ): IssueImportPayload!

  """Kicks off a Shortcut (formerly Clubhouse) import job."""
  issueImportCreateClubhouse(
    """ID of issue import. If not provided it will be generated."""
    id: String

    """Whether or not we should collect the data for closed issues."""
    includeClosedIssues: Boolean

    """
    Whether to instantly process the import with the default configuration mapping.
    """
    instantProcess: Boolean

    """
    Shortcut (formerly Clubhouse) team name to choose which issues we should import.
    """
    clubhouseTeamName: String!

    """
    Shortcut (formerly Clubhouse) token to fetch information from the Clubhouse API.
    """
    clubhouseToken: String!

    """Name of new team. When teamId is not set."""
    teamName: String

    """ID of the team into which to import data."""
    teamId: String

    """ID of the organization into which to import data."""
    organizationId: String
  ): IssueImportPayload!

  """Kicks off an Asana import job."""
  issueImportCreateAsana(
    """ID of issue import. If not provided it will be generated."""
    id: String

    """Whether or not we should collect the data for closed issues."""
    includeClosedIssues: Boolean

    """
    Whether to instantly process the import with the default configuration mapping.
    """
    instantProcess: Boolean

    """Asana team name to choose which issues we should import."""
    asanaTeamName: String!

    """Asana token to fetch information from the Asana API."""
    asanaToken: String!

    """Name of new team. When teamId is not set."""
    teamName: String

    """ID of the team into which to import data."""
    teamId: String

    """ID of the organization into which to import data."""
    organizationId: String
  ): IssueImportPayload!

  """Deletes an import job."""
  issueImportDelete(
    """ID of the issue import to delete."""
    issueImportId: String!
  ): IssueImportDeletePayload!

  """Kicks off import processing."""
  issueImportProcess(
    """The mapping configuration to use for processing the import."""
    mapping: JSONObject!

    """ID of the issue import which we're going to process."""
    issueImportId: String!
  ): IssueImportPayload!

  """Updates the mapping for the issue import."""
  issueImportUpdate(
    """The properties of the issue import to update."""
    input: IssueImportUpdateInput!

    """The identifier of the issue import."""
    id: String!
  ): IssueImportPayload!

  """Creates a new label."""
  issueLabelCreate(
    """
    Whether to replace all team-specific labels with the same name with this newly created workspace label.
    """
    replaceTeamLabels: Boolean

    """The issue label to create."""
    input: IssueLabelCreateInput!
  ): IssueLabelPayload!

  """Updates an label."""
  issueLabelUpdate(
    """A partial label object to update."""
    input: IssueLabelUpdateInput!

    """The identifier of the label to update."""
    id: String!
  ): IssueLabelPayload!

  """Deletes an issue label."""
  issueLabelArchive(
    """The identifier of the label to archive."""
    id: String!
  ): ArchivePayload! @deprecated(reason: "Labels are deleted instead of archived now!")

  """Deletes an issue label."""
  issueLabelDelete(
    """The identifier of the label to delete."""
    id: String!
  ): ArchivePayload!

  """Creates a new issue relation."""
  issueRelationCreate(
    """The issue relation to create."""
    input: IssueRelationCreateInput!
  ): IssueRelationPayload!

  """Updates an issue relation."""
  issueRelationUpdate(
    """The properties of the issue relation to update."""
    input: IssueRelationUpdateInput!

    """The identifier of the issue relation to update."""
    id: String!
  ): IssueRelationPayload!

  """Deletes an issue relation."""
  issueRelationDelete(
    """The identifier of the issue relation to delete."""
    id: String!
  ): ArchivePayload!

  """Creates a new issue."""
  issueCreate(
    """The issue object to create."""
    input: IssueCreateInput!
  ): IssuePayload!

  """Updates an issue."""
  issueUpdate(
    """A partial issue object to update the issue with."""
    input: IssueUpdateInput!

    """The identifier of the issue to update."""
    id: String!
  ): IssuePayload!

  """Updates multiple issues at once."""
  issueBatchUpdate(
    """A partial issue object to update the issues with."""
    input: IssueUpdateInput!

    """The id's of the issues to update. Can't be more than 50 at a time."""
    ids: [UUID!]!
  ): IssueBatchPayload!

  """Archives an issue."""
  issueArchive(
    """Whether to trash the issue"""
    trash: Boolean

    """The identifier of the issue to archive."""
    id: String!
  ): ArchivePayload!

  """Unarchives an issue."""
  issueUnarchive(
    """The identifier of the issue to archive."""
    id: String!
  ): ArchivePayload!

  """Deletes (trashes) an issue."""
  issueDelete(
    """The identifier of the issue to delete."""
    id: String!
  ): ArchivePayload!

  """
  Adds an issue reminder. Will cause a notification to be sent when the issue reminder time is reached.
  """
  issueReminder(
    """The time when a reminder notification will be sent."""
    reminderAt: DateTime!

    """The identifier of the issue to add a reminder for."""
    id: String!
  ): IssuePayload!

  """
  [INTERNAL] Updates an issue description from the Front app to handle Front attachments correctly.
  """
  issueDescriptionUpdateFromFront(
    """Description to update the issue with. """
    description: String!

    """The identifier of the issue to update."""
    id: String!
  ): IssuePayload!

  """Updates a notification."""
  notificationUpdate(
    """A partial notification object to update the notification with."""
    input: NotificationUpdateInput!

    """The identifier of the notification to update."""
    id: String!
  ): NotificationPayload!

  """Archives a notification."""
  notificationArchive(
    """The id of the notification to archive."""
    id: String!
  ): ArchivePayload!

  """Unarchives a notification."""
  notificationUnarchive(
    """The id of the notification to archive."""
    id: String!
  ): ArchivePayload!

  """Creates a new notification subscription for a team or a project."""
  notificationSubscriptionCreate(
    """The subscription object to create."""
    input: NotificationSubscriptionCreateInput!
  ): NotificationSubscriptionPayload!

  """Updates a notification subscription."""
  notificationSubscriptionUpdate(
    """
    A partial notification subscription object to update the notification subscription with.
    """
    input: NotificationSubscriptionUpdateInput!

    """The identifier of the notification subscription to update."""
    id: String!
  ): NotificationSubscriptionPayload!

  """Deletes a notification subscription reference."""
  notificationSubscriptionDelete(
    """The identifier of the notification subscription reference to delete."""
    id: String!
  ): ArchivePayload!

  """[INTERNAL] Verifies a domain claim."""
  organizationDomainClaim(
    """The ID of the organization domain to claim."""
    id: String!
  ): OrganizationDomainSimplePayload!

  """[INTERNAL] Verifies a domain to be added to an organization."""
  organizationDomainVerify(
    """The organization domain to verify."""
    input: OrganizationDomainVerificationInput!
  ): OrganizationDomainPayload!

  """[INTERNAL] Adds a domain to be allowed for an organization."""
  organizationDomainCreate(
    """Whether to trigger an email verification flow during domain creation."""
    triggerEmailVerification: Boolean

    """The organization domain entry to create."""
    input: OrganizationDomainCreateInput!
  ): OrganizationDomainPayload!

  """Deletes a domain."""
  organizationDomainDelete(
    """The identifier of the domain to delete."""
    id: String!
  ): ArchivePayload!

  """Creates a new organization invite."""
  organizationInviteCreate(
    """The organization invite object to create."""
    input: OrganizationInviteCreateInput!
  ): OrganizationInvitePayload!

  """Updates an organization invite."""
  organizationInviteUpdate(
    """The updates to make to the organization invite object."""
    input: OrganizationInviteUpdateInput!

    """The identifier of the organization invite to update."""
    id: String!
  ): OrganizationInvitePayload!

  """Re-send an organization invite."""
  resendOrganizationInvite(
    """The identifier of the organization invite to be re-send."""
    id: String!
  ): ArchivePayload!

  """Deletes an organization invite."""
  organizationInviteDelete(
    """The identifier of the organization invite to delete."""
    id: String!
  ): ArchivePayload!

  """Updates the user's organization."""
  organizationUpdate(
    """A partial organization object to update the organization with."""
    input: UpdateOrganizationInput!
  ): OrganizationPayload!

  """
  Get an organization's delete confirmation token. Administrator privileges required.
  """
  organizationDeleteChallenge: OrganizationDeletePayload!

  """Delete's an organization. Administrator privileges required."""
  organizationDelete(
    """Information required to delete an organization."""
    input: DeleteOrganizationInput!
  ): OrganizationDeletePayload!

  """
  Cancels the deletion of an organization. Administrator privileges required.
  """
  organizationCancelDelete: OrganizationCancelDeletePayload!

  """
  Starts a plus trial for the organization. Administrator privileges required.
  """
  organizationStartPlusTrial: OrganizationStartPlusTrialPayload!

  """Creates a new project link."""
  projectLinkCreate(
    """The project link object to create."""
    input: ProjectLinkCreateInput!
  ): ProjectLinkPayload!

  """Updates a project link."""
  projectLinkUpdate(
    """The project link object to update."""
    input: ProjectLinkUpdateInput!

    """The identifier of the project link to update."""
    id: String!
  ): ProjectLinkPayload!

  """Deletes a project link."""
  projectLinkDelete(
    """The identifier of the project link to delete."""
    id: String!
  ): ArchivePayload!

  """Creates a new project milestone."""
  projectMilestoneCreate(
    """The project milestone to create."""
    input: ProjectMilestoneCreateInput!
  ): ProjectMilestonePayload!

  """Updates a project milestone."""
  projectMilestoneUpdate(
    """A partial object to update the project milestone with."""
    input: ProjectMilestoneUpdateInput!

    """
    The identifier of the project milestone to update. Also the identifier from the URL is accepted.
    """
    id: String!
  ): ProjectMilestonePayload!

  """Deletes a project milestone."""
  projectMilestoneDelete(
    """The identifier of the project milestone to delete."""
    id: String!
  ): ArchivePayload!

  """Creates a new project."""
  projectCreate(
    """The issue object to create."""
    input: ProjectCreateInput!
  ): ProjectPayload!

  """Updates a project."""
  projectUpdate(
    """A partial project object to update the project with."""
    input: ProjectUpdateInput!

    """
    The identifier of the project to update. Also the identifier from the URL is accepted.
    """
    id: String!
  ): ProjectPayload!

  """
  Deletes a project. All issues will be disassociated from the deleted project.
  """
  projectDelete(
    """
    The identifier of the project to delete. Also the identifier from the URL is accepted.
    """
    id: String!
  ): ArchivePayload!

  """Archives a project."""
  projectArchive(
    """
    The identifier of the project to archive. Also the identifier from the URL is accepted.
    """
    id: String!
  ): ArchivePayload! @deprecated(reason: "Deprecated in favor of projectDelete.")

  """Unarchives a project."""
  projectUnarchive(
    """
    The identifier of the project to restore. Also the identifier from the URL is accepted.
    """
    id: String!
  ): ArchivePayload!

  """Creates a new interaction on a project update."""
  projectUpdateInteractionCreate(
    """Data for the project update interaction to create."""
    input: ProjectUpdateInteractionCreateInput!
  ): ProjectUpdateInteractionPayload!

  """Creates a new project update."""
  projectUpdateCreate(
    """Data for the project update to create."""
    input: ProjectUpdateCreateInput!
  ): ProjectUpdatePayload!

  """Updates a project update."""
  projectUpdateUpdate(
    """A data to update the project update with."""
    input: ProjectUpdateUpdateInput!

    """The identifier of the project update to update."""
    id: String!
  ): ProjectUpdatePayload!

  """Deletes a project update."""
  projectUpdateDelete(
    """The identifier of the project update to delete."""
    id: String!
  ): ArchivePayload!

  """Mark a project update as read."""
  projectUpdateMarkAsRead(
    """The identifier of the project update."""
    id: String!
  ): ProjectUpdateWithInteractionPayload!

  """Creates a push subscription."""
  pushSubscriptionCreate(
    """The push subscription to create."""
    input: PushSubscriptionCreateInput!
  ): PushSubscriptionPayload!

  """Deletes a push subscription."""
  pushSubscriptionDelete(
    """The identifier of the push subscription to delete."""
    id: String!
  ): PushSubscriptionPayload!

  """Creates a new reaction."""
  reactionCreate(
    """The reaction object to create."""
    input: ReactionCreateInput!
  ): ReactionPayload!

  """Deletes a reaction."""
  reactionDelete(
    """The identifier of the reaction to delete."""
    id: String!
  ): ArchivePayload!

  """Create CSV export report for the organization."""
  createCsvExportReport(includePrivateTeamIds: [String!]): CreateCsvExportReportPayload!

  """Creates a new roadmap."""
  roadmapCreate(
    """The properties of the roadmap to create."""
    input: RoadmapCreateInput!
  ): RoadmapPayload!

  """Updates a roadmap."""
  roadmapUpdate(
    """The properties of the roadmap to update."""
    input: RoadmapUpdateInput!

    """The identifier of the roadmap to update."""
    id: String!
  ): RoadmapPayload!

  """Archives a roadmap."""
  roadmapArchive(
    """The identifier of the roadmap to archive."""
    id: String!
  ): ArchivePayload!

  """Unarchives a roadmap."""
  roadmapUnarchive(
    """The identifier of the roadmap to unarchive."""
    id: String!
  ): ArchivePayload!

  """Deletes a roadmap."""
  roadmapDelete(
    """The identifier of the roadmap to delete."""
    id: String!
  ): ArchivePayload!

  """Creates a new roadmapToProject join."""
  roadmapToProjectCreate(
    """The properties of the roadmapToProject to create."""
    input: RoadmapToProjectCreateInput!
  ): RoadmapToProjectPayload!

  """Updates a roadmapToProject."""
  roadmapToProjectUpdate(
    """The properties of the roadmapToProject to update."""
    input: RoadmapToProjectUpdateInput!

    """The identifier of the roadmapToProject to update."""
    id: String!
  ): RoadmapToProjectPayload!

  """Deletes a roadmapToProject."""
  roadmapToProjectDelete(
    """The identifier of the roadmapToProject to delete."""
    id: String!
  ): ArchivePayload!

  """Deletes a previously used team key."""
  teamKeyDelete(
    """The identifier of the team key to delete."""
    id: String!
  ): ArchivePayload!

  """Creates a new team membership."""
  teamMembershipCreate(
    """The team membership object to create."""
    input: TeamMembershipCreateInput!
  ): TeamMembershipPayload!

  """Updates a team membership."""
  teamMembershipUpdate(
    """A partial team membership object to update the team membership with."""
    input: TeamMembershipUpdateInput!

    """The identifier of the team membership to update."""
    id: String!
  ): TeamMembershipPayload!

  """Deletes a team membership."""
  teamMembershipDelete(
    """The identifier of the team membership to delete."""
    id: String!
  ): ArchivePayload!

  """
  Creates a new team. The user who creates the team will automatically be added as a member to the newly created team.
  """
  teamCreate(
    """The team id to copy settings from."""
    copySettingsFromTeamId: String

    """The team object to create."""
    input: TeamCreateInput!
  ): TeamPayload!

  """Updates a team."""
  teamUpdate(
    """A partial team object to update the team with."""
    input: TeamUpdateInput!

    """The identifier of the team to update."""
    id: String!
  ): TeamPayload!

  """Deletes a team."""
  teamDelete(
    """The identifier of the team to delete."""
    id: String!
  ): ArchivePayload!

  """Deletes team's cycles data"""
  teamCyclesDelete(
    """The identifier of the team, which cycles will be deleted."""
    id: String!
  ): TeamPayload!

  """Creates a new template."""
  templateCreate(
    """The template object to create."""
    input: TemplateCreateInput!
  ): TemplatePayload!

  """Updates an existing template."""
  templateUpdate(
    """The properties of the template to update."""
    input: TemplateUpdateInput!

    """The identifier of the template."""
    id: String!
  ): TemplatePayload!

  """Deletes a template."""
  templateDelete(
    """The identifier of the template to delete."""
    id: String!
  ): ArchivePayload!

  """
  Updates a user. Only available to organization admins and the user themselves.
  """
  userUpdate(
    """A partial user object to update the user with."""
    input: UpdateUserInput!

    """
    The identifier of the user to update. Use `me` to reference currently authenticated user.
    """
    id: String!
  ): UserPayload!

  """Connects the Discord user to this Linear account via OAuth2."""
  userDiscordConnect(
    """The Discord OAuth redirect URI."""
    redirectUri: String!

    """The Discord OAuth code."""
    code: String!
  ): UserPayload!

  """Connects the GitHub user to this Linear account via OAuth2."""
  userGitHubConnect(
    """The GitHub OAuth code."""
    code: String!
  ): UserPayload!

  """
  Connects the Google Calendar to the user to this Linear account via OAuth2.
  """
  userGoogleCalendarConnect(
    """[Internal] The Google OAuth code."""
    code: String!
  ): UserPayload!

  """Disconnects the external user from this Linear account."""
  userExternalUserDisconnect(
    """The external service to disconnect"""
    service: String!
  ): UserPayload!

  """Makes user an admin. Can only be called by an admin."""
  userPromoteAdmin(
    """The identifier of the user to make an admin."""
    id: String!
  ): UserAdminPayload!

  """Makes user a regular user. Can only be called by an admin."""
  userDemoteAdmin(
    """The identifier of the user to make a regular user."""
    id: String!
  ): UserAdminPayload!

  """Makes user a regular user. Can only be called by an admin."""
  userPromoteMember(
    """The identifier of the user to make a regular user."""
    id: String!
  ): UserAdminPayload!

  """Makes user a guest. Can only be called by an admin."""
  userDemoteMember(
    """The identifier of the user to make a guest."""
    id: String!
  ): UserAdminPayload!

  """Suspends a user. Can only be called by an admin."""
  userSuspend(
    """The identifier of the user to suspend."""
    id: String!
  ): UserAdminPayload!

  """Un-suspends a user. Can only be called by an admin."""
  userUnsuspend(
    """The identifier of the user to unsuspend."""
    id: String!
  ): UserAdminPayload!

  """Updates the user's settings."""
  userSettingsUpdate(
    """A partial notification object to update the settings with."""
    input: UserSettingsUpdateInput!

    """The identifier of the userSettings to update."""
    id: String!
  ): UserSettingsPayload!

  """[Deprecated] Updates a user's settings flag."""
  userSettingsFlagIncrement(
    """Flag to increment."""
    flag: String!
  ): UserSettingsFlagPayload!

  """Resets user's setting flags."""
  userSettingsFlagsReset(
    """The flags to reset. If not provided all flags will be reset."""
    flags: [UserFlagType!]
  ): UserSettingsFlagsResetPayload!

  """Updates a user's settings flag."""
  userFlagUpdate(
    """Flag operation to perform"""
    operation: UserFlagUpdateOperation!

    """Settings flag to increment."""
    flag: UserFlagType!
  ): UserSettingsFlagPayload!

  """Creates a new ViewPreferences object."""
  viewPreferencesCreate(
    """The ViewPreferences object to create."""
    input: ViewPreferencesCreateInput!
  ): ViewPreferencesPayload!

  """Updates an existing ViewPreferences object."""
  viewPreferencesUpdate(
    """The properties of the view preferences."""
    input: ViewPreferencesUpdateInput!

    """The identifier of the ViewPreferences object."""
    id: String!
  ): ViewPreferencesPayload!

  """Deletes a ViewPreferences."""
  viewPreferencesDelete(
    """The identifier of the ViewPreferences to delete."""
    id: String!
  ): ArchivePayload!

  """Creates a new webhook."""
  webhookCreate(
    """The webhook object to create."""
    input: WebhookCreateInput!
  ): WebhookPayload!

  """Updates an existing Webhook."""
  webhookUpdate(
    """The properties of the Webhook."""
    input: WebhookUpdateInput!

    """The identifier of the Webhook."""
    id: String!
  ): WebhookPayload!

  """Deletes a Webhook."""
  webhookDelete(
    """The identifier of the Webhook to delete."""
    id: String!
  ): ArchivePayload!

  """Creates a new state, adding it to the workflow of a team."""
  workflowStateCreate(
    """The state to create."""
    input: WorkflowStateCreateInput!
  ): WorkflowStatePayload!

  """Updates a state."""
  workflowStateUpdate(
    """A partial state object to update."""
    input: WorkflowStateUpdateInput!

    """The identifier of the state to update."""
    id: String!
  ): WorkflowStatePayload!

  """
  Archives a state. Only states with issues that have all been archived can be archived.
  """
  workflowStateArchive(
    """The identifier of the state to archive."""
    id: String!
  ): ArchivePayload!
}

"""A universally unique identifier as specified by RFC 4122."""
scalar UUID

"""The types of flags that the user can have."""
enum UserFlagType {
  completedOnboarding
  desktopInstalled
  teamsPageIntroductionDismissed
  joinTeamIntroductionDismissed
  desktopDownloadToastDismissed
  emptyBacklogDismissed
  emptyCustomViewsDismissed
  emptyActiveIssuesDismissed
  emptyMyIssuesDismissed
  triageWelcomeDismissed
  cycleWelcomeDismissed
  projectWelcomeDismissed
  projectBacklogWelcomeDismissed
  projectUpdatesWelcomeDismissed
  analyticsWelcomeDismissed
  insightsWelcomeDismissed
  insightsHelpDismissed
  figmaPromptDismissed
  issueMovePromptCompleted
  migrateThemePreference
  listSelectionTip
  canPlaySnake
  canPlayTetris
  importBannerDismissed
  rewindBannerDismissed
  dueDateShortcutMigration
  slackCommentReactionTipShown
  issueLabelSuggestionUsed
  threadedCommentsNudgeIsSeen
  milestoneOnboardingIsSeenAndDismissed
  all
}

"""Operations that can be applied to UserFlagType"""
enum UserFlagUpdateOperation {
  incr
  decr
  clear
  lock
}
