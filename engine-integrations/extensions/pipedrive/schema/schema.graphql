type Query {
  """
  Returns details of a specific call log.
  
  Equivalent to GET /callLogs/{id}
  """
  callLog(
    """The ID received when you create the call log"""
    id: String!
  ): CallLog

  """
  Returns data about a specific deal field.
  
  Equivalent to GET /dealFields/{id}
  """
  field(
    """The ID of the field"""
    id: Int!
  ): Field

  """
  Returns all activity fields.
  
  Equivalent to GET /activityFields
  """
  fields: Fields

  """
  Initializes a file download.
  
  Equivalent to GET /files/{id}/download
  """
  fileDownload(
    """The ID of the file"""
    id: Int!
  ): String

  """
  Returns details of an installment or a recurring subscription by the deal ID.
  
  Equivalent to GET /subscriptions/find/{dealId}
  """
  findSubscriptionByDeal(
    """The ID of the deal"""
    dealId: Int!
  ): SubscriptionsId

  """
  Finds users by their name.
  
  Equivalent to GET /users/find
  """
  findUsersByName(
    """
    When enabled, the term will only be matched against email addresses of users. Default: `false`
    """
    searchByEmail: SearchByEmail

    """The search term to look for"""
    term: String!
  ): Users2

  """
  Returns all activities assigned to a particular user.
  
  Equivalent to GET /activities
  """
  getActivities(
    """
    Whether the activity is done or not. 0 = Not done, 1 = Done. If omitted returns both done and not done activities.
    """
    done: Done

    """
    Use the activity due date where you wish to stop fetching activities from. Insert due date in YYYY-MM-DD format.
    """
    endDate: String

    """
    The ID of the filter to use (will narrow down results if used together with `user_id` parameter)
    """
    filterId: Int

    """
    For pagination, the limit of entries to be returned. If not provided, 100 items will be returned.
    """
    limit: Int

    """
    For pagination, the position that represents the first result for the page
    """
    start: Int

    """
    Use the activity due date where you wish to begin fetching activities from. Insert due date in YYYY-MM-DD format.
    """
    startDate: String

    """
    The type of the activity, can be one type or multiple types separated by a comma. This is in correlation with the `key_string` parameter of ActivityTypes.
    """
    type: String

    """
    The ID of the user whose activities will be fetched. If omitted, the user associated with the API token will be used. If 0, activities for all company users will be fetched based on the permission sets.
    """
    userId: Int
  ): GetActivities

  """
  Returns the details of a specific activity.
  
  Equivalent to GET /activities/{id}
  """
  getActivity(
    """The ID of the activity"""
    id: Int!
  ): GetActivity

  """
  Returns all activity types.
  
  Equivalent to GET /activityTypes
  """
  getActivityTypes: GetActivityTypes

  """
  Returns all the mail messages inside a specified mail thread.
  
  Equivalent to GET /mailbox/mailThreads/{id}/mailMessages
  """
  getAllMailMessagesOfMailThread(
    """The ID of the mail thread"""
    id: Int!
  ): GetAllMailMessagesOfMailThread

  """
  Lists activities associated with an organization.
  
  Equivalent to GET /organizations/{id}/activities
  """
  getAssociatedActivities(
    """
    Whether the activity is done or not. 0 = Not done, 1 = Done. If omitted returns both Done and Not done activities.
    """
    done: Done

    """A comma-separated string of activity IDs to exclude from result"""
    exclude: String

    """The ID of the organization"""
    id: Int!

    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): GetAssociatedActivities

  """
  Lists deals associated with an organization.
  
  Equivalent to GET /organizations/{id}/deals
  """
  getAssociatedDeals(
    """The ID of the organization"""
    id: Int!

    """Items shown per page"""
    limit: Int

    """
    If set, only deals that are directly associated to the organization are fetched. If not set (default), all deals are fetched that are either directly or indirectly related to the organization. Indirect relations include relations through custom, organization-type fields and through persons of the given organization.
    """
    onlyPrimaryAssociation: OnlyPrimaryAssociation

    """
    The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys).
    """
    sort: String

    """Pagination start"""
    start: Int

    """
    Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
    """
    status: Status3
  ): GetAssociatedDeals

  """
  Lists files associated with a deal.
  
  Equivalent to GET /deals/{id}/files
  """
  getAssociatedFiles(
    """The ID of the deal"""
    id: Int!

    """Items shown per page"""
    limit: Int

    """
    The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys). Supported fields: `id`, `user_id`, `deal_id`, `person_id`, `org_id`, `product_id`, `add_time`, `update_time`, `file_name`, `file_type`, `file_size`, `comment`.
    """
    sort: String

    """Pagination start"""
    start: Int
  ): GetAssociatedFiles

  """
  Lists the followers of a deal.
  
  Equivalent to GET /deals/{id}/followers
  """
  getAssociatedFollowers(
    """The ID of the deal"""
    id: Int!
  ): GetAssociatedFollowers

  """
  Lists mail messages associated with a deal.
  
  Equivalent to GET /deals/{id}/mailMessages
  """
  getAssociatedMailMessages(
    """The ID of the deal"""
    id: Int!

    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): GetAssociatedMailMessages

  """
  Lists updates about a person.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint's response will also include updates for the `marketing_status` field.
  
  Equivalent to GET /persons/{id}/flow
  """
  getAssociatedPersonUpdates(
    """
    Whether to show custom field updates or not. 1 = Include custom field changes. If omitted returns changes without custom field updates.
    """
    allChanges: String

    """The ID of the person"""
    id: Int!

    """
    A comma-separated string for filtering out item specific updates. (Possible values - call, activity, plannedActivity, change, note, deal, file, dealChange, personChange, organizationChange, follower, dealFollower, personFollower, organizationFollower, participant, comment, mailMessage, mailMessageWithAttachment, invoice, document, marketing_campaign_stat, marketing_status_change)
    """
    items: String

    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): GetAssociatedPersonUpdates

  """
  Lists updates about an organization.
  
  Equivalent to GET /organizations/{id}/flow
  """
  getAssociatedUpdates(
    """
    Whether to show custom field updates or not. 1 = Include custom field changes. If omitted, returns changes without custom field updates.
    """
    allChanges: String

    """The ID of the organization"""
    id: Int!

    """
    A comma-separated string for filtering out item specific updates. (Possible values - activity, plannedActivity, note, file, change, deal, follower, participant, mailMessage, mailMessageWithAttachment, invoice, activityFile, document)
    """
    items: String

    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): GetAssociatedUpdates

  """
  Returns all comments associated with a note.
  
  Equivalent to GET /notes/{id}/comments
  """
  getComments(
    """The ID of the note"""
    id: Int!

    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): GetComments

  """
  Returns all supported currencies in given account which should be used when saving monetary values with other objects. The `code` parameter of the returning objects is the currency code according to ISO 4217 for all non-custom currencies.
  
  Equivalent to GET /currencies
  """
  getCurrencies(
    """
    Optional search term that is searched for from currency's name and/or code
    """
    term: String
  ): GetCurrencies

  """
  Returns data about an authorized user within the company with bound company data: company ID, company name, and domain. Note that the `locale` property means 'Date/number format' in the Pipedrive account settings, not the chosen language.
  
  Equivalent to GET /users/me
  """
  getCurrentUser: GetCurrentUser

  """
  Returns the details of a specific deal. Note that this also returns some additional fields which are not present when asking for all deals – such as deal age and stay in pipeline stages. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of dealFields. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/getting-details-of-a-deal" target="_blank" rel="noopener noreferrer">getting details of a deal</a>.
  
  Equivalent to GET /deals/{id}
  """
  getDeal(
    """The ID of the deal"""
    id: Int!
  ): GetDeal

  """
  Lists activities associated with a deal.
  
  Equivalent to GET /deals/{id}/activities
  """
  getDealActivities(
    """
    Whether the activity is done or not. 0 = Not done, 1 = Done. If omitted, returns both Done and Not done activities.
    """
    done: Done

    """A comma-separated string of activity IDs to exclude from result"""
    exclude: String

    """The ID of the deal"""
    id: Int!

    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): GetDealActivities

  """
  Returns data about all deal fields.
  
  Equivalent to GET /dealFields
  """
  getDealFields(
    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): Fields

  """
  Lists the participants associated with a deal.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
  
  Equivalent to GET /deals/{id}/participants
  """
  getDealParticipants(
    """The ID of the deal"""
    id: Int!

    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): GetDealParticipants

  """
  Lists updates about a deal.
  
  Equivalent to GET /deals/{id}/flow
  """
  getDealUpdates(
    """
    Whether to show custom field updates or not. 1 = Include custom field changes. If omitted returns changes without custom field updates.
    """
    allChanges: String

    """The ID of the deal"""
    id: Int!

    """
    A comma-separated string for filtering out item specific updates. (Possible values - call, activity, plannedActivity, change, note, deal, file, dealChange, personChange, organizationChange, follower, dealFollower, personFollower, organizationFollower, participant, comment, mailMessage, mailMessageWithAttachment, invoice, document, marketing_campaign_stat, marketing_status_change)
    """
    items: String

    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): GetDealUpdates

  """
  Returns all deals. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/getting-all-deals" target="_blank" rel="noopener noreferrer">getting all deals</a>.
  
  Equivalent to GET /deals
  """
  getDeals(
    """The ID of the filter to use"""
    filterId: Int

    """Items shown per page"""
    limit: Int

    """
    When supplied, only deals owned by you are returned. However, `filter_id` takes precedence over `owned_by_you` when both are supplied.
    """
    ownedByYou: OwnedByYou

    """
    The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys).
    """
    sort: String

    """If supplied, only deals within the given stage will be returned"""
    stageId: Int

    """Pagination start"""
    start: Int

    """
    Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
    """
    status: Status3

    """
    If supplied, only deals matching the given user will be returned. However, `filter_id` and `owned_by_you` takes precedence over `user_id` when supplied.
    """
    userId: Int
  ): GetDeals

  """
  Returns a summary of all the deals.
  
  Equivalent to GET /deals/summary
  """
  getDealsSummary(
    """
    <code>user_id</code> will not be considered. Only deals matching the given filter will be returned.
    """
    filterId: Int

    """Only deals within the given stage will be returned"""
    stageId: Int

    """
    Only fetch deals with a specific status. open = Open, won = Won, lost = Lost
    """
    status: Status4

    """
    Only deals matching the given user will be returned. `user_id` will not be considered if you use `filter_id`.
    """
    userId: Int
  ): GetDealsSummary

  """
  Returns open and won deals, grouped by a defined interval of time set in a date-type dealField (`field_key`) — e.g. when month is the chosen interval, and 3 months are asked starting from January 1st, 2012, deals are returned grouped into 3 groups — January, February and March — based on the value of the given `field_key`.
  
  Equivalent to GET /deals/timeline
  """
  getDealsTimeline(
    """
    The number of given intervals, starting from `start_date`, to fetch. E.g. 3 (months).
    """
    amount: Int!

    """
    Whether to exclude deals list (1) or not (0). Note that when deals are excluded, the timeline summary (counts and values) is still returned.
    """
    excludeDeals: ExcludeDeals

    """The date field key which deals will be retrieved from"""
    fieldKey: String!

    """If supplied, only deals matching the given filter will be returned"""
    filterId: Int

    """
    The type of the interval<table><tr><th>Value</th><th>Description</th></tr><tr><td>`day`</td><td>Day</td></tr><tr><td>`week`</td><td>A full week (7 days) starting from `start_date`</td></tr><tr><td>`month`</td><td>A full month (depending on the number of days in given month) starting from `start_date`</td></tr><tr><td>`quarter`</td><td>A full quarter (3 months) starting from `start_date`</td></tr></table>
    """
    interval: Interval2!

    """If supplied, only deals matching the given pipeline will be returned"""
    pipelineId: Int

    """The date when the first interval starts. Format: YYYY-MM-DD"""
    startDate: String!

    """
    The 3-letter currency code of any of the supported currencies. When supplied, `totals_converted` is returned per each interval which contains the currency-converted total amounts in the given currency. You may also set this parameter to `default_currency` in which case the user's default currency is used.
    """
    totalsConvertCurrency: String

    """If supplied, only deals matching the given user will be returned"""
    userId: Int
  ): GetDealsTimeline

  """
  Returns data about a specific file.
  
  Equivalent to GET /files/{id}
  """
  getFile(
    """The ID of the file"""
    id: Int!
  ): GetFile

  """
  Returns data about all files.
  
  Equivalent to GET /files
  """
  getFiles(
    """Items shown per page"""
    limit: Int

    """
    The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys). Supported fields: `id`, `user_id`, `deal_id`, `person_id`, `org_id`, `product_id`, `add_time`, `update_time`, `file_name`, `file_type`, `file_size`, `comment`.
    """
    sort: String

    """Pagination start"""
    start: Int
  ): GetFiles

  """
  Returns data about a specific filter. Note that this also returns the condition lines of the filter.
  
  Equivalent to GET /filters/{id}
  """
  getFilter(
    """The ID of the filter"""
    id: Int!
  ): GetFilter

  """
  Returns all supported filter helpers. It helps to know what conditions and helpers are available when you want to <a href="/docs/api/v1/Filters#addFilter">add</a> or <a href="/docs/api/v1/Filters#updateFilter">update</a> filters. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/adding-a-filter" target="_blank" rel="noopener noreferrer">adding a filter</a>.
  
  Equivalent to GET /filters/helpers
  """
  getFilterHelpers: JSON

  """
  Returns data about all filters.
  
  Equivalent to GET /filters
  """
  getFilters(
    """The types of filters to fetch"""
    type: Type
  ): GetFilters

  """
  Gets the progress of a goal for the specified period.
  
  Equivalent to GET /goals/{id}/results
  """
  getGoalResult(
    """The ID of the goal that the results are looked for"""
    id: String!

    """
    The end date of the period for which to find the goal's progress. Format: YYYY-MM-DD. This date must be the same or before the goal duration end date.
    
    """
    periodEnd: String!

    """
    The start date of the period for which to find the goal's progress. Format: YYYY-MM-DD. This date must be the same or after the goal duration start date.
    
    """
    periodStart: String!
  ): GetGoalResult

  """
  Returns data about goals based on criteria. For searching, append `{searchField}={searchValue}` to the URL, where `searchField` can be any one of the lowest-level fields in dot-notation (e.g. `type.params.pipeline_id`; `title`). `searchValue` should be the value you are looking for on that field. Additionally, `is_active=<true|false>` can be provided to search for only active/inactive goals. When providing `period.start`, `period.end` must also be provided and vice versa.
  
  Equivalent to GET /goals/find
  """
  getGoals(
    """
    The ID of the user who's goal to fetch. When omitted, only your goals will be returned.
    """
    assigneeId: Int

    """
    The type of the goal's assignee. If provided, everyone's goals will be returned.
    """
    assigneeType: AssigneeType

    """
    The numeric ID of the goal's currency. Only applicable to goals with `expected_outcome.tracking_metric` with value `sum`. If provided, everyone's goals will be returned.
    """
    expectedOutcomeCurrencyId: Int

    """
    The numeric value of the outcome. If provided, everyone's goals will be returned.
    """
    expectedOutcomeTarget: Float

    """
    The tracking metric of the expected outcome of the goal. If provided, everyone's goals will be returned.
    """
    expectedOutcomeTrackingMetric: ExpectedOutcomeTrackingMetric

    """Whether the goal is active or not"""
    isActive: IsActive

    """
    The end date of the period for which to find goals. Date in format of YYYY-MM-DD.
    """
    periodEnd: String

    """
    The start date of the period for which to find goals. Date in format of YYYY-MM-DD. When `period.start` is provided, `period.end` must be provided too.
    """
    periodStart: String

    """The title of the goal"""
    title: String

    """The type of the goal. If provided, everyone's goals will be returned."""
    typeName: TypeName

    """
    An array of IDs or `null` for all activity types. Only applicable for `activities_completed` and/or `activities_added` types of goals. If provided, everyone's goals will be returned.
    """
    typeParamsActivityTypeId: [Int]

    """
    An array of pipeline IDs or `null` for all pipelines. If provided, everyone's goals will be returned.
    """
    typeParamsPipelineId: [Int]

    """
    The ID of the stage. Applicable to only `deals_progressed` type of goals. If provided, everyone's goals will be returned.
    """
    typeParamsStageId: Int
  ): GetGoals

  """
  Returns details of all lead labels. This endpoint does not support pagination and all labels are always returned.
  
  Equivalent to GET /leadLabels
  """
  getLeadLabels: GetLeadLabels

  """
  Returns all lead sources. Please note that the list of lead sources is fixed, it cannot be modified. All leads created through the Pipedrive API will have a lead source `API` assigned.
  
  
  Equivalent to GET /leadSources
  """
  getLeadSources: GetLeadSources

  """
  Returns multiple leads. Leads are sorted by the time they were created, from oldest to newest. Pagination can be controlled using `limit` and `start` query parameters. If a lead contains custom fields, the fields' values will be included in the response in the same format as with the `Deals` endpoints. If a custom field's value hasn't been set for the lead, it won't appear in the response. Please note that leads do not have a separate set of custom fields, instead they inherit the custom fields' structure from deals.
  
  
  Equivalent to GET /leads
  """
  getLeads(
    """
    Filtering based on the archived status of a lead. If not provided, `All` is used.
    """
    archivedStatus: ArchivedStatus

    """The ID of the filter to use"""
    filterId: Int

    """
    For pagination, the limit of entries to be returned. If not provided, 100 items will be returned.
    """
    limit: Int

    """
    If supplied, only leads matching the given organization will be returned. However, `filter_id` takes precedence over `organization_id` when supplied.
    """
    organizationId: Int

    """
    If supplied, only leads matching the given user will be returned. However, `filter_id` takes precedence over `owner_id` when supplied.
    """
    ownerId: Int

    """
    If supplied, only leads matching the given person will be returned. However, `filter_id` takes precedence over `person_id` when supplied.
    """
    personId: Int

    """
    The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys).
    """
    sort: Sort

    """
    For pagination, the position that represents the first result for the page
    """
    start: Int
  ): GetLeads

  """
  Returns mail threads in a specified folder ordered by the most recent message within.
  
  Equivalent to GET /mailbox/mailThreads
  """
  getMailThreads(
    """The type of folder to fetch"""
    folder: Folder

    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): GetMailThreads

  """
  Returns data about all note fields.
  
  Equivalent to GET /noteFields
  """
  getNoteFields: GetNoteFields

  """
  Returns all notes.
  
  Equivalent to GET /notes
  """
  getNotes(
    """
    The ID of the deal which notes to fetch. If omitted, notes about all deals will be returned.
    """
    dealId: Int

    """The date in format of YYYY-MM-DD until which notes to fetch to"""
    endDate: String

    """
    The ID of the lead which notes to fetch. If omitted, notes about all leads will be returned.
    """
    leadId: ID

    """Items shown per page"""
    limit: Int

    """
    The ID of the organization which notes to fetch. If omitted, notes about all organizations will be returned.
    """
    orgId: Int

    """
    The ID of the person whose notes to fetch. If omitted, notes about all persons will be returned.
    """
    personId: Int

    """If set, the results are filtered by note to deal pinning state"""
    pinnedToDealFlag: PinnedToDealFlag

    """If set, the results are filtered by note to lead pinning state"""
    pinnedToLeadFlag: PinnedToLeadFlag

    """If set, the results are filtered by note to organization pinning state"""
    pinnedToOrganizationFlag: PinnedToOrganizationFlag

    """If set, the results are filtered by note to person pinning state"""
    pinnedToPersonFlag: PinnedToPersonFlag

    """
    The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys). Supported fields: `id`, `user_id`, `deal_id`, `person_id`, `org_id`, `content`, `add_time`, `update_time`.
    """
    sort: String

    """Pagination start"""
    start: Int

    """The date in format of YYYY-MM-DD from which notes to fetch"""
    startDate: String

    """
    The ID of the user whose notes to fetch. If omitted, notes by all users will be returned.
    """
    userId: Int
  ): GetNotes

  """
  Returns a specific mail thread.
  
  Equivalent to GET /mailbox/mailThreads/{id}
  """
  getOneMailThread(
    """The ID of the mail thread"""
    id: Int!
  ): GetOneMailThread

  """
  Returns the details of an organization. Note that this also returns some additional fields which are not present when asking for all organizations. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of organizationFields.
  
  Equivalent to GET /organizations/{id}
  """
  getOrganization(
    """The ID of the organization"""
    id: Int!
  ): GetOrganization

  """
  Returns data about a specific organization field.
  
  Equivalent to GET /organizationFields/{id}
  """
  getOrganizationField(
    """The ID of the field"""
    id: Int!
  ): Field

  """
  Returns data about all organization fields.
  
  Equivalent to GET /organizationFields
  """
  getOrganizationFields(
    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): Fields

  """
  Lists files associated with an organization.
  
  Equivalent to GET /organizations/{id}/files
  """
  getOrganizationFiles(
    """The ID of the organization"""
    id: Int!

    """Items shown per page"""
    limit: Int

    """
    The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys). Supported fields: `id`, `user_id`, `deal_id`, `person_id`, `org_id`, `product_id`, `add_time`, `update_time`, `file_name`, `file_type`, `file_size`, `comment`.
    """
    sort: String

    """Pagination start"""
    start: Int
  ): GetAssociatedFiles

  """
  Lists mail messages associated with an organization.
  
  Equivalent to GET /organizations/{id}/mailMessages
  """
  getOrganizationMailMessages(
    """The ID of the organization"""
    id: Int!

    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): GetAssociatedMailMessages

  """
  Lists persons associated with an organization.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
  
  Equivalent to GET /organizations/{id}/persons
  """
  getOrganizationPersons(
    """The ID of the organization"""
    id: Int!

    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): ListPersons

  """
  Finds and returns an organization relationship from its ID.
  
  Equivalent to GET /organizationRelationships/{id}
  """
  getOrganizationRelationship(
    """The ID of the organization relationship"""
    id: Int!

    """The ID of the base organization for the returned calculated values"""
    orgId: Int
  ): GetOrganizationRelationship

  """
  Gets all of the relationships for a supplied organization ID.
  
  Equivalent to GET /organizationRelationships
  """
  getOrganizationRelationships(
    """The ID of the organization to get relationships for"""
    orgId: Int!
  ): GetOrganizationRelationships

  """
  Returns all organizations.
  
  Equivalent to GET /organizations
  """
  getOrganizations(
    """The ID of the filter to use"""
    filterId: Int

    """
    If supplied, only organizations whose name starts with the specified letter will be returned (case insensitive)
    """
    firstChar: String

    """Items shown per page"""
    limit: Int

    """
    The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys).
    """
    sort: String

    """Pagination start"""
    start: Int

    """
    If supplied, only organizations owned by the given user will be returned. However, `filter_id` takes precedence over `user_id` when both are supplied.
    """
    userId: Int
  ): GetOrganizations

  """
  Returns data about all permission sets.
  
  Equivalent to GET /permissionSets
  """
  getPermissionSets(
    """The app to filter the permission sets by"""
    app: App2
  ): GetPermissionSets

  """
  Returns the details of a person. Note that this also returns some additional fields which are not present when asking for all persons. Also note that custom fields appear as long hashes in the resulting data. These hashes can be mapped against the `key` value of personFields.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
  
  Equivalent to GET /persons/{id}
  """
  getPerson(
    """The ID of the person"""
    id: Int!
  ): GetPerson

  """
  Lists activities associated with a person.
  
  Equivalent to GET /persons/{id}/activities
  """
  getPersonActivities(
    """
    Whether the activity is done or not. 0 = Not done, 1 = Done. If omitted, returns both Done and Not done activities.
    """
    done: Done

    """A comma-separated string of activity IDs to exclude from result"""
    exclude: String

    """The ID of the person"""
    id: Int!

    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): GetAssociatedActivities

  """
  Lists deals associated with a person.
  
  Equivalent to GET /persons/{id}/deals
  """
  getPersonDeals(
    """The ID of the person"""
    id: Int!

    """Items shown per page"""
    limit: Int

    """
    The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys).
    """
    sort: String

    """Pagination start"""
    start: Int

    """
    Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
    """
    status: Status3
  ): GetAssociatedDeals

  """
  Returns data about a specific person field.
  
  Equivalent to GET /personFields/{id}
  """
  getPersonField(
    """The ID of the field"""
    id: Int!
  ): Field

  """
  Returns data about all person fields.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
  
  Equivalent to GET /personFields
  """
  getPersonFields(
    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): Fields

  """
  Lists files associated with a person.
  
  Equivalent to GET /persons/{id}/files
  """
  getPersonFiles(
    """The ID of the person"""
    id: Int!

    """Items shown per page"""
    limit: Int

    """
    The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys). Supported fields: `id`, `user_id`, `deal_id`, `person_id`, `org_id`, `product_id`, `add_time`, `update_time`, `file_name`, `file_type`, `file_size`, `comment`.
    """
    sort: String

    """Pagination start"""
    start: Int
  ): GetAssociatedFiles

  """
  Lists the followers of a person.
  
  Equivalent to GET /persons/{id}/followers
  """
  getPersonFollowers(
    """The ID of the person"""
    id: Int!
  ): GetAssociatedFollowers

  """
  Lists mail messages associated with a person.
  
  Equivalent to GET /persons/{id}/mailMessages
  """
  getPersonMailMessages(
    """The ID of the person"""
    id: Int!

    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): GetAssociatedMailMessages

  """
  Lists products associated with a person.
  
  Equivalent to GET /persons/{id}/products
  """
  getPersonProducts(
    """The ID of the person"""
    id: Int!

    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): GetPersonProducts

  """
  List users permitted to access a person.
  
  Equivalent to GET /persons/{id}/permittedUsers
  """
  getPersonUsers(
    """The ID of the person"""
    id: Int!
  ): OrganizationPermittedUsers

  """
  Returns all persons.
  
  Equivalent to GET /persons
  """
  getPersons(
    """The ID of the filter to use"""
    filterId: Int

    """
    If supplied, only persons whose name starts with the specified letter will be returned (case insensitive)
    """
    firstChar: String

    """Items shown per page"""
    limit: Int

    """
    The field names and sorting mode separated by a comma (`field_name_1 ASC`, `field_name_2 DESC`). Only first-level field keys are supported (no nested keys).
    """
    sort: String

    """Pagination start"""
    start: Int

    """
    If supplied, only persons owned by the given user will be returned. However, `filter_id` takes precedence over `user_id` when both are supplied.
    """
    userId: Int
  ): GetPersons

  """
  Returns data about a specific pipeline. Also returns the summary of the deals in this pipeline across its stages.
  
  Equivalent to GET /pipelines/{id}
  """
  getPipeline(
    """The ID of the pipeline"""
    id: Int!

    """
    The 3-letter currency code of any of the supported currencies. When supplied, `per_stages_converted` is returned in `deals_summary` which contains the currency-converted total amounts in the given currency per each stage. You may also set this parameter to `default_currency` in which case users default currency is used.
    """
    totalsConvertCurrency: String
  ): GetPipeline

  """
  Returns all stage-to-stage conversion and pipeline-to-close rates for the given time period.
  
  Equivalent to GET /pipelines/{id}/conversion_statistics
  """
  getPipelineConversionStatistics(
    """The end of the period. Date in format of YYYY-MM-DD."""
    endDate: String!

    """The ID of the pipeline"""
    id: Int!

    """The start of the period. Date in format of YYYY-MM-DD."""
    startDate: String!

    """
    The ID of the user who's pipeline metrics statistics to fetch. If omitted, the authorized user will be used.
    """
    userId: Int
  ): GetPipelineConversionStatistics

  """
  Returns statistics for deals movements for the given time period.
  
  Equivalent to GET /pipelines/{id}/movement_statistics
  """
  getPipelineMovementStatistics(
    """The end of the period. Date in format of YYYY-MM-DD."""
    endDate: String!

    """The ID of the pipeline"""
    id: Int!

    """The start of the period. Date in format of YYYY-MM-DD."""
    startDate: String!

    """
    The ID of the user who's pipeline statistics to fetch. If omitted, the authorized user will be used.
    """
    userId: Int
  ): GetPipelineMovementStatistics

  """
  Returns data about all pipelines.
  
  Equivalent to GET /pipelines
  """
  getPipelines: GetPipelines

  """
  Returns data about deals that have a product attached to it.
  
  Equivalent to GET /products/{id}/deals
  """
  getProductDeals(
    """The ID of the product"""
    id: Int!

    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int

    """
    Only fetch deals with a specific status. If omitted, all not deleted deals are returned. If set to deleted, deals that have been deleted up to 30 days ago will be included.
    """
    status: Status3
  ): GetAssociatedDeals

  """
  Returns data about a specific product field.
  
  Equivalent to GET /productFields/{id}
  """
  getProductField(
    """The ID of the product field"""
    id: Int!
  ): GetProductField

  """
  Returns data about all product fields.
  
  Equivalent to GET /productFields
  """
  getProductFields(
    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): GetProductFields

  """
  Lists the followers of a product.
  
  Equivalent to GET /products/{id}/followers
  """
  getProductFollowersResponseSuccess(
    """The ID of the product"""
    id: Int!

    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): GetProductFollowersResponseSuccess

  """
  Lists users permitted to access a product.
  
  Equivalent to GET /products/{id}/permittedUsers
  """
  getProductUsers(
    """The ID of the product"""
    id: Int!
  ): UserIds

  """
  Returns data about all products.
  
  Equivalent to GET /products
  """
  getProducts(
    """The ID of the filter to use"""
    filterId: Int

    """
    If supplied, only products whose name starts with the specified letter will be returned (case insensitive)
    """
    firstChar: String

    """
    If supplied, the response will return the total numbers of products in the `additional_data.summary.total_count` property
    """
    getSummary: Boolean

    """
    An array of integers with the IDs of the products that should be returned in the response
    """
    ids: [Int]

    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int

    """If supplied, only products owned by the given user will be returned"""
    userId: Int
  ): GetProducts

  """
  Returns data about all recent changes occurred after the given timestamp.
  
  Equivalent to GET /recents
  """
  getRecents(
    """Multiple selection of item types to include in the query (optional)"""
    items: Items8

    """Items shown per page"""
    limit: Int

    """The timestamp in UTC. Format: YYYY-MM-DD HH:MM:SS"""
    sinceTimestamp: String!

    """Pagination start"""
    start: Int
  ): GetRecents

  """
  Returns the details of a specific role.
  
  Equivalent to GET /roles/{id}
  """
  getRole(
    """The ID of the role"""
    id: Int!
  ): GetRole

  """
  Returns the visibility settings of a specific role.
  
  Equivalent to GET /roles/{id}/settings
  """
  getRoleSettings(
    """The ID of the role"""
    id: Int!
  ): GetRoleSettings

  """
  Returns all the roles within the company.
  
  Equivalent to GET /roles
  """
  getRoles(
    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): GetRoles

  """
  Returns data about a specific stage.
  
  Equivalent to GET /stages/{id}
  """
  getStage(
    """
    If `everyone=1` is provided, deals summary will return deals owned by every user
    """
    everyone: Everyone

    """The ID of the stage"""
    id: Int!
  ): GetStage

  """
  Lists deals in a specific pipeline across all its stages.
  
  Equivalent to GET /pipelines/{id}/deals
  """
  getStageDeals(
    """
    If supplied, `filter_id` and `user_id` will not be considered – instead, deals owned by everyone will be returned
    """
    everyone: Everyone

    """If supplied, only deals matching the given filter will be returned"""
    filterId: Int

    """
    Whether to include a summary of the pipeline in the `additional_data` or not
    """
    getSummary: GetSummary

    """The ID of the pipeline"""
    id: Int!

    """Items shown per page"""
    limit: Int

    """If supplied, only deals within the given stage will be returned"""
    stageId: Int

    """Pagination start"""
    start: Int

    """
    The 3-letter currency code of any of the supported currencies. When supplied, `per_stages_converted` is returned inside `deals_summary` inside `additional_data` which contains the currency-converted total amounts in the given currency per each stage. You may also set this parameter to `default_currency` in which case users default currency is used. Only works when `get_summary` parameter flag is enabled.
    """
    totalsConvertCurrency: String

    """
    If supplied, `filter_id` will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
    """
    userId: Int
  ): GetStageDeals

  """
  Returns data about all stages.
  
  Equivalent to GET /stages
  """
  getStages(
    """
    The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
    """
    pipelineId: Int
  ): GetStages

  """
  Returns a list of all user IDs within a team.
  
  Equivalent to GET /legacyTeams/{id}/users
  """
  getTeamUsers(
    """The ID of the team"""
    id: Int!
  ): UserIds

  """
  Returns all call logs assigned to a particular user.
  
  Equivalent to GET /callLogs
  """
  getUserCallLogs(
    """
    For pagination, the limit of entries to be returned. The upper limit is 50.
    """
    limit: Int

    """Pagination start"""
    start: Int
  ): GetUserCallLogs

  """
  Lists the followers of a specific user.
  
  Equivalent to GET /users/{id}/followers
  """
  getUserFollowers(
    """The ID of the user"""
    id: Int!
  ): UserIds

  """
  Lists aggregated permissions over all assigned permission sets for a user.
  
  Equivalent to GET /users/{id}/permissions
  """
  getUserPermissions(
    """The ID of the user"""
    id: Int!
  ): GetUserPermissions

  """
  Returns all users assigned to a role.
  
  Equivalent to GET /roles/{id}/assignments
  """
  getUserRoleAssignments(
    """The ID of the role"""
    id: Int!

    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): GetUserRoleAssignments

  """
  Lists the settings of user's assigned role.
  
  Equivalent to GET /users/{id}/roleSettings
  """
  getUserRoleSettings(
    """The ID of the user"""
    id: Int!
  ): GetRoleSettings

  """
  Lists the settings of an authorized user. Example response contains a shortened list of settings.
  
  Equivalent to GET /userSettings
  """
  getUserSettings: GetUserSettings

  """
  Returns data about all teams which have the specified user as a member.
  
  Equivalent to GET /legacyTeams/user/{id}
  """
  getUserTeams(
    """The ID of the user"""
    id: Int!

    """The field name to sort returned teams by"""
    orderBy: OrderBy

    """When enabled, the teams will not include IDs of member users"""
    skipUsers: SkipUsers
  ): Teams

  """
  Returns data about all the Webhooks of a company.
  
  Equivalent to GET /webhooks
  """
  getWebhooks: GetWebhooks

  """
  Returns data about a specific product.
  
  Equivalent to GET /products/{id}
  """
  getproduct(
    """The ID of the product"""
    id: Int!
  ): Getproduct

  """
  Lists the users permitted to access a deal.
  
  Equivalent to GET /deals/{id}/permittedUsers
  """
  listPermittedUsers(
    """The ID of the deal"""
    id: Int!
  ): ListPermittedUsers

  """
  Lists all persons associated with a deal, regardless of whether the person is the primary contact of the deal, or added as a participant.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also return the `data.marketing_status` field.
  
  Equivalent to GET /deals/{id}/persons
  """
  listPersons(
    """The ID of the deal"""
    id: Int!

    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): ListPersons

  """
  Lists products attached to a deal.
  
  Equivalent to GET /deals/{id}/products
  """
  listProducts(
    """The ID of the deal"""
    id: Int!

    """
    Whether to fetch product data along with each attached product (1) or not (0, default)
    """
    includeProductData: IncludeProductData

    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): ListProducts

  """
  Returns data about a specific mail message.
  
  Equivalent to GET /mailbox/mailMessages/{id}
  """
  mailMessage(
    """The ID of the mail message to fetch"""
    id: Int!

    """
    Whether to include the full message body or not. `0` = Don't include, `1` = Include
    """
    includeBody: IncludeBody
  ): MailMessage

  """
  Returns the details of a comment.
  
  Equivalent to GET /notes/{id}/comments/{commentId}
  """
  oneComment(
    """The ID of the comment"""
    commentId: ID!

    """The ID of the note"""
    id: Int!
  ): OneComment

  """
  Returns details of a specific lead. If a lead contains custom fields, the fields' values will be included in the response in the same format as with the `Deals` endpoints. If a custom field's value hasn't been set for the lead, it won't appear in the response. Please note that leads do not have a separate set of custom fields, instead they inherit the custom fields’ structure from deals.
  
  Equivalent to GET /leads/{id}
  """
  oneLead(
    """The ID of the lead"""
    id: ID!
  ): OneLead

  """
  Returns details about a specific note.
  
  Equivalent to GET /notes/{id}
  """
  oneNote(
    """The ID of the note"""
    id: Int!
  ): OneNote

  """
  Lists the followers of an organization.
  
  Equivalent to GET /organizations/{id}/followers
  """
  organizationFollowers(
    """The ID of the organization"""
    id: Int!
  ): OrganizationFollowers

  """
  List users permitted to access an organization.
  
  Equivalent to GET /organizations/{id}/permittedUsers
  """
  organizationPermittedUsers(
    """The ID of the organization"""
    id: Int!
  ): OrganizationPermittedUsers

  """
  Returns all payments of an installment or recurring subscription.
  
  Equivalent to GET /subscriptions/{id}/payments
  """
  payment(
    """The ID of the subscription"""
    id: Int!
  ): Payment

  """
  Lists files associated with a product.
  
  Equivalent to GET /products/{id}/files
  """
  productFiles(
    """The ID of the product"""
    id: Int!

    """Items shown per page"""
    limit: Int

    """
    The field name and sorting mode (`field_name_1 ASC` or `field_name_1 DESC`). Supported fields: `update_time`, `id`
    """
    sort: String

    """Pagination start"""
    start: Int
  ): ProductFiles

  """
  Searches all deals by title, notes and/or custom fields. This endpoint is a wrapper of <a href="https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem">/v1/itemSearch</a> with a narrower OAuth scope. Found deals can be filtered by the person ID and the organization ID.
  
  Equivalent to GET /deals/search
  """
  searchDeals(
    """
    When enabled, only full exact matches against the given term are returned. It is <b>not</b> case sensitive.
    """
    exactMatch: ExactMatch

    """
    A comma-separated string array. The fields to perform the search from. Defaults to all of them.
    """
    fields: Fields2

    """
    Supports including optional fields in the results which are not provided by default
    """
    includeFields: IncludeFields

    """Items shown per page"""
    limit: Int

    """
    Will filter deals by the provided organization ID. The upper limit of found deals associated with the organization is 2000.
    """
    organizationId: Int

    """
    Will filter deals by the provided person ID. The upper limit of found deals associated with the person is 2000.
    """
    personId: Int

    """
    Pagination start. Note that the pagination is based on main results and does not include related items when using `search_for_related_items` parameter.
    """
    start: Int

    """
    Will filter deals by the provided specific status. open = Open, won = Won, lost = Lost. The upper limit of found deals associated with the status is 2000.
    """
    status: Status4

    """
    The search term to look for. Minimum 2 characters (or 1 if using `exact_match`). Please note that the search term has to be URL encoded.
    """
    term: String!
  ): SearchDeals

  """
  Performs a search from your choice of item types and fields.
  
  Equivalent to GET /itemSearch
  """
  searchItem(
    """
    When enabled, only full exact matches against the given term are returned. It is <b>not</b> case sensitive.
    """
    exactMatch: ExactMatch

    """
    A comma-separated string array. The fields to perform the search from. Defaults to all. Relevant for each item type are:<br> <table> <tr><th><b>Item type</b></th><th><b>Field</b></th></tr> <tr><td>Deal</td><td>`custom_fields`, `notes`, `title`</td></tr> <tr><td>Person</td><td>`custom_fields`, `email`, `name`, `notes`, `phone`</td></tr> <tr><td>Organization</td><td>`address`, `custom_fields`, `name`, `notes`</td></tr> <tr><td>Product</td><td>`code`, `custom_fields`, `name`</td></tr> <tr><td>Lead</td><td>`custom_fields`, `notes`, `email`, `organization_name`, `person_name`, `phone`, `title`</td></tr> <tr><td>File</td><td>`name`</td></tr> <tr><td>Mail attachment</td><td>`name`</td></tr> <tr><td>Project</td><td> `custom_fields`, `notes`, `title`, `description` </td></tr> </table> <br> When searching for leads, the email, organization_name, person_name, and phone fields will return results only for leads not linked to contacts. For searching leads by person or organization values, please use `search_for_related_items`.
    """
    fields: Fields3

    """
    A comma-separated string array. Supports including optional fields in the results which are not provided by default.
    """
    includeFields: IncludeFields2

    """
    A comma-separated string array. The type of items to perform the search from. Defaults to all.
    """
    itemTypes: ItemTypes

    """Items shown per page"""
    limit: Int

    """
    When enabled, the response will include up to 100 newest related leads and 100 newest related deals for each found person and organization and up to 100 newest related persons for each found organization.
    """
    searchForRelatedItems: SearchForRelatedItems

    """
    Pagination start. Note that the pagination is based on main results and does not include related items when using `search_for_related_items` parameter.
    """
    start: Int

    """
    The search term to look for. Minimum 2 characters (or 1 if using `exact_match`). Please note that the search term has to be URL encoded.
    """
    term: String!
  ): SearchItem

  """
  Performs a search from the values of a specific field. Results can either be the distinct values of the field (useful for searching autocomplete field values), or the IDs of actual items (deals, leads, persons, organizations or products).
  
  Equivalent to GET /itemSearch/field
  """
  searchItemByField(
    """
    When enabled, only full exact matches against the given term are returned. The search <b>is</b> case sensitive.
    """
    exactMatch: ExactMatch2

    """
    The key of the field to search from. The field key can be obtained by fetching the list of the fields using any of the fields' API GET methods (dealFields, personFields, etc.).
    """
    fieldKey: String!

    """The type of the field to perform the search from"""
    fieldType: FieldType3!

    """Items shown per page"""
    limit: Int

    """
    Whether to return the IDs of the matching items or not. When not set or set to `0` or `false`, only distinct values of the searched field are returned. When set to `1` or `true`, the ID of each found item is returned.
    """
    returnItemIds: ReturnItemIds

    """Pagination start"""
    start: Int

    """
    The search term to look for. Minimum 2 characters (or 1 if using `exact_match`). Please note that the search term has to be URL encoded.
    """
    term: String!
  ): SearchItemByField

  """
  Searches all leads by title, notes and/or custom fields. This endpoint is a wrapper of <a href="https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem">/v1/itemSearch</a> with a narrower OAuth scope. Found leads can be filtered by the person ID and the organization ID.
  
  Equivalent to GET /leads/search
  """
  searchLeads(
    """
    When enabled, only full exact matches against the given term are returned. It is <b>not</b> case sensitive.
    """
    exactMatch: ExactMatch

    """
    A comma-separated string array. The fields to perform the search from. Defaults to all of them.
    """
    fields: Fields2

    """
    Supports including optional fields in the results which are not provided by default
    """
    includeFields: IncludeFields3

    """Items shown per page"""
    limit: Int

    """
    Will filter leads by the provided organization ID. The upper limit of found leads associated with the organization is 2000.
    """
    organizationId: Int

    """
    Will filter leads by the provided person ID. The upper limit of found leads associated with the person is 2000.
    """
    personId: Int

    """
    Pagination start. Note that the pagination is based on main results and does not include related items when using `search_for_related_items` parameter.
    """
    start: Int

    """
    The search term to look for. Minimum 2 characters (or 1 if using `exact_match`). Please note that the search term has to be URL encoded.
    """
    term: String!
  ): SearchLeads

  """
  Searches all organizations by name, address, notes and/or custom fields. This endpoint is a wrapper of <a href="https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem">/v1/itemSearch</a> with a narrower OAuth scope.
  
  Equivalent to GET /organizations/search
  """
  searchOrganization(
    """
    When enabled, only full exact matches against the given term are returned. It is <b>not</b> case sensitive.
    """
    exactMatch: ExactMatch

    """
    A comma-separated string array. The fields to perform the search from. Defaults to all of them.
    """
    fields: Fields4

    """Items shown per page"""
    limit: Int

    """
    Pagination start. Note that the pagination is based on main results and does not include related items when using `search_for_related_items` parameter.
    """
    start: Int

    """
    The search term to look for. Minimum 2 characters (or 1 if using `exact_match`). Please note that the search term has to be URL encoded.
    """
    term: String!
  ): SearchOrganization

  """
  Searches all persons by name, email, phone, notes and/or custom fields. This endpoint is a wrapper of <a href="https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem">/v1/itemSearch</a> with a narrower OAuth scope. Found persons can be filtered by organization ID.
  
  Equivalent to GET /persons/search
  """
  searchPersons(
    """
    When enabled, only full exact matches against the given term are returned. It is <b>not</b> case sensitive.
    """
    exactMatch: ExactMatch

    """
    A comma-separated string array. The fields to perform the search from. Defaults to all of them.
    """
    fields: Fields5

    """
    Supports including optional fields in the results which are not provided by default
    """
    includeFields: IncludeFields4

    """Items shown per page"""
    limit: Int

    """
    Will filter persons by the provided organization ID. The upper limit of found persons associated with the organization is 2000.
    """
    organizationId: Int

    """
    Pagination start. Note that the pagination is based on main results and does not include related items when using `search_for_related_items` parameter.
    """
    start: Int

    """
    The search term to look for. Minimum 2 characters (or 1 if using `exact_match`). Please note that the search term has to be URL encoded.
    """
    term: String!
  ): SearchPersons

  """
  Searches all products by name, code and/or custom fields. This endpoint is a wrapper of <a href="https://developers.pipedrive.com/docs/api/v1/ItemSearch#searchItem">/v1/itemSearch</a> with a narrower OAuth scope.
  
  Equivalent to GET /products/search
  """
  searchProducts(
    """
    When enabled, only full exact matches against the given term are returned. It is <b>not</b> case sensitive.
    """
    exactMatch: ExactMatch

    """
    A comma-separated string array. The fields to perform the search from. Defaults to all of them.
    """
    fields: Fields6

    """
    Supports including optional fields in the results which are not provided by default
    """
    includeFields: IncludeFields5

    """Items shown per page"""
    limit: Int

    """
    Pagination start. Note that the pagination is based on main results and does not include related items when using `search_for_related_items` parameter.
    """
    start: Int

    """
    The search term to look for. Minimum 2 characters (or 1 if using `exact_match`). Please note that the search term has to be URL encoded.
    """
    term: String!
  ): SearchProducts

  """
  Returns data about a specific permission set.
  
  Equivalent to GET /permissionSets/{id}
  """
  singlePermissionSet(
    """The ID of the permission set"""
    id: String!
  ): SinglePermissionSet

  """
  Returns the add-ons for a single company.
  
  Equivalent to GET /billing/subscriptions/addons
  """
  subscriptionAddons: SubscriptionAddons

  """
  Returns details of an installment or a recurring subscription.
  
  Equivalent to GET /subscriptions/{id}
  """
  subscriptionsId(
    """The ID of the subscription"""
    id: Int!
  ): SubscriptionsId

  """
  Returns data about a specific team.
  
  Equivalent to GET /legacyTeams/{id}
  """
  team(
    """The ID of the team"""
    id: Int!

    """When enabled, the teams will not include IDs of member users"""
    skipUsers: SkipUsers
  ): Team

  """
  Returns data about teams within the company.
  
  Equivalent to GET /legacyTeams
  """
  teams(
    """The field name to sort returned teams by"""
    orderBy: OrderBy

    """When enabled, the teams will not include IDs of member users"""
    skipUsers: SkipUsers
  ): Teams

  """
  Returns data about a specific user within the company.
  
  Equivalent to GET /users/{id}
  """
  user4(
    """The ID of the user"""
    id: Int!
  ): User4

  """
  Returns the list of assignments for a permission set.
  
  Equivalent to GET /permissionSets/{id}/assignments
  """
  userAssignmentsToPermissionSet(
    """The ID of the permission set"""
    id: String!

    """Items shown per page"""
    limit: Int

    """Pagination start"""
    start: Int
  ): UserAssignmentsToPermissionSet

  """
  Returns data about all connections for the authorized user.
  
  Equivalent to GET /userConnections
  """
  userConnections: UserConnections

  """
  Lists the users permitted to access a lead.
  
  Equivalent to GET /leads/{id}/permittedUsers
  """
  userIds(
    """The ID of the lead"""
    id: String!
  ): UserIds

  """
  Returns data about all users within the company.
  
  Equivalent to GET /users
  """
  users2: Users2
}

type CallLog {
  data: Data9

  """If the response is successful or not"""
  success: Boolean
}

type Data9 {
  """
  If specified, this activity will be converted into a call log, with the information provided. When this field is used, you don't need to specify `deal_id`, `person_id` or `org_id`, as they will be ignored in favor of the values already available in the activity. The `activity_id` must refer to a `call` type activity.
  """
  activityId: Int

  """The company ID of the owner of the call log"""
  companyId: Int

  """The ID of the deal this call is associated with"""
  dealId: Int

  """The duration of the call in seconds"""
  duration: String

  """
  The date and time of the end of the call in UTC. Format: YYYY-MM-DD HH:MM:SS.
  """
  endTime: String!

  """The number that made the call"""
  fromPhoneNumber: String

  """
  If the call log has an audio recording attached, the value should be true
  """
  hasRecording: Boolean

  """The call log ID, generated when the call log was created"""
  id: String

  """The note for the call log in HTML format"""
  note: String

  """The ID of the organization this call is associated with"""
  orgId: Int

  """Describes the outcome of the call"""
  outcome: Outcome!

  """The ID of the person this call is associated with"""
  personId: Int

  """
  The date and time of the start of the call in UTC. Format: YYYY-MM-DD HH:MM:SS.
  """
  startTime: String!

  """The name of the activity this call is attached to"""
  subject: String

  """The number called"""
  toPhoneNumber: String!

  """
  The ID of the owner of the call log. Please note that a user without account settings access cannot create call logs for other users.
  """
  userId: Int
}

enum Outcome {
  CONNECTED
  NO_ANSWER
  LEFT_MESSAGE
  LEFT_VOICEMAIL
  WRONG_NUMBER
  BUSY
}

type Field {
  data: Data40

  """If the response is successful or not"""
  success: Boolean
}

type Data40 {
  """The active flag of the field"""
  activeFlag: Boolean

  """The creation time of the field"""
  addTime: String

  """Not used"""
  addVisibleFlag: Boolean

  """Whether or not the field of an item can be edited in bulk"""
  bulkEditAllowed: Boolean

  """Not used"""
  detailsVisibleFlag: Boolean

  """The edit flag of the field"""
  editFlag: Boolean
  fieldType: String

  """Whether or not items can be filtered by this field"""
  filteringAllowed: Boolean

  """The ID of the field. Value is `null` in case of subfields."""
  id: Int

  """Not used"""
  importantFlag: Boolean

  """Not used"""
  indexVisibleFlag: Boolean

  """
  Whether or not the field is a subfield of another field. Only present if field is subfield.
  """
  isSubfield: Boolean

  """
  The key of the field. For custom fields this is generated upon creation.
  """
  key: String

  """
  The ID of the user who created or most recently updated the field, only applicable for custom fields
  """
  lastUpdatedByUserId: Int

  """Whether or not the field is mandatory"""
  mandatoryFlag: Boolean

  """The name of the field"""
  name: String

  """
  The options of the field. When there are no options, `null` is returned.
  """
  options: [JSON]

  """
  The deleted options of the field. Only present when there is at least 1 deleted option.
  """
  optionsDeleted: [JSON]

  """The order number of the field"""
  orderNr: Int

  """Whether or not items can be searched by this field"""
  searchableFlag: Boolean

  """Whether or not items can be sorted by this field"""
  sortableFlag: Boolean

  """The subfields of the field. Only present when the field has subfields."""
  subfields: [JSON]

  """The update time of the field"""
  updateTime: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Fields {
  """The additional data of the list"""
  additionalData: AdditionalData3
  data: [Data4ListItem]

  """If the response is successful or not"""
  success: Boolean
}

"""The additional data of the list"""
type AdditionalData3 {
  """Items shown per page"""
  limit: Int

  """If there are more list items in the collection than displayed or not"""
  moreItemsInCollection: Boolean

  """Pagination start"""
  start: Int
}

type Data4ListItem {
  """The active flag of the field"""
  activeFlag: Boolean

  """The creation time of the field"""
  addTime: String

  """Not used"""
  addVisibleFlag: Boolean

  """Whether or not the field of an item can be edited in bulk"""
  bulkEditAllowed: Boolean

  """Not used"""
  detailsVisibleFlag: Boolean

  """The edit flag of the field"""
  editFlag: Boolean
  fieldType: String

  """Whether or not items can be filtered by this field"""
  filteringAllowed: Boolean

  """The ID of the field. Value is `null` in case of subfields."""
  id: Int

  """Not used"""
  importantFlag: Boolean

  """Not used"""
  indexVisibleFlag: Boolean

  """
  Whether or not the field is a subfield of another field. Only present if field is subfield.
  """
  isSubfield: Boolean

  """
  The key of the field. For custom fields this is generated upon creation.
  """
  key: String

  """
  The ID of the user who created or most recently updated the field, only applicable for custom fields
  """
  lastUpdatedByUserId: Int

  """Whether or not the field is mandatory"""
  mandatoryFlag: Boolean

  """The name of the field"""
  name: String

  """
  The options of the field. When there are no options, `null` is returned.
  """
  options: [JSON]

  """
  The deleted options of the field. Only present when there is at least 1 deleted option.
  """
  optionsDeleted: [JSON]

  """The order number of the field"""
  orderNr: Int

  """Whether or not items can be searched by this field"""
  searchableFlag: Boolean

  """Whether or not items can be sorted by this field"""
  sortableFlag: Boolean

  """The subfields of the field. Only present when the field has subfields."""
  subfields: [JSON]

  """The update time of the field"""
  updateTime: String
}

type SubscriptionsId {
  data: Data132

  """If the response is successful or not"""
  success: Boolean
}

type Data132 {
  """The creation time of the subscription"""
  addTime: String

  """The interval between payments"""
  cadenceType: String

  """The currency of the subscription"""
  currency: String

  """The amount of each payment"""
  cycleAmount: Int

  """Shows how many payments a recurring subscription has"""
  cyclesCount: Int

  """The ID of the deal this subscription is associated with"""
  dealId: Int

  """The description of the recurring subscription"""
  description: String

  """The end date of the subscription"""
  endDate: String

  """The final status of the subscription"""
  finalStatus: String

  """The ID of the subscription"""
  id: Int

  """
  Indicates that the recurring subscription will last until it is manually canceled or deleted
  """
  infinite: Boolean

  """The subscription status"""
  isActive: Boolean

  """The total value of all payments"""
  lifetimeValue: Float

  """The start date of the recurring subscription"""
  startDate: String

  """The update time of the subscription"""
  updateTime: String

  """The ID of the user who created the subscription"""
  userId: Int
}

type Users2 {
  data: [Data134ListItem]

  """If the response is successful or not"""
  success: Boolean
}

type Data134ListItem {
  access: [AccessListItem]

  """Boolean that indicates whether the user is activated"""
  activated: Boolean

  """Boolean that indicates whether the user is activated"""
  activeFlag: Boolean

  """The creation date and time of the user. Format: YYYY-MM-DD HH:MM:SS"""
  created: String

  """The user default currency"""
  defaultCurrency: String

  """The user email"""
  email: String

  """Boolean that indicates whether the user has created a company"""
  hasCreatedCompany: Boolean

  """The user icon URL"""
  iconUrl: String

  """The user ID"""
  id: Int

  """
  Boolean that indicates if the requested user is the same which is logged in (in this case, always true)
  """
  isYou: Boolean

  """The user language ID"""
  lang: Int

  """The last login date and time of the user. Format: YYYY-MM-DD HH:MM:SS"""
  lastLogin: String

  """The user locale"""
  locale: String

  """
  The last modification date and time of the user. Format: YYYY-MM-DD HH:MM:SS
  """
  modified: String

  """The user name"""
  name: String

  """The user phone"""
  phone: String

  """The ID of the user role"""
  roleId: Int

  """The user timezone name"""
  timezoneName: String

  """The user timezone offset"""
  timezoneOffset: String
}

type AccessListItem {
  admin: Boolean
  app: App2
  permissionSetId: String
}

enum App2 {
  SALES
  PROJECTS
  CAMPAIGNS
  GLOBAL
  ACCOUNT_SETTINGS
}

enum SearchByEmail {
  _0
  _1
}

type GetActivities {
  additionalData: AdditionalData
  data: [Data2ListItem]
  relatedObjects: RelatedObjects
  success: Boolean
}

type AdditionalData {
  """Pagination details of the list"""
  pagination: Pagination
}

"""Pagination details of the list"""
type Pagination {
  """Items shown per page"""
  limit: Int

  """Whether there are more list items in the collection than displayed"""
  moreItemsInCollection: Boolean

  """Next pagination start"""
  nextStart: Int

  """Pagination start"""
  start: Int
}

type Data2ListItem {
  """Whether the activity is active or not"""
  activeFlag: Boolean

  """
  The creation date and time of the activity in UTC. Format: YYYY-MM-DD HH:MM:SS.
  """
  addTime: String

  """
  The ID of the user to whom the activity is assigned to. Equal to `user_id`.
  """
  assignedToUserId: Int

  """
  The attendees of the activity. This can be either your existing Pipedrive contacts or an external email address.
  """
  attendees: [JSON]

  """
  Marks if the activity is set as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.
  """
  busyFlag: BusyFlag

  """
  For activities that sync to an external calendar, this setting indicates if the activity syncs with context (what are the deals, persons, organizations this activity is related to)
  """
  calendarSyncIncludeContext: String

  """The user's company ID"""
  companyId: Int

  """The ID of Marketplace app, which is connected to this activity"""
  conferenceMeetingClient: String

  """
  The meeting ID of the meeting provider (Zoom, MS Teams etc.) that is associated with this activity
  """
  conferenceMeetingId: String

  """The link to join the meeting which is associated with this activity"""
  conferenceMeetingUrl: String

  """The ID of the user who created the activity"""
  createdByUserId: Int

  """The BCC email address of the deal"""
  dealDropboxBcc: String

  """The ID of the deal this activity is associated with"""
  dealId: Int

  """The name of the deal this activity is associated with"""
  dealTitle: String

  """Whether the activity is done or not"""
  done: Boolean

  """The due date of the activity. Format: YYYY-MM-DD"""
  dueDate: String

  """The due time of the activity in UTC. Format: HH:MM"""
  dueTime: String

  """The duration of the activity. Format: HH:MM"""
  duration: String

  """
  The file that is attached to this activity. For example, this can be a reference to an audio note file generated with Pipedrive mobile app.
  """
  file: JSON

  """
  For the activity which syncs to Google calendar, this is the Google event ID. NB! This field is related to old Google calendar sync and will be deprecated soon.
  """
  gcalEventId: String

  """
  The Google calendar API etag (version) that is used for syncing this activity. NB! This field is related to old Google calendar sync and will be deprecated soon.
  """
  googleCalendarEtag: String

  """
  The Google calendar ID that this activity syncs to. NB! This field is related to old Google calendar sync and will be deprecated soon.
  """
  googleCalendarId: String

  """The activity ID, generated when the activity was created"""
  id: Int

  """
  The date and time of latest notifications sent about this activity to the participants or the attendees of this activity
  """
  lastNotificationTime: String

  """
  The ID of the user who triggered the sending of the latest notifications about this activity to the participants or the attendees of this activity
  """
  lastNotificationUserId: Int

  """The ID of the lead this activity is associated with"""
  leadId: String

  """
  The address of the activity. Pipedrive will automatically check if the location matches a geo-location on Google maps.
  """
  location: String

  """Subfield of location field. Indicates state/county."""
  locationAdminAreaLevel1: String

  """Subfield of location field. Indicates region."""
  locationAdminAreaLevel2: String

  """Subfield of location field. Indicates country."""
  locationCountry: String

  """Subfield of location field. Indicates full/combined address."""
  locationFormattedAddress: String

  """Subfield of location field. Indicates city/town/village/locality."""
  locationLocality: String

  """Subfield of location field. Indicates ZIP/postal code."""
  locationPostalCode: String

  """Subfield of location field. Indicates street name."""
  locationRoute: String

  """Subfield of location field. Indicates house number."""
  locationStreetNumber: String

  """Subfield of location field. Indicates district/sublocality."""
  locationSublocality: String

  """Subfield of location field. Indicates apartment/suite number."""
  locationSubpremise: String

  """
  The date and time this activity was marked as done. Format: YYYY-MM-DD HH:MM:SS.
  """
  markedAsDoneTime: String

  """The note of the activity (HTML format)"""
  note: String

  """The ID of the language the notifications are sent in"""
  notificationLanguageId: Int

  """The ID of the organization this activity is associated with"""
  orgId: Int

  """The name of the organization this activity is associated with"""
  orgName: String

  """The name of the user this activity is owned by"""
  ownerName: String

  """
  List of multiple persons (participants) this activity is associated with
  """
  participants: [JSON]

  """The BCC email address of the person"""
  personDropboxBcc: String

  """The ID of the person this activity is associated with"""
  personId: Int

  """The name of the person this activity is associated with"""
  personName: String

  """
  Additional details about the activity that is synced to your external calendar. Unlike the note added to the activity, the description is publicly visible to any guests added to the activity.
  """
  publicDescription: String

  """
  The ID of parent activity for a recurrent activity if the current activity is an exception to recurrence rules
  """
  recMasterActivityId: Int

  """
  The rule for the recurrence of the activity. Is important for activities synced into Pipedrive from an external calendar. Example: "RRULE:FREQ=WEEKLY;BYDAY=WE"
  """
  recRule: String

  """
  Additional rules for the recurrence of the activity, extend the `rec_rule`. Is important for activities synced into Pipedrive from an external calendar.
  """
  recRuleExtension: String

  """Together with the `reference_type`, gives the ID of the other object"""
  referenceId: Int

  """
  If the activity references some other object, it is indicated here. For example, value `Salesphone` refers to activities created with Caller.
  """
  referenceType: String

  """
  The list of recurring activity instances. It is in a structure as follows: `[{due_date: "2020-06-24", due_time: "10:00:00"}]`
  """
  series: [JSON]

  """The timezone the activity was created in an external calendar"""
  sourceTimezone: String

  """The subject of the activity"""
  subject: String

  """
  The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes.
  """
  type: String

  """
  The last update date and time of the activity. Format: YYYY-MM-DD HH:MM:SS.
  """
  updateTime: String

  """The ID of the user who was the last to update this activity"""
  updateUserId: Int

  """The ID of the user whom the activity is assigned to"""
  userId: Int
}

enum BusyFlag {
  TRUE
  FALSE
}

type RelatedObjects {
  deal: Deal
  organization: Organization
  person: Person
  user: User
}

type Deal {
  """The ID of the deal which is associated with the item"""
  dEALID: DEALID
}

"""The ID of the deal which is associated with the item"""
type DEALID {
  """The currency of the deal value"""
  currency: String

  """The ID of the deal associated with the item"""
  id: Int

  """The ID of the pipeline the deal is in"""
  pipelineId: Int

  """The ID of the stage the deal is currently at"""
  stageId: Int

  """The status of the deal associated with the item"""
  status: String

  """The title of the deal associated with the item"""
  title: String

  """The value of the deal that is associated with the item"""
  value: Float
}

type Organization {
  """The ID of the organization associated with the item"""
  oRGANIZATIONID: ORGANIZATIONID
}

"""The ID of the organization associated with the item"""
type ORGANIZATIONID {
  """The address of the organization"""
  address: String

  """The BCC email of the organization associated with the item"""
  ccEmail: String

  """The ID of the organization associated with the item"""
  id: Int

  """The name of the organization associated with the item"""
  name: String

  """
  The ID of the owner of the organization that is associated with the item
  """
  ownerId: Int

  """
  The number of people connected with the organization that is associated with the item
  """
  peopleCount: Int
}

type Person {
  """The ID of the person associated with the item"""
  pERSONID: PERSONID
}

"""The ID of the person associated with the item"""
type PERSONID {
  """The emails of the person associated with the item"""
  email: [EmailListItem]

  """The ID of the person associated with the item"""
  id: Int

  """The name of the person associated with the item"""
  name: String

  """The ID of the owner of the person that is associated with the item"""
  ownerId: Int

  """The phone numbers of the person associated with the item"""
  phone: [PhoneListItem]
}

type EmailListItem {
  """The type of the email"""
  label: String

  """Whether this is the primary email or not"""
  primary: Boolean

  """The email of the associated person"""
  value: String
}

type PhoneListItem {
  """The type of the phone number"""
  label: String

  """Whether this is the primary phone number or not"""
  primary: Boolean

  """The phone number of the person associated with the item"""
  value: String
}

type User {
  uSERID: USERID
}

type USERID {
  """Whether the user is active or not"""
  activeFlag: Boolean

  """The email of the user"""
  email: String

  """Whether the user has picture or not. 0 = No picture, 1 = Has picture."""
  hasPic: Int

  """The ID of the user"""
  id: Int

  """The name of the user"""
  name: String

  """The user picture hash"""
  picHash: String
}

enum Done {
  _0
  _1
}

type GetActivity {
  data: ActivityResponseObject
  relatedObjects: RelatedObjects
  success: Boolean
}

type ActivityResponseObject {
  """Whether the activity is active or not"""
  activeFlag: Boolean

  """
  The creation date and time of the activity in UTC. Format: YYYY-MM-DD HH:MM:SS.
  """
  addTime: String

  """
  The ID of the user to whom the activity is assigned to. Equal to `user_id`.
  """
  assignedToUserId: Int

  """
  The attendees of the activity. This can be either your existing Pipedrive contacts or an external email address.
  """
  attendees: [JSON]

  """
  Marks if the activity is set as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.
  """
  busyFlag: BusyFlag

  """
  For activities that sync to an external calendar, this setting indicates if the activity syncs with context (what are the deals, persons, organizations this activity is related to)
  """
  calendarSyncIncludeContext: String

  """The user's company ID"""
  companyId: Int

  """The ID of Marketplace app, which is connected to this activity"""
  conferenceMeetingClient: String

  """
  The meeting ID of the meeting provider (Zoom, MS Teams etc.) that is associated with this activity
  """
  conferenceMeetingId: String

  """The link to join the meeting which is associated with this activity"""
  conferenceMeetingUrl: String

  """The ID of the user who created the activity"""
  createdByUserId: Int

  """The BCC email address of the deal"""
  dealDropboxBcc: String

  """The ID of the deal this activity is associated with"""
  dealId: Int

  """The name of the deal this activity is associated with"""
  dealTitle: String

  """Whether the activity is done or not"""
  done: Boolean

  """The due date of the activity. Format: YYYY-MM-DD"""
  dueDate: String

  """The due time of the activity in UTC. Format: HH:MM"""
  dueTime: String

  """The duration of the activity. Format: HH:MM"""
  duration: String

  """
  The file that is attached to this activity. For example, this can be a reference to an audio note file generated with Pipedrive mobile app.
  """
  file: JSON

  """
  For the activity which syncs to Google calendar, this is the Google event ID. NB! This field is related to old Google calendar sync and will be deprecated soon.
  """
  gcalEventId: String

  """
  The Google calendar API etag (version) that is used for syncing this activity. NB! This field is related to old Google calendar sync and will be deprecated soon.
  """
  googleCalendarEtag: String

  """
  The Google calendar ID that this activity syncs to. NB! This field is related to old Google calendar sync and will be deprecated soon.
  """
  googleCalendarId: String

  """The activity ID, generated when the activity was created"""
  id: Int

  """
  The date and time of latest notifications sent about this activity to the participants or the attendees of this activity
  """
  lastNotificationTime: String

  """
  The ID of the user who triggered the sending of the latest notifications about this activity to the participants or the attendees of this activity
  """
  lastNotificationUserId: Int

  """The ID of the lead this activity is associated with"""
  leadId: String

  """
  The address of the activity. Pipedrive will automatically check if the location matches a geo-location on Google maps.
  """
  location: String

  """Subfield of location field. Indicates state/county."""
  locationAdminAreaLevel1: String

  """Subfield of location field. Indicates region."""
  locationAdminAreaLevel2: String

  """Subfield of location field. Indicates country."""
  locationCountry: String

  """Subfield of location field. Indicates full/combined address."""
  locationFormattedAddress: String

  """Subfield of location field. Indicates city/town/village/locality."""
  locationLocality: String

  """Subfield of location field. Indicates ZIP/postal code."""
  locationPostalCode: String

  """Subfield of location field. Indicates street name."""
  locationRoute: String

  """Subfield of location field. Indicates house number."""
  locationStreetNumber: String

  """Subfield of location field. Indicates district/sublocality."""
  locationSublocality: String

  """Subfield of location field. Indicates apartment/suite number."""
  locationSubpremise: String

  """
  The date and time this activity was marked as done. Format: YYYY-MM-DD HH:MM:SS.
  """
  markedAsDoneTime: String

  """The note of the activity (HTML format)"""
  note: String

  """The ID of the language the notifications are sent in"""
  notificationLanguageId: Int

  """The ID of the organization this activity is associated with"""
  orgId: Int

  """The name of the organization this activity is associated with"""
  orgName: String

  """The name of the user this activity is owned by"""
  ownerName: String

  """
  List of multiple persons (participants) this activity is associated with
  """
  participants: [JSON]

  """The BCC email address of the person"""
  personDropboxBcc: String

  """The ID of the person this activity is associated with"""
  personId: Int

  """The name of the person this activity is associated with"""
  personName: String

  """
  Additional details about the activity that is synced to your external calendar. Unlike the note added to the activity, the description is publicly visible to any guests added to the activity.
  """
  publicDescription: String

  """
  The ID of parent activity for a recurrent activity if the current activity is an exception to recurrence rules
  """
  recMasterActivityId: Int

  """
  The rule for the recurrence of the activity. Is important for activities synced into Pipedrive from an external calendar. Example: "RRULE:FREQ=WEEKLY;BYDAY=WE"
  """
  recRule: String

  """
  Additional rules for the recurrence of the activity, extend the `rec_rule`. Is important for activities synced into Pipedrive from an external calendar.
  """
  recRuleExtension: String

  """Together with the `reference_type`, gives the ID of the other object"""
  referenceId: Int

  """
  If the activity references some other object, it is indicated here. For example, value `Salesphone` refers to activities created with Caller.
  """
  referenceType: String

  """
  The list of recurring activity instances. It is in a structure as follows: `[{due_date: "2020-06-24", due_time: "10:00:00"}]`
  """
  series: [JSON]

  """The timezone the activity was created in an external calendar"""
  sourceTimezone: String

  """The subject of the activity"""
  subject: String

  """
  The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes.
  """
  type: String

  """
  The last update date and time of the activity. Format: YYYY-MM-DD HH:MM:SS.
  """
  updateTime: String

  """The ID of the user who was the last to update this activity"""
  updateUserId: Int

  """The ID of the user whom the activity is assigned to"""
  userId: Int
}

type GetActivityTypes {
  """The array of activity types"""
  data: [Data6ListItem]

  """If the response is successful or not"""
  success: Boolean
}

type Data6ListItem {
  """The active flag of the activity type"""
  activeFlag: Boolean

  """The creation time of the activity type"""
  addTime: String

  """
  A designated color for the activity type in 6-character HEX format (e.g. `FFFFFF` for white, `000000` for black)
  """
  color: String

  """Icon graphic to use for representing this activity type"""
  iconKey: IconKey

  """The ID of the activity type"""
  id: Int

  """Whether the activity type is a custom one or not"""
  isCustomFlag: Boolean

  """
  A string that is generated by the API based on the given name of the activity type upon creation
  """
  keyString: String

  """The name of the activity type"""
  name: String

  """
  An order number for the activity type. Order numbers should be used to order the types in the activity type selections.
  """
  orderNr: Int

  """The update time of the activity type"""
  updateTime: String
}

enum IconKey {
  TASK
  EMAIL
  MEETING
  DEADLINE
  CALL
  LUNCH
  CALENDAR
  DOWNARROW
  DOCUMENT
  SMARTPHONE
  CAMERA
  SCISSORS
  COGS
  BUBBLE
  UPARROW
  CHECKBOX
  SIGNPOST
  SHUFFLE
  ADDRESSBOOK
  LINEGRAPH
  PICTURE
  CAR
  WORLD
  SEARCH
  CLIP
  SOUND
  BRUSH
  KEY
  PADLOCK
  PRICETAG
  SUITCASE
  FINISH
  PLANE
  LOOP
  WIFI
  TRUCK
  CART
  BULB
  BELL
  PRESENTATION
}

type GetAllMailMessagesOfMailThread {
  """The array of the mail messages of the mail thread"""
  data: [Data69ListItem]

  """If the response is successful or not"""
  success: Boolean
}

type Data69ListItem {
  """The connection account ID"""
  accountId: String

  """The time when the mail message was inserted to database"""
  addTime: String

  """Participants of the Bcc"""
  bcc: [Bcc2ListItem]

  """A link to the mail thread message"""
  bodyUrl: String

  """Participants of the Cc"""
  cc: [Cc2ListItem]

  """Whether the mail thread is deleted"""
  deletedFlag: Float

  """
  If the mail message has a draft status then the value is the mail message object as JSON formatted string, otherwise `null`.
  """
  draft: String

  """Senders of the mail thread"""
  from: [From2ListItem]

  """Whether the mail thread has an attachment"""
  hasAttachmentsFlag: Float

  """Whether the mail thread message has a body"""
  hasBodyFlag: Float

  """Whether the mail thread has inline attachments"""
  hasInlineAttachmentsFlag: Float

  """Whether the mail thread has real attachments (which are not inline)"""
  hasRealAttachmentsFlag: Float

  """ID of the mail thread"""
  id: Int

  """Whether the link tracking of the mail thread is enabled"""
  mailLinkTrackingEnabledFlag: Float

  """ID of the mail thread"""
  mailThreadId: Int

  """Mail tracking status"""
  mailTrackingStatus: String

  """The time when the mail message was received or created"""
  messageTime: String

  """Whether the mail thread is read"""
  readFlag: Float

  """Whether the mail thread message is sent"""
  sentFlag: Float

  """Whether the mail thread message is sent from Pipedrive"""
  sentFromPipedriveFlag: Float

  """Whether one of the parties of the mail thread is Bcc"""
  smartBccFlag: Float

  """A snippet"""
  snippet: String

  """The subject"""
  subject: String

  """Whether the mail thread is synced"""
  syncedFlag: Float

  """Recipients of the mail thread"""
  to: [To2ListItem]

  """The time when the mail message was updated in database received"""
  updateTime: String

  """ID of the user whom mail message will be assigned to"""
  userId: Int
}

"""Member of a thread"""
type Bcc2ListItem {
  """Email address of the mail thread participant"""
  emailAddress: String

  """ID of the mail thread participant"""
  id: Int

  """Whether the mail thread participant was last to send an email"""
  latestSent: Boolean

  """Linked Organization ID"""
  linkedOrganizationId: Int

  """ID of the linked person"""
  linkedPersonId: Int

  """Email of the linked person"""
  linkedPersonName: String

  """ID of the mail message party"""
  mailMessagePartyId: Int

  """Message time"""
  messageTime: Float

  """Name of the mail thread participant"""
  name: String
}

"""Member of a thread"""
type Cc2ListItem {
  """Email address of the mail thread participant"""
  emailAddress: String

  """ID of the mail thread participant"""
  id: Int

  """Whether the mail thread participant was last to send an email"""
  latestSent: Boolean

  """Linked Organization ID"""
  linkedOrganizationId: Int

  """ID of the linked person"""
  linkedPersonId: Int

  """Email of the linked person"""
  linkedPersonName: String

  """ID of the mail message party"""
  mailMessagePartyId: Int

  """Message time"""
  messageTime: Float

  """Name of the mail thread participant"""
  name: String
}

"""Member of a thread"""
type From2ListItem {
  """Email address of the mail thread participant"""
  emailAddress: String

  """ID of the mail thread participant"""
  id: Int

  """Whether the mail thread participant was last to send an email"""
  latestSent: Boolean

  """Linked Organization ID"""
  linkedOrganizationId: Int

  """ID of the linked person"""
  linkedPersonId: Int

  """Email of the linked person"""
  linkedPersonName: String

  """ID of the mail message party"""
  mailMessagePartyId: Int

  """Message time"""
  messageTime: Float

  """Name of the mail thread participant"""
  name: String
}

"""Member of a thread"""
type To2ListItem {
  """Email address of the mail thread participant"""
  emailAddress: String

  """ID of the mail thread participant"""
  id: Int

  """Whether the mail thread participant was last to send an email"""
  latestSent: Boolean

  """Linked Organization ID"""
  linkedOrganizationId: Int

  """ID of the linked person"""
  linkedPersonId: Int

  """Email of the linked person"""
  linkedPersonName: String

  """ID of the mail message party"""
  mailMessagePartyId: Int

  """Message time"""
  messageTime: Float

  """Name of the mail thread participant"""
  name: String
}

type GetAssociatedActivities {
  additionalData: ActivityDistributionDataWithAdditionalData

  """The array of activities"""
  data: [Data21ListItem]

  """If the response is successful or not"""
  success: Boolean
}

type ActivityDistributionDataWithAdditionalData {
  """
  The distribution of activities related to the organization grouped by the user ID
  """
  activityDistribution: ActivityDistribution

  """Items shown per page"""
  limit: Int

  """If there are more list items in the collection than displayed or not"""
  moreItemsInCollection: Boolean

  """Pagination start"""
  start: Int
}

"""
The distribution of activities related to the organization grouped by the user ID
"""
type ActivityDistribution {
  """The ID of the user"""
  aSSIGNEDTOUSERID: ASSIGNEDTOUSERID
}

"""The ID of the user"""
type ASSIGNEDTOUSERID {
  """The count of activities related to the user grouped by activity type"""
  activities: Activities

  """The overall count of activities for the user"""
  activityCount: Int

  """The name of the user"""
  name: String

  """The percentage of activities belongs to the user"""
  share: Int
}

"""The count of activities related to the user grouped by activity type"""
type Activities {
  """The count of activities related to a specific type"""
  aCTIVITYTYPENAME: Int
}

type Data21ListItem {
  """Whether the activity is active or not"""
  activeFlag: Boolean

  """
  The creation date and time of the activity in UTC. Format: YYYY-MM-DD HH:MM:SS.
  """
  addTime: String

  """
  The ID of the user to whom the activity is assigned to. Equal to `user_id`.
  """
  assignedToUserId: Int

  """
  The attendees of the activity. This can be either your existing Pipedrive contacts or an external email address.
  """
  attendees: [JSON]

  """
  Marks if the activity is set as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.
  """
  busyFlag: BusyFlag

  """
  For activities that sync to an external calendar, this setting indicates if the activity syncs with context (what are the deals, persons, organizations this activity is related to)
  """
  calendarSyncIncludeContext: String

  """The user's company ID"""
  companyId: Int

  """The ID of Marketplace app, which is connected to this activity"""
  conferenceMeetingClient: String

  """
  The meeting ID of the meeting provider (Zoom, MS Teams etc.) that is associated with this activity
  """
  conferenceMeetingId: String

  """The link to join the meeting which is associated with this activity"""
  conferenceMeetingUrl: String

  """The ID of the user who created the activity"""
  createdByUserId: Int

  """The BCC email address of the deal"""
  dealDropboxBcc: String

  """The ID of the deal this activity is associated with"""
  dealId: Int

  """The name of the deal this activity is associated with"""
  dealTitle: String

  """Whether the activity is done or not"""
  done: Boolean

  """The due date of the activity. Format: YYYY-MM-DD"""
  dueDate: String

  """The due time of the activity in UTC. Format: HH:MM"""
  dueTime: String

  """The duration of the activity. Format: HH:MM"""
  duration: String

  """
  The file that is attached to this activity. For example, this can be a reference to an audio note file generated with Pipedrive mobile app.
  """
  file: JSON

  """
  For the activity which syncs to Google calendar, this is the Google event ID. NB! This field is related to old Google calendar sync and will be deprecated soon.
  """
  gcalEventId: String

  """
  The Google calendar API etag (version) that is used for syncing this activity. NB! This field is related to old Google calendar sync and will be deprecated soon.
  """
  googleCalendarEtag: String

  """
  The Google calendar ID that this activity syncs to. NB! This field is related to old Google calendar sync and will be deprecated soon.
  """
  googleCalendarId: String

  """The activity ID, generated when the activity was created"""
  id: Int

  """
  The date and time of latest notifications sent about this activity to the participants or the attendees of this activity
  """
  lastNotificationTime: String

  """
  The ID of the user who triggered the sending of the latest notifications about this activity to the participants or the attendees of this activity
  """
  lastNotificationUserId: Int

  """The ID of the lead this activity is associated with"""
  leadId: String

  """
  The address of the activity. Pipedrive will automatically check if the location matches a geo-location on Google maps.
  """
  location: String

  """Subfield of location field. Indicates state/county."""
  locationAdminAreaLevel1: String

  """Subfield of location field. Indicates region."""
  locationAdminAreaLevel2: String

  """Subfield of location field. Indicates country."""
  locationCountry: String

  """Subfield of location field. Indicates full/combined address."""
  locationFormattedAddress: String

  """Subfield of location field. Indicates city/town/village/locality."""
  locationLocality: String

  """Subfield of location field. Indicates ZIP/postal code."""
  locationPostalCode: String

  """Subfield of location field. Indicates street name."""
  locationRoute: String

  """Subfield of location field. Indicates house number."""
  locationStreetNumber: String

  """Subfield of location field. Indicates district/sublocality."""
  locationSublocality: String

  """Subfield of location field. Indicates apartment/suite number."""
  locationSubpremise: String

  """
  The date and time this activity was marked as done. Format: YYYY-MM-DD HH:MM:SS.
  """
  markedAsDoneTime: String

  """The note of the activity (HTML format)"""
  note: String

  """The ID of the language the notifications are sent in"""
  notificationLanguageId: Int

  """The ID of the organization this activity is associated with"""
  orgId: Int

  """The name of the organization this activity is associated with"""
  orgName: String

  """The name of the user this activity is owned by"""
  ownerName: String

  """
  List of multiple persons (participants) this activity is associated with
  """
  participants: [JSON]

  """The BCC email address of the person"""
  personDropboxBcc: String

  """The ID of the person this activity is associated with"""
  personId: Int

  """The name of the person this activity is associated with"""
  personName: String

  """
  Additional details about the activity that is synced to your external calendar. Unlike the note added to the activity, the description is publicly visible to any guests added to the activity.
  """
  publicDescription: String

  """
  The ID of parent activity for a recurrent activity if the current activity is an exception to recurrence rules
  """
  recMasterActivityId: Int

  """
  The rule for the recurrence of the activity. Is important for activities synced into Pipedrive from an external calendar. Example: "RRULE:FREQ=WEEKLY;BYDAY=WE"
  """
  recRule: String

  """
  Additional rules for the recurrence of the activity, extend the `rec_rule`. Is important for activities synced into Pipedrive from an external calendar.
  """
  recRuleExtension: String

  """Together with the `reference_type`, gives the ID of the other object"""
  referenceId: Int

  """
  If the activity references some other object, it is indicated here. For example, value `Salesphone` refers to activities created with Caller.
  """
  referenceType: String

  """
  The list of recurring activity instances. It is in a structure as follows: `[{due_date: "2020-06-24", due_time: "10:00:00"}]`
  """
  series: [JSON]

  """The timezone the activity was created in an external calendar"""
  sourceTimezone: String

  """The subject of the activity"""
  subject: String

  """
  The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes.
  """
  type: String

  """
  The last update date and time of the activity. Format: YYYY-MM-DD HH:MM:SS.
  """
  updateTime: String

  """The ID of the user who was the last to update this activity"""
  updateUserId: Int

  """The ID of the user whom the activity is assigned to"""
  userId: Int
}

type GetAssociatedDeals {
  """The additional data of the list"""
  additionalData: AdditionalData3

  """The array of deals"""
  data: [Data14ListItem]
  relatedObjects: RelatedObjects8

  """If the response is successful or not"""
  success: Boolean
}

type Data14ListItem {
  """Whether the deal is active or not"""
  active: Boolean

  """The number of activities associated with the deal"""
  activitiesCount: Int

  """The creation date and time of the deal"""
  addTime: String

  """The BCC email of the deal"""
  ccEmail: String

  """The date and time of closing the deal"""
  closeTime: String

  """The creator of the deal"""
  creatorUserId: CreatorUserId

  """The currency associated with the deal"""
  currency: String

  """Whether the deal is deleted or not"""
  deleted: Boolean

  """The number of completed activities associated with the deal"""
  doneActivitiesCount: Int

  """The number of emails associated with the deal"""
  emailMessagesCount: Int

  """The expected close date of the deal"""
  expectedCloseDate: String

  """The number of files associated with the deal"""
  filesCount: Int

  """The date and time of the first time changing the deal status as won"""
  firstWonTime: String

  """The number of followers associated with the deal"""
  followersCount: Int

  """The deal value formatted with selected currency. E.g. US$500"""
  formattedValue: String

  """The weighted_value formatted with selected currency. E.g. US$500"""
  formattedWeightedValue: String

  """The ID of the deal"""
  id: Int

  """The label assigned to the deal"""
  label: Int

  """The date of the last activity associated with the deal"""
  lastActivityDate: String

  """The ID of the last activity associated with the deal"""
  lastActivityId: Int

  """The date and time of the last incoming email associated with the deal"""
  lastIncomingMailTime: String

  """The date and time of the last outgoing email associated with the deal"""
  lastOutgoingMailTime: String

  """The reason for losing the deal"""
  lostReason: String

  """The date and time of changing the deal status as lost"""
  lostTime: String

  """The date of the next activity associated with the deal"""
  nextActivityDate: String

  """The duration of the next activity associated with the deal"""
  nextActivityDuration: String

  """The ID of the next activity associated with the deal"""
  nextActivityId: Int

  """The note of the next activity associated with the deal"""
  nextActivityNote: String

  """The subject of the next activity associated with the deal"""
  nextActivitySubject: String

  """The time of the next activity associated with the deal"""
  nextActivityTime: String

  """The type of the next activity associated with the deal"""
  nextActivityType: String

  """The number of notes associated with the deal"""
  notesCount: Int

  """If the organization that is associated with the deal is hidden or not"""
  orgHidden: Boolean
  orgId: OrgId

  """The name of the organization associated with the deal"""
  orgName: String

  """The name of the deal owner"""
  ownerName: String

  """The number of participants associated with the deal"""
  participantsCount: Int

  """If the person that is associated with the deal is hidden or not"""
  personHidden: Boolean
  personId: PersonId

  """The name of the person associated with the deal"""
  personName: String

  """The ID of pipeline associated with the deal"""
  pipelineId: Int

  """The success probability percentage of the deal"""
  probability: Float

  """The number of products associated with the deal"""
  productsCount: Int

  """The date and time of changing the deal status as rotten"""
  rottenTime: String

  """The last updated date and time of the deal stage"""
  stageChangeTime: String

  """The ID of the deal stage"""
  stageId: Int

  """The order number of the deal stage associated with the deal"""
  stageOrderNr: Int

  """The status of the deal"""
  status: String

  """The title of the deal"""
  title: String

  """The number of incomplete activities associated with the deal"""
  undoneActivitiesCount: Int

  """The last updated date and time of the deal"""
  updateTime: String
  userId: UserId

  """The value of the deal"""
  value: Float

  """The visibility of the deal"""
  visibleTo: String

  """
  Probability times deal value. Probability can either be deal probability or if not set, then stage probability.
  """
  weightedValue: Float

  """The currency associated with the deal"""
  weightedValueCurrency: String

  """The date and time of changing the deal status as won"""
  wonTime: String
}

"""The creator of the deal"""
type CreatorUserId {
  """Whether the creator is active or not"""
  activeFlag: Boolean

  """The email of the deal creator"""
  email: String

  """If the creator has a picture or not"""
  hasPic: Boolean

  """The ID of the deal creator"""
  id: Int

  """The name of the deal creator"""
  name: String

  """The creator picture hash"""
  picHash: String

  """The ID of the deal creator"""
  value: Int
}

type OrgId {
  """Whether the associated organization is active or not"""
  activeFlag: Boolean

  """The address of the organization that is associated with the deal"""
  address: String

  """The BCC email of the organization associated with the deal"""
  ccEmail: String

  """The name of the organization associated with the deal"""
  name: String

  """
  The ID of the owner of the organization that is associated with the deal
  """
  ownerId: Int

  """
  The number of people connected with the organization that is associated with the deal
  """
  peopleCount: Int

  """The ID of the organization associated with the deal"""
  value: Int
}

type PersonId {
  """Whether the associated person is active or not"""
  activeFlag: Boolean

  """The emails of the person associated with the deal"""
  email: [Email2ListItem]

  """The name of the person associated with the deal"""
  name: String

  """The ID of the owner of the person that is associated with the deal"""
  ownerId: Int

  """The phone numbers of the person associated with the deal"""
  phone: [Phone2ListItem]

  """The ID of the person associated with the deal"""
  value: Int
}

type Email2ListItem {
  """The type of the email"""
  label: String

  """If this is the primary email or not"""
  primary: Boolean

  """The email of the associated person"""
  value: String
}

type Phone2ListItem {
  """The type of the phone number"""
  label: String

  """If this is the primary phone number or not"""
  primary: Boolean

  """The phone number of the person associated with the deal"""
  value: String
}

type UserId {
  """Whether the user is active or not"""
  activeFlag: Boolean

  """The email of the user"""
  email: String

  """If the user has a picture or not"""
  hasPic: Boolean

  """The ID of the user"""
  id: Int

  """The name of the user"""
  name: String

  """The user picture hash"""
  picHash: String

  """The ID of the user"""
  value: Int
}

type RelatedObjects8 {
  organization: Organization2
  person: Person2
  pipeline: Pipeline
  stage: Stage2
  user: User
}

type Organization2 {
  """The ID of the organization associated with the item"""
  oRGANIZATIONID: ORGANIZATIONID2
}

"""The ID of the organization associated with the item"""
type ORGANIZATIONID2 {
  """Whether the associated organization is active or not"""
  activeFlag: Boolean

  """The address of the organization"""
  address: String

  """The BCC email of the organization associated with the item"""
  ccEmail: String

  """The ID of the organization associated with the item"""
  id: Int

  """The name of the organization associated with the item"""
  name: String

  """
  The ID of the owner of the organization that is associated with the item
  """
  ownerId: Int

  """
  The number of people connected with the organization that is associated with the item
  """
  peopleCount: Int
}

type Person2 {
  """The ID of the person associated with the item"""
  pERSONID: PERSONID2
}

"""The ID of the person associated with the item"""
type PERSONID2 {
  """Whether the associated person is active or not"""
  activeFlag: Boolean

  """The emails of the person associated with the item"""
  email: [EmailListItem]

  """The ID of the person associated with the item"""
  id: Int

  """The name of the person associated with the item"""
  name: String

  """The ID of the owner of the person that is associated with the item"""
  ownerId: Int

  """The phone numbers of the person associated with the item"""
  phone: [PhoneListItem]
}

type Pipeline {
  """Whether this pipeline will be made inactive (hidden) or active"""
  active: Boolean

  """The pipeline creation time. Format: YYYY-MM-DD HH:MM:SS."""
  addTime: String

  """Whether deal probability is disabled or enabled for this pipeline"""
  dealProbability: Boolean

  """The ID of the pipeline"""
  id: Int

  """The name of the pipeline"""
  name: String

  """
  Defines the order of pipelines. First order (`order_nr=0`) is the default pipeline.
  """
  orderNr: Int

  """The pipeline update time. Format: YYYY-MM-DD HH:MM:SS."""
  updateTime: String

  """The pipeline title displayed in the URL"""
  urlTitle: String
}

type Stage2 {
  """Whether the stage is active or deleted"""
  activeFlag: Boolean

  """The stage creation time. Format: YYYY-MM-DD HH:MM:SS."""
  addTime: String

  """
  The success probability percentage of the deal. Used/shown when the deal weighted values are used.
  """
  dealProbability: Int

  """The ID of the stage"""
  id: Int

  """The name of the stage"""
  name: String

  """Defines the order of the stage"""
  orderNr: Int

  """The ID of the pipeline to add the stage to"""
  pipelineId: Int

  """
  The number of days the deals not updated in this stage would become rotten. Applies only if the `rotten_flag` is set.
  """
  rottenDays: Int

  """Whether deals in this stage can become rotten"""
  rottenFlag: RottenFlag

  """The stage update time. Format: YYYY-MM-DD HH:MM:SS."""
  updateTime: String
}

enum RottenFlag {
  TRUE
  FALSE
}

enum OnlyPrimaryAssociation {
  _0
  _1
}

enum Status3 {
  OPEN
  WON
  LOST
  DELETED
  ALL_NOT_DELETED
}

type GetAssociatedFiles {
  """The additional data of the list"""
  additionalData: AdditionalData3

  """The array of files"""
  data: [Data23ListItem]

  """If the response is successful or not"""
  success: Boolean
}

"""The file data"""
type Data23ListItem {
  """
  Whether the user is active or not. false = Not activated, true = Activated
  """
  activeFlag: Boolean

  """The ID of the activity to associate the file with"""
  activityId: Int

  """
  The date and time when the file was added/created. Format: YYYY-MM-DD HH:MM:SS
  """
  addTime: String

  """The ID of the inline attachment"""
  cid: String

  """The ID of the deal to associate the file with"""
  dealId: Int

  """The name of the deal associated with the dile"""
  dealName: String

  """The description of the file"""
  description: String

  """The original name of the file"""
  fileName: String

  """The size of the file"""
  fileSize: Int

  """The ID of the file"""
  id: Int

  """Whether the file was uploaded as inline or not"""
  inlineFlag: Boolean

  """The ID of the lead to associate the file with"""
  leadId: ID

  """The name of the lead associated with the file"""
  leadName: String

  """The ID of the mail message to associate the file with"""
  mailMessageId: String

  """The ID of the mail template to associate the file with"""
  mailTemplateId: String

  """The visible name of the file"""
  name: String

  """The ID of the organization to associate the file with"""
  orgId: Int

  """The name of the organization associated with the file"""
  orgName: String

  """The ID of the person to associate the file with"""
  personId: Int

  """The name of the person associated with the file"""
  personName: String

  """The ID of the product to associate the file with"""
  productId: Int

  """The name of the product associated with the file"""
  productName: String

  """The ID of the remote item"""
  remoteId: String

  """
  The location type to send the file to. Only googledrive is supported at the moment.
  """
  remoteLocation: String

  """The location of the cloud storage"""
  s3Bucket: String

  """
  The last updated date and time of the file. Format: YYYY-MM-DD HH:MM:SS
  """
  updateTime: String

  """The URL of the download file"""
  url: String

  """The ID of the user to associate the file with"""
  userId: Int
}

type GetAssociatedFollowers {
  """The additional data of the list"""
  additionalData: AdditionalData3

  """The list of followers"""
  data: [Data26ListItem]

  """If the response is successful or not"""
  success: Boolean
}

type Data26ListItem {
  """The date and time when the follower was added to the person"""
  addTime: String

  """The ID of the deal which the follower was added to"""
  dealId: Int

  """The ID of the user follower"""
  id: Int

  """The ID of the user"""
  userId: Int
}

type GetAssociatedMailMessages {
  """The additional data of the list"""
  additionalData: AdditionalData3

  """The array of mail messages"""
  data: [Data29ListItem]

  """If the response is successful or not"""
  success: Boolean
}

type Data29ListItem {
  data: MailMessageItemForList

  """The type of the data item"""
  object: String

  """The date and time when the item was created"""
  timestamp: String
}

type MailMessageItemForList {
  """The connection account ID"""
  accountId: String

  """The insertion into the database time of the mail message"""
  addTime: String

  """The array of mail message blind copies (object)"""
  bcc: [BccListItem]

  """The mail message body URL"""
  bodyUrl: String

  """The array of mail message copies (object)"""
  cc: [CcListItem]

  """The ID of the company"""
  companyId: Int

  """Whether the mail message is deleted or not"""
  deletedFlag: Float

  """
  If the mail message has a draft status then the value is the mail message object as JSON formatted string, otherwise `null`.
  """
  draft: String

  """Whether the mail message is a draft or not"""
  draftFlag: Float

  """If the Mail Message has been deleted on the provider side or not"""
  externalDeletedFlag: Boolean

  """The array of mail message sender (object)"""
  from: [FromListItem]

  """Whether the mail message has an attachment or not"""
  hasAttachmentsFlag: Float

  """Whether the mail message has a body or not"""
  hasBodyFlag: Float

  """Whether the mail message has an inline attachment or not"""
  hasInlineAttachmentsFlag: Float

  """
  Whether the mail message has an attachment (which is not inline) or not
  """
  hasRealAttachmentsFlag: Float

  """ID of the mail message."""
  id: Int

  """The type of the data item"""
  itemType: String

  """Whether the link tracking in mail message body is enabled."""
  mailLinkTrackingEnabledFlag: Float

  """ID of the mail message thread"""
  mailThreadId: Int

  """
  The status of tracking mail message. Value is `null` if tracking is not enabled.
  """
  mailTrackingStatus: MailTrackingStatus

  """Creation or receival time of the mail message"""
  messageTime: String

  """The Mail Message ID assigned by the mail user agent"""
  muaMessageId: String

  """The Mail Message ID assigned by the sync provider"""
  nylasId: String

  """Whether the mail message is read or not by the user"""
  readFlag: Float

  """The name of the S3 bucket"""
  s3Bucket: String

  """The path of the S3 bucket"""
  s3BucketPath: String

  """Whether the mail message has been sent or not"""
  sentFlag: Float

  """Whether the mail message has been sent from Pipedrive app or not"""
  sentFromPipedriveFlag: Float

  """
  Whether the mail message has been created by Smart Email BCC feature or not
  """
  smartBccFlag: Float

  """The snippet of mail message. Snippet length is up to 225 characters."""
  snippet: String

  """The subject of mail message"""
  subject: String

  """Whether the mail message is synced with the provider or not"""
  syncedFlag: Float

  """The ID of the mail template"""
  templateId: Int

  """The add date and time of the Mail Message"""
  timestamp: String

  """The array of mail message receiver (object)"""
  to: [ToListItem]

  """The updating time in the database of the mail message"""
  updateTime: String

  """ID of the user whom mail message will be assigned to"""
  userId: Int
}

type BccListItem {
  """Mail address of the mail participant"""
  emailAddress: String

  """ID of the mail participant"""
  id: Int

  """ID of the linked person to the mail message"""
  linkedPersonId: Int

  """Name of the linked person to the mail message"""
  linkedPersonName: String

  """ID of the mail message participant"""
  mailMessagePartyId: Int

  """Name of the mail participant"""
  name: String
}

type CcListItem {
  """Mail address of the mail participant"""
  emailAddress: String

  """ID of the mail participant"""
  id: Int

  """ID of the linked person to the mail message"""
  linkedPersonId: Int

  """Name of the linked person to the mail message"""
  linkedPersonName: String

  """ID of the mail message participant"""
  mailMessagePartyId: Int

  """Name of the mail participant"""
  name: String
}

type FromListItem {
  """Mail address of the mail participant"""
  emailAddress: String

  """ID of the mail participant"""
  id: Int

  """ID of the linked person to the mail message"""
  linkedPersonId: Int

  """Name of the linked person to the mail message"""
  linkedPersonName: String

  """ID of the mail message participant"""
  mailMessagePartyId: Int

  """Name of the mail participant"""
  name: String
}

enum MailTrackingStatus {
  OPENED
  NOT_OPENED
}

type ToListItem {
  """Mail address of the mail participant"""
  emailAddress: String

  """ID of the mail participant"""
  id: Int

  """ID of the linked person to the mail message"""
  linkedPersonId: Int

  """Name of the linked person to the mail message"""
  linkedPersonName: String

  """ID of the mail message participant"""
  mailMessagePartyId: Int

  """Name of the mail participant"""
  name: String
}

type GetAssociatedPersonUpdates {
  """The additional data of the list"""
  additionalData: AdditionalData3
  data: [Data93ListItem]
  relatedObjects: RelatedObjects4

  """If the response is successful or not"""
  success: Boolean
}

type Data93ListItem {
  """The data related to the update"""
  data: JSON

  """
  The type of the person update. (Possible object types - personChange, note, activity, file)
  """
  object: String

  """The creation date and time of the update"""
  timestamp: String
}

type RelatedObjects4 {
  deal: Deal
  organization: Organization
  person: Person2
  user: User
}

type GetAssociatedUpdates {
  """The additional data of the list"""
  additionalData: AdditionalData3
  data: [Data79ListItem]
  relatedObjects: RelatedObjects9

  """If the response is successful or not"""
  success: Boolean
}

type Data79ListItem {
  """The data related to the update"""
  data: JSON

  """
  The type of the person update. (Possible object types - organizationChange, dealChange, file, activity)
  """
  object: String

  """The creation date and time of the update"""
  timestamp: String
}

type RelatedObjects9 {
  organization: Organization
  user: User
}

type GetComments {
  additionalData: AdditionalData7

  """The array of comments"""
  data: [Data72ListItem]

  """If the request was successful or not"""
  success: Boolean
}

type AdditionalData7 {
  """The pagination details of the list"""
  pagination: Pagination2
}

"""The pagination details of the list"""
type Pagination2 {
  """Items shown per page"""
  limit: Int

  """If there are more list items in the collection than displayed or not"""
  moreItemsInCollection: Boolean

  """Next pagination start"""
  nextStart: Int

  """Pagination start"""
  start: Int
}

type Data72ListItem {
  """Whether the note is active or deleted"""
  activeFlag: Boolean

  """The creation date and time of the note"""
  addTime: String

  """The ID of the company"""
  companyId: Int

  """
  The content of the note in HTML format. Subject to sanitization on the back-end.
  """
  content: String

  """
  The ID of the object that the comment is attached to, will be the id of the note
  """
  objectId: String

  """
  The type of object that the comment is attached to, will be "note"
  """
  objectType: String

  """The creation date and time of the note"""
  updateTime: String

  """The ID of the user who last updated the comment"""
  updaterId: Int

  """The ID of the user who created the comment"""
  userId: Int

  """The ID of the note"""
  uuid: ID
}

type GetCurrencies {
  """The array of currencies"""
  data: [Data13ListItem]

  """If the response is successful or not"""
  success: Boolean
}

type Data13ListItem {
  """Whether the currency is active or not"""
  activeFlag: Boolean

  """The code of the currency"""
  code: String

  """The amount of decimal points of the currency"""
  decimalPoints: Int

  """The ID of the currency"""
  id: Int

  """Whether the currency is a custom one or not"""
  isCustomFlag: Boolean

  """The name of the currency"""
  name: String

  """The symbol of the currency"""
  symbol: String
}

type GetCurrentUser {
  data: Data136

  """If the response is successful or not"""
  success: Boolean
}

type Data136 {
  access: [AccessListItem]

  """Boolean that indicates whether the user is activated"""
  activated: Boolean

  """Boolean that indicates whether the user is activated"""
  activeFlag: Boolean

  """The user company country"""
  companyCountry: String

  """The user company domain"""
  companyDomain: String

  """The user company ID"""
  companyId: Int

  """The user company industry"""
  companyIndustry: String

  """The user company name"""
  companyName: String

  """The creation date and time of the user. Format: YYYY-MM-DD HH:MM:SS"""
  created: String

  """The user default currency"""
  defaultCurrency: String

  """The user email"""
  email: String

  """Boolean that indicates whether the user has created a company"""
  hasCreatedCompany: Boolean

  """The user icon URL"""
  iconUrl: String

  """The user ID"""
  id: Int

  """
  Boolean that indicates if the requested user is the same which is logged in (in this case, always true)
  """
  isYou: Boolean

  """The user language ID"""
  lang: Int

  """The user language details"""
  language: Language

  """The last login date and time of the user. Format: YYYY-MM-DD HH:MM:SS"""
  lastLogin: String

  """The user locale"""
  locale: String

  """
  The last modification date and time of the user. Format: YYYY-MM-DD HH:MM:SS
  """
  modified: String

  """The user name"""
  name: String

  """The user phone"""
  phone: String

  """The ID of the user role"""
  roleId: Int

  """The user timezone name"""
  timezoneName: String

  """The user timezone offset"""
  timezoneOffset: String
}

"""The user language details"""
type Language {
  """The country code. E.g. US"""
  countryCode: String

  """The language code. E.g. en"""
  languageCode: String
}

type GetDeal {
  additionalData: AdditionalData4
  data: DealNonStrictWithDetails
  relatedObjects: RelatedObjects3

  """If the response is successful or not"""
  success: Boolean
}

type AdditionalData4 {
  """The BCC email of the deal"""
  dropboxEmail: String
}

type DealNonStrictWithDetails {
  """Whether the deal is active or not"""
  active: Boolean

  """The number of activities associated with the deal"""
  activitiesCount: Int

  """The creation date and time of the deal"""
  addTime: String

  """The lifetime of the deal"""
  age: Age

  """The average of the deal stage progression"""
  averageStageProgress: Float

  """The average time to win the deal"""
  averageTimeToWon: AverageTimeToWon

  """The BCC email of the deal"""
  ccEmail: String

  """The date and time of closing the deal"""
  closeTime: String

  """The creator of the deal"""
  creatorUserId: CreatorUserId

  """The currency associated with the deal"""
  currency: String

  """Whether the deal is deleted or not"""
  deleted: Boolean

  """The number of completed activities associated with the deal"""
  doneActivitiesCount: Int

  """The number of emails associated with the deal"""
  emailMessagesCount: Int

  """The expected close date of the deal"""
  expectedCloseDate: String

  """The number of files associated with the deal"""
  filesCount: Int

  """The date and time of the first time changing the deal status as won"""
  firstWonTime: String

  """The number of followers associated with the deal"""
  followersCount: Int

  """The deal value formatted with selected currency. E.g. US$500"""
  formattedValue: String

  """The weighted_value formatted with selected currency. E.g. US$500"""
  formattedWeightedValue: String

  """The ID of the deal"""
  id: Int

  """The label assigned to the deal"""
  label: Int

  """The details of the last activity associated with the deal"""
  lastActivity: JSON

  """The date of the last activity associated with the deal"""
  lastActivityDate: String

  """The ID of the last activity associated with the deal"""
  lastActivityId: Int

  """The date and time of the last incoming email associated with the deal"""
  lastIncomingMailTime: String

  """The date and time of the last outgoing email associated with the deal"""
  lastOutgoingMailTime: String

  """The reason for losing the deal"""
  lostReason: String

  """The date and time of changing the deal status as lost"""
  lostTime: String

  """The details of the next activity associated with the deal"""
  nextActivity: JSON

  """The date of the next activity associated with the deal"""
  nextActivityDate: String

  """The duration of the next activity associated with the deal"""
  nextActivityDuration: String

  """The ID of the next activity associated with the deal"""
  nextActivityId: Int

  """The note of the next activity associated with the deal"""
  nextActivityNote: String

  """The subject of the next activity associated with the deal"""
  nextActivitySubject: String

  """The time of the next activity associated with the deal"""
  nextActivityTime: String

  """The type of the next activity associated with the deal"""
  nextActivityType: String

  """The number of notes associated with the deal"""
  notesCount: Int

  """If the organization that is associated with the deal is hidden or not"""
  orgHidden: Boolean
  orgId: OrgId

  """The name of the organization associated with the deal"""
  orgName: String

  """The name of the deal owner"""
  ownerName: String

  """The number of participants associated with the deal"""
  participantsCount: Int

  """If the person that is associated with the deal is hidden or not"""
  personHidden: Boolean
  personId: PersonId

  """The name of the person associated with the deal"""
  personName: String

  """The ID of pipeline associated with the deal"""
  pipelineId: Int

  """The success probability percentage of the deal"""
  probability: Float

  """The number of products associated with the deal"""
  productsCount: Int

  """The date and time of changing the deal status as rotten"""
  rottenTime: String

  """The last updated date and time of the deal stage"""
  stageChangeTime: String

  """The ID of the deal stage"""
  stageId: Int

  """The order number of the deal stage associated with the deal"""
  stageOrderNr: Int

  """The status of the deal"""
  status: String

  """
  The details of the duration of the deal being in each stage of the pipeline
  """
  stayInPipelineStages: StayInPipelineStages

  """The title of the deal"""
  title: String

  """The number of incomplete activities associated with the deal"""
  undoneActivitiesCount: Int

  """The last updated date and time of the deal"""
  updateTime: String
  userId: UserId

  """The value of the deal"""
  value: Float

  """The visibility of the deal"""
  visibleTo: String

  """
  Probability times deal value. Probability can either be deal probability or if not set, then stage probability.
  """
  weightedValue: Float

  """The currency associated with the deal"""
  weightedValueCurrency: String

  """The date and time of changing the deal status as won"""
  wonTime: String
}

"""The lifetime of the deal"""
type Age {
  """Days"""
  d: Int

  """Hours"""
  h: Int

  """Minutes"""
  i: Int

  """Months"""
  m: Int

  """Seconds"""
  s: Int

  """The total time in seconds"""
  totalSeconds: Int

  """Years"""
  y: Int
}

"""The average time to win the deal"""
type AverageTimeToWon {
  """Days"""
  d: Int

  """Hours"""
  h: Int

  """Minutes"""
  i: Int

  """Months"""
  m: Int

  """Seconds"""
  s: Int

  """The total time in seconds"""
  totalSeconds: Int

  """Years"""
  y: Int
}

"""
The details of the duration of the deal being in each stage of the pipeline
"""
type StayInPipelineStages {
  """The order of the deal progression through the pipeline stages"""
  orderOfStages: [Int]

  """The number of seconds a deal has been in each stage of the pipeline"""
  timesInStages: JSON
}

type RelatedObjects3 {
  """The organization which is associated with the deal"""
  organization: Organization3

  """The person who is associated with the deal"""
  person: Person3

  """The user who is associated with the deal"""
  user: User2
}

"""The organization which is associated with the deal"""
type Organization3 {
  """Whether the associated organization is active or not"""
  activeFlag: Boolean

  """The address of the organization that is associated with the deal"""
  address: String

  """The BCC email of the organization associated with the deal"""
  ccEmail: String

  """The name of the organization associated with the deal"""
  name: String

  """
  The ID of the owner of the organization that is associated with the deal
  """
  ownerId: Int

  """
  The number of people connected with the organization that is associated with the deal
  """
  peopleCount: Int
}

"""The person who is associated with the deal"""
type Person3 {
  """Whether the associated person is active or not"""
  activeFlag: Boolean

  """The emails of the person associated with the deal"""
  email: [Email2ListItem]

  """The name of the person associated with the deal"""
  name: String

  """The ID of the owner of the person that is associated with the deal"""
  ownerId: Int

  """The phone numbers of the person associated with the deal"""
  phone: [Phone2ListItem]
}

"""The user who is associated with the deal"""
type User2 {
  """Whether the user is active or not"""
  activeFlag: Boolean

  """The email of the user"""
  email: String

  """If the user has a picture or not"""
  hasPic: Boolean

  """The ID of the user"""
  id: Int

  """The name of the user"""
  name: String

  """The user picture hash"""
  picHash: String
}

type GetDealActivities {
  additionalData: ActivityDistributionDataWithAdditionalData

  """The array of activities"""
  data: [Data21ListItem]
  relatedObjects: RelatedObjects2

  """If the response is successful or not"""
  success: Boolean
}

type RelatedObjects2 {
  deal: Deal
  organization: Organization2
  person: Person2
  user: User
}

type GetDealParticipants {
  """The additional data of the list"""
  additionalData: AdditionalData3

  """The array of participants"""
  data: [Data31ListItem]
  relatedObjects: RelatedObjects3

  """If the request was successful or not"""
  success: Boolean
}

type Data31ListItem {
  """Whether the person is active or not"""
  activeFlag: Boolean

  """The count of activities related to the person"""
  activitiesCount: Int

  """
  The date and time when the person was added/created. Format: YYYY-MM-DD HH:MM:SS
  """
  addTime: String

  """The BCC email associated with the person"""
  ccEmail: String

  """The count of closed deals related with the item"""
  closedDealsCount: Int

  """The ID of the company related to the person"""
  companyId: Int

  """The count of done activities related to the person"""
  doneActivitiesCount: Int

  """
  An email address as a string or an array of email objects related to the person. The structure of the array is as follows: `[{ "value": "mail@example.com", "primary": "true", "label": "main" } ]`. Please note that only `value` is required.
  """
  email: [Email3ListItem]

  """The count of email messages related to the person"""
  emailMessagesCount: Int

  """The count of files related to the person"""
  filesCount: Int

  """The first letter of the name of the person"""
  firstChar: String

  """The first name of the person"""
  firstName: String

  """The count of followers related to the person"""
  followersCount: Int

  """The ID of the person"""
  id: Int

  """The label assigned to the person"""
  label: Int

  """The date of the last activity associated with the deal"""
  lastActivityDate: String

  """The ID of the last activity associated with the deal"""
  lastActivityId: Int

  """
  The date and time of the last incoming email associated with the person
  """
  lastIncomingMailTime: String

  """The last name of the person"""
  lastName: String

  """
  The date and time of the last outgoing email associated with the person
  """
  lastOutgoingMailTime: String

  """The count of lost deals related with the item"""
  lostDealsCount: Int

  """The name of the person"""
  name: String

  """The date of the next activity associated with the deal"""
  nextActivityDate: String

  """The ID of the next activity associated with the deal"""
  nextActivityId: Int

  """The time of the next activity associated with the deal"""
  nextActivityTime: String

  """The count of notes related to the person"""
  notesCount: Int

  """The count of open deals related with the item"""
  openDealsCount: Int
  orgId: RelationshipOrganizationInfoItemWithActiveFlag

  """The name of the organization associated with the person"""
  orgName: String
  ownerId: OwnerId

  """The name of the owner associated with the person"""
  ownerName: String

  """
  A phone number supplied as a string or an array of phone objects related to the person. The structure of the array is as follows: `[{ "value": "12345", "primary": "true", "label": "mobile" }]`. Please note that only `value` is required.
  """
  phone: [Phone3ListItem]
  pictureId: PictureId

  """The count of related closed deals related with the item"""
  relatedClosedDealsCount: Int

  """The count of related lost deals related with the item"""
  relatedLostDealsCount: Int

  """The count of related open deals related with the item"""
  relatedOpenDealsCount: Int

  """The count of related won deals related with the item"""
  relatedWonDealsCount: Int

  """The count of undone activities related to the person"""
  undoneActivitiesCount: Int

  """
  The last updated date and time of the person. Format: YYYY-MM-DD HH:MM:SS
  """
  updateTime: String

  """The visibility group ID of who can see the person"""
  visibleTo: String

  """The count of won deals related with the item"""
  wonDealsCount: Int
}

type Email3ListItem {
  """
  The label that indicates the type of the email. (Possible values - work, home or other)
  """
  label: String

  """Boolean that indicates if email is primary for the person or not"""
  primary: Boolean

  """Email"""
  value: String
}

type RelationshipOrganizationInfoItemWithActiveFlag {
  """Whether the associated organization is active or not"""
  activeFlag: Boolean

  """The address of the organization"""
  address: String

  """The BCC email of the organization associated with the item"""
  ccEmail: String

  """The name of the organization associated with the item"""
  name: String

  """
  The ID of the owner of the organization that is associated with the item
  """
  ownerId: Int

  """
  The number of people connected with the organization that is associated with the item
  """
  peopleCount: Int

  """The ID of the organization"""
  value: Int
}

type OwnerId {
  """Whether the user is active or not"""
  activeFlag: Boolean

  """The email of the user"""
  email: String

  """Whether the user has picture or not. 0 = No picture, 1 = Has picture."""
  hasPic: Int

  """The ID of the user"""
  id: Int

  """The name of the user"""
  name: String

  """The user picture hash"""
  picHash: String

  """The ID of the owner"""
  value: Int
}

type Phone3ListItem {
  """
  The label that indicates the type of the phone number. (Possible values - work, home, mobile or other)
  """
  label: String

  """
  Boolean that indicates if phone number is primary for the person or not
  """
  primary: Boolean

  """The phone number"""
  value: String
}

type PictureId {
  """Whether the associated picture is active or not"""
  activeFlag: Boolean

  """The add time of the picture"""
  addTime: String

  """The ID of the user who added the picture"""
  addedByUserId: Int

  """The ID of the picture associated with the item"""
  id: Int

  """The ID of related item"""
  itemId: Int

  """The type of item the picture is related to"""
  itemType: String
  pictures: Pictures

  """The update time of the picture"""
  updateTime: String
}

type Pictures {
  """The URL of the 128*128 picture"""
  _128: String

  """The URL of the 512*512 picture"""
  _512: String
}

type GetDealUpdates {
  """The additional data of the list"""
  additionalData: AdditionalData3
  data: [Data24ListItem]
  relatedObjects: RelatedObjects4

  """If the response is successful or not"""
  success: Boolean
}

type Data24ListItem {
  """The data related to the update"""
  data: JSON

  """
  The type of the deal update. (Possible object types - dealChange, note, activity, mailMessage, invoice, document, file)
  """
  object: String

  """The creation date and time of the update"""
  timestamp: String
}

type GetDeals {
  """The additional data of the list"""
  additionalData: AdditionalData3

  """The array of deals"""
  data: [Data14ListItem]
  relatedObjects: RelatedObjects3

  """If the response is successful or not"""
  success: Boolean
}

enum OwnedByYou {
  _0
  _1
}

type GetDealsSummary {
  """The summary of deals"""
  data: Data18

  """If the response is successful or not"""
  success: Boolean
}

"""The summary of deals"""
type Data18 {
  """The total number of deals"""
  totalCount: Int

  """The total value of deals converted into the company default currency"""
  totalCurrencyConvertedValue: Float

  """
  The total converted value of deals formatted with the company default currency. E.g. US$5,100.96
  """
  totalCurrencyConvertedValueFormatted: String

  """
  The total weighted value of deals converted into the company default currency
  """
  totalWeightedCurrencyConvertedValue: Float

  """
  The total weighted value of deals formatted with the company default currency. E.g. US$5,100.96
  """
  totalWeightedCurrencyConvertedValueFormatted: String

  """The total values of the deals grouped by deal currency"""
  valuesTotal: ValuesTotal

  """
  The total weighted values of the deals grouped by deal currency. The weighted value is calculated as probability times deal value.
  """
  weightedValuesTotal: WeightedValuesTotal
}

"""The total values of the deals grouped by deal currency"""
type ValuesTotal {
  """The number of deals in the deal currency group"""
  count: Int

  """The total value of deals in the deal currency group"""
  value: Float

  """The total value of deals converted into the company default currency"""
  valueConverted: Float

  """The value_converted formatted with deal currency. E.g. US$50.10"""
  valueConvertedFormatted: String

  """The total value of deals formatted with deal currency. E.g. €50"""
  valueFormatted: String
}

"""
The total weighted values of the deals grouped by deal currency. The weighted value is calculated as probability times deal value.
"""
type WeightedValuesTotal {
  """The number of deals in the deal currency group"""
  count: Int

  """The total weighted value of the deals in the deal currency group"""
  value: Float

  """
  The total weighted value of the deals formatted with deal currency. E.g. €50
  """
  valueFormatted: String
}

enum Status4 {
  OPEN
  WON
  LOST
}

type GetDealsTimeline {
  """
  Open and won deals grouped into periods by defined interval, amount and date-type dealField (`field_key`)
  """
  data: Data19

  """If the response is successful or not"""
  success: Boolean
}

"""
Open and won deals grouped into periods by defined interval, amount and date-type dealField (`field_key`)
"""
type Data19 {
  deals: [Deals2ListItem]

  """The end date and time of the period"""
  periodEnd: String

  """The start date and time of the period"""
  periodStart: String

  """The total values of deals for the given period"""
  totals: Totals
}

type Deals2ListItem {
  """Whether the deal is active or not"""
  active: Boolean

  """The number of activities associated with the deal"""
  activitiesCount: Int

  """The creation date and time of the deal"""
  addTime: String

  """The BCC email of the deal"""
  ccEmail: String

  """The date and time of closing the deal"""
  closeTime: String

  """The ID of the deal creator"""
  creatorUserId: Int

  """The currency associated with the deal"""
  currency: String

  """Whether the deal is deleted or not"""
  deleted: Boolean

  """The number of completed activities associated with the deal"""
  doneActivitiesCount: Int

  """The number of emails associated with the deal"""
  emailMessagesCount: Int

  """The expected close date of the deal"""
  expectedCloseDate: String

  """The number of files associated with the deal"""
  filesCount: Int

  """The date and time of the first time changing the deal status as won"""
  firstWonTime: String

  """The number of followers associated with the deal"""
  followersCount: Int

  """The deal value formatted with selected currency. E.g. US$500"""
  formattedValue: String

  """The weighted_value formatted with selected currency. E.g. US$500"""
  formattedWeightedValue: String

  """The ID of the deal"""
  id: Int

  """The label assigned to the deal"""
  label: Int

  """The date of the last activity associated with the deal"""
  lastActivityDate: String

  """The ID of the last activity associated with the deal"""
  lastActivityId: Int

  """The date and time of the last incoming email associated with the deal"""
  lastIncomingMailTime: String

  """The date and time of the last outgoing email associated with the deal"""
  lastOutgoingMailTime: String

  """The reason for losing the deal"""
  lostReason: String

  """The date and time of changing the deal status as lost"""
  lostTime: String

  """The date of the next activity associated with the deal"""
  nextActivityDate: String

  """The duration of the next activity associated with the deal"""
  nextActivityDuration: String

  """The ID of the next activity associated with the deal"""
  nextActivityId: Int

  """The note of the next activity associated with the deal"""
  nextActivityNote: String

  """The subject of the next activity associated with the deal"""
  nextActivitySubject: String

  """The time of the next activity associated with the deal"""
  nextActivityTime: String

  """The type of the next activity associated with the deal"""
  nextActivityType: String

  """The number of notes associated with the deal"""
  notesCount: Int

  """If the organization that is associated with the deal is hidden or not"""
  orgHidden: Boolean

  """The ID of the organization associated with the deal"""
  orgId: Int

  """The name of the organization associated with the deal"""
  orgName: String

  """The name of the deal owner"""
  ownerName: String

  """The number of participants associated with the deal"""
  participantsCount: Int

  """If the person that is associated with the deal is hidden or not"""
  personHidden: Boolean

  """The ID of the person associated with the deal"""
  personId: Int

  """The name of the person associated with the deal"""
  personName: String

  """The ID of pipeline associated with the deal"""
  pipelineId: Int

  """The success probability percentage of the deal"""
  probability: Float

  """The number of products associated with the deal"""
  productsCount: Int

  """The date and time of changing the deal status as rotten"""
  rottenTime: String

  """The last updated date and time of the deal stage"""
  stageChangeTime: String

  """The ID of the deal stage"""
  stageId: Int

  """The order number of the deal stage associated with the deal"""
  stageOrderNr: Int

  """The status of the deal"""
  status: String

  """The title of the deal"""
  title: String

  """The number of incomplete activities associated with the deal"""
  undoneActivitiesCount: Int

  """The last updated date and time of the deal"""
  updateTime: String

  """The ID of the user"""
  userId: Int

  """The value of the deal"""
  value: Float

  """The visibility of the deal"""
  visibleTo: String

  """
  Probability times deal value. Probability can either be deal probability or if not set, then stage probability.
  """
  weightedValue: Float

  """The currency associated with the deal"""
  weightedValueCurrency: String

  """The date and time of changing the deal status as won"""
  wonTime: String
}

"""The total values of deals for the given period"""
type Totals {
  """The number of deals for the given period"""
  count: Int

  """The number of open deals for the given period"""
  openCount: Int

  """
  The total values of open deals for the given period grouped by deal currency
  """
  openValues: JSON

  """The total values of deals grouped by deal currency"""
  values: JSON

  """
  The total weighted values of open deals for the given period grouped by deal currency. The weighted value of a deal is calculated as probability times deal value.
  """
  weightedOpenValues: JSON

  """
  The total weighted values of deals for the given period grouped by deal currency. The weighted value of a deal is calculated as probability times deal value.
  """
  weightedValues: JSON

  """The number of won deals for the given period"""
  wonCount: Int

  """
  The total values of won deals for the given period grouped by deal currency
  """
  wonValues: JSON
}

enum ExcludeDeals {
  _0
  _1
}

enum Interval2 {
  DAY
  WEEK
  MONTH
  QUARTER
}

type GetFile {
  """The file data"""
  data: Data44

  """If the request was successful or not"""
  success: Boolean
}

"""The file data"""
type Data44 {
  """
  Whether the user is active or not. false = Not activated, true = Activated
  """
  activeFlag: Boolean

  """The ID of the activity to associate the file with"""
  activityId: Int

  """
  The date and time when the file was added/created. Format: YYYY-MM-DD HH:MM:SS
  """
  addTime: String

  """The ID of the inline attachment"""
  cid: String

  """The ID of the deal to associate the file with"""
  dealId: Int

  """The name of the deal associated with the file"""
  dealName: String

  """The description of the file"""
  description: String

  """The original name of the file"""
  fileName: String

  """The size of the file"""
  fileSize: Int

  """The ID of the file"""
  id: Int

  """Whether the file was uploaded as inline or not"""
  inlineFlag: Boolean

  """The ID of the lead to associate the file with"""
  leadId: ID

  """The name of the lead associated with the file"""
  leadName: String

  """The ID of the mail message to associate the file with"""
  mailMessageId: String

  """The ID of the mail template to associate the file with"""
  mailTemplateId: String

  """The visible name of the file"""
  name: String

  """The ID of the organization to associate the file with"""
  orgId: Int

  """The name of the organization associated with the file"""
  orgName: String

  """The ID of the person to associate the file with"""
  personId: Int

  """The name of the person associated with the file"""
  personName: String

  """The ID of the product to associate the file with"""
  productId: Int

  """The name of the product associated with the file"""
  productName: String

  """The ID of the remote item"""
  remoteId: String

  """
  The location type to send the file to. Only googledrive is supported at the moment.
  """
  remoteLocation: String

  """The location of the cloud storage"""
  s3Bucket: String

  """
  The last updated date and time of the file. Format: YYYY-MM-DD HH:MM:SS
  """
  updateTime: String

  """The URL of the download file"""
  url: String

  """The ID of the user to associate the file with"""
  userId: Int
}

type GetFiles {
  additionalData: AdditionalData6

  """The array of all uploaded files"""
  data: [Data43ListItem]

  """If the request was successful or not"""
  success: Boolean
}

type AdditionalData6 {
  """Pagination details of the list"""
  pagination: PaginationDetails
}

"""Pagination details of the list"""
type PaginationDetails {
  """Items shown per page"""
  limit: Int

  """If there are more list items in the collection than displayed or not"""
  moreItemsInCollection: Boolean

  """Next pagination start"""
  nextStart: Int

  """Pagination start"""
  start: Int
}

"""The file data"""
type Data43ListItem {
  """
  Whether the user is active or not. false = Not activated, true = Activated
  """
  activeFlag: Boolean

  """The ID of the activity to associate the file with"""
  activityId: Int

  """
  The date and time when the file was added/created. Format: YYYY-MM-DD HH:MM:SS
  """
  addTime: String

  """The ID of the inline attachment"""
  cid: String

  """The ID of the deal to associate the file with"""
  dealId: Int

  """The name of the deal associated with the file"""
  dealName: String

  """The description of the file"""
  description: String

  """The original name of the file"""
  fileName: String

  """The size of the file"""
  fileSize: Int

  """The ID of the file"""
  id: Int

  """Whether the file was uploaded as inline or not"""
  inlineFlag: Boolean

  """The ID of the lead to associate the file with"""
  leadId: ID

  """The name of the lead associated with the file"""
  leadName: String

  """The ID of the mail message to associate the file with"""
  mailMessageId: String

  """The ID of the mail template to associate the file with"""
  mailTemplateId: String

  """The visible name of the file"""
  name: String

  """The ID of the organization to associate the file with"""
  orgId: Int

  """The name of the organization associated with the file"""
  orgName: String

  """The ID of the person to associate the file with"""
  personId: Int

  """The name of the person associated with the file"""
  personName: String

  """The ID of the product to associate the file with"""
  productId: Int

  """The name of the product associated with the file"""
  productName: String

  """The ID of the remote item"""
  remoteId: String

  """
  The location type to send the file to. Only googledrive is supported at the moment.
  """
  remoteLocation: String

  """The location of the cloud storage"""
  s3Bucket: String

  """
  The last updated date and time of the file. Format: YYYY-MM-DD HH:MM:SS
  """
  updateTime: String

  """The URL of the download file"""
  url: String

  """The ID of the user to associate the file with"""
  userId: Int
}

type GetFilter {
  """The filter object"""
  data: Data50

  """If the response is successful or not"""
  success: Boolean
}

"""The filter object"""
type Data50 {
  """The active flag of the filter"""
  activeFlag: Boolean

  """The date and time when the filter was added"""
  addTime: String

  """Used by Pipedrive webapp"""
  customViewId: Int

  """The ID of the filter"""
  id: Int

  """The name of the filter"""
  name: String

  """The type of the item"""
  type: String

  """The date and time when the filter was updated"""
  updateTime: String

  """The owner of the filter"""
  userId: Int

  """The visibility group ID of who can see then filter"""
  visibleTo: Int
}

type GetFilters {
  """The array of filters"""
  data: [Data47ListItem]

  """If the response is successful or not"""
  success: Boolean
}

"""The filter object"""
type Data47ListItem {
  """The active flag of the filter"""
  activeFlag: Boolean

  """The date and time when the filter was added"""
  addTime: String

  """Used by Pipedrive webapp"""
  customViewId: Int

  """The ID of the filter"""
  id: Int

  """The name of the filter"""
  name: String

  """The type of the item"""
  type: String

  """The date and time when the filter was updated"""
  updateTime: String

  """The owner of the filter"""
  userId: Int

  """The visibility group ID of who can see then filter"""
  visibleTo: Int
}

enum Type {
  DEALS
  LEADS
  ORG
  PEOPLE
  PRODUCTS
  ACTIVITY
}

type GetGoalResult {
  data: Data53

  """If the request was successful or not"""
  success: Boolean
}

type Data53 {
  goal: Goal

  """The numeric progress of the goal"""
  progress: Int
}

type Goal {
  """Who the goal is assigned to"""
  assignee: Assignee2

  """The duration of the goal"""
  duration: Duration2

  """The expected outcome of the goal"""
  expectedOutcome: ExpectedOutcome2

  """The ID of the goal"""
  id: String

  """The interval of the goal"""
  interval: String

  """Whether the goal is currently active or not"""
  isActive: Boolean

  """The ID of the creator of the goal"""
  ownerId: Int

  """The IDs of the reports that belong to the goal"""
  reportIds: [String]

  """The title of the goal"""
  title: String

  """The type of the goal"""
  type: Type3
}

"""Who the goal is assigned to"""
type Assignee2 {
  """The ID of the goal assignee"""
  id: Int

  """The type of the assignee"""
  type: String
}

"""The duration of the goal"""
type Duration2 {
  """The end date of the goal"""
  end: String

  """The start date of the goal"""
  start: String
}

"""The expected outcome of the goal"""
type ExpectedOutcome2 {
  """The numeric target of the goal"""
  target: Int

  """The tracking metric of the goal"""
  trackingMetric: String
}

"""The type of the goal"""
type Type3 {
  """The name of the goal type"""
  name: String

  """The parameters that accompany the goal type"""
  params: Params
}

"""The parameters that accompany the goal type"""
type Params {
  """The IDs of activity types of the goal"""
  activityTypeId: [Int]

  """The IDs of pipelines of the goal"""
  pipelineId: [Int]
}

type GetGoals {
  data: Data52

  """If the request was successful or not"""
  success: Boolean
}

type Data52 {
  goals: [GoalsListItem]
}

type GoalsListItem {
  """Who the goal is assigned to"""
  assignee: Assignee2

  """The duration of the goal"""
  duration: Duration2

  """The expected outcome of the goal"""
  expectedOutcome: ExpectedOutcome2

  """The ID of the goal"""
  id: String

  """The interval of the goal"""
  interval: String

  """Whether the goal is currently active or not"""
  isActive: Boolean

  """The ID of the creator of the goal"""
  ownerId: Int

  """The IDs of the reports that belong to the goal"""
  reportIds: [String]

  """The title of the goal"""
  title: String

  """The type of the goal"""
  type: Type3
}

enum AssigneeType {
  PERSON
  COMPANY
  TEAM
}

enum ExpectedOutcomeTrackingMetric {
  QUANTITY
  SUM
}

enum IsActive {
  TRUE
  FALSE
}

enum TypeName {
  DEALS_WON
  DEALS_PROGRESSED
  ACTIVITIES_COMPLETED
  ACTIVITIES_ADDED
  DEALS_STARTED
}

type GetLeadLabels {
  data: [Data61ListItem]
  success: Boolean
}

type Data61ListItem {
  """
  The date and time of when the lead label was created. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
  """
  addTime: String

  """The color of the label. Only a subset of colors can be used."""
  color: Color

  """The unique ID of the lead label"""
  id: ID

  """The name of the lead label"""
  name: String

  """
  The date and time of when the lead label was last updated. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
  """
  updateTime: String
}

enum Color {
  GREEN
  BLUE
  RED
  YELLOW
  PURPLE
  GRAY
}

type GetLeadSources {
  data: [Data63ListItem]
  success: Boolean
}

type Data63ListItem {
  """The unique name of a lead source"""
  name: String
}

type GetLeads {
  """The additional data of the list"""
  additionalData: AdditionalData3
  data: [Data56ListItem]
  success: Boolean
}

type Data56ListItem {
  """
  The date and time of when the lead was created. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
  """
  addTime: String

  """The BCC email of the lead"""
  ccEmail: String

  """The ID of the user who created the lead"""
  creatorId: Int

  """
  The date of when the deal which will be created from the lead is expected to be closed. In ISO 8601 format: YYYY-MM-DD.
  """
  expectedCloseDate: String

  """The unique ID of the lead in the UUID format"""
  id: ID

  """A flag indicating whether the lead is archived or not"""
  isArchived: Boolean

  """The IDs of the lead labels which are associated with the lead"""
  labelIds: [ID]

  """The ID of the next activity associated with the lead"""
  nextActivityId: Int

  """The ID of an organization which this lead is linked to"""
  organizationId: Int

  """The ID of the user who owns the lead"""
  ownerId: Int

  """The ID of a person which this lead is linked to"""
  personId: Int

  """
  Defines where the lead comes from. Will be `API` if the lead was created through the Public API and will be `Manually created` if the lead was created manually through the UI.
  
  """
  sourceName: String

  """The title of the lead"""
  title: String

  """
  The date and time of when the lead was last updated. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
  """
  updateTime: String

  """The potential value of the lead"""
  value: Value

  """
  The visibility of the lead. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user.<table><tr><th>Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers (private)</td></tr><tr><td>`3`</td><td>Entire company (shared)</td></tr></table>
  """
  visibleTo: String

  """
  A flag indicating whether the lead was seen by someone in the Pipedrive UI
  """
  wasSeen: Boolean
}

"""The potential value of the lead"""
type Value {
  amount: Float!
  currency: String!
}

enum ArchivedStatus {
  ARCHIVED
  NOT_ARCHIVED
  ALL
}

enum Sort {
  ID
  TITLE
  OWNER_ID
  CREATOR_ID
  WAS_SEEN
  EXPECTED_CLOSE_DATE
  NEXT_ACTIVITY_ID
  ADD_TIME
  UPDATE_TIME
}

type GetMailThreads {
  """The array of mail threads"""
  data: [Data66ListItem]

  """If the response is successful or not"""
  success: Boolean
}

type Data66ListItem {
  """The connection account ID"""
  accountId: String

  """The time when the mail thread was inserted to database"""
  addTime: String

  """Whether all the mail thread messages have been sent"""
  allMessagesSentFlag: Float

  """Whether the mail thread is archived"""
  archivedFlag: Float

  """The ID of the deal"""
  dealId: Int

  """Status of the deal"""
  dealStatus: String

  """Whether the mail thread is deleted"""
  deletedFlag: Float

  """Parties of the drafted mail thread"""
  draftsParties: [JSON]

  """Whether the mail thread has been deleted externally"""
  externalDeletedFlag: Float

  """
  The time when the mail thread has had the first message received or created
  """
  firstMessageTimestamp: String

  """Whether the mail thread was initialized by others"""
  firstMessageToMeFlag: Float

  """Folders in which messages from thread are being stored"""
  folders: [String]

  """Whether the mail thread has an attachment"""
  hasAttachmentsFlag: Float

  """Whether the mail thread has any drafts"""
  hasDraftFlag: Float

  """Whether the mail thread has inline attachments"""
  hasInlineAttachmentsFlag: Float

  """Whether the mail thread has real attachments (which are not inline)"""
  hasRealAttachmentsFlag: Float

  """Whether the mail thread has messages sent"""
  hasSentFlag: Float

  """ID of the mail thread"""
  id: Int

  """The last time when the mail thread has had a message received"""
  lastMessageReceivedTimestamp: String

  """The last time when the mail thread has had a message sent"""
  lastMessageSentTimestamp: String

  """Last message timestamp"""
  lastMessageTimestamp: String

  """The ID of the lead"""
  leadId: ID

  """Whether the link tracking of the mail thread is enabled"""
  mailLinkTrackingEnabledFlag: Float

  """Mail tracking status"""
  mailTrackingStatus: String

  """An amount of messages"""
  messageCount: Int

  """Parties of the mail thread"""
  parties: Parties

  """Whether the mail thread is read"""
  readFlag: Float

  """Whether the mail thread is shared"""
  sharedFlag: Float

  """Whether one of the parties of the mail thread is Bcc"""
  smartBccFlag: Float

  """A snippet"""
  snippet: String

  """A snippet from a draft"""
  snippetDraft: String

  """A snippet from a message sent"""
  snippetSent: String

  """The subject"""
  subject: String

  """Whether the mail thread is synced"""
  syncedFlag: Float

  """The time when the mail thread was updated in database received"""
  updateTime: String

  """ID of the user whom mail message will be assigned to"""
  userId: Int

  """Version"""
  version: Float
}

"""Parties of the mail thread"""
type Parties {
  """Senders of the mail thread"""
  from: [From2ListItem]

  """Recipients of the mail thread"""
  to: [To2ListItem]
}

enum Folder {
  INBOX
  DRAFTS
  SENT
  ARCHIVE
}

type GetNoteFields {
  """The additional data of the list"""
  additionalData: AdditionalData3
  data: [Data74ListItem]

  """If the response is successful or not"""
  success: Boolean
}

type Data74ListItem {
  """The active flag of the field"""
  activeFlag: Boolean

  """Not used"""
  bulkEditAllowed: Boolean

  """The edit flag of the field"""
  editFlag: Boolean

  """
  The type of the field<table><tr><th>Value</th><th>Description</th></tr><tr><td>`address`</td><td>Address field (has multiple subfields, autocompleted by Google Maps)</td></tr><tr><td>`date`</td><td>Date (format YYYY-MM-DD)</td></tr><tr><td>`daterange`</td><td>Date-range field (has a start date and end date value, both YYYY-MM-DD)</td></tr><tr><td>`double`</td><td>Numeric value</td></tr><tr><td>`enum`</td><td>Options field with a single possible chosen option</td></tr><tr></tr><tr><td>`monetary`</td><td>Monetary field (has a numeric value and a currency value)</td></tr><tr><td>`org`</td><td>Organization field (contains an organization ID which is stored on the same account)</td></tr><tr><td>`people`</td><td>Person field (contains a person ID which is stored on the same account)</td></tr><tr><td>`phone`</td><td>Phone field (up to 255 numbers and/or characters)</td></tr><tr><td>`set`</td><td>Options field with a possibility of having multiple chosen options</td></tr><tr><td>`text`</td><td>Long text (up to 65k characters)</td></tr><tr><td>`time`</td><td>Time field (format HH:MM:SS)</td></tr><tr><td>`timerange`</td><td>Time-range field (has a start time and end time value, both HH:MM:SS)</td></tr><tr><td>`user`</td><td>User field (contains a user ID of another Pipedrive user)</td></tr><tr><td>`varchar`</td><td>Text (up to 255 characters)</td></tr><tr><td>`varchar_auto`</td><td>Autocomplete text (up to 255 characters)</td></tr><tr><td>`visible_to`</td><td>System field that keeps item's visibility setting</td></tr></table>
  """
  fieldType: FieldType

  """The ID of the field"""
  id: Int

  """The key of the field"""
  key: String

  """Whether or not the field is mandatory"""
  mandatoryFlag: Boolean

  """The name of the field"""
  name: String

  """
  The options of the field. When there are no options, `null` is returned.
  """
  options: [Options2ListItem]
}

enum FieldType {
  ADDRESS
  DATE
  DATERANGE
  DOUBLE
  ENUM
  MONETARY
  ORG
  PEOPLE
  PHONE
  SET
  TEXT
  TIME
  TIMERANGE
  USER
  VARCHAR
  VARCHAR_AUTO
  VISIBLE_TO
}

type Options2ListItem {
  id: Int
  label: String
}

type GetNotes {
  additionalData: AdditionalData7

  """The array of notes"""
  data: [Data70ListItem]

  """If the request was successful or not"""
  success: Boolean
}

type Data70ListItem {
  """Whether the note is active or deleted"""
  activeFlag: Boolean

  """The creation date and time of the note"""
  addTime: String

  """
  The content of the note in HTML format. Subject to sanitization on the back-end.
  """
  content: String

  """The deal this note is attached to"""
  deal: Deal2

  """The ID of the deal the note is attached to"""
  dealId: Int

  """The ID of the note"""
  id: Int

  """The ID of the user who last updated the note"""
  lastUpdateUserId: Int

  """The ID of the lead the note is attached to"""
  leadId: ID

  """The ID of the organization the note is attached to"""
  orgId: Int

  """The organization the note is attached to"""
  organization: Organization6

  """The person the note is attached to"""
  person: Person6

  """The ID of the person the note is attached to"""
  personId: Int

  """If true, the results are filtered by note to deal pinning state"""
  pinnedToDealFlag: Boolean

  """
  If true, the results are filtered by note to organization pinning state
  """
  pinnedToOrganizationFlag: Boolean

  """If true, the results are filtered by note to person pinning state"""
  pinnedToPersonFlag: Boolean

  """The last updated date and time of the note"""
  updateTime: String

  """The user who created the note"""
  user: User3

  """The ID of the note creator"""
  userId: Int
}

"""The deal this note is attached to"""
type Deal2 {
  """The title of the deal this note is attached to"""
  title: String
}

"""The organization the note is attached to"""
type Organization6 {
  """The name of the organization the note is attached to"""
  name: String
}

"""The person the note is attached to"""
type Person6 {
  """The name of the person the note is attached to"""
  name: String
}

"""The user who created the note"""
type User3 {
  """The email of the note creator"""
  email: String

  """The URL of the note creator avatar picture"""
  iconUrl: String

  """Whether the note is created by you or not"""
  isYou: Boolean

  """The name of the note creator"""
  name: String
}

enum PinnedToDealFlag {
  _0
  _1
}

enum PinnedToLeadFlag {
  _0
  _1
}

enum PinnedToOrganizationFlag {
  _0
  _1
}

enum PinnedToPersonFlag {
  _0
  _1
}

type GetOneMailThread {
  """The mail thread object"""
  data: Data68

  """If the response is successful or not"""
  success: Boolean
}

"""The mail thread object"""
type Data68 {
  """The connection account ID"""
  accountId: String

  """The time when the mail thread was inserted to database"""
  addTime: String

  """Whether all the mail thread messages have been sent"""
  allMessagesSentFlag: Float

  """Whether the mail thread is archived"""
  archivedFlag: Float

  """The ID of the deal"""
  dealId: Int

  """Status of the deal"""
  dealStatus: String

  """Whether the mail thread is deleted"""
  deletedFlag: Float

  """Parties of the drafted mail thread"""
  draftsParties: [JSON]

  """Whether the mail thread has been deleted externally"""
  externalDeletedFlag: Float

  """
  The time when the mail thread has had the first message received or created
  """
  firstMessageTimestamp: String

  """Whether the mail thread was initialized by others"""
  firstMessageToMeFlag: Float

  """Folders in which messages from thread are being stored"""
  folders: [String]

  """Whether the mail thread has an attachment"""
  hasAttachmentsFlag: Float

  """Whether the mail thread has any drafts"""
  hasDraftFlag: Float

  """Whether the mail thread has inline attachments"""
  hasInlineAttachmentsFlag: Float

  """Whether the mail thread has real attachments (which are not inline)"""
  hasRealAttachmentsFlag: Float

  """Whether the mail thread has messages sent"""
  hasSentFlag: Float

  """ID of the mail thread"""
  id: Int

  """The last time when the mail thread has had a message received"""
  lastMessageReceivedTimestamp: String

  """The last time when the mail thread has had a message sent"""
  lastMessageSentTimestamp: String

  """Last message timestamp"""
  lastMessageTimestamp: String

  """The ID of the lead"""
  leadId: ID

  """Whether the link tracking of the mail thread is enabled"""
  mailLinkTrackingEnabledFlag: Float

  """Mail tracking status"""
  mailTrackingStatus: String

  """An amount of messages"""
  messageCount: Int

  """Parties of the mail thread"""
  parties: Parties

  """Whether the mail thread is read"""
  readFlag: Float

  """Whether the mail thread is shared"""
  sharedFlag: Float

  """Whether one of the parties of the mail thread is Bcc"""
  smartBccFlag: Float

  """A snippet"""
  snippet: String

  """A snippet from a draft"""
  snippetDraft: String

  """A snippet from a message sent"""
  snippetSent: String

  """The subject"""
  subject: String

  """Whether the mail thread is synced"""
  syncedFlag: Float

  """The time when the mail thread was updated in database received"""
  updateTime: String

  """ID of the user whom mail message will be assigned to"""
  userId: Int

  """Version"""
  version: Float
}

type GetOrganization {
  additionalData: AdditionalData8
  data: OrganizationItem
  relatedObjects: RelatedObjects7

  """If the response is successful or not"""
  success: Boolean
}

type AdditionalData8 {
  """Dropbox email for the organization"""
  dropboxEmail: String

  """The follower that is associated with the item"""
  followers: Followers
}

"""The follower that is associated with the item"""
type Followers {
  """The user ID of the follower"""
  fOLLOWERUSERID: FOLLOWERUSERID
}

"""The user ID of the follower"""
type FOLLOWERUSERID {
  """The email of the follower"""
  email: String

  """The ID of the follower associated with the item"""
  id: Int

  """The name of the follower"""
  name: String

  """The follower picture hash"""
  picHash: String

  """The user ID of the follower"""
  userId: Int
}

type OrganizationItem {
  """Whether the organization is active or not"""
  activeFlag: Boolean

  """The count of activities related to the organization"""
  activitiesCount: Int

  """The creation date and time of the organization"""
  addTime: String

  """The full address of the organization"""
  address: String

  """The level 1 admin area of the organization location"""
  addressAdminAreaLevel1: String

  """The level 2 admin area of the organization location"""
  addressAdminAreaLevel2: String

  """The country of the organization location"""
  addressCountry: String

  """The formatted organization location"""
  addressFormattedAddress: String

  """The locality of the organization location"""
  addressLocality: String

  """The postal code of the organization location"""
  addressPostalCode: String

  """The route of the organization location"""
  addressRoute: String

  """The street number of the organization location"""
  addressStreetNumber: String

  """The sub-locality of the organization location"""
  addressSublocality: String

  """The sub-premise of the organization location"""
  addressSubpremise: String

  """The BCC email of the organization"""
  ccEmail: String

  """The count of closed deals related with the item"""
  closedDealsCount: Int

  """The ID of the company related to the organization"""
  companyId: Int

  """The country code of the organization"""
  countryCode: String

  """The count of done activities related to the organization"""
  doneActivitiesCount: Int

  """
  If the company ID of the organization and company ID of the request is same or not
  """
  editName: Boolean

  """The count of email messages related to the organization"""
  emailMessagesCount: Int

  """The count of files related to the organization"""
  filesCount: Int

  """The first character of the organization name"""
  firstChar: String

  """The count of followers related to the organization"""
  followersCount: Int

  """The ID of the organization"""
  id: Int

  """The ID of the label"""
  label: Int

  """
  Please refer to response schema of <a href="https://developers.pipedrive.com/docs/api/v1/Activities#getActivity">Activity</a>
  """
  lastActivity: JSON

  """The date of the last activity associated with the deal"""
  lastActivityDate: String

  """The ID of the last activity associated with the deal"""
  lastActivityId: Int

  """The count of lost deals related with the item"""
  lostDealsCount: Int

  """The name of the organization"""
  name: String

  """
  Please refer to response schema of <a href="https://developers.pipedrive.com/docs/api/v1/Activities#getActivity">Activity</a>
  """
  nextActivity: JSON

  """The date of the next activity associated with the deal"""
  nextActivityDate: String

  """The ID of the next activity associated with the deal"""
  nextActivityId: Int

  """The time of the next activity associated with the deal"""
  nextActivityTime: String

  """The count of notes related to the organization"""
  notesCount: Int

  """The count of open deals related with the item"""
  openDealsCount: Int
  ownerId: OwnerId

  """The name of the organization owner"""
  ownerName: String

  """The count of persons related to the organization"""
  peopleCount: Int
  pictureId: PictureId2

  """The count of related closed deals related with the item"""
  relatedClosedDealsCount: Int

  """The count of related lost deals related with the item"""
  relatedLostDealsCount: Int

  """The count of related open deals related with the item"""
  relatedOpenDealsCount: Int

  """The count of related won deals related with the item"""
  relatedWonDealsCount: Int

  """The count of undone activities related to the organization"""
  undoneActivitiesCount: Int

  """The last updated date and time of the organization"""
  updateTime: String

  """The visibility group ID of who can see the organization"""
  visibleTo: String

  """The count of won deals related with the item"""
  wonDealsCount: Int
}

type PictureId2 {
  """Whether the associated picture is active or not"""
  activeFlag: Boolean

  """The add time of the picture"""
  addTime: String

  """The ID of the user who added the picture"""
  addedByUserId: Int

  """The ID of related item"""
  itemId: Int

  """The type of item the picture is related to"""
  itemType: String
  pictures: Pictures

  """The update time of the picture"""
  updateTime: String

  """The ID of the picture associated with the item"""
  value: Int
}

type RelatedObjects7 {
  organization: Organization

  """The picture that is associated with the item"""
  picture: Picture
  user: User
}

"""The picture that is associated with the item"""
type Picture {
  """The ID of the picture"""
  pICTUREID: PICTUREID
}

"""The ID of the picture"""
type PICTUREID {
  """Whether the associated picture is active or not"""
  activeFlag: Boolean

  """The add time of the picture"""
  addTime: String

  """The ID of the user who added the picture"""
  addedByUserId: Int

  """The ID of the picture associated with the item"""
  id: Int

  """The ID of related item"""
  itemId: Int

  """The type of item the picture is related to"""
  itemType: String
  pictures: Pictures

  """The update time of the picture"""
  updateTime: String
}

type ListPersons {
  """The additional data of the list"""
  additionalData: AdditionalData3

  """The array of persons"""
  data: [Data35ListItem]
  relatedObjects: RelatedObjects5

  """If the response is successful or not"""
  success: Boolean
}

type Data35ListItem {
  """Whether the person is active or not"""
  activeFlag: Boolean

  """The count of activities related to the person"""
  activitiesCount: Int

  """
  The date and time when the person was added/created. Format: YYYY-MM-DD HH:MM:SS
  """
  addTime: String

  """The BCC email associated with the person"""
  ccEmail: String

  """The count of closed deals related with the item"""
  closedDealsCount: Int

  """The ID of the company related to the person"""
  companyId: Int

  """The count of done activities related to the person"""
  doneActivitiesCount: Int

  """
  An email address as a string or an array of email objects related to the person. The structure of the array is as follows: `[{ "value": "mail@example.com", "primary": "true", "label": "main" } ]`. Please note that only `value` is required.
  """
  email: [Email3ListItem]

  """The count of email messages related to the person"""
  emailMessagesCount: Int

  """The count of files related to the person"""
  filesCount: Int

  """The first letter of the name of the person"""
  firstChar: String

  """The first name of the person"""
  firstName: String

  """The count of followers related to the person"""
  followersCount: Int

  """The ID of the person"""
  id: Int

  """The label assigned to the person"""
  label: Int

  """The date of the last activity associated with the deal"""
  lastActivityDate: String

  """The ID of the last activity associated with the deal"""
  lastActivityId: Int

  """
  The date and time of the last incoming email associated with the person
  """
  lastIncomingMailTime: String

  """The last name of the person"""
  lastName: String

  """
  The date and time of the last outgoing email associated with the person
  """
  lastOutgoingMailTime: String

  """The count of lost deals related with the item"""
  lostDealsCount: Int

  """The name of the person"""
  name: String

  """The date of the next activity associated with the deal"""
  nextActivityDate: String

  """The ID of the next activity associated with the deal"""
  nextActivityId: Int

  """The time of the next activity associated with the deal"""
  nextActivityTime: String

  """The count of notes related to the person"""
  notesCount: Int

  """The count of open deals related with the item"""
  openDealsCount: Int
  orgId: RelationshipOrganizationInfoItemWithActiveFlag

  """The name of the organization associated with the person"""
  orgName: String
  ownerId: OwnerId

  """The name of the owner associated with the person"""
  ownerName: String

  """
  A phone number supplied as a string or an array of phone objects related to the person. The structure of the array is as follows: `[{ "value": "12345", "primary": "true", "label": "mobile" }]`. Please note that only `value` is required.
  """
  phone: [Phone3ListItem]
  pictureId: PictureId

  """The count of related closed deals related with the item"""
  relatedClosedDealsCount: Int

  """The count of related lost deals related with the item"""
  relatedLostDealsCount: Int

  """The count of related open deals related with the item"""
  relatedOpenDealsCount: Int

  """The count of related won deals related with the item"""
  relatedWonDealsCount: Int

  """The count of undone activities related to the person"""
  undoneActivitiesCount: Int

  """
  The last updated date and time of the person. Format: YYYY-MM-DD HH:MM:SS
  """
  updateTime: String

  """The visibility group ID of who can see the person"""
  visibleTo: String

  """The count of won deals related with the item"""
  wonDealsCount: Int
}

type RelatedObjects5 {
  organization: Organization2
  user: User
}

type GetOrganizationRelationship {
  data: OrganizationRelationshipWithCalculatedFields
  relatedObjects: RelatedObjects10

  """If the response is successful or not"""
  success: Boolean
}

type OrganizationRelationshipWithCalculatedFields {
  """Whether the relationship is active or not"""
  activeFlag: String

  """The creation date and time of the relationship"""
  addTime: String

  """The ID of the linked organization"""
  calculatedRelatedOrgId: Int

  """The calculated type of the relationship with the linked organization"""
  calculatedType: String

  """The ID of the organization relationship"""
  id: Int
  relLinkedOrgId: RelLinkedOrgId
  relOwnerOrgId: RelOwnerOrgId

  """The type of the relationship"""
  type: String

  """The last updated date and time of the relationship"""
  updateTime: String
}

type RelLinkedOrgId {
  """The address of the organization"""
  address: String

  """The BCC email of the organization associated with the item"""
  ccEmail: String

  """The name of the organization associated with the item"""
  name: String

  """
  The ID of the owner of the organization that is associated with the item
  """
  ownerId: Int

  """
  The number of people connected with the organization that is associated with the item
  """
  peopleCount: Int

  """The ID of the organization"""
  value: Int
}

type RelOwnerOrgId {
  """The address of the organization"""
  address: String

  """The BCC email of the organization associated with the item"""
  ccEmail: String

  """The name of the organization associated with the item"""
  name: String

  """
  The ID of the owner of the organization that is associated with the item
  """
  ownerId: Int

  """
  The number of people connected with the organization that is associated with the item
  """
  peopleCount: Int

  """The ID of the organization"""
  value: Int
}

type RelatedObjects10 {
  organization: Organization
}

type GetOrganizationRelationships {
  """The additional data of the list"""
  additionalData: AdditionalData3

  """The array of organization relationships"""
  data: [Data85ListItem]
  relatedObjects: RelatedObjects10

  """If the response is successful or not"""
  success: Boolean
}

type Data85ListItem {
  """Whether the relationship is active or not"""
  activeFlag: String

  """The creation date and time of the relationship"""
  addTime: String

  """The ID of the linked organization"""
  calculatedRelatedOrgId: Int

  """The calculated type of the relationship with the linked organization"""
  calculatedType: String

  """The ID of the organization relationship"""
  id: Int
  relLinkedOrgId: RelLinkedOrgId
  relOwnerOrgId: RelOwnerOrgId

  """The name of the linked organization"""
  relatedOrganizationName: String

  """The type of the relationship"""
  type: String

  """The last updated date and time of the relationship"""
  updateTime: String
}

type GetOrganizations {
  additionalData: AdditionalData

  """The array of organizations"""
  data: [Data76ListItem]
  relatedObjects: RelatedObjects7

  """If the response is successful or not"""
  success: Boolean
}

type Data76ListItem {
  """Whether the organization is active or not"""
  activeFlag: Boolean

  """The count of activities related to the organization"""
  activitiesCount: Int

  """The creation date and time of the organization"""
  addTime: String

  """The full address of the organization"""
  address: String

  """The level 1 admin area of the organization location"""
  addressAdminAreaLevel1: String

  """The level 2 admin area of the organization location"""
  addressAdminAreaLevel2: String

  """The country of the organization location"""
  addressCountry: String

  """The formatted organization location"""
  addressFormattedAddress: String

  """The locality of the organization location"""
  addressLocality: String

  """The postal code of the organization location"""
  addressPostalCode: String

  """The route of the organization location"""
  addressRoute: String

  """The street number of the organization location"""
  addressStreetNumber: String

  """The sub-locality of the organization location"""
  addressSublocality: String

  """The sub-premise of the organization location"""
  addressSubpremise: String

  """The BCC email of the organization"""
  ccEmail: String

  """The count of closed deals related with the item"""
  closedDealsCount: Int

  """The ID of the company related to the organization"""
  companyId: Int

  """The country code of the organization"""
  countryCode: String

  """The count of done activities related to the organization"""
  doneActivitiesCount: Int

  """The count of email messages related to the organization"""
  emailMessagesCount: Int

  """The count of files related to the organization"""
  filesCount: Int

  """The first character of the organization name"""
  firstChar: String

  """The count of followers related to the organization"""
  followersCount: Int

  """The ID of the organization"""
  id: Int

  """The ID of the label"""
  label: Int

  """The date of the last activity associated with the deal"""
  lastActivityDate: String

  """The ID of the last activity associated with the deal"""
  lastActivityId: Int

  """The count of lost deals related with the item"""
  lostDealsCount: Int

  """The name of the organization"""
  name: String

  """The date of the next activity associated with the deal"""
  nextActivityDate: String

  """The ID of the next activity associated with the deal"""
  nextActivityId: Int

  """The time of the next activity associated with the deal"""
  nextActivityTime: String

  """The count of notes related to the organization"""
  notesCount: Int

  """The count of open deals related with the item"""
  openDealsCount: Int
  ownerId: OwnerId

  """The name of the organization owner"""
  ownerName: String

  """The count of persons related to the organization"""
  peopleCount: Int
  pictureId: PictureId2

  """The count of related closed deals related with the item"""
  relatedClosedDealsCount: Int

  """The count of related lost deals related with the item"""
  relatedLostDealsCount: Int

  """The count of related open deals related with the item"""
  relatedOpenDealsCount: Int

  """The count of related won deals related with the item"""
  relatedWonDealsCount: Int

  """The count of undone activities related to the organization"""
  undoneActivitiesCount: Int

  """The last updated date and time of the organization"""
  updateTime: String

  """The visibility group ID of who can see the organization"""
  visibleTo: String

  """The count of won deals related with the item"""
  wonDealsCount: Int
}

type GetPermissionSets {
  """The array of permission set"""
  data: [Data88ListItem]

  """If the response is successful or not"""
  success: Boolean
}

type Data88ListItem {
  """The app that permission set belongs to"""
  app: App

  """The number of users assigned to this permission set"""
  assignmentCount: Int

  """The description of the permission set"""
  description: String

  """The ID of user permission set"""
  id: String

  """The name of the permission set"""
  name: String

  """The type of permission set"""
  type: Type5
}

enum App {
  SALES
  PROJECTS
  CAMPAIGNS
  GLOBAL
  ACCOUNT_SETTINGS
}

enum Type5 {
  ADMIN
  MANAGER
  REGULAR
  CUSTOM
}

type GetPerson {
  additionalData: AdditionalData9
  data: PersonItem
  relatedObjects: RelatedObjects7

  """If the response is successful or not"""
  success: Boolean
}

type AdditionalData9 {
  """Dropbox email for the person"""
  dropboxEmail: String
}

type PersonItem {
  """Whether the person is active or not"""
  activeFlag: Boolean

  """The count of activities related to the person"""
  activitiesCount: Int

  """
  The date and time when the person was added/created. Format: YYYY-MM-DD HH:MM:SS
  """
  addTime: String

  """The BCC email associated with the person"""
  ccEmail: String

  """The count of closed deals related with the item"""
  closedDealsCount: Int

  """The ID of the company related to the person"""
  companyId: Int

  """The count of done activities related to the person"""
  doneActivitiesCount: Int

  """
  An email address as a string or an array of email objects related to the person. The structure of the array is as follows: `[{ "value": "mail@example.com", "primary": "true", "label": "main" } ]`. Please note that only `value` is required.
  """
  email: [Email3ListItem]

  """The count of email messages related to the person"""
  emailMessagesCount: Int

  """The count of files related to the person"""
  filesCount: Int

  """The first letter of the name of the person"""
  firstChar: String

  """The first name of the person"""
  firstName: String

  """The count of followers related to the person"""
  followersCount: Int

  """The ID of the person"""
  id: Int

  """The label assigned to the person"""
  label: Int

  """The date of the last activity associated with the deal"""
  lastActivityDate: String

  """The ID of the last activity associated with the deal"""
  lastActivityId: Int

  """
  The date and time of the last incoming email associated with the person
  """
  lastIncomingMailTime: String

  """The last name of the person"""
  lastName: String

  """
  The date and time of the last outgoing email associated with the person
  """
  lastOutgoingMailTime: String

  """The count of lost deals related with the item"""
  lostDealsCount: Int

  """The name of the person"""
  name: String

  """The date of the next activity associated with the deal"""
  nextActivityDate: String

  """The ID of the next activity associated with the deal"""
  nextActivityId: Int

  """The time of the next activity associated with the deal"""
  nextActivityTime: String

  """The count of notes related to the person"""
  notesCount: Int

  """The count of open deals related with the item"""
  openDealsCount: Int
  orgId: RelationshipOrganizationInfoItemWithActiveFlag

  """The name of the organization associated with the person"""
  orgName: String
  ownerId: OwnerId

  """The name of the owner associated with the person"""
  ownerName: String

  """
  A phone number supplied as a string or an array of phone objects related to the person. The structure of the array is as follows: `[{ "value": "12345", "primary": "true", "label": "mobile" }]`. Please note that only `value` is required.
  """
  phone: [Phone3ListItem]
  pictureId: PictureId

  """The count of related closed deals related with the item"""
  relatedClosedDealsCount: Int

  """The count of related lost deals related with the item"""
  relatedLostDealsCount: Int

  """The count of related open deals related with the item"""
  relatedOpenDealsCount: Int

  """The count of related won deals related with the item"""
  relatedWonDealsCount: Int

  """The count of undone activities related to the person"""
  undoneActivitiesCount: Int

  """
  The last updated date and time of the person. Format: YYYY-MM-DD HH:MM:SS
  """
  updateTime: String

  """The visibility group ID of who can see the person"""
  visibleTo: String

  """The count of won deals related with the item"""
  wonDealsCount: Int
}

type GetPersonProducts {
  additionalData: AdditionalData

  """The array of deal products"""
  data: [Data96ListItem]

  """If the response is successful or not"""
  success: Boolean
}

type Data96ListItem {
  dEALID: DEALID2
}

type DEALID2 {
  deal: Deal3
  product: Product2
}

type Deal3 {
  """Whether the deal is active or not"""
  active: Boolean

  """The number of activities associated with the deal"""
  activitiesCount: Int

  """The creation date and time of the deal"""
  addTime: String

  """The date and time of closing the deal"""
  closeTime: String

  """The ID of the company"""
  companyId: Int

  """The ID of the deal creator"""
  creatorUserId: Int

  """The currency associated with the deal"""
  currency: String

  """Whether the deal is deleted or not"""
  deleted: Boolean

  """The number of completed activities associated with the deal"""
  doneActivitiesCount: Int

  """The number of emails associated with the deal"""
  emailMessagesCount: Int

  """The expected close date of the deal"""
  expectedCloseDate: String

  """The number of files associated with the deal"""
  filesCount: Int

  """The first creation date and time of the deal"""
  firstAddTime: String

  """The date and time of the first time changing the deal status as won"""
  firstWonTime: String

  """The number of followers associated with the deal"""
  followersCount: Int

  """The ID of the deal"""
  id: Int

  """The label assigned to the deal"""
  label: String

  """The date of the last activity associated with the deal"""
  lastActivityDate: String

  """The ID of the last activity associated with the deal"""
  lastActivityId: Int

  """The date and time of the last incoming email associated with the deal"""
  lastIncomingMailTime: String

  """The date and time of the last outgoing email associated with the deal"""
  lastOutgoingMailTime: String

  """The reason for losing the deal"""
  lostReason: String

  """The date and time of changing the deal status as lost"""
  lostTime: String

  """The date of the next activity associated with the deal"""
  nextActivityDate: String

  """The ID of the next activity associated with the deal"""
  nextActivityId: Int

  """The time of the next activity associated with the deal"""
  nextActivityTime: String

  """The number of notes associated with the deal"""
  notesCount: Int

  """The ID of the organization associated with the deal"""
  orgId: Int

  """The number of participants associated with the deal"""
  participantsCount: Int

  """The ID of the person associated with the deal"""
  personId: Int

  """The ID of pipeline associated with the deal"""
  pipelineId: Int

  """The success probability percentage of the deal"""
  probability: Float

  """The number of products associated with the deal"""
  productsCount: Int

  """The last updated date and time of the deal stage"""
  stageChangeTime: String

  """The ID of the deal stage"""
  stageId: Int

  """The status of the deal"""
  status: String

  """The title of the deal"""
  title: String

  """The number of incomplete activities associated with the deal"""
  undoneActivitiesCount: Int

  """The last updated date and time of the deal"""
  updateTime: String

  """The ID of the user"""
  userId: Int

  """The value of the deal"""
  value: Float

  """The visibility of the deal"""
  visibleTo: String

  """The date and time of changing the deal status as won"""
  wonTime: String
}

type Product2 {
  """Whether this product will be made active or not"""
  activeFlag: NumberBooleanDefault1

  """The date and time when the product was added to the deal"""
  addTime: String

  """The category of the product"""
  category: String

  """The product code"""
  code: String

  """The ID of the company"""
  companyId: Int

  """The ID of the deal"""
  dealId: Int

  """The description of the product"""
  description: String

  """The count of files"""
  filesCount: Int

  """The first letter of the product name"""
  firstChar: String

  """The ID of the product"""
  id: Int

  """The name of the product"""
  name: String

  """
  The ID of the user who will be marked as the owner of this product. When omitted, the authorized user ID will be used.
  """
  ownerId: Int

  """Whether this product can be selected in deals or not"""
  selectable: Selectable2

  """The tax percentage"""
  tax: Float

  """The unit in which this product is sold"""
  unit: String

  """The date and time when the product was updated to the deal"""
  updateTime: String

  """
  The visibility of the product. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user.<table><tr><th>Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers (private)</td></tr><tr><td>`3`</td><td>Entire company (shared)</td></tr></table>
  """
  visibleTo: String
}

enum NumberBooleanDefault1 {
  _0
  _1
}

enum Selectable2 {
  _0
  _1
}

type OrganizationPermittedUsers {
  """The list of permitted user IDs"""
  data: [Float]

  """If the response is successful or not"""
  success: Boolean
}

type GetPersons {
  additionalData: AdditionalData

  """The array of persons"""
  data: [Data35ListItem]
  relatedObjects: RelatedObjects7

  """If the response is successful or not"""
  success: Boolean
}

type GetPipeline {
  """The pipeline object"""
  data: PipelineDetails

  """If the response is successful or not"""
  success: Boolean
}

"""The pipeline object"""
type PipelineDetails {
  """Whether this pipeline will be made inactive (hidden) or active"""
  active: Boolean

  """The pipeline creation time. Format: YYYY-MM-DD HH:MM:SS."""
  addTime: String

  """Whether deal probability is disabled or enabled for this pipeline"""
  dealProbability: Boolean

  """Deals summary"""
  dealsSummary: DealsSummary

  """The ID of the pipeline"""
  id: Int

  """The name of the pipeline"""
  name: String

  """
  Defines the order of pipelines. First order (`order_nr=0`) is the default pipeline.
  """
  orderNr: Int

  """A boolean that shows if the pipeline is selected from a filter or not"""
  selected: Boolean

  """The pipeline update time. Format: YYYY-MM-DD HH:MM:SS."""
  updateTime: String

  """The pipeline title displayed in the URL"""
  urlTitle: String
}

"""Deals summary"""
type DealsSummary {
  """The currency count summary"""
  perCurrency: PerCurrency

  """Full currency summaries"""
  perCurrencyFull: PerCurrencyFull

  """The stage objects containing deals currency information"""
  perStages: PerStages

  """Deals count"""
  totalCount: Int
}

"""The currency count summary"""
type PerCurrency {
  """
  Deals count per currency. This parameter is dynamic and changes according to `currency_id` value.
  """
  cURRENCYID: Int
}

"""Full currency summaries"""
type PerCurrencyFull {
  """
  The currency summary. This parameter is dynamic and changes according to `currency_id` value.
  """
  cURRENCYID: CURRENCYID2
}

"""
The currency summary. This parameter is dynamic and changes according to `currency_id` value.
"""
type CURRENCYID2 {
  """Deals count per currency"""
  count: Int

  """Deals value per currency"""
  value: Int
}

"""The stage objects containing deals currency information"""
type PerStages {
  """
  The currency summaries per stage. This parameter is dynamic and changes according to `stage_id` value.
  """
  sTAGEID: STAGEID
}

"""
The currency summaries per stage. This parameter is dynamic and changes according to `stage_id` value.
"""
type STAGEID {
  """
  The currency summary. This parameter is dynamic and changes according to `currency_id` value.
  """
  cURRENCYID: CURRENCYID
}

"""
The currency summary. This parameter is dynamic and changes according to `currency_id` value.
"""
type CURRENCYID {
  """Deals count per currency"""
  count: Int

  """Deals value per currency"""
  value: Int

  """Deals value formatted per currency"""
  valueFormatted: String

  """Deals weighted value per currency"""
  weightedValue: Int

  """Deals weighted value formatted per currency"""
  weightedValueFormatted: String
}

type GetPipelineConversionStatistics {
  """The pipeline object"""
  data: Data101

  """If the response is successful or not"""
  success: Boolean
}

"""The pipeline object"""
type Data101 {
  """The lost conversion"""
  lostConversion: Int

  """The stage conversions"""
  stageConversions: [StageConversionsListItem]

  """The won conversion"""
  wonConversion: Int
}

type StageConversionsListItem {
  """The conversion rate"""
  conversionRate: Int

  """The stage ID from where conversion starts"""
  fromStageId: Int

  """The stage ID to where conversion ends"""
  toStageId: Int
}

type GetPipelineMovementStatistics {
  """The pipeline object"""
  data: Data103

  """If the response is successful or not"""
  success: Boolean
}

"""The pipeline object"""
type Data103 {
  """The moved deals average age in days"""
  averageAgeInDays: AverageAgeInDays

  """Deals summary"""
  dealsLeftOpen: DealsLeftOpen

  """Deals summary"""
  lostDeals: LostDeals

  """Movements between stages"""
  movementsBetweenStages: MovementsBetweenStages

  """Deals summary"""
  newDeals: NewDeals

  """Deals summary"""
  wonDeals: WonDeals
}

"""The moved deals average age in days"""
type AverageAgeInDays {
  """The moved deals average age across all stages"""
  acrossAllStages: Int

  """The moved deals average age by stages"""
  byStages: [ByStagesListItem]
}

"""The moved deals average age by the stage"""
type ByStagesListItem {
  """The stage ID"""
  stageId: Int

  """The average deals age in specific stage"""
  value: Int
}

"""Deals summary"""
type DealsLeftOpen {
  """The count of the deals"""
  count: Int

  """The IDs of the deals that have been moved"""
  dealsIds: [Int]

  """The formatted values of the deals"""
  formattedValues: FormattedValues

  """The values of the deals"""
  values: Values2
}

"""The formatted values of the deals"""
type FormattedValues {
  """The formatted values of the deals"""
  cURRENCYID: String
}

"""The values of the deals"""
type Values2 {
  """The value of the deals"""
  cURRENCYID: Int
}

"""Deals summary"""
type LostDeals {
  """The count of the deals"""
  count: Int

  """The IDs of the deals that have been moved"""
  dealsIds: [Int]

  """The formatted values of the deals"""
  formattedValues: FormattedValues

  """The values of the deals"""
  values: Values2
}

"""Movements between stages"""
type MovementsBetweenStages {
  """The count of the deals that have been moved between stages"""
  count: Int
}

"""Deals summary"""
type NewDeals {
  """The count of the deals"""
  count: Int

  """The IDs of the deals that have been moved"""
  dealsIds: [Int]

  """The formatted values of the deals"""
  formattedValues: FormattedValues

  """The values of the deals"""
  values: Values2
}

"""Deals summary"""
type WonDeals {
  """The count of the deals"""
  count: Int

  """The IDs of the deals that have been moved"""
  dealsIds: [Int]

  """The formatted values of the deals"""
  formattedValues: FormattedValues

  """The values of the deals"""
  values: Values2
}

type GetPipelines {
  """Pipelines array"""
  data: [Data97ListItem]

  """If the response is successful or not"""
  success: Boolean
}

type Data97ListItem {
  """Whether this pipeline will be made inactive (hidden) or active"""
  active: Boolean

  """The pipeline creation time. Format: YYYY-MM-DD HH:MM:SS."""
  addTime: String

  """Whether deal probability is disabled or enabled for this pipeline"""
  dealProbability: Boolean

  """The ID of the pipeline"""
  id: Int

  """The name of the pipeline"""
  name: String

  """
  Defines the order of pipelines. First order (`order_nr=0`) is the default pipeline.
  """
  orderNr: Int

  """A boolean that shows if the pipeline is selected from a filter or not"""
  selected: Boolean

  """The pipeline update time. Format: YYYY-MM-DD HH:MM:SS."""
  updateTime: String

  """The pipeline title displayed in the URL"""
  urlTitle: String
}

type GetProductField {
  """All data for the product field"""
  data: Data115

  """If the response is successful or not"""
  success: Boolean
}

"""All data for the product field"""
type Data115 {
  """Whether or not the product field is currently active"""
  activeFlag: Boolean

  """The product field creation time. Format: YYYY-MM-DD HH:MM:SS"""
  addTime: String

  """Whether or not the product field is visible in the Add Product Modal"""
  addVisibleFlag: Boolean

  """Whether or not the product field data can be edited"""
  bulkEditAllowed: Boolean

  """Whether or not the product field name and metadata is editable"""
  editFlag: Boolean

  """
  The type of the field<table><tr><th>Value</th><th>Description</th></tr><tr><td>`varchar`</td><td>Text (up to 255 characters)</td><tr><td>`varchar_auto`</td><td>Autocomplete text (up to 255 characters)</td><tr><td>`text`</td><td>Long text (up to 65k characters)</td><tr><td>`double`</td><td>Numeric value</td><tr><td>`monetary`</td><td>Monetary field (has a numeric value and a currency value)</td><tr><td>`date`</td><td>Date (format YYYY-MM-DD)</td><tr><td>`set`</td><td>Options field with a possibility of having multiple chosen options</td><tr><td>`enum`</td><td>Options field with a single possible chosen option</td><tr><td>`user`</td><td>User field (contains a user ID of another Pipedrive user)</td><tr><td>`org`</td><td>Organization field (contains an organization ID which is stored on the same account)</td><tr><td>`people`</td><td>Person field (contains a product ID which is stored on the same account)</td><tr><td>`phone`</td><td>Phone field (up to 255 numbers and/or characters)</td><tr><td>`time`</td><td>Time field (format HH:MM:SS)</td><tr><td>`timerange`</td><td>Time-range field (has a start time and end time value, both HH:MM:SS)</td><tr><td>`daterange`</td><td>Date-range field (has a start date and end date value, both YYYY-MM-DD)</td><tr><td>`address`</td><td>Address field (autocompleted by Google Maps)</dd></table>
  """
  fieldType: FieldType2!

  """
  Whether or not the product field value can be used when filtering searches
  """
  filteringAllowed: Boolean

  """The ID of the product field"""
  id: Int

  """Whether or not the product field is marked as important"""
  importantFlag: Boolean

  """The key of the product field"""
  key: String

  """The ID of the last user to update the product field"""
  lastUpdatedByUserId: Int

  """Whether or not the product field is mandatory when creating products"""
  mandatoryFlag: Boolean

  """The name of the field"""
  name: String!

  """
  When `field_type` is either `set` or `enum`, possible options must be supplied as a JSON-encoded sequential array, for example:</br>`[{"label":"red"}, {"label":"blue"}, {"label":"lilac"}]`
  """
  options: [JSON]

  """The position (index) of the product field in the detail view"""
  orderNr: Int

  """Whether or not the product field is searchable"""
  searchableFlag: Boolean

  """Whether or not the product field is sortable"""
  sortableFlag: Boolean

  """The product field last update time. Format: YYYY-MM-DD HH:MM:SS"""
  updateTime: String
}

enum FieldType2 {
  VARCHAR
  VARCHAR_AUTO
  TEXT
  DOUBLE
  MONETARY
  DATE
  SET
  ENUM
  USER
  ORG
  PEOPLE
  PHONE
  TIME
  TIMERANGE
  DATERANGE
  ADDRESS
}

type GetProductFields {
  """Additional data for the product field, such as pagination"""
  additionalData: JSON

  """Array containing data for all product fields"""
  data: [Data114ListItem]

  """If the response is successful or not"""
  success: Boolean
}

type Data114ListItem {
  """Whether or not the product field is currently active"""
  activeFlag: Boolean

  """The product field creation time. Format: YYYY-MM-DD HH:MM:SS"""
  addTime: String

  """Whether or not the product field is visible in the Add Product Modal"""
  addVisibleFlag: Boolean

  """Whether or not the product field data can be edited"""
  bulkEditAllowed: Boolean

  """Whether or not the product field name and metadata is editable"""
  editFlag: Boolean

  """
  The type of the field<table><tr><th>Value</th><th>Description</th></tr><tr><td>`varchar`</td><td>Text (up to 255 characters)</td><tr><td>`varchar_auto`</td><td>Autocomplete text (up to 255 characters)</td><tr><td>`text`</td><td>Long text (up to 65k characters)</td><tr><td>`double`</td><td>Numeric value</td><tr><td>`monetary`</td><td>Monetary field (has a numeric value and a currency value)</td><tr><td>`date`</td><td>Date (format YYYY-MM-DD)</td><tr><td>`set`</td><td>Options field with a possibility of having multiple chosen options</td><tr><td>`enum`</td><td>Options field with a single possible chosen option</td><tr><td>`user`</td><td>User field (contains a user ID of another Pipedrive user)</td><tr><td>`org`</td><td>Organization field (contains an organization ID which is stored on the same account)</td><tr><td>`people`</td><td>Person field (contains a product ID which is stored on the same account)</td><tr><td>`phone`</td><td>Phone field (up to 255 numbers and/or characters)</td><tr><td>`time`</td><td>Time field (format HH:MM:SS)</td><tr><td>`timerange`</td><td>Time-range field (has a start time and end time value, both HH:MM:SS)</td><tr><td>`daterange`</td><td>Date-range field (has a start date and end date value, both YYYY-MM-DD)</td><tr><td>`address`</td><td>Address field (autocompleted by Google Maps)</dd></table>
  """
  fieldType: FieldType2!

  """
  Whether or not the product field value can be used when filtering searches
  """
  filteringAllowed: Boolean

  """The ID of the product field"""
  id: Int

  """Whether or not the product field is marked as important"""
  importantFlag: Boolean

  """The key of the product field"""
  key: String

  """The ID of the last user to update the product field"""
  lastUpdatedByUserId: Int

  """Whether or not the product field is mandatory when creating products"""
  mandatoryFlag: Boolean

  """The name of the field"""
  name: String!

  """
  When `field_type` is either `set` or `enum`, possible options must be supplied as a JSON-encoded sequential array, for example:</br>`[{"label":"red"}, {"label":"blue"}, {"label":"lilac"}]`
  """
  options: [JSON]

  """The position (index) of the product field in the detail view"""
  orderNr: Int

  """Whether or not the product field is searchable"""
  searchableFlag: Boolean

  """Whether or not the product field is sortable"""
  sortableFlag: Boolean

  """The product field last update time. Format: YYYY-MM-DD HH:MM:SS"""
  updateTime: String
}

type GetProductFollowersResponseSuccess {
  """The additional data of the list"""
  additionalData: AdditionalData3

  """The list of followers"""
  data: [Data110ListItem]

  """If the response is successful or not"""
  success: Boolean
}

type Data110ListItem {
  """The date and time when the follower was added to the person"""
  addTime: String

  """The ID of the user follower"""
  id: Int

  """The ID of the product"""
  productId: Int

  """The ID of the user"""
  userId: Int
}

type UserIds {
  """The list of user IDs"""
  data: [Int]

  """If the response is successful or not"""
  success: Boolean
}

type GetProducts {
  """The additional data of the list"""
  additionalData: AdditionalData3

  """Array containing data for all products"""
  data: [Data104ListItem]
  relatedObjects: RelatedObjects

  """If the response is successful or not"""
  success: Boolean
}

type Data104ListItem {
  data: Data105
  relatedObjects: RelatedObjects

  """If the response is successful or not"""
  success: Boolean
}

type Data105 {
  """Whether this product is active or not"""
  activeFlag: ActiveFlag

  """The product code"""
  code: String

  """The ID of the product"""
  id: Float

  """The name of the product"""
  name: String

  """Information about the Pipedrive user who owns the product"""
  ownerId: JSON

  """
  Array of objects, each containing: currency (string), price (number), cost (number, optional), overhead_cost (number, optional)
  """
  prices: [JSON]

  """Whether this product is selected in deals or not"""
  selectable: Selectable

  """The ax percentage"""
  tax: Float

  """The unit in which this product is sold"""
  unit: String

  """Visibility of the product"""
  visibleTo: String
}

enum ActiveFlag {
  _0
  _1
}

enum Selectable {
  _0
  _1
}

type GetRecents {
  additionalData: AdditionalData11
  data: [Data117ListItem]

  """If the response is successful or not"""
  success: Boolean
}

type AdditionalData11 {
  """The timestamp in UTC. Format: YYYY-MM-DD HH:MM:SS"""
  lastTimestampOnPage: String

  """The additional data of the list"""
  pagination: Pagination3

  """The timestamp in UTC. Format: YYYY-MM-DD HH:MM:SS"""
  sinceTimestamp: String
}

"""The additional data of the list"""
type Pagination3 {
  """Items shown per page"""
  limit: Int

  """If there are more list items in the collection than displayed or not"""
  moreItemsInCollection: Boolean

  """Pagination start"""
  start: Int
}

type Data117ListItem {
  data: JSON
  id: Int
  item: JSON
}

enum Items8 {
  ACTIVITY
  ACTIVITYTYPE
  DEAL
  FILE
  FILTER
  NOTE
  PERSON
  ORGANIZATION
  PIPELINE
  PRODUCT
  STAGE
  USER
}

type GetRole {
  """The additional data in the role"""
  additionalData: AdditionalData13

  """The details of the sub-role"""
  data: SubRole

  """If the response is successful or not"""
  success: Boolean
}

"""The additional data in the role"""
type AdditionalData13 {
  """The settings for the role"""
  settings: Settings
}

"""The settings for the role"""
type Settings {
  """The access level of the deals for the role (only for default role)"""
  dealAccessLevel: Float

  """The default visibility level of the deals for the role"""
  dealDefaultVisibility: Float

  """The default visibility level of the leads for the role"""
  leadDefaultVisibility: Float

  """
  The access level of the organizations for the role (only for default role)
  """
  orgAccessLevel: Float

  """The default visibility level of the organizations for the role"""
  orgDefaultVisibility: Float

  """The access level of the people for the role (only for default role)"""
  personAccessLevel: Float

  """The default visibility level of the people for the role"""
  personDefaultVisibility: Float

  """The access level of the products for the role (only for default role)"""
  productAccessLevel: Float

  """The default visibility level of the products for the role"""
  productDefaultVisibility: Float
}

"""The details of the sub-role"""
type SubRole {
  """Whether the role is active or not"""
  activeFlag: Boolean

  """The number of users assigned to this role"""
  assignmentCount: String

  """The ID of the role"""
  id: Int

  """The name of the role"""
  name: String

  """The ID of the parent role"""
  parentRoleId: Int

  """The number of sub-roles"""
  subRoleCount: String
}

type GetRoleSettings {
  """The settings for the role"""
  data: Data125

  """If the response is successful or not"""
  success: Boolean
}

"""The settings for the role"""
type Data125 {
  """The access level of the deals for the role (only for default role)"""
  dealAccessLevel: Float

  """The default visibility level of the deals for the role"""
  dealDefaultVisibility: Float

  """The default visibility level of the leads for the role"""
  leadDefaultVisibility: Float

  """
  The access level of the organizations for the role (only for default role)
  """
  orgAccessLevel: Float

  """The default visibility level of the organizations for the role"""
  orgDefaultVisibility: Float

  """The access level of the people for the role (only for default role)"""
  personAccessLevel: Float

  """The default visibility level of the people for the role"""
  personDefaultVisibility: Float

  """The access level of the products for the role (only for default role)"""
  productAccessLevel: Float

  """The default visibility level of the products for the role"""
  productDefaultVisibility: Float
}

type GetRoles {
  """The additional data in the role list"""
  additionalData: AdditionalData12

  """The array of roles"""
  data: [Data118ListItem]

  """If the response is successful or not"""
  success: Boolean
}

"""The additional data in the role list"""
type AdditionalData12 {
  """The pagination details in the role list"""
  pagination: Pagination4
}

"""The pagination details in the role list"""
type Pagination4 {
  """Items shown per page"""
  limit: Int

  """Whether there are more list items in the collection than displayed"""
  moreItemsInCollection: Boolean

  """Pagination start"""
  start: Int
}

type Data118ListItem {
  """Whether the role is active or not"""
  activeFlag: Boolean

  """The number of users assigned to this role"""
  assignmentCount: String

  """The ID of the role"""
  id: Int

  """The level of role in the role hierarchy"""
  level: Int

  """The name of the role"""
  name: String

  """The ID of the parent role"""
  parentRoleId: Int

  """The number of sub-roles"""
  subRoleCount: String
}

type GetStage {
  """The stage object"""
  data: Data131

  """If the request was successful or not"""
  success: Boolean
}

"""The stage object"""
type Data131 {
  """Whether the stage is active or deleted"""
  activeFlag: Boolean

  """The stage creation time. Format: YYYY-MM-DD HH:MM:SS."""
  addTime: String

  """
  The success probability percentage of the deal. Used/shown when the deal weighted values are used.
  """
  dealProbability: Int

  """Deals summary"""
  dealsSummary: DealsSummary

  """The ID of the stage"""
  id: Int

  """The name of the stage"""
  name: String

  """Defines the order of the stage"""
  orderNr: Int

  """The ID of the pipeline to add the stage to"""
  pipelineId: Int

  """
  The number of days the deals not updated in this stage would become rotten. Applies only if the `rotten_flag` is set.
  """
  rottenDays: Int

  """Whether deals in this stage can become rotten"""
  rottenFlag: RottenFlag

  """The stage update time. Format: YYYY-MM-DD HH:MM:SS."""
  updateTime: String
}

enum Everyone {
  _0
  _1
}

type GetStageDeals {
  """The additional data of the list"""
  additionalData: AdditionalData3

  """The array of deals"""
  data: [Data102ListItem]

  """If the request was successful or not"""
  success: Boolean
}

type Data102ListItem {
  """Whether the deal is active or not"""
  active: Boolean

  """The number of activities associated with the deal"""
  activitiesCount: Int

  """The creation date and time of the deal"""
  addTime: String

  """The BCC email of the deal"""
  ccEmail: String

  """The date and time of closing the deal"""
  closeTime: String

  """The ID of the deal creator"""
  creatorUserId: Int

  """The currency associated with the deal"""
  currency: String

  """Whether the deal is deleted or not"""
  deleted: Boolean

  """The number of completed activities associated with the deal"""
  doneActivitiesCount: Int

  """The number of emails associated with the deal"""
  emailMessagesCount: Int

  """The expected close date of the deal"""
  expectedCloseDate: String

  """The number of files associated with the deal"""
  filesCount: Int

  """The date and time of the first time changing the deal status as won"""
  firstWonTime: String

  """The number of followers associated with the deal"""
  followersCount: Int

  """The deal value formatted with selected currency. E.g. US$500"""
  formattedValue: String

  """The weighted_value formatted with selected currency. E.g. US$500"""
  formattedWeightedValue: String

  """The ID of the deal"""
  id: Int

  """The label assigned to the deal"""
  label: Int

  """The date of the last activity associated with the deal"""
  lastActivityDate: String

  """The ID of the last activity associated with the deal"""
  lastActivityId: Int

  """The date and time of the last incoming email associated with the deal"""
  lastIncomingMailTime: String

  """The date and time of the last outgoing email associated with the deal"""
  lastOutgoingMailTime: String

  """The reason for losing the deal"""
  lostReason: String

  """The date and time of changing the deal status as lost"""
  lostTime: String

  """The date of the next activity associated with the deal"""
  nextActivityDate: String

  """The duration of the next activity associated with the deal"""
  nextActivityDuration: String

  """The ID of the next activity associated with the deal"""
  nextActivityId: Int

  """The note of the next activity associated with the deal"""
  nextActivityNote: String

  """The subject of the next activity associated with the deal"""
  nextActivitySubject: String

  """The time of the next activity associated with the deal"""
  nextActivityTime: String

  """The type of the next activity associated with the deal"""
  nextActivityType: String

  """The number of notes associated with the deal"""
  notesCount: Int

  """If the organization that is associated with the deal is hidden or not"""
  orgHidden: Boolean

  """The ID of the organization associated with the deal"""
  orgId: Int

  """The name of the organization associated with the deal"""
  orgName: String

  """The name of the deal owner"""
  ownerName: String

  """The number of participants associated with the deal"""
  participantsCount: Int

  """If the person that is associated with the deal is hidden or not"""
  personHidden: Boolean

  """The ID of the person associated with the deal"""
  personId: Int

  """The name of the person associated with the deal"""
  personName: String

  """The ID of pipeline associated with the deal"""
  pipelineId: Int

  """The success probability percentage of the deal"""
  probability: Float

  """The number of products associated with the deal"""
  productsCount: Int

  """The date and time of changing the deal status as rotten"""
  rottenTime: String

  """The last updated date and time of the deal stage"""
  stageChangeTime: String

  """The ID of the deal stage"""
  stageId: Int

  """The order number of the deal stage associated with the deal"""
  stageOrderNr: Int

  """The status of the deal"""
  status: String

  """The title of the deal"""
  title: String

  """The number of incomplete activities associated with the deal"""
  undoneActivitiesCount: Int

  """The last updated date and time of the deal"""
  updateTime: String

  """The ID of the user"""
  userId: Int

  """The value of the deal"""
  value: Float

  """The visibility of the deal"""
  visibleTo: String

  """
  Probability times deal value. Probability can either be deal probability or if not set, then stage probability.
  """
  weightedValue: Float

  """The currency associated with the deal"""
  weightedValueCurrency: String

  """The date and time of changing the deal status as won"""
  wonTime: String
}

enum GetSummary {
  _0
  _1
}

type GetStages {
  """The array of stages"""
  data: [Data128ListItem]

  """If the request was successful or not"""
  success: Boolean
}

type Data128ListItem {
  """Whether the stage is active or deleted"""
  activeFlag: Boolean

  """The stage creation time. Format: YYYY-MM-DD HH:MM:SS."""
  addTime: String

  """
  The success probability percentage of the deal. Used/shown when the deal weighted values are used.
  """
  dealProbability: Int

  """The ID of the stage"""
  id: Int

  """The name of the stage"""
  name: String

  """Defines the order of the stage"""
  orderNr: Int

  """
  The pipeline deal probability. When `true`, overrides the stage probability.
  """
  pipelineDealProbability: Boolean

  """The ID of the pipeline to add the stage to"""
  pipelineId: Int

  """The name of the pipeline"""
  pipelineName: String

  """
  The number of days the deals not updated in this stage would become rotten. Applies only if the `rotten_flag` is set.
  """
  rottenDays: Int

  """Whether deals in this stage can become rotten"""
  rottenFlag: RottenFlag

  """The stage update time. Format: YYYY-MM-DD HH:MM:SS."""
  updateTime: String
}

type GetUserCallLogs {
  """The additional data of the list"""
  additionalData: AdditionalData3
  data: [Data10ListItem]

  """If the response is successful or not"""
  success: Boolean
}

type Data10ListItem {
  """
  If specified, this activity will be converted into a call log, with the information provided. When this field is used, you don't need to specify `deal_id`, `person_id` or `org_id`, as they will be ignored in favor of the values already available in the activity. The `activity_id` must refer to a `call` type activity.
  """
  activityId: Int

  """The company ID of the owner of the call log"""
  companyId: Int

  """The ID of the deal this call is associated with"""
  dealId: Int

  """The duration of the call in seconds"""
  duration: String

  """
  The date and time of the end of the call in UTC. Format: YYYY-MM-DD HH:MM:SS.
  """
  endTime: String!

  """The number that made the call"""
  fromPhoneNumber: String

  """
  If the call log has an audio recording attached, the value should be true
  """
  hasRecording: Boolean

  """The call log ID, generated when the call log was created"""
  id: String

  """The note for the call log in HTML format"""
  note: String

  """The ID of the organization this call is associated with"""
  orgId: Int

  """Describes the outcome of the call"""
  outcome: Outcome!

  """The ID of the person this call is associated with"""
  personId: Int

  """
  The date and time of the start of the call in UTC. Format: YYYY-MM-DD HH:MM:SS.
  """
  startTime: String!

  """The name of the activity this call is attached to"""
  subject: String

  """The number called"""
  toPhoneNumber: String!

  """
  The ID of the owner of the call log. Please note that a user without account settings access cannot create call logs for other users.
  """
  userId: Int
}

type GetUserPermissions {
  data: Data137

  """If the response is successful or not"""
  success: Boolean
}

type Data137 {
  """If the user can add custom fields"""
  canAddCustomFields: Boolean

  """If the user can add products"""
  canAddProducts: Boolean

  """If the user can add prospects as leads"""
  canAddProspectsAsLeads: Boolean

  """If the user can bulk edit items"""
  canBulkEditItems: Boolean

  """If the user can change visibility of items"""
  canChangeVisibilityOfItems: Boolean

  """If the user can convert deals to leads"""
  canConvertDealsToLeads: Boolean

  """If the user can create workflows"""
  canCreateOwnWorkflow: Boolean

  """If the user can delete activities"""
  canDeleteActivities: Boolean

  """If the user can delete custom fields"""
  canDeleteCustomFields: Boolean

  """If the user can delete deals"""
  canDeleteDeals: Boolean

  """If the user can edit custom fields"""
  canEditCustomFields: Boolean

  """If the user can edit deals' closed date"""
  canEditDealsClosedDate: Boolean

  """If the user can edit products"""
  canEditProducts: Boolean

  """If the user can edit shared filters"""
  canEditSharedFilters: Boolean

  """If the user can export data from item lists"""
  canExportDataFromLists: Boolean

  """If the user can follow other users"""
  canFollowOtherUsers: Boolean

  """If the user can merge deals"""
  canMergeDeals: Boolean

  """If the user can merge organizations"""
  canMergeOrganizations: Boolean

  """If the user can merge people"""
  canMergePeople: Boolean

  """If the user can modify labels"""
  canModifyLabels: Boolean

  """If the user can see company-wide statistics"""
  canSeeCompanyWideStatistics: Boolean

  """If the user can see the summary on the deals page"""
  canSeeDealsListSummary: Boolean

  """If the user can see the names of hidden items"""
  canSeeHiddenItemsNames: Boolean

  """If the user can see other users"""
  canSeeOtherUsers: Boolean

  """If the user can see other users' statistics"""
  canSeeOtherUsersStatistics: Boolean

  """If the user can see security dashboard"""
  canSeeSecurityDashboard: Boolean

  """If the user can share filters"""
  canShareFilters: Boolean

  """If the user can share insights"""
  canShareInsights: Boolean

  """If the user can use API"""
  canUseApi: Boolean

  """If the user can use email tracking"""
  canUseEmailTracking: Boolean

  """If the user can use import"""
  canUseImport: Boolean
}

type GetUserRoleAssignments {
  """The additional data in the role list"""
  additionalData: AdditionalData12

  """The role assignments"""
  data: [Data123ListItem]

  """If the response is successful or not"""
  success: Boolean
}

"""The assignment data of the role"""
type Data123ListItem {
  """Whether the role is active or not"""
  activeFlag: Boolean

  """The name of the role"""
  name: String

  """The ID of the parent role"""
  parentRoleId: Int

  """The role ID"""
  roleId: Int

  """The assignment type"""
  type: String

  """The user ID"""
  userId: Int
}

type GetUserSettings {
  data: Data139

  """If the response is successful or not"""
  success: Boolean
}

type Data139 {
  """
  Whether the expected close date of the deal is filled automatically or not
  """
  autofillDealExpectedCloseDate: Boolean

  """Whether beta app is enabled"""
  betaApp: Boolean

  """The call to link syntax"""
  calltoLinkSyntax: String

  """The destination of file upload"""
  fileUploadDestination: String

  """The number of results shown in list by default"""
  listLimit: Float

  """
  If the vendors are allowed to install custom Marketplace apps with functionality and content in the Pipedrive UI or not
  """
  marketplaceAllowCustomInstallUrl: Boolean

  """
  If the vendors are allowed to extend their Marketplace apps with functionality and content in the Pipedrive UI or not
  """
  marketplaceAppExtensionsVendor: Boolean

  """If the vendors are allowed to be part of the Marketplace team or not"""
  marketplaceTeam: Boolean

  """Allow the vendors to duplicate a person"""
  personDuplicateCondition: String

  """Prevent salesphone call to override"""
  preventSalesphoneCalltoOverride: Boolean
}

type Teams {
  data: [Data64ListItem]

  """If the response is successful or not"""
  success: Boolean
}

type Data64ListItem {
  """Flag that indicates whether the team is active"""
  activeFlag: Float

  """The team creation time. Format: YYYY-MM-DD HH:MM:SS"""
  addTime: String

  """The ID of the user who created the team"""
  createdByUserId: Int

  """Flag that indicates whether the team is deleted"""
  deletedFlag: Float

  """The team description"""
  description: String

  """The team ID"""
  id: Int

  """The team manager ID"""
  managerId: Int

  """The team name"""
  name: String

  """The list of user IDs"""
  users: [Int]
}

enum OrderBy {
  ID
  NAME
  MANAGER_ID
  ACTIVE_FLAG
}

enum SkipUsers {
  _0
  _1
}

type GetWebhooks {
  """The array of Webhooks"""
  data: [Data140ListItem]

  """The status of the response"""
  status: String

  """If the response is successful or not"""
  success: Boolean
}

type Data140ListItem {
  """The date when the Webhook was added"""
  addTime: String

  """Any additional data related to the Webhook"""
  additionalData: JSON

  """The ID of the admin of the Webhook"""
  adminId: Int

  """The ID of the company related to the Webhook"""
  companyId: Int

  """The Webhook action"""
  eventAction: String

  """The Webhook object"""
  eventObject: String

  """The password of the `subscription_url` of the Webhook"""
  httpAuthPassword: String

  """The username of the `subscription_url` of the Webhook"""
  httpAuthUser: String

  """The ID of the Webhook"""
  id: Int

  """The Webhook's status"""
  isActive: Float

  """The last delivery time of the Webhook"""
  lastDeliveryTime: String

  """The last delivery HTTP status of the Webhook"""
  lastHttpStatus: Int

  """The ID of the user who owns the Webhook"""
  ownerId: Int

  """The removal reason of the Webhook (if removed)"""
  removeReason: String

  """The date when the Webhook was removed (if removed)"""
  removeTime: String

  """The subscription URL of the Webhook"""
  subscriptionUrl: String

  """The type of the Webhook"""
  type: Type6

  """The ID of the user related to the Webhook"""
  userId: Int
}

enum Type6 {
  GENERAL
  APP
}

type Getproduct {
  data: Data105
  relatedObjects: RelatedObjects

  """If the response is successful or not"""
  success: Boolean
}

type ListPermittedUsers {
  data: Data34

  """If the response is successful or not"""
  success: Boolean
}

type Data34 {
  """The list of permitted users IDs"""
  id: [Int]
}

type ListProducts {
  additionalData: AdditionalData5
  data: Data36
  relatedObjects: RelatedObjects6

  """If the response is successful or not"""
  success: Boolean
}

type AdditionalData5 {
  """Pagination details of the list"""
  pagination: Pagination

  """The total quantity of the products"""
  productsQuantityTotal: Int

  """The total formatted quantity of the products"""
  productsQuantityTotalFormatted: String

  """The total sum of the products"""
  productsSumTotal: Int

  """The total formatted sum of the products"""
  productsSumTotalFormatted: String

  """Whether variations is enabled or not"""
  variationsEnabled: Boolean
}

type Data36 {
  """The array of products"""
  items: [Items2ListItem]
}

type Items2ListItem {
  """Whether the product is active or not"""
  activeFlag: Boolean

  """The date and time when the product was added to the deal"""
  addTime: String

  """The comments of the product"""
  comments: String

  """The currency associated with the deal product"""
  currency: String

  """The ID of the deal"""
  dealId: Int

  """The discount percentage of the product"""
  discountPercentage: Int

  """The duration of the product"""
  duration: Int

  """The type of the duration. (For example hourly, daily, etc.)"""
  durationUnit: String

  """Whether the product is enabled or not"""
  enabledFlag: Boolean

  """
  The ID of the deal-product (the ID of the product attached to the deal)
  """
  id: Int

  """The price value of the product"""
  itemPrice: Int

  """The date and time when the deal product was last edited"""
  lastEdit: String

  """The product name"""
  name: String

  """The order number of the product"""
  orderNr: Int
  product: Product

  """The ID of the product"""
  productId: Int

  """The ID of the product variation"""
  productVariationId: Int

  """The quantity of the product"""
  quantity: Int

  """The formatted quantity of the product"""
  quantityFormatted: String

  """The sum of all the products attached to the deal"""
  sum: Float

  """The formatted sum of the product"""
  sumFormatted: String

  """The product sum without the discount"""
  sumNoDiscount: Float

  """The product tax"""
  tax: Float
}

type Product {
  """Whether this product is active or not"""
  activeFlag: ActiveFlag

  """The product code"""
  code: String

  """The ID of the product"""
  id: Float

  """The name of the product"""
  name: String

  """Information about the Pipedrive user who owns the product"""
  ownerId: JSON

  """
  Object of objects, each containing: currency (string), price (number), cost (number, optional), overhead_cost (number, optional)
  """
  prices: JSON

  """Whether this product is selected in deals or not"""
  selectable: Selectable

  """The ax percentage"""
  tax: Float

  """The unit in which this product is sold"""
  unit: String

  """Visibility of the product"""
  visibleTo: String
}

type RelatedObjects6 {
  user: User
}

enum IncludeProductData {
  _0
  _1
}

type MailMessage {
  data: Data65

  """The service name of the response."""
  service: String

  """
  The email service specific status code and it is returned through the response body.
  """
  statusCode: Int

  """The status text of the response."""
  statusText: String

  """If the response is successful or not"""
  success: Boolean
}

type Data65 {
  """The connection account ID"""
  accountId: String

  """The insertion into the database time of the mail message"""
  addTime: String

  """The array of mail message blind copies (object)"""
  bcc: [BccListItem]

  """The mail message body URL"""
  bodyUrl: String

  """The array of mail message copies (object)"""
  cc: [CcListItem]

  """Whether the mail message is deleted or not"""
  deletedFlag: Float

  """
  If the mail message has a draft status then the value is the mail message object as JSON formatted string, otherwise `null`.
  """
  draft: String

  """Whether the mail message is a draft or not"""
  draftFlag: Float

  """The array of mail message sender (object)"""
  from: [FromListItem]

  """Whether the mail message has an attachment or not"""
  hasAttachmentsFlag: Float

  """Whether the mail message has a body or not"""
  hasBodyFlag: Float

  """Whether the mail message has an inline attachment or not"""
  hasInlineAttachmentsFlag: Float

  """
  Whether the mail message has an attachment (which is not inline) or not
  """
  hasRealAttachmentsFlag: Float

  """ID of the mail message."""
  id: Int

  """Whether the link tracking in mail message body is enabled."""
  mailLinkTrackingEnabledFlag: Float

  """ID of the mail message thread"""
  mailThreadId: Int

  """
  The status of tracking mail message. Value is `null` if tracking is not enabled.
  """
  mailTrackingStatus: MailTrackingStatus

  """Creation or receival time of the mail message"""
  messageTime: String

  """Whether the mail message is read or not by the user"""
  readFlag: Float

  """Whether the mail message has been sent or not"""
  sentFlag: Float

  """Whether the mail message has been sent from Pipedrive app or not"""
  sentFromPipedriveFlag: Float

  """
  Whether the mail message has been created by Smart Email BCC feature or not
  """
  smartBccFlag: Float

  """The snippet of mail message. Snippet length is up to 225 characters."""
  snippet: String

  """The subject of mail message"""
  subject: String

  """Whether the mail message is synced with the provider or not"""
  syncedFlag: Float

  """The array of mail message receiver (object)"""
  to: [ToListItem]

  """The updating time in the database of the mail message"""
  updateTime: String

  """ID of the user whom mail message will be assigned to"""
  userId: Int
}

enum IncludeBody {
  _0
  _1
}

type OneComment {
  data: Data73

  """If the request was successful or not"""
  success: Boolean
}

type Data73 {
  """Whether the note is active or deleted"""
  activeFlag: Boolean

  """The creation date and time of the note"""
  addTime: String

  """The ID of the company"""
  companyId: Int

  """
  The content of the note in HTML format. Subject to sanitization on the back-end.
  """
  content: String

  """
  The ID of the object that the comment is attached to, will be the id of the note
  """
  objectId: String

  """
  The type of object that the comment is attached to, will be "note"
  """
  objectType: String

  """The creation date and time of the note"""
  updateTime: String

  """The ID of the user who last updated the comment"""
  updaterId: Int

  """The ID of the user who created the comment"""
  userId: Int

  """The ID of the note"""
  uuid: ID
}

type OneLead {
  data: Data57
  success: Boolean
}

type Data57 {
  """
  The date and time of when the lead was created. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
  """
  addTime: String

  """The BCC email of the lead"""
  ccEmail: String

  """The ID of the user who created the lead"""
  creatorId: Int

  """
  The date of when the deal which will be created from the lead is expected to be closed. In ISO 8601 format: YYYY-MM-DD.
  """
  expectedCloseDate: String

  """The unique ID of the lead in the UUID format"""
  id: ID

  """A flag indicating whether the lead is archived or not"""
  isArchived: Boolean

  """The IDs of the lead labels which are associated with the lead"""
  labelIds: [ID]

  """The ID of the next activity associated with the lead"""
  nextActivityId: Int

  """The ID of an organization which this lead is linked to"""
  organizationId: Int

  """The ID of the user who owns the lead"""
  ownerId: Int

  """The ID of a person which this lead is linked to"""
  personId: Int

  """
  Defines where the lead comes from. Will be `API` if the lead was created through the Public API and will be `Manually created` if the lead was created manually through the UI.
  
  """
  sourceName: String

  """The title of the lead"""
  title: String

  """
  The date and time of when the lead was last updated. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
  """
  updateTime: String

  """The potential value of the lead"""
  value: Value

  """
  The visibility of the lead. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user.<table><tr><th>Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers (private)</td></tr><tr><td>`3`</td><td>Entire company (shared)</td></tr></table>
  """
  visibleTo: String

  """
  A flag indicating whether the lead was seen by someone in the Pipedrive UI
  """
  wasSeen: Boolean
}

type OneNote {
  data: Data71

  """If the request was successful or not"""
  success: Boolean
}

type Data71 {
  """Whether the note is active or deleted"""
  activeFlag: Boolean

  """The creation date and time of the note"""
  addTime: String

  """
  The content of the note in HTML format. Subject to sanitization on the back-end.
  """
  content: String

  """The deal this note is attached to"""
  deal: Deal2

  """The ID of the deal the note is attached to"""
  dealId: Int

  """The ID of the note"""
  id: Int

  """The ID of the user who last updated the note"""
  lastUpdateUserId: Int

  """The ID of the lead the note is attached to"""
  leadId: ID

  """The ID of the organization the note is attached to"""
  orgId: Int

  """The organization the note is attached to"""
  organization: Organization6

  """The person the note is attached to"""
  person: Person6

  """The ID of the person the note is attached to"""
  personId: Int

  """If true, the results are filtered by note to deal pinning state"""
  pinnedToDealFlag: Boolean

  """
  If true, the results are filtered by note to organization pinning state
  """
  pinnedToOrganizationFlag: Boolean

  """If true, the results are filtered by note to person pinning state"""
  pinnedToPersonFlag: Boolean

  """The last updated date and time of the note"""
  updateTime: String

  """The user who created the note"""
  user: User3

  """The ID of the note creator"""
  userId: Int
}

type OrganizationFollowers {
  additionalData: AdditionalData

  """The array of followers"""
  data: [Data80ListItem]

  """If the request was successful or not"""
  success: Boolean
}

type Data80ListItem {
  """The date and time of adding the follower to the item"""
  addTime: String

  """The ID of the follower"""
  id: Int

  """The ID of the organization"""
  orgId: Int

  """The user ID of the follower related to the item"""
  userId: Int
}

type Payment {
  data: [Data133ListItem]

  """If the response is successful or not"""
  success: Boolean
}

type Data133ListItem {
  """The creation time of the payment"""
  addTime: String

  """The payment amount"""
  amount: Float

  """
  The difference between the amount of the current payment and the previous payment. The value can be either positive or negative.
  """
  changeAmount: Float

  """The currency of the payment"""
  currency: String

  """The ID of the deal this payment is associated with"""
  dealId: Int

  """The description of the payment"""
  description: String

  """The date when payment occurs"""
  dueAt: String

  """The ID of the payment"""
  id: Int

  """The payment status"""
  isActive: Boolean

  """
  The type of the payment. Possible values are: `Recurring` - payments occur over fixed intervals of time, `Additional` - extra payment not the recurring payment of the recurring subscription, `Installment` - payment of the installment subscription.
  """
  paymentType: PaymentType

  """
  Represents the movement of revenue in comparison with the previous payment. Possible values are: `New` - first payment of the subscription. `Recurring` - no movement. `Expansion` - current payment amount > previous payment amount. `Contraction` - current payment amount < previous payment amount. `Churn` - last payment of the subscription.
  """
  revenueMovementType: RevenueMovementType

  """The ID of the subscription this payment is associated with"""
  subscriptionId: Int

  """The update time of the payment"""
  updateTime: String
}

enum PaymentType {
  RECURRING
  ADDITIONAL
  INSTALLMENT
}

enum RevenueMovementType {
  NEW
  RECURRING
  EXPANSION
  CONTRACTION
  NONE
  CHURN
}

type ProductFiles {
  """The additional data of the list"""
  additionalData: AdditionalData3

  """The array of files"""
  data: [Data109ListItem]

  """If the response is successful or not"""
  success: Boolean
}

"""The file data"""
type Data109ListItem {
  """Whether the user is active or not."""
  activeFlag: Boolean

  """
  The UTC date time when the file was uploaded. Format: YYYY-MM-DD HH:MM:SS
  """
  addTime: String

  """The description of the file"""
  description: String

  """The original name of the file"""
  fileName: String

  """The size of the file in bytes"""
  fileSize: Int

  """The ID of the file"""
  id: Int

  """Whether the file was uploaded as inline or not"""
  inlineFlag: Boolean

  """The visible name of the file"""
  name: String

  """The ID of the product associated with the file"""
  productId: Int

  """The name of the product associated with the file"""
  productName: String

  """The ID of the remote item"""
  remoteId: String

  """
  The location type to send the file to. Only googledrive is supported at the moment.
  """
  remoteLocation: String

  """The location of the cloud storage"""
  s3Bucket: String

  """
  The UTC date time when the file was last updated. Format: YYYY-MM-DD HH:MM:SS
  """
  updateTime: String

  """The URL to download the file"""
  url: String
}

type SearchDeals {
  additionalData: AdditionalData
  data: Data17

  """If the response is successful or not"""
  success: Boolean
}

type Data17 {
  """The array of deals"""
  items: [ItemsListItem]
}

type ItemsListItem {
  item: Item

  """Search result relevancy"""
  resultScore: Float
}

type Item {
  """The currency of the deal"""
  currency: String

  """Custom fields"""
  customFields: [String]

  """The ID of the deal"""
  id: Int

  """An array of notes"""
  notes: [String]
  organization: Organization4
  owner: Owner
  person: Person4
  stage: Stage

  """The status of the deal"""
  status: String

  """The title of the deal"""
  title: String

  """The type of the item"""
  type: String

  """The value of the deal"""
  value: Int

  """The visibility of the deal"""
  visibleTo: Int
}

type Organization4 {
  """The ID of the organization the deal is associated with"""
  id: Int

  """The name of the organization the deal is associated with"""
  name: String
}

type Owner {
  """The ID of the owner of the deal"""
  id: Int
}

type Person4 {
  """The ID of the person the deal is associated with"""
  id: Int

  """The name of the person the deal is associated with"""
  name: String
}

type Stage {
  """The ID of the stage of the deal"""
  id: Int

  """The name of the stage of the deal"""
  name: String
}

enum ExactMatch {
  TRUE
  FALSE
}

enum Fields2 {
  CUSTOM_FIELDS
  NOTES
  TITLE
}

enum IncludeFields {
  DEAL_CC_EMAIL
}

type SearchItem {
  additionalData: AdditionalData
  data: Data54

  """If the response is successful or not"""
  success: Boolean
}

type Data54 {
  """The array of found items"""
  items: [Items3ListItem]

  """The array of related items if `search_for_related_items` was enabled"""
  relatedItems: [RelatedItemsListItem]
}

type Items3ListItem {
  """Item"""
  item: JSON

  """Search result relevancy"""
  resultScore: Float
}

type RelatedItemsListItem {
  """Item"""
  item: JSON

  """Search result relevancy"""
  resultScore: Float
}

enum Fields3 {
  ADDRESS
  CODE
  CUSTOM_FIELDS
  EMAIL
  NAME
  NOTES
  ORGANIZATION_NAME
  PERSON_NAME
  PHONE
  TITLE
  DESCRIPTION
}

enum IncludeFields2 {
  DEAL_CC_EMAIL
  PERSON_PICTURE
  PRODUCT_PRICE
}

enum ItemTypes {
  DEAL
  PERSON
  ORGANIZATION
  PRODUCT
  LEAD
  FILE
  MAIL_ATTACHMENT
  PROJECT
}

enum SearchForRelatedItems {
  TRUE
  FALSE
}

type SearchItemByField {
  additionalData: AdditionalData

  """The array of results"""
  data: [Data55ListItem]

  """If the response is successful or not"""
  success: Boolean
}

type Data55ListItem {
  """The value of the searched `field_key`"""
  fieldKey: JSON

  """The ID of the item"""
  id: Int
}

enum ExactMatch2 {
  TRUE
  FALSE
}

enum FieldType3 {
  DEALFIELD
  LEADFIELD
  PERSONFIELD
  ORGANIZATIONFIELD
  PRODUCTFIELD
  PROJECTFIELD
}

enum ReturnItemIds {
  TRUE
  FALSE
}

type SearchLeads {
  additionalData: AdditionalData
  data: Data60

  """If the response is successful or not"""
  success: Boolean
}

type Data60 {
  """The array of leads"""
  items: [Items4ListItem]
}

type Items4ListItem {
  item: Item3

  """Search result relevancy"""
  resultScore: Float
}

type Item3 {
  """The currency of the lead"""
  currency: String

  """Custom fields"""
  customFields: [String]
  emails: [String]

  """The ID of the lead"""
  id: String

  """A flag indicating whether the lead is archived or not"""
  isArchived: Boolean

  """An array of notes"""
  notes: [String]
  organization: Organization5
  owner: Owner2
  person: Person5
  phones: [String]

  """The title of the lead"""
  title: String

  """The type of the item"""
  type: String

  """The value of the lead"""
  value: Int

  """The visibility of the lead"""
  visibleTo: Int
}

type Organization5 {
  """The ID of the organization the lead is associated with"""
  id: Int

  """The name of the organization the lead is associated with"""
  name: String
}

type Owner2 {
  """The ID of the owner of the lead"""
  id: Int
}

type Person5 {
  """The ID of the person the lead is associated with"""
  id: Int

  """The name of the person the lead is associated with"""
  name: String
}

enum IncludeFields3 {
  LEAD_WAS_SEEN
}

type SearchOrganization {
  additionalData: AdditionalData
  data: Data77

  """If the response is successful or not"""
  success: Boolean
}

type Data77 {
  """The array of found items"""
  items: [Items5ListItem]
}

type Items5ListItem {
  item: Item4

  """Search result relevancy"""
  resultScore: Float
}

type Item4 {
  """The address of the organization"""
  address: String

  """Custom fields"""
  customFields: [String]

  """The ID of the organization"""
  id: Int

  """The name of the organization"""
  name: String

  """An array of notes"""
  notes: [String]
  owner: Owner

  """The type of the item"""
  type: String

  """The visibility of the organization"""
  visibleTo: Int
}

enum Fields4 {
  ADDRESS
  CUSTOM_FIELDS
  NOTES
  NAME
}

type SearchPersons {
  additionalData: AdditionalData
  data: Data91

  """If the response is successful or not"""
  success: Boolean
}

type Data91 {
  """The array of found items"""
  items: [Items6ListItem]
}

type Items6ListItem {
  item: Item5

  """Search result relevancy"""
  resultScore: Float
}

type Item5 {
  """Custom fields"""
  customFields: [String]

  """An array of email addresses"""
  emails: [String]

  """The ID of the person"""
  id: Int

  """The name of the person"""
  name: String

  """An array of notes"""
  notes: [String]
  organization: Organization7
  owner: Owner3

  """An array of phone numbers"""
  phones: [String]

  """The type of the item"""
  type: String

  """The visibility of the person"""
  visibleTo: Int
}

type Organization7 {
  """The ID of the organization the person is associated with"""
  id: Int

  """The name of the organization the person is associated with"""
  name: String
}

type Owner3 {
  """The ID of the owner of the person"""
  id: Int
}

enum Fields5 {
  CUSTOM_FIELDS
  EMAIL
  NOTES
  PHONE
  NAME
}

enum IncludeFields4 {
  PERSON_PICTURE
}

type SearchProducts {
  additionalData: AdditionalData
  data: Data106

  """If the response is successful or not"""
  success: Boolean
}

type Data106 {
  """The array of found items"""
  items: [Items7ListItem]
}

type Items7ListItem {
  item: Item6

  """Search result relevancy"""
  resultScore: Float
}

type Item6 {
  """The code of the product"""
  code: Int

  """The custom fields"""
  customFields: [String]

  """The ID of the product"""
  id: Int

  """The name of the product"""
  name: String
  owner: Owner4

  """The type of the item"""
  type: String

  """The visibility of the product"""
  visibleTo: Int
}

type Owner4 {
  """The ID of the owner of the product"""
  id: Int
}

enum Fields6 {
  CODE
  CUSTOM_FIELDS
  NAME
}

enum IncludeFields5 {
  PRODUCT_PRICE
}

type SinglePermissionSet {
  """The app that permission set belongs to"""
  app: App

  """The number of users assigned to this permission set"""
  assignmentCount: Int

  """A permission assigned to this permission set"""
  contents: [String]

  """The description of the permission set"""
  description: String

  """The ID of user permission set"""
  id: String

  """The name of the permission set"""
  name: String

  """The type of permission set"""
  type: Type5
}

type SubscriptionAddons {
  """An array of add-ons that the company has."""
  data: [JSON]

  """If the response is successful or not"""
  success: Boolean
}

type Team {
  data: BaseTeam

  """If the response is successful or not"""
  success: Boolean
}

type BaseTeam {
  """Flag that indicates whether the team is active"""
  activeFlag: Float

  """The team creation time. Format: YYYY-MM-DD HH:MM:SS"""
  addTime: String

  """The ID of the user who created the team"""
  createdByUserId: Int

  """Flag that indicates whether the team is deleted"""
  deletedFlag: Float

  """The team description"""
  description: String

  """The team ID"""
  id: Int

  """The team manager ID"""
  managerId: Int

  """The team name"""
  name: String

  """The list of user IDs"""
  users: [Int]
}

type User4 {
  data: Data135

  """If the response is successful or not"""
  success: Boolean
}

type Data135 {
  access: [AccessListItem]

  """Boolean that indicates whether the user is activated"""
  activated: Boolean

  """Boolean that indicates whether the user is activated"""
  activeFlag: Boolean

  """The creation date and time of the user. Format: YYYY-MM-DD HH:MM:SS"""
  created: String

  """The user default currency"""
  defaultCurrency: String

  """The user email"""
  email: String

  """Boolean that indicates whether the user has created a company"""
  hasCreatedCompany: Boolean

  """The user icon URL"""
  iconUrl: String

  """The user ID"""
  id: Int

  """
  Boolean that indicates if the requested user is the same which is logged in (in this case, always true)
  """
  isYou: Boolean

  """The user language ID"""
  lang: Int

  """The last login date and time of the user. Format: YYYY-MM-DD HH:MM:SS"""
  lastLogin: String

  """The user locale"""
  locale: String

  """
  The last modification date and time of the user. Format: YYYY-MM-DD HH:MM:SS
  """
  modified: String

  """The user name"""
  name: String

  """The user phone"""
  phone: String

  """The ID of the user role"""
  roleId: Int

  """The user timezone name"""
  timezoneName: String

  """The user timezone offset"""
  timezoneOffset: String
}

type UserAssignmentsToPermissionSet {
  """An array of the assignments of the user"""
  data: [Data89ListItem]

  """If the response is successful or not"""
  success: Boolean
}

type Data89ListItem {
  """The name of the permission set"""
  name: String

  """The ID of the permission set"""
  permissionSetId: String

  """The ID of the user in the permission set"""
  userId: Int
}

type UserConnections {
  """The object of UserConnections"""
  data: Data138

  """If the response is successful or not"""
  success: Boolean
}

"""The object of UserConnections"""
type Data138 {
  """The third party ID or false in case the ID is not found"""
  google: String
}

type Mutation {
  """
  Adds a new activity. Includes `more_activities_scheduled_in_context` property in response's `additional_data` which indicates whether there are more undone activities scheduled with the same deal, person or organization (depending on the supplied data). For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/adding-an-activity" target="_blank" rel="noopener noreferrer">adding an activity</a>.
  
  Equivalent to POST /activities
  """
  addActivity(addActivityRequestInput: AddActivityRequestInput): AddActivity

  """
  Adds a new activity type.
  
  Equivalent to POST /activityTypes
  """
  addActivityType(addActivityTypeRequestInput: AddActivityTypeRequestInput): CreateUpdateDeleteActivityType

  """
  Adds a new call log.
  
  Equivalent to POST /callLogs
  """
  addCallLog(addCallLogRequestInput: AddCallLogRequestInput): AddCallLog

  """
  Adds an audio recording to the call log. That audio can be played by those who have access to the call log object.
  
  Equivalent to POST /callLogs/{id}/recordings
  """
  addCallLogAudioFile(
    addCallLogAudioFileRequestInput: AddCallLogAudioFileRequestInput

    """The ID received when you create the call log"""
    id: String!
  ): AddCallLogAudioFile

  """
  Adds a new messaging channel, only admins are able to register new channels. It will use the getConversations endpoint to fetch conversations, participants and messages afterward. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
  
  Equivalent to POST /channels
  """
  addChannel(channelsInput: ChannelsInput): Channels2

  """
  Adds a new deal. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the dealFields and look for `key` values. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/creating-a-deal" target="_blank" rel="noopener noreferrer">adding a deal</a>.
  
  Equivalent to POST /deals
  """
  addDeal(addDealRequestInput: AddDealRequestInput): Deals

  """
  Adds a new deal field. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/adding-a-new-custom-field" target="_blank" rel="noopener noreferrer">adding a new custom field</a>.
  
  Equivalent to POST /dealFields
  """
  addDealField(createFieldRequestInput: CreateFieldRequestInput): Field

  """
  Adds a follower to a deal.
  
  Equivalent to POST /deals/{id}/followers
  """
  addDealFollower(
    addDealFollowerRequestInput: AddDealFollowerRequestInput

    """The ID of the deal"""
    id: Int!
  ): AddDealFollower

  """
  Adds a participant to a deal.
  
  Equivalent to POST /deals/{id}/participants
  """
  addDealParticipant(
    addDealParticipantRequestInput: AddDealParticipantRequestInput

    """The ID of the deal"""
    id: Int!
  ): AddDealParticipant

  """
  Adds a product to a deal, creating a new item called a deal-product.
  
  Equivalent to POST /deals/{id}/products
  """
  addDealProduct(
    addDealProductRequestInput: AddDealProductRequestInput

    """The ID of the deal"""
    id: Int!
  ): GetAddProductAttachement

  """
  Lets you upload a file and associate it with a deal, person, organization, activity, product or lead. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/adding-a-file" target="_blank" rel="noopener noreferrer">adding a file</a>.
  
  Equivalent to POST /files
  """
  addFile(addFileRequestInput: AddFileRequestInput): AddFile

  """
  Creates a new empty file in the remote location (`googledrive`) that will be linked to the item you supply. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/adding-a-remote-file" target="_blank" rel="noopener noreferrer">adding a remote file</a>.
  
  Equivalent to POST /files/remote
  """
  addFileAndLinkIt(addFileAndLinkItRequestInput: AddFileAndLinkItRequestInput): AddFileAndLinkIt

  """
  Adds a new filter, returns the ID upon success. Note that in the conditions JSON object only one first-level condition group is supported, and it must be glued with 'AND', and only two second level condition groups are supported of which one must be glued with 'AND' and the second with 'OR'. Other combinations do not work (yet) but the syntax supports introducing them in future. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/adding-a-filter" target="_blank" rel="noopener noreferrer">adding a filter</a>.
  
  Equivalent to POST /filters
  """
  addFilter(addFilterRequestInput: AddFilterRequestInput): PostFilter

  """
  Adds a new goal. Along with adding a new goal, a report is created to track the progress of your goal.
  
  Equivalent to POST /goals
  """
  addGoal(addGoalRequestInput: AddGoalRequestInput): AddOrUpdateGoal

  """
  Creates a lead. A lead always has to be linked to a person or an organization or both. All leads created through the Pipedrive API will have a lead source `API` assigned. Here's the tutorial for <a href="https://pipedrive.readme.io/docs/adding-a-lead" target="_blank" rel="noopener noreferrer">adding a lead</a>. If a lead contains custom fields, the fields' values will be included in the response in the same format as with the `Deals` endpoints. If a custom field's value hasn't been set for the lead, it won't appear in the response. Please note that leads do not have a separate set of custom fields, instead they inherit the custom fields' structure from deals. See an example given in the <a href="https://pipedrive.readme.io/docs/updating-custom-field-value" target="_blank" rel="noopener noreferrer">updating custom fields' values tutorial</a>.
  
  Equivalent to POST /leads
  """
  addLead(addLeadRequestInput: AddLeadRequestInput): OneLead

  """
  Creates a lead label.
  
  Equivalent to POST /leadLabels
  """
  addLeadLabel(addLeadLabelRequestInput: AddLeadLabelRequestInput): AddOrUpdateLeadLabel

  """
  Adds a new note.
  
  Equivalent to POST /notes
  """
  addNote(notes2Input: Notes2Input): OneNote

  """
  Adds a new comment to a note.
  
  Equivalent to POST /notes/{id}/comments
  """
  addNoteComment(
    commentPostPutObjectInput: CommentPostPutObjectInput

    """The ID of the note"""
    id: Int!
  ): OneComment

  """
  Adds or updates the visibility setting for a role.
  
  Equivalent to POST /roles/{id}/settings
  """
  addOrUpdateRoleSetting(
    addOrUpdateRoleSettingRequestInput: AddOrUpdateRoleSettingRequestInput

    """The ID of the role"""
    id: Int!
  ): AddOrUpdateRoleSetting

  """
  Adds a new organization. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the organizationFields and look for `key` values. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/adding-an-organization" target="_blank" rel="noopener noreferrer">adding an organization</a>.
  
  Equivalent to POST /organizations
  """
  addOrganization(addOrganizationRequestInput: AddOrganizationRequestInput): AddOrganization

  """
  Adds a new organization field. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/adding-a-new-custom-field" target="_blank" rel="noopener noreferrer">adding a new custom field</a>.
  
  Equivalent to POST /organizationFields
  """
  addOrganizationField(createFieldRequestInput: CreateFieldRequestInput): Field

  """
  Adds a follower to an organization.
  
  Equivalent to POST /organizations/{id}/followers
  """
  addOrganizationFollower(
    addOrganizationFollowerRequestInput: AddOrganizationFollowerRequestInput

    """The ID of the organization"""
    id: Int!
  ): AddOrganizationFollower

  """
  Creates and returns an organization relationship.
  
  Equivalent to POST /organizationRelationships
  """
  addOrganizationRelationship(addOrganizationRelationshipRequestInput: AddOrganizationRelationshipRequestInput): AddOrganizationRelationship

  """
  Adds a new person. Note that you can supply additional custom fields along with the request that are not described here. These custom fields are different for each Pipedrive account and can be recognized by long hashes as keys. To determine which custom fields exists, fetch the personFields and look for `key` values.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field.
  
  Equivalent to POST /persons
  """
  addPerson(addPersonRequestInput: AddPersonRequestInput): AddPerson

  """
  Adds a new person field. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/adding-a-new-custom-field" target="_blank" rel="noopener noreferrer">adding a new custom field</a>.
  
  Equivalent to POST /personFields
  """
  addPersonField(createFieldRequestInput: CreateFieldRequestInput): Field

  """
  Adds a follower to a person.
  
  Equivalent to POST /persons/{id}/followers
  """
  addPersonFollower(
    addPersonFollowerRequestInput: AddPersonFollowerRequestInput

    """The ID of the person"""
    id: Int!
  ): AddPersonFollower

  """
  Adds a picture to a person. If a picture is already set, the old picture will be replaced. Added image (or the cropping parameters supplied with the request) should have an equal width and height and should be at least 128 pixels. GIF, JPG and PNG are accepted. All added images will be resized to 128 and 512 pixel wide squares.
  
  Equivalent to POST /persons/{id}/picture
  """
  addPersonPicture(
    addPersonPictureRequestInput: AddPersonPictureRequestInput

    """The ID of the person"""
    id: Int!
  ): AddPersonPicture

  """
  Adds a new pipeline.
  
  Equivalent to POST /pipelines
  """
  addPipeline(pipelineRequestInput: PipelineRequestInput): AddPipeline

  """
  Adds a new product to the Products inventory. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/adding-a-product" target="_blank" rel="noopener noreferrer">adding a product</a>.
  
  Equivalent to POST /products
  """
  addProduct(addProductRequestInput: AddProductRequestInput): Getproduct

  """
  Adds a new product field. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/adding-a-new-custom-field" target="_blank" rel="noopener noreferrer">adding a new custom field</a>.
  
  Equivalent to POST /productFields
  """
  addProductField(productFieldsInput: ProductFieldsInput): GetProductField

  """
  Adds a follower to a product.
  
  Equivalent to POST /products/{id}/followers
  """
  addProductFollower(
    addProductFollowerRequestInput: AddProductFollowerRequestInput

    """The ID of the product"""
    id: Int!
  ): NewFollower

  """
  Adds a new recurring subscription.
  
  Equivalent to POST /subscriptions/recurring
  """
  addRecurringSubscription(addRecurringSubscriptionRequestInput: AddRecurringSubscriptionRequestInput): SubscriptionsId

  """
  Adds a new role.
  
  Equivalent to POST /roles
  """
  addRole(
    """The details of the role"""
    addRoleRequestInput: AddRoleRequestInput
  ): AddRole

  """
  Assigns a user to a role.
  
  Equivalent to POST /roles/{id}/assignments
  """
  addRoleAssignment(
    addRoleAssignmentRequestInput: AddRoleAssignmentRequestInput

    """The ID of the role"""
    id: Int!
  ): AddRoleAssignment

  """
  Adds a new stage, returns the ID upon success.
  
  Equivalent to POST /stages
  """
  addStage(addStageRequestInput: AddStageRequestInput): Stages

  """
  Adds a new installment subscription.
  
  Equivalent to POST /subscriptions/installment
  """
  addSubscriptionInstallment(addSubscriptionInstallmentRequestInput: AddSubscriptionInstallmentRequestInput): SubscriptionsId

  """
  Adds a new team to the company and returns the created object.
  
  Equivalent to POST /legacyTeams
  """
  addTeam(addTeamRequestInput: AddTeamRequestInput): Team

  """
  Adds users to an existing team.
  
  Equivalent to POST /legacyTeams/{id}/users
  """
  addTeamUser(
    addTeamUserRequestInput: AddTeamUserRequestInput

    """The ID of the team"""
    id: Int!
  ): UserIds

  """
  Adds a new user to the company, returns the ID upon success.
  
  Equivalent to POST /users
  """
  addUser(addUserRequestInput: AddUserRequestInput): User4

  """
  Creates a new Webhook and returns its details. Note that specifying an event which triggers the Webhook combines 2 parameters - `event_action` and `event_object`. E.g., use `*.*` for getting notifications about all events, `added.deal` for any newly added deals, `deleted.persons` for any deleted persons, etc. See <a href="https://pipedrive.readme.io/docs/guide-for-webhooks?ref=api_reference" target="_blank" rel="noopener noreferrer">the guide for Webhooks</a> for more details.
  
  Equivalent to POST /webhooks
  """
  addWebhook(addWebhookRequestInput: AddWebhookRequestInput): Webhook

  """
  Cancels a recurring subscription.
  
  Equivalent to PUT /subscriptions/recurring/{id}/cancel
  """
  cancelRecurringSubscription(
    cancelRecurringSubscriptionRequestInput: CancelRecurringSubscriptionRequestInput

    """The ID of the subscription"""
    id: Int!
  ): SubscriptionsId

  """
  Marks multiple activities as deleted. After 30 days, the activities will be permanently deleted.
  
  Equivalent to DELETE /activities
  """
  deleteActivities(
    """The comma-separated IDs of activities that will be deleted"""
    ids: String!
  ): DeleteActivities

  """
  Marks an activity as deleted. After 30 days, the activity will be permanently deleted.
  
  Equivalent to DELETE /activities/{id}
  """
  deleteActivity(
    """The ID of the activity"""
    id: Int!
  ): DeleteActivity

  """
  Marks an activity type as deleted.
  
  Equivalent to DELETE /activityTypes/{id}
  """
  deleteActivityType(
    """The ID of the activity type"""
    id: Int!
  ): CreateUpdateDeleteActivityType

  """
  Marks multiple activity types as deleted.
  
  Equivalent to DELETE /activityTypes
  """
  deleteActivityTypes(
    """The comma-separated activity type IDs"""
    ids: String!
  ): DeleteActivityTypes

  """
  Deletes a call log. If there is an audio recording attached to it, it will also be deleted. The related activity will not be removed by this request. If you want to remove the related activities, please use the endpoint which is specific for activities.
  
  Equivalent to DELETE /callLogs/{id}
  """
  deleteCallLog(
    """The ID received when you create the call log"""
    id: String!
  ): DeleteCallLog

  """
  Deletes an existing messenger’s channel and all related entities (conversations and messages). To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
  
  Equivalent to DELETE /channels/{id}
  """
  deleteChannel(
    """The ID of the channel provided by the integration"""
    id: String!
  ): Channel

  """
  Deletes a comment.
  
  Equivalent to DELETE /notes/{id}/comments/{commentId}
  """
  deleteComment(
    """The ID of the comment"""
    commentId: ID!

    """The ID of the note"""
    id: Int!
  ): DeleteComment

  """
  Deletes an existing conversation. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
  
  Equivalent to DELETE /channels/{channel-id}/conversations/{conversation-id}
  """
  deleteConversation(
    """The ID of the channel provided by the integration"""
    channelId: String!

    """The ID of the conversation provided by the integration"""
    conversationId: String!
  ): ChannelConversation

  """
  Marks a deal as deleted. After 30 days, the deal will be permanently deleted.
  
  Equivalent to DELETE /deals/{id}
  """
  deleteDeal(
    """The ID of the deal"""
    id: Int!
  ): DeleteDeal

  """
  Marks a field as deleted. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/deleting-a-custom-field" target="_blank" rel="noopener noreferrer">deleting a custom field</a>.
  
  Equivalent to DELETE /dealFields/{id}
  """
  deleteDealField(
    """The ID of the field"""
    id: Int!
  ): DeleteField

  """
  Marks multiple deal fields as deleted.
  
  Equivalent to DELETE /dealFields
  """
  deleteDealFields(
    """The comma-separated field IDs to delete"""
    ids: String!
  ): DeleteFields

  """
  Deletes a follower from a deal.
  
  Equivalent to DELETE /deals/{id}/followers/{follower_id}
  """
  deleteDealFollower(
    """The ID of the follower"""
    followerId: Int!

    """The ID of the deal"""
    id: Int!
  ): DeleteDealFollower

  """
  Deletes a participant from a deal.
  
  Equivalent to DELETE /deals/{id}/participants/{deal_participant_id}
  """
  deleteDealParticipant(
    """The ID of the participant of the deal"""
    dealParticipantId: Int!

    """The ID of the deal"""
    id: Int!
  ): DeleteDealParticipant

  """
  Deletes a product attachment from a deal, using the `product_attachment_id`.
  
  Equivalent to DELETE /deals/{id}/products/{product_attachment_id}
  """
  deleteDealProduct(
    """The ID of the deal"""
    id: Int!

    """The product attachment ID"""
    productAttachmentId: Int!
  ): DeleteDealProduct

  """
  Marks multiple deals as deleted. After 30 days, the deals will be permanently deleted.
  
  Equivalent to DELETE /deals
  """
  deleteDeals(
    """The comma-separated IDs that will be deleted"""
    ids: String!
  ): DeleteDeals

  """
  Marks a file as deleted. After 30 days, the file will be permanently deleted.
  
  Equivalent to DELETE /files/{id}
  """
  deleteFile(
    """The ID of the file"""
    id: Int!
  ): DeleteFile

  """
  Marks a filter as deleted.
  
  Equivalent to DELETE /filters/{id}
  """
  deleteFilter(
    """The ID of the filter"""
    id: Int!
  ): DeleteFilter

  """
  Marks multiple filters as deleted.
  
  Equivalent to DELETE /filters
  """
  deleteFilters(
    """The comma-separated filter IDs to delete"""
    ids: String!
  ): DeleteFilters

  """
  Marks a goal as deleted.
  
  Equivalent to DELETE /goals/{id}
  """
  deleteGoal(
    """The ID of the goal"""
    id: String!
  ): DeleteGoal

  """
  Deletes a specific lead.
  
  Equivalent to DELETE /leads/{id}
  """
  deleteLead(
    """The ID of the lead"""
    id: ID!
  ): LeadId

  """
  Deletes a specific lead label.
  
  Equivalent to DELETE /leadLabels/{id}
  """
  deleteLeadLabel(
    """The ID of the lead label"""
    id: ID!
  ): LeadId

  """
  Marks a mail thread as deleted.
  
  Equivalent to DELETE /mailbox/mailThreads/{id}
  """
  deleteMailThread(
    """The ID of the mail thread"""
    id: Int!
  ): DeleteMailThread

  """
  Deletes a specific note.
  
  Equivalent to DELETE /notes/{id}
  """
  deleteNote(
    """The ID of the note"""
    id: Int!
  ): DeleteNote

  """
  Marks an organization as deleted. After 30 days, the organization will be permanently deleted.
  
  Equivalent to DELETE /organizations/{id}
  """
  deleteOrganization(
    """The ID of the organization"""
    id: Int!
  ): DeleteOrganization

  """
  Marks a field as deleted. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/deleting-a-custom-field" target="_blank" rel="noopener noreferrer">deleting a custom field</a>.
  
  Equivalent to DELETE /organizationFields/{id}
  """
  deleteOrganizationField(
    """The ID of the field"""
    id: Int!
  ): DeleteField

  """
  Marks multiple fields as deleted.
  
  Equivalent to DELETE /organizationFields
  """
  deleteOrganizationFields(
    """The comma-separated field IDs to delete"""
    ids: String!
  ): DeleteFields

  """
  Deletes a follower from an organization. You can retrieve the `follower_id` from the <a href="https://developers.pipedrive.com/docs/api/v1/Organizations#getOrganizationFollowers">List followers of an organization</a> endpoint.
  
  Equivalent to DELETE /organizations/{id}/followers/{follower_id}
  """
  deleteOrganizationFollower(
    """The ID of the follower"""
    followerId: Int!

    """The ID of the organization"""
    id: Int!
  ): DeleteOrganizationFollower

  """
  Deletes an organization relationship and returns the deleted ID.
  
  Equivalent to DELETE /organizationRelationships/{id}
  """
  deleteOrganizationRelationship(
    """The ID of the organization relationship"""
    id: Int!
  ): DeleteOrganizationRelationship

  """
  Marks multiple organizations as deleted. After 30 days, the organizations will be permanently deleted.
  
  Equivalent to DELETE /organizations
  """
  deleteOrganizations(
    """The comma-separated IDs that will be deleted"""
    ids: String!
  ): DeleteOrganizations

  """
  Marks a person as deleted. After 30 days, the person will be permanently deleted.
  
  Equivalent to DELETE /persons/{id}
  """
  deletePerson(
    """The ID of the person"""
    id: Int!
  ): DeletePerson

  """
  Marks a field as deleted. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/deleting-a-custom-field" target="_blank" rel="noopener noreferrer">deleting a custom field</a>.
  
  Equivalent to DELETE /personFields/{id}
  """
  deletePersonField(
    """The ID of the field"""
    id: Int!
  ): DeleteField

  """
  Marks multiple fields as deleted.
  
  Equivalent to DELETE /personFields
  """
  deletePersonFields(
    """The comma-separated field IDs to delete"""
    ids: String!
  ): DeleteFields

  """
  Deletes a follower from a person.
  
  Equivalent to DELETE /persons/{id}/followers/{follower_id}
  """
  deletePersonFollower(
    """The ID of the follower"""
    followerId: Int!

    """The ID of the person"""
    id: Int!
  ): DeletePerson

  """
  Deletes a person’s picture.
  
  Equivalent to DELETE /persons/{id}/picture
  """
  deletePersonPicture(
    """The ID of the person"""
    id: Int!
  ): DeletePerson

  """
  Marks multiple persons as deleted. After 30 days, the persons will be permanently deleted.
  
  Equivalent to DELETE /persons
  """
  deletePersons(
    """The comma-separated IDs that will be deleted"""
    ids: String!
  ): DeletePersons

  """
  Marks a pipeline as deleted.
  
  Equivalent to DELETE /pipelines/{id}
  """
  deletePipeline(
    """The ID of the pipeline"""
    id: Int!
  ): DeletePipeline

  """
  Marks a product as deleted. After 30 days, the product will be permanently deleted.
  
  Equivalent to DELETE /products/{id}
  """
  deleteProduct(
    """The ID of the product"""
    id: Int!
  ): DeleteProduct

  """
  Marks a product field as deleted. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/deleting-a-custom-field" target="_blank" rel="noopener noreferrer">deleting a custom field</a>.
  
  Equivalent to DELETE /productFields/{id}
  """
  deleteProductField(
    """The ID of the product field"""
    id: Int!
  ): DeleteProductField

  """
  Marks multiple fields as deleted.
  
  Equivalent to DELETE /productFields
  """
  deleteProductFields(
    """The comma-separated field IDs to delete"""
    ids: String!
  ): DeleteProductFields

  """
  Deletes a follower from a product.
  
  Equivalent to DELETE /products/{id}/followers/{follower_id}
  """
  deleteProductFollower(
    """The ID of the relationship between the follower and the product"""
    followerId: Int!

    """The ID of the product"""
    id: Int!
  ): DeleteProductFollower

  """
  Marks a role as deleted.
  
  Equivalent to DELETE /roles/{id}
  """
  deleteRole(
    """The ID of the role"""
    id: Int!
  ): DeleteRole

  """
  Removes the assigned user from a role and adds to the default role.
  
  Equivalent to DELETE /roles/{id}/assignments
  """
  deleteRoleAssignment(
    deleteRoleAssignmentRequestInput: DeleteRoleAssignmentRequestInput

    """The ID of the role"""
    id: Int!
  ): DeleteRoleAssignment

  """
  Marks a stage as deleted.
  
  Equivalent to DELETE /stages/{id}
  """
  deleteStage(
    """The ID of the stage"""
    id: Int!
  ): DeleteStage

  """
  Marks multiple stages as deleted.
  
  Equivalent to DELETE /stages
  """
  deleteStages(
    """The comma-separated stage IDs to delete"""
    ids: String!
  ): DeleteStages

  """
  Marks an installment or a recurring subscription as deleted.
  
  Equivalent to DELETE /subscriptions/{id}
  """
  deleteSubscription(
    """The ID of the subscription"""
    id: Int!
  ): SubscriptionsId

  """
  Deletes users from an existing team.
  
  Equivalent to DELETE /legacyTeams/{id}/users
  """
  deleteTeamUser(
    deleteTeamUserRequestInput: DeleteTeamUserRequestInput

    """The ID of the team"""
    id: Int!
  ): UserIds

  """
  Deletes the specified Webhook.
  
  Equivalent to DELETE /webhooks/{id}
  """
  deleteWebhook(
    """The ID of the Webhook to delete"""
    id: Int!
  ): Base

  """
  Duplicates a deal.
  
  Equivalent to POST /deals/{id}/duplicate
  """
  duplicateDeal(
    """The ID of the deal"""
    id: Int!
  ): DuplicateDeal

  """
  Links an existing remote file (`googledrive`) to the item you supply. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/adding-a-remote-file" target="_blank" rel="noopener noreferrer">adding a remote file</a>.
  
  Equivalent to POST /files/remoteLink
  """
  linkFileToItem(linkFileToItemRequestInput: LinkFileToItemRequestInput): LinkFileToItem

  """
  Merges a deal with another deal. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/merging-two-deals" target="_blank" rel="noopener noreferrer">merging two deals</a>.
  
  Equivalent to PUT /deals/{id}/merge
  """
  mergeDeals(
    """The ID of the deal"""
    id: Int!
    mergeDealsRequestInput: MergeDealsRequestInput
  ): MergeDeals

  """
  Merges an organization with another organization. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/merging-two-organizations" target="_blank" rel="noopener noreferrer">merging two organizations</a>.
  
  Equivalent to PUT /organizations/{id}/merge
  """
  mergeOrganizations(
    """The ID of the organization"""
    id: Int!
    mergeOrganizationsRequestInput: MergeOrganizationsRequestInput
  ): MergeOrganizations

  """
  Merges a person with another person. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/merging-two-persons" target="_blank" rel="noopener noreferrer">merging two persons</a>.
  
  Equivalent to PUT /persons/{id}/merge
  """
  mergePersons(
    """The ID of the person"""
    id: Int!
    mergePersonsRequestInput: MergePersonsRequestInput
  ): MergePersons

  """
  Adds a message to a conversation. To use the endpoint, you need to have **Messengers integration** OAuth scope enabled and the Messaging manifest ready for the [Messaging app extension](https://pipedrive.readme.io/docs/messaging-app-extension).
  
  Equivalent to POST /channels/messages/receive
  """
  receiveMessage(channelsMessagesReceiveInput: ChannelsMessagesReceiveInput): ChannelsMessagesReceive2

  """
  Updates an activity. Includes `more_activities_scheduled_in_context` property in response's `additional_data` which indicates whether there are more undone activities scheduled with the same deal, person or organization (depending on the supplied data).
  
  Equivalent to PUT /activities/{id}
  """
  updateActivity(
    """The ID of the activity"""
    id: Int!
    updateActivityRequestInput: UpdateActivityRequestInput
  ): UpdateActivity

  """
  Updates an activity type.
  
  Equivalent to PUT /activityTypes/{id}
  """
  updateActivityType(
    """The ID of the activity type"""
    id: Int!
    updateActivityTypeRequestInput: UpdateActivityTypeRequestInput
  ): CreateUpdateDeleteActivityType

  """
  Updates a comment related to a note.
  
  Equivalent to PUT /notes/{id}/comments/{commentId}
  """
  updateCommentForNote(
    """The ID of the comment"""
    commentId: ID!
    commentPostPutObjectInput: CommentPostPutObjectInput

    """The ID of the note"""
    id: Int!
  ): OneComment

  """
  Updates the properties of a deal. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/updating-a-deal" target="_blank" rel="noopener noreferrer">updating a deal</a>.
  
  Equivalent to PUT /deals/{id}
  """
  updateDeal(
    """The ID of the deal"""
    id: Int!
    updateDealRequestInput: UpdateDealRequestInput
  ): Deals

  """
  Updates a deal field. For more information, see the tutorial for <a href=" https://pipedrive.readme.io/docs/updating-custom-field-value " target="_blank" rel="noopener noreferrer">updating custom fields' values</a>.
  
  Equivalent to PUT /dealFields/{id}
  """
  updateDealField(
    """The ID of the field"""
    id: Int!
    updateFieldRequestInput: UpdateFieldRequestInput
  ): Field

  """
  Updates the details of the product that has been attached to a deal.
  
  Equivalent to PUT /deals/{id}/products/{product_attachment_id}
  """
  updateDealProduct(
    """The ID of the deal"""
    id: Int!

    """
    The ID of the deal-product (the ID of the product attached to the deal)
    """
    productAttachmentId: Int!
    updateDealProductRequestInput: UpdateDealProductRequestInput
  ): GetProductAttachement

  """
  Updates the properties of a file.
  
  Equivalent to PUT /files/{id}
  """
  updateFile(
    """The ID of the file"""
    id: Int!
    updateFileRequestInput: UpdateFileRequestInput
  ): UpdateFile

  """
  Updates an existing filter.
  
  Equivalent to PUT /filters/{id}
  """
  updateFilter(
    """The ID of the filter"""
    id: Int!
    updateFilterRequestInput: UpdateFilterRequestInput
  ): PostFilter

  """
  Updates an existing goal.
  
  Equivalent to PUT /goals/{id}
  """
  updateGoal(
    basicGoalRequestInput: BasicGoalRequestInput

    """The ID of the goal"""
    id: String!
  ): AddOrUpdateGoal

  """
  Updates one or more properties of a lead. Only properties included in the request will be updated. Send `null` to unset a property (applicable for example for `value`, `person_id` or `organization_id`). If a lead contains custom fields, the fields' values will be included in the response in the same format as with the `Deals` endpoints. If a custom field's value hasn't been set for the lead, it won't appear in the response. Please note that leads do not have a separate set of custom fields, instead they inherit the custom fields’ structure from deals. See an example given in the <a href="https://pipedrive.readme.io/docs/updating-custom-field-value" target="_blank" rel="noopener noreferrer">updating custom fields’ values tutorial</a>.
  
  Equivalent to PATCH /leads/{id}
  """
  updateLead(
    """The ID of the lead"""
    id: ID!
    updateLeadRequestInput: UpdateLeadRequestInput
  ): OneLead

  """
  Updates one or more properties of a lead label. Only properties included in the request will be updated.
  
  
  Equivalent to PATCH /leadLabels/{id}
  """
  updateLeadLabel(
    """The ID of the lead label"""
    id: ID!
    updateLeadLabelRequestInput: UpdateLeadLabelRequestInput
  ): AddOrUpdateLeadLabel

  """
  Updates the properties of a mail thread.
  
  Equivalent to PUT /mailbox/mailThreads/{id}
  """
  updateMailThreadDetails(
    """The ID of the mail thread"""
    id: Int!
    updateMailThreadDetailsRequestInput: UpdateMailThreadDetailsRequestInput
  ): UpdateMailThreadDetails

  """
  Updates a note.
  
  Equivalent to PUT /notes/{id}
  """
  updateNote(
    """The ID of the note"""
    id: Int!
    noteRequestInput: NoteRequestInput
  ): OneNote

  """
  Updates the properties of an organization.
  
  Equivalent to PUT /organizations/{id}
  """
  updateOrganization(
    """The ID of the organization"""
    id: Int!
    updateOrganizationRequestInput: UpdateOrganizationRequestInput
  ): UpdateOrganization

  """
  Updates an organization field. For more information, see the tutorial for <a href=" https://pipedrive.readme.io/docs/updating-custom-field-value " target="_blank" rel="noopener noreferrer">updating custom fields' values</a>.
  
  Equivalent to PUT /organizationFields/{id}
  """
  updateOrganizationField(
    """The ID of the field"""
    id: Int!
    updateFieldRequestInput: UpdateFieldRequestInput
  ): Field

  """
  Updates and returns an organization relationship.
  
  Equivalent to PUT /organizationRelationships/{id}
  """
  updateOrganizationRelationship(
    """The ID of the organization relationship"""
    id: Int!
    organizationRelationshipInput: OrganizationRelationshipInput
  ): UpdateOrganizationRelationship

  """
  Updates the properties of a person. For more information, see the tutorial for <a href="https://pipedrive.readme.io/docs/updating-a-person" target="_blank" rel="noopener noreferrer">updating a person</a>.<br>If a company uses the [Campaigns product](https://pipedrive.readme.io/docs/campaigns-in-pipedrive-api), then this endpoint will also accept and return the `data.marketing_status` field.
  
  Equivalent to PUT /persons/{id}
  """
  updatePerson(
    """The ID of the person"""
    id: Int!
    updatePersonRequestInput: UpdatePersonRequestInput
  ): UpdatePerson

  """
  Updates a person field. For more information, see the tutorial for <a href=" https://pipedrive.readme.io/docs/updating-custom-field-value " target="_blank" rel="noopener noreferrer">updating custom fields' values</a>.
  
  Equivalent to PUT /personFields/{id}
  """
  updatePersonField(
    """The ID of the field"""
    id: Int!
    updateFieldRequestInput: UpdateFieldRequestInput
  ): Field

  """
  Updates the properties of a pipeline.
  
  Equivalent to PUT /pipelines/{id}
  """
  updatePipeline(
    """The ID of the pipeline"""
    id: Int!
    pipelineRequest2Input: PipelineRequest2Input
  ): UpdatePipeline

  """
  Updates product data.
  
  Equivalent to PUT /products/{id}
  """
  updateProduct(
    addProductRequest2Input: AddProductRequest2Input

    """The ID of the product"""
    id: Int!
  ): UpdateProduct

  """
  Updates a product field. For more information, see the tutorial for <a href=" https://pipedrive.readme.io/docs/updating-custom-field-value " target="_blank" rel="noopener noreferrer">updating custom fields' values</a>.
  
  Equivalent to PUT /productFields/{id}
  """
  updateProductField(
    """The ID of the product field"""
    id: Int!
    updateProductFieldInput: UpdateProductFieldInput
  ): GetProductField

  """
  Updates a recurring subscription.
  
  Equivalent to PUT /subscriptions/recurring/{id}
  """
  updateRecurringSubscription(
    """The ID of the subscription"""
    id: Int!
    updateRecurringSubscriptionRequestInput: UpdateRecurringSubscriptionRequestInput
  ): SubscriptionsId

  """
  Updates the parent role and/or the name of a specific role.
  
  Equivalent to PUT /roles/{id}
  """
  updateRole(
    """The details of the role"""
    baseRoleRequestInput: BaseRoleRequestInput

    """The ID of the role"""
    id: Int!
  ): UpdateRole

  """
  Updates the properties of a stage.
  
  Equivalent to PUT /stages/{id}
  """
  updateStage(
    """The ID of the stage"""
    id: Int!
    updateStageRequestInput: UpdateStageRequestInput
  ): Stages

  """
  Updates an installment subscription.
  
  Equivalent to PUT /subscriptions/installment/{id}
  """
  updateSubscriptionInstallment(
    """The ID of the subscription"""
    id: Int!
    updateSubscriptionInstallmentRequestInput: UpdateSubscriptionInstallmentRequestInput
  ): SubscriptionsId

  """
  Updates an existing team and returns the updated object.
  
  Equivalent to PUT /legacyTeams/{id}
  """
  updateTeam(
    """The ID of the team"""
    id: Int!
    updateTeamRequestInput: UpdateTeamRequestInput
  ): Team

  """
  Updates the properties of a user. Currently, only `active_flag` can be updated.
  
  Equivalent to PUT /users/{id}
  """
  updateUser(
    """The ID of the user"""
    id: Int!
    updateUserRequestInput: UpdateUserRequestInput
  ): User4
}

type AddActivity {
  additionalData: AdditionalData2
  data: ActivityResponseObject
  relatedObjects: RelatedObjects2
  success: Boolean
}

type AdditionalData2 {
  """This field will be deprecated"""
  updatesStoryId: Int
}

input AddActivityRequestInput {
  """
  The attendees of the activity. This can be either your existing Pipedrive contacts or an external email address. It requires a structure as follows: `[{"email_address":"mail@example.org"}]` or `[{"person_id":1, "email_address":"mail@example.org"}]`
  """
  attendees: [JSON]

  """
  Set the activity as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset by never setting it or overriding it with `null`. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.
  """
  busyFlag: BusyFlag2

  """The ID of the deal this activity is associated with"""
  dealId: Int

  """Whether the activity is done or not. 0 = Not done, 1 = Done"""
  done: Float

  """The due date of the activity. Format: YYYY-MM-DD"""
  dueDate: String

  """The due time of the activity in UTC. Format: HH:MM"""
  dueTime: String

  """The duration of the activity. Format: HH:MM"""
  duration: String

  """The ID of the lead this activity is associated with"""
  leadId: String

  """
  The address of the activity. Pipedrive will automatically check if the location matches a geo-location on Google maps.
  """
  location: String

  """The note of the activity (HTML format)"""
  note: String

  """The ID of the organization this activity is associated with"""
  orgId: Int

  """
  List of multiple persons (participants) this activity is associated with. If omitted, single participant from `person_id` field is used. It requires a structure as follows: `[{"person_id":1,"primary_flag":true}]`
  """
  participants: [JSON]

  """The ID of the person this activity is associated with"""
  personId: Int

  """
  Additional details about the activity that is synced to your external calendar. Unlike the note added to the activity, the description is publicly visible to any guests added to the activity.
  """
  publicDescription: String

  """
  The subject of the activity. When value for subject is not set, it will be given a default value `Call`.
  """
  subject: String

  """
  The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes. When value for type is not set, it will be given a default value `Call`.
  """
  type: String

  """
  The ID of the user whom the activity is assigned to. If omitted, the activity is assigned to the authorized user.
  """
  userId: Int
}

enum BusyFlag2 {
  TRUE
  FALSE
}

type CreateUpdateDeleteActivityType {
  data: Data7

  """If the response is successful or not"""
  success: Boolean
}

type Data7 {
  """The active flag of the activity type"""
  activeFlag: Boolean

  """The creation time of the activity type"""
  addTime: String

  """
  A designated color for the activity type in 6-character HEX format (e.g. `FFFFFF` for white, `000000` for black)
  """
  color: String

  """Icon graphic to use for representing this activity type"""
  iconKey: IconKey

  """The ID of the activity type"""
  id: Int

  """Whether the activity type is a custom one or not"""
  isCustomFlag: Boolean

  """
  A string that is generated by the API based on the given name of the activity type upon creation
  """
  keyString: String

  """The name of the activity type"""
  name: String

  """
  An order number for the activity type. Order numbers should be used to order the types in the activity type selections.
  """
  orderNr: Int

  """The update time of the activity type"""
  updateTime: String
}

input AddActivityTypeRequestInput {
  """
  A designated color for the activity type in 6-character HEX format (e.g. `FFFFFF` for white, `000000` for black)
  """
  color: String

  """Icon graphic to use for representing this activity type"""
  iconKey: IconKey!

  """The name of the activity type"""
  name: String!
}

type AddCallLog {
  data: Data9

  """If the response is successful or not"""
  success: Boolean
}

input AddCallLogRequestInput {
  """
  If specified, this activity will be converted into a call log, with the information provided. When this field is used, you don't need to specify `deal_id`, `person_id` or `org_id`, as they will be ignored in favor of the values already available in the activity. The `activity_id` must refer to a `call` type activity.
  """
  activityId: Int

  """The ID of the deal this call is associated with"""
  dealId: Int

  """The duration of the call in seconds"""
  duration: String

  """
  The date and time of the end of the call in UTC. Format: YYYY-MM-DD HH:MM:SS.
  """
  endTime: String!

  """The number that made the call"""
  fromPhoneNumber: String

  """The note for the call log in HTML format"""
  note: String

  """The ID of the organization this call is associated with"""
  orgId: Int

  """Describes the outcome of the call"""
  outcome: Outcome!

  """The ID of the person this call is associated with"""
  personId: Int

  """
  The date and time of the start of the call in UTC. Format: YYYY-MM-DD HH:MM:SS.
  """
  startTime: String!

  """The name of the activity this call is attached to"""
  subject: String

  """The number called"""
  toPhoneNumber: String!

  """
  The ID of the owner of the call log. Please note that a user without account settings access cannot create call logs for other users.
  """
  userId: Int
}

type AddCallLogAudioFile {
  """If the response is successful or not"""
  success: Boolean
}

input AddCallLogAudioFileRequestInput {
  """Audio file supported by the HTML5 specification"""
  file: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type Channels2 {
  data: Data11
  success: Boolean
}

type Data11 {
  """The URL for an icon that represents your channel"""
  avatarUrl: String

  """The date and time when your channel was created in the API"""
  createdAt: String

  """
  The unique channel ID used internally in omnichannel-api and the frontend of the extension
  """
  id: String

  """The client_id of your app in Pipedrive marketplace"""
  marketplaceClientId: String

  """The name of the channel"""
  name: String

  """The ID of the user's company in Pipedrive"""
  pdCompanyId: Int

  """The ID of the user in Pipedrive"""
  pdUserId: Int

  """The channel ID you specified while creating the channel"""
  providerChannelId: String

  """Value of the provider_type sent to this endpoint"""
  providerType: ProviderType2

  """Value of the template_support sent to this endpoint"""
  templateSupport: Boolean
}

enum ProviderType2 {
  FACEBOOK
  WHATSAPP
  OTHER
}

input ChannelsInput {
  """The URL for an icon that represents your channel"""
  avatarUrl: String

  """The name of the channel"""
  name: String!

  """The channel ID"""
  providerChannelId: String!

  """It controls the icons (like the icon next to the conversation)"""
  providerType: ProviderType

  """
  If true, enables templates logic on UI. Requires getTemplates endpoint implemented. Find out more [here](https://pipedrive.readme.io/docs/implementing-messaging-app-extension).
  """
  templateSupport: Boolean
}

enum ProviderType {
  FACEBOOK
  WHATSAPP
  OTHER
}

type Deals {
  """The deal object"""
  data: Data15
  relatedObjects: RelatedObjects3

  """If the response is successful or not"""
  success: Boolean
}

"""The deal object"""
type Data15 {
  """Whether the deal is active or not"""
  active: Boolean

  """The number of activities associated with the deal"""
  activitiesCount: Int

  """The creation date and time of the deal"""
  addTime: String

  """The BCC email of the deal"""
  ccEmail: String

  """The date and time of closing the deal"""
  closeTime: String

  """The creator of the deal"""
  creatorUserId: CreatorUserId

  """The currency associated with the deal"""
  currency: String

  """Whether the deal is deleted or not"""
  deleted: Boolean

  """The number of completed activities associated with the deal"""
  doneActivitiesCount: Int

  """The number of emails associated with the deal"""
  emailMessagesCount: Int

  """The expected close date of the deal"""
  expectedCloseDate: String

  """The number of files associated with the deal"""
  filesCount: Int

  """The date and time of the first time changing the deal status as won"""
  firstWonTime: String

  """The number of followers associated with the deal"""
  followersCount: Int

  """The deal value formatted with selected currency. E.g. US$500"""
  formattedValue: String

  """The weighted_value formatted with selected currency. E.g. US$500"""
  formattedWeightedValue: String

  """The ID of the deal"""
  id: Int

  """The label assigned to the deal"""
  label: Int

  """The date of the last activity associated with the deal"""
  lastActivityDate: String

  """The ID of the last activity associated with the deal"""
  lastActivityId: Int

  """The date and time of the last incoming email associated with the deal"""
  lastIncomingMailTime: String

  """The date and time of the last outgoing email associated with the deal"""
  lastOutgoingMailTime: String

  """The reason for losing the deal"""
  lostReason: String

  """The date and time of changing the deal status as lost"""
  lostTime: String

  """The date of the next activity associated with the deal"""
  nextActivityDate: String

  """The duration of the next activity associated with the deal"""
  nextActivityDuration: String

  """The ID of the next activity associated with the deal"""
  nextActivityId: Int

  """The note of the next activity associated with the deal"""
  nextActivityNote: String

  """The subject of the next activity associated with the deal"""
  nextActivitySubject: String

  """The time of the next activity associated with the deal"""
  nextActivityTime: String

  """The type of the next activity associated with the deal"""
  nextActivityType: String

  """The number of notes associated with the deal"""
  notesCount: Int

  """If the organization that is associated with the deal is hidden or not"""
  orgHidden: Boolean
  orgId: OrgId

  """The name of the organization associated with the deal"""
  orgName: String

  """The name of the deal owner"""
  ownerName: String

  """The number of participants associated with the deal"""
  participantsCount: Int

  """If the person that is associated with the deal is hidden or not"""
  personHidden: Boolean
  personId: PersonId

  """The name of the person associated with the deal"""
  personName: String

  """The ID of pipeline associated with the deal"""
  pipelineId: Int

  """The success probability percentage of the deal"""
  probability: Float

  """The number of products associated with the deal"""
  productsCount: Int

  """The date and time of changing the deal status as rotten"""
  rottenTime: String

  """The last updated date and time of the deal stage"""
  stageChangeTime: String

  """The ID of the deal stage"""
  stageId: Int

  """The order number of the deal stage associated with the deal"""
  stageOrderNr: Int

  """The status of the deal"""
  status: String

  """The title of the deal"""
  title: String

  """The number of incomplete activities associated with the deal"""
  undoneActivitiesCount: Int

  """The last updated date and time of the deal"""
  updateTime: String
  userId: UserId

  """The value of the deal"""
  value: Float

  """The visibility of the deal"""
  visibleTo: String

  """
  Probability times deal value. Probability can either be deal probability or if not set, then stage probability.
  """
  weightedValue: Float

  """The currency associated with the deal"""
  weightedValueCurrency: String

  """The date and time of changing the deal status as won"""
  wonTime: String
}

input AddDealRequestInput {
  """
  The optional creation date & time of the deal in UTC. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS
  """
  addTime: String

  """
  The currency of the deal. Accepts a 3-character currency code. If omitted, currency will be set to the default currency of the authorized user.
  """
  currency: String

  """The expected close date of the deal. In ISO 8601 format: YYYY-MM-DD."""
  expectedCloseDate: String

  """
  The optional message about why the deal was lost (to be used when status = lost)
  """
  lostReason: String

  """
  The ID of an organization which this deal will be linked to. If the organization does not exist yet, it needs to be created first. This property is required unless `person_id` is specified.
  """
  orgId: Int

  """
  The ID of a person which this deal will be linked to. If the person does not exist yet, it needs to be created first. This property is required unless `org_id` is specified.
  """
  personId: Int

  """
  The ID of the pipeline this deal will be added to. By default, the deal will be added to the first stage of the specified pipeline. Please note that `pipeline_id` and `stage_id` should not be used together as `pipeline_id` will be ignored.
  """
  pipelineId: Int

  """
  The success probability percentage of the deal. Used/shown only when `deal_probability` for the pipeline of the deal is enabled.
  """
  probability: Float

  """
  The ID of the stage this deal will be added to. Please note that a pipeline will be assigned automatically based on the `stage_id`. If omitted, the deal will be placed in the first stage of the default pipeline.
  """
  stageId: Int

  """
  open = Open, won = Won, lost = Lost, deleted = Deleted. If omitted, status will be set to open.
  """
  status: Status2

  """The title of the deal"""
  title: String!

  """
  The ID of the user which will be the owner of the created deal. If not provided, the user making the request will be used.
  """
  userId: Int

  """The value of the deal. If omitted, value will be set to 0."""
  value: String

  """
  The visibility of the deal. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user. Read more about visibility groups <a href="https://support.pipedrive.com/en/article/visibility-groups" target="_blank" rel="noopener noreferrer">here</a>.<h4>Essential / Advanced plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers</td><tr><td>`3`</td><td>Entire company</td></tr></table><h4>Professional / Enterprise plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner only</td><tr><td>`3`</td><td>Owner's visibility group</td></tr><tr><td>`5`</td><td>Owner's visibility group and sub-groups</td></tr><tr><td>`7`</td><td>Entire company</td></tr></table>
  """
  visibleTo: String
}

enum Status2 {
  OPEN
  WON
  LOST
  DELETED
}

input CreateFieldRequestInput {
  """
  Whether the field is available in the 'add new' modal or not (both in the web and mobile app)
  """
  addVisibleFlag: AddVisibleFlag

  """
  The type of the field<table><tr><th>Value</th><th>Description</th></tr><tr><td>`address`</td><td>Address field (has multiple subfields, autocompleted by Google Maps)</td></tr><tr><td>`date`</td><td>Date (format YYYY-MM-DD)</td></tr><tr><td>`daterange`</td><td>Date-range field (has a start date and end date value, both YYYY-MM-DD)</td></tr><tr><td>`double`</td><td>Numeric value</td></tr><tr><td>`enum`</td><td>Options field with a single possible chosen option</td></tr><tr></tr><tr><td>`monetary`</td><td>Monetary field (has a numeric value and a currency value)</td></tr><tr><td>`org`</td><td>Organization field (contains an organization ID which is stored on the same account)</td></tr><tr><td>`people`</td><td>Person field (contains a person ID which is stored on the same account)</td></tr><tr><td>`phone`</td><td>Phone field (up to 255 numbers and/or characters)</td></tr><tr><td>`set`</td><td>Options field with a possibility of having multiple chosen options</td></tr><tr><td>`text`</td><td>Long text (up to 65k characters)</td></tr><tr><td>`time`</td><td>Time field (format HH:MM:SS)</td></tr><tr><td>`timerange`</td><td>Time-range field (has a start time and end time value, both HH:MM:SS)</td></tr><tr><td>`user`</td><td>User field (contains a user ID of another Pipedrive user)</td></tr><tr><td>`varchar`</td><td>Text (up to 255 characters)</td></tr><tr><td>`varchar_auto`</td><td>Autocomplete text (up to 255 characters)</td></tr><tr><td>`visible_to`</td><td>System field that keeps item's visibility setting</td></tr></table>
  """
  fieldType: FieldType!

  """The name of the field"""
  name: String!

  """
  When `field_type` is either set or enum, possible options must be supplied as a JSON-encoded sequential array of objects. Example: `[{"label":"New Item"}]`
  """
  options: String
}

enum AddVisibleFlag {
  TRUE
  FALSE
}

type AddDealFollower {
  data: Data27

  """If the response is successful or not"""
  success: Boolean
}

type Data27 {
  """The date and time when the deal follower was added"""
  addTime: String

  """The ID of the deal which the follower was added to"""
  dealId: Int

  """The follower ID"""
  id: Int

  """The user ID who added the follower"""
  userId: Int
}

input AddDealFollowerRequestInput {
  """The ID of the user"""
  userId: Int!
}

type AddDealParticipant {
  """The object of participant"""
  data: Data32
  relatedObjects: RelatedObjects3

  """If the request was successful or not"""
  success: Boolean
}

"""The object of participant"""
type Data32 {
  """Whether the person is active or not"""
  activeFlag: Boolean

  """The count of activities related to the person"""
  activitiesCount: Int

  """
  The date and time when the person was added/created. Format: YYYY-MM-DD HH:MM:SS
  """
  addTime: String

  """The BCC email associated with the person"""
  ccEmail: String

  """The count of closed deals related with the item"""
  closedDealsCount: Int

  """The ID of the company related to the person"""
  companyId: Int

  """The count of done activities related to the person"""
  doneActivitiesCount: Int

  """
  An email address as a string or an array of email objects related to the person. The structure of the array is as follows: `[{ "value": "mail@example.com", "primary": "true", "label": "main" } ]`. Please note that only `value` is required.
  """
  email: [Email3ListItem]

  """The count of email messages related to the person"""
  emailMessagesCount: Int

  """The count of files related to the person"""
  filesCount: Int

  """The first letter of the name of the person"""
  firstChar: String

  """The first name of the person"""
  firstName: String

  """The count of followers related to the person"""
  followersCount: Int

  """The ID of the person"""
  id: Int

  """The label assigned to the person"""
  label: Int

  """The date of the last activity associated with the deal"""
  lastActivityDate: String

  """The ID of the last activity associated with the deal"""
  lastActivityId: Int

  """
  The date and time of the last incoming email associated with the person
  """
  lastIncomingMailTime: String

  """The last name of the person"""
  lastName: String

  """
  The date and time of the last outgoing email associated with the person
  """
  lastOutgoingMailTime: String

  """The count of lost deals related with the item"""
  lostDealsCount: Int

  """The name of the person"""
  name: String

  """The date of the next activity associated with the deal"""
  nextActivityDate: String

  """The ID of the next activity associated with the deal"""
  nextActivityId: Int

  """The time of the next activity associated with the deal"""
  nextActivityTime: String

  """The count of notes related to the person"""
  notesCount: Int

  """The count of open deals related with the item"""
  openDealsCount: Int
  orgId: RelationshipOrganizationInfoItemWithActiveFlag

  """The name of the organization associated with the person"""
  orgName: String
  ownerId: OwnerId

  """The name of the owner associated with the person"""
  ownerName: String

  """
  A phone number supplied as a string or an array of phone objects related to the person. The structure of the array is as follows: `[{ "value": "12345", "primary": "true", "label": "mobile" }]`. Please note that only `value` is required.
  """
  phone: [Phone3ListItem]
  pictureId: PictureId

  """The count of related closed deals related with the item"""
  relatedClosedDealsCount: Int

  """The count of related lost deals related with the item"""
  relatedLostDealsCount: Int

  """The count of related open deals related with the item"""
  relatedOpenDealsCount: Int

  """The count of related won deals related with the item"""
  relatedWonDealsCount: Int

  """The count of undone activities related to the person"""
  undoneActivitiesCount: Int

  """
  The last updated date and time of the person. Format: YYYY-MM-DD HH:MM:SS
  """
  updateTime: String

  """The visibility group ID of who can see the person"""
  visibleTo: String

  """The count of won deals related with the item"""
  wonDealsCount: Int
}

input AddDealParticipantRequestInput {
  """The ID of the person"""
  personId: Int!
}

type GetAddProductAttachement {
  """The added product object attached to the deal"""
  data: Data37

  """If the response is successful or not"""
  success: Boolean
}

"""The added product object attached to the deal"""
type Data37 {
  """Whether the product is active or not"""
  activeFlag: Boolean

  """The date and time when the product was added to the deal"""
  addTime: String

  """A textual comment associated with this product-deal attachment"""
  comments: String

  """The ID of the company"""
  companyId: Int

  """The currency associated with the deal product"""
  currency: String

  """The ID of the deal"""
  dealId: Int

  """The discount %. If omitted, will be set to 0."""
  discountPercentage: Float

  """The duration of the product. If omitted, will be set to 1."""
  duration: Float

  """The unit duration of the product"""
  durationUnit: String

  """
  The ID of the deal-product (the ID of the product attached to the deal)
  """
  id: Int

  """The price at which this product will be added to the deal"""
  itemPrice: Float!

  """The date and time when the deal product was last edited"""
  lastEdit: String

  """The product name"""
  name: String

  """
  The ID of the deal-product (the ID of the product attached to the deal)
  """
  productAttachmentId: Int

  """The ID of the product to use"""
  productId: Int!

  """
  The ID of the product variation to use. When omitted, no variation will be used.
  """
  productVariationId: Int

  """
  Quantity – e.g. how many items of this product will be added to the deal
  """
  quantity: Int!

  """The sum of all the products attached to the deal"""
  sum: Float

  """The product sum without the discount"""
  sumNoDiscount: Float

  """The tax percentage"""
  tax: Float
}

input AddDealProductRequestInput {
  """A textual comment associated with this product-deal attachment"""
  comments: String

  """The discount %. If omitted, will be set to 0."""
  discountPercentage: Float

  """The duration of the product. If omitted, will be set to 1."""
  duration: Float

  """The unit duration of the product"""
  durationUnit: String

  """The price at which this product will be added to the deal"""
  itemPrice: Float!

  """The ID of the product to use"""
  productId: Int!

  """
  The ID of the product variation to use. When omitted, no variation will be used.
  """
  productVariationId: Int

  """
  Quantity – e.g. how many items of this product will be added to the deal
  """
  quantity: Int!

  """The tax percentage"""
  tax: Float
}

type AddFile {
  """The file data"""
  data: Data44

  """If the request was successful or not"""
  success: Boolean
}

input AddFileRequestInput {
  """The ID of the activity to associate file(s) with"""
  activityId: Int

  """The ID of the deal to associate file(s) with"""
  dealId: Int

  """
  A single file, supplied in the multipart/form-data encoding and contained within the given boundaries
  """
  file: Upload!

  """The ID of the lead to associate file(s) with"""
  leadId: ID

  """The ID of the organization to associate file(s) with"""
  orgId: Int

  """The ID of the person to associate file(s) with"""
  personId: Int

  """The ID of the product to associate file(s) with"""
  productId: Int
}

type AddFileAndLinkIt {
  """The file data"""
  data: Data44

  """If the request was successful or not"""
  success: Boolean
}

input AddFileAndLinkItRequestInput {
  """The file type"""
  fileType: FileType!

  """The ID of the item to associate the file with"""
  itemId: Int!

  """The item type"""
  itemType: ItemType!

  """
  The location type to send the file to. Only `googledrive` is supported at the moment.
  """
  remoteLocation: RemoteLocation!

  """The title of the file"""
  title: String!
}

enum FileType {
  GDOC
  GSLIDES
  GSHEET
  GFORM
  GDRAW
}

enum ItemType {
  DEAL
  ORGANIZATION
  PERSON
}

enum RemoteLocation {
  GOOGLEDRIVE
}

type PostFilter {
  data: Data48

  """If the response is successful or not"""
  success: Boolean
}

type Data48 {
  """The activity flag of the created filter"""
  activeFlag: Boolean

  """The add time of the created filter"""
  addTime: String

  """The created filter conditions object"""
  conditions: JSON

  """The custom view ID of the created filter"""
  customViewId: Int

  """The ID of the created filter"""
  id: Int

  """The name of the created filter"""
  name: String

  """If the created filter is temporary or not"""
  temporaryFlag: Boolean
  type: Type

  """The update time of the created filter"""
  updateTime: String

  """The user ID of the created filter"""
  userId: Int

  """The visibility group ID of the created filter"""
  visibleTo: Int
}

input AddFilterRequestInput {
  """
  The conditions of the filter as a JSON object. Please note that a maximum of 16 conditions is allowed per filter and `date` values must be supplied in the `YYYY-MM-DD` format. It requires a minimum structure as follows: `{"glue":"and","conditions":[{"glue":"and","conditions": [CONDITION_OBJECTS]},{"glue":"or","conditions":[CONDITION_OBJECTS]}]}`. Replace `CONDITION_OBJECTS` with JSON objects of the following structure: `{"object":"","field_id":"", "operator":"","value":"", "extra_value":""}` or leave the array empty. Depending on the object type you should use another API endpoint to get `field_id`. There are five types of objects you can choose from: `"person"`, `"deal"`, `"organization"`, `"product"`, `"activity"` and you can use these types of operators depending on what type of a field you have: `"IS NOT NULL"`, `"IS NULL"`, `"<="`, `">="`, `"<"`, `">"`, `"!="`, `"="`, `"LIKE '$%'"`, `"LIKE '%$%'"`, `"NOT LIKE '$%'"`. To get a better understanding of how filters work try creating them directly from the Pipedrive application.
  """
  conditions: JSON!

  """The name of the filter"""
  name: String!

  """The type of filter to create"""
  type: String!
}

type AddOrUpdateGoal {
  data: Data51

  """If the request was successful or not"""
  success: Boolean
}

type Data51 {
  goal: Goal
}

input AddGoalRequestInput {
  """
  Who this goal is assigned to. It requires the following JSON structure: `{ "id": "1", "type": "person" }`. `type` can be either `person`, `company` or `team`. ID of the assignee person, company or team.
  """
  assignee: JSON!

  """
  The date when the goal starts and ends. It requires the following JSON structure: `{ "start": "2019-01-01", "end": "2022-12-31" }`. Date in format of YYYY-MM-DD. "end" can be set to `null` for an infinite, open-ended goal.
  """
  duration: JSON!

  """
  The expected outcome of the goal. Expected outcome can be tracked either by `quantity` or by `sum`. It requires the following JSON structure: `{ "target": "50", "tracking_metric": "quantity" }` or `{ "target": "50", "tracking_metric": "sum", "currency_id": 1 }`. `currency_id` should only be added to `sum` type of goals.
  """
  expectedOutcome: JSON!

  """The interval of the goal"""
  interval: Interval!

  """The title of the goal"""
  title: String

  """
  The type of the goal. It requires the following JSON structure: `{ "name": "deals_started", "params": { "pipeline_id": [1, 2], "activity_type_id": [9] } }`. Type can be one of: `deals_won`, `deals_progressed`, `activities_completed`, `activities_added`, `deals_started` or `revenue_forecast`. `params` can include `pipeline_id`, `stage_id` or `activity_type_id`. `stage_id` is related to only `deals_progressed` type of goals and `activity_type_id` to `activities_completed` or `activities_added` types of goals. The `pipeline_id` and `activity_type_id` need to be given as an array of integers. To track the goal in all pipelines, set `pipeline_id` as `null` and similarly, to track the goal for all activities, set `activity_type_id` as `null`.”
  """
  type: JSON!
}

enum Interval {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

input AddLeadRequestInput {
  """
  The date of when the deal which will be created from the lead is expected to be closed. In ISO 8601 format: YYYY-MM-DD.
  """
  expectedCloseDate: String

  """The IDs of the lead labels which will be associated with the lead"""
  labelIds: [ID]

  """
  The ID of an organization which this lead will be linked to. If the organization does not exist yet, it needs to be created first. This property is required unless `person_id` is specified.
  """
  organizationId: Int

  """
  The ID of the user which will be the owner of the created lead. If not provided, the user making the request will be used.
  """
  ownerId: Int

  """
  The ID of a person which this lead will be linked to. If the person does not exist yet, it needs to be created first. This property is required unless `organization_id` is specified.
  """
  personId: Int

  """The name of the lead"""
  title: String!

  """The potential value of the lead"""
  value: ValueInput

  """
  The visibility of the lead. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user. Read more about visibility groups <a href="https://support.pipedrive.com/en/article/visibility-groups" target="_blank" rel="noopener noreferrer">here</a>.<h4>Essential / Advanced plan</h4><table><tr><th style="width: 40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers</td><tr><td>`3`</td><td>Entire company</td></tr></table><h4>Professional / Enterprise plan</h4><table><tr><th style="width: 40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner only</td><tr><td>`3`</td><td>Owner's visibility group</td></tr><tr><td>`5`</td><td>Owner's visibility group and sub-groups</td></tr><tr><td>`7`</td><td>Entire company</td></tr></table>
  """
  visibleTo: String

  """
  A flag indicating whether the lead was seen by someone in the Pipedrive UI
  """
  wasSeen: WasSeen
}

"""The potential value of the lead"""
input ValueInput {
  amount: Float!
  currency: String!
}

enum WasSeen {
  TRUE
  FALSE
}

type AddOrUpdateLeadLabel {
  data: Data62
  success: Boolean
}

type Data62 {
  """
  The date and time of when the lead label was created. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
  """
  addTime: String

  """The color of the label. Only a subset of colors can be used."""
  color: Color

  """The unique ID of the lead label"""
  id: ID

  """The name of the lead label"""
  name: String

  """
  The date and time of when the lead label was last updated. In ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
  """
  updateTime: String
}

input AddLeadLabelRequestInput {
  """The color of the label. Only a subset of colors can be used."""
  color: Color!

  """The name of the lead label"""
  name: String!
}

input Notes2Input {
  """
  The optional creation date & time of the note in UTC. Can be set in the past or in the future. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS
  """
  addTime: String

  """
  The content of the note in HTML format. Subject to sanitization on the back-end.
  """
  content: String!

  """
  The ID of the deal the note will be attached to. This property is required unless one of (`lead_id/person_id/org_id`) is specified.
  """
  dealId: Int

  """
  The ID of the lead the note will be attached to. This property is required unless one of (`deal_id/person_id/org_id`) is specified.
  """
  leadId: ID

  """
  The ID of the organization this note will be attached to. This property is required unless one of (`deal_id/lead_id/person_id`) is specified.
  """
  orgId: Int

  """
  The ID of the person this note will be attached to. This property is required unless one of (`deal_id/lead_id/org_id`) is specified.
  """
  personId: Int

  """
  If set, the results are filtered by note to deal pinning state (`deal_id` is also required)
  """
  pinnedToDealFlag: Float

  """
  If set, the results are filtered by note to lead pinning state (`lead_id` is also required)
  """
  pinnedToLeadFlag: Float

  """
  If set, the results are filtered by note to organization pinning state (`org_id` is also required)
  """
  pinnedToOrganizationFlag: Float

  """
  If set, the results are filtered by note to person pinning state (`person_id` is also required)
  """
  pinnedToPersonFlag: Float

  """
  The ID of the user who will be marked as the author of the note. Only an admin can change the author.
  """
  userId: Int
}

input CommentPostPutObjectInput {
  """
  The content of the comment in HTML format. Subject to sanitization on the back-end.
  """
  content: String!
}

type AddOrUpdateRoleSetting {
  """The response data"""
  data: Data126

  """If the response is successful or not"""
  success: Boolean
}

"""The response data"""
type Data126 {
  """The setting"""
  dealDefaultVisibility: DealDefaultVisibility

  """The ID of the role"""
  id: Int
}

enum DealDefaultVisibility {
  _1
  _3
  _5
  _7
}

input AddOrUpdateRoleSettingRequestInput {
  settingKey: SettingKey!

  """
  Possible values for the `default_visibility` setting depending on the subscription plan:<br> <table class='role-setting'> <caption><b>Essential / Advanced plan</b></caption> <tr><th><b>Value</b></th><th><b>Description</b></th></tr> <tr><td>`1`</td><td>Owner & Followers</td></tr> <tr><td>`3`</td><td>Entire company</td></tr> </table> <br> <table class='role-setting'> <caption><b>Professional / Enterprise plan</b></caption> <tr><th><b>Value</b></th><th><b>Description</b></th></tr> <tr><td>`1`</td><td>Owner only</td></tr> <tr><td>`3`</td><td>Owner&#39;s visibility group</td></tr> <tr><td>`5`</td><td>Owner&#39;s visibility group and sub-groups</td></tr> <tr><td>`7`</td><td>Entire company</td></tr> </table> <br> Read more about visibility groups <a href='https://support.pipedrive.com/en/article/visibility-groups'>here</a>.
  """
  value: Value3!
}

enum SettingKey {
  DEAL_DEFAULT_VISIBILITY
  LEAD_DEFAULT_VISIBILITY
  ORG_DEFAULT_VISIBILITY
  PERSON_DEFAULT_VISIBILITY
  PRODUCT_DEFAULT_VISIBILITY
}

enum Value3 {
  _1
  _3
  _5
  _7
}

type AddOrganization {
  data: BaseOrganizationItemWithEditNameFlag
  relatedObjects: RelatedObjects7

  """If the response is successful or not"""
  success: Boolean
}

type BaseOrganizationItemWithEditNameFlag {
  """Whether the organization is active or not"""
  activeFlag: Boolean

  """The count of activities related to the organization"""
  activitiesCount: Int

  """The creation date and time of the organization"""
  addTime: String

  """The full address of the organization"""
  address: String

  """The level 1 admin area of the organization location"""
  addressAdminAreaLevel1: String

  """The level 2 admin area of the organization location"""
  addressAdminAreaLevel2: String

  """The country of the organization location"""
  addressCountry: String

  """The formatted organization location"""
  addressFormattedAddress: String

  """The locality of the organization location"""
  addressLocality: String

  """The postal code of the organization location"""
  addressPostalCode: String

  """The route of the organization location"""
  addressRoute: String

  """The street number of the organization location"""
  addressStreetNumber: String

  """The sub-locality of the organization location"""
  addressSublocality: String

  """The sub-premise of the organization location"""
  addressSubpremise: String

  """The BCC email of the organization"""
  ccEmail: String

  """The count of closed deals related with the item"""
  closedDealsCount: Int

  """The ID of the company related to the organization"""
  companyId: Int

  """The country code of the organization"""
  countryCode: String

  """The count of done activities related to the organization"""
  doneActivitiesCount: Int

  """
  If the company ID of the organization and company ID of the request is same or not
  """
  editName: Boolean

  """The count of email messages related to the organization"""
  emailMessagesCount: Int

  """The count of files related to the organization"""
  filesCount: Int

  """The first character of the organization name"""
  firstChar: String

  """The count of followers related to the organization"""
  followersCount: Int

  """The ID of the organization"""
  id: Int

  """The ID of the label"""
  label: Int

  """The date of the last activity associated with the deal"""
  lastActivityDate: String

  """The ID of the last activity associated with the deal"""
  lastActivityId: Int

  """The count of lost deals related with the item"""
  lostDealsCount: Int

  """The name of the organization"""
  name: String

  """The date of the next activity associated with the deal"""
  nextActivityDate: String

  """The ID of the next activity associated with the deal"""
  nextActivityId: Int

  """The time of the next activity associated with the deal"""
  nextActivityTime: String

  """The count of notes related to the organization"""
  notesCount: Int

  """The count of open deals related with the item"""
  openDealsCount: Int
  ownerId: OwnerId

  """The name of the organization owner"""
  ownerName: String

  """The count of persons related to the organization"""
  peopleCount: Int
  pictureId: PictureId2

  """The count of related closed deals related with the item"""
  relatedClosedDealsCount: Int

  """The count of related lost deals related with the item"""
  relatedLostDealsCount: Int

  """The count of related open deals related with the item"""
  relatedOpenDealsCount: Int

  """The count of related won deals related with the item"""
  relatedWonDealsCount: Int

  """The count of undone activities related to the organization"""
  undoneActivitiesCount: Int

  """The last updated date and time of the organization"""
  updateTime: String

  """The visibility group ID of who can see the organization"""
  visibleTo: String

  """The count of won deals related with the item"""
  wonDealsCount: Int
}

input AddOrganizationRequestInput {
  """
  The optional creation date & time of the organization in UTC. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS
  """
  addTime: String

  """The name of the organization"""
  name: String!

  """
  The ID of the user who will be marked as the owner of this organization. When omitted, the authorized user ID will be used.
  """
  ownerId: Int

  """
  The visibility of the organization. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user. Read more about visibility groups <a href="https://support.pipedrive.com/en/article/visibility-groups" target="_blank" rel="noopener noreferrer">here</a>.<h4>Essential / Advanced plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers</td><tr><td>`3`</td><td>Entire company</td></tr></table><h4>Professional / Enterprise plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner only</td><tr><td>`3`</td><td>Owner's visibility group</td></tr><tr><td>`5`</td><td>Owner's visibility group and sub-groups</td></tr><tr><td>`7`</td><td>Entire company</td></tr></table>
  """
  visibleTo: String
}

type AddOrganizationFollower {
  data: Data81

  """If the request was successful or not"""
  success: Boolean
}

type Data81 {
  """The date and time of adding the follower to the item"""
  addTime: String

  """The ID of the follower"""
  id: Int

  """The ID of the organization"""
  orgId: Int

  """The user ID of the follower related to the item"""
  userId: Int
}

input AddOrganizationFollowerRequestInput {
  """The ID of the user"""
  userId: Int!
}

type AddOrganizationRelationship {
  data: Data86
  relatedObjects: RelatedObjects10

  """If the response is successful or not"""
  success: Boolean
}

type Data86 {
  """Whether the relationship is active or not"""
  activeFlag: String

  """The creation date and time of the relationship"""
  addTime: String

  """The ID of the organization relationship"""
  id: Int
  relLinkedOrgId: RelLinkedOrgId
  relOwnerOrgId: RelOwnerOrgId

  """The type of the relationship"""
  type: String

  """The last updated date and time of the relationship"""
  updateTime: String
}

input AddOrganizationRelationshipRequestInput {
  """The ID of the base organization for the returned calculated values"""
  orgId: Int

  """
  The linked organization in the relationship. If type is `parent`, then the linked organization is the daughter.
  """
  relLinkedOrgId: Int!

  """
  The owner of the relationship. If type is `parent`, then the owner is the parent and the linked organization is the daughter.
  """
  relOwnerOrgId: Int!

  """The type of organization relationship"""
  type: Type4!
}

enum Type4 {
  PARENT
  RELATED
}

type AddPerson {
  data: PersonItem
  relatedObjects: RelatedObjects6

  """If the response is successful or not"""
  success: Boolean
}

input AddPersonRequestInput {
  """
  The optional creation date & time of the person in UTC. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS
  """
  addTime: String

  """
  An email address as a string or an array of email objects related to the person. The structure of the array is as follows: `[{ "value": "mail@example.com", "primary": "true", "label": "main" }]`. Please note that only `value` is required.
  """
  email: [Email4ListItemInput]

  """
  If the person does not have a valid email address, then the marketing status is **not set** and `no_consent` is returned for the `marketing_status` value when the new person is created. If the change is forbidden, the status will remain unchanged for every call that tries to modify the marketing status. Please be aware that it is only allowed **once** to change the marketing status from an old status to a new one.<table><tr><th>Value</th><th>Description</th></tr><tr><td>`no_consent`</td><td>The customer has not given consent to receive any marketing communications</td></tr><tr><td>`unsubscribed`</td><td>The customers have unsubscribed from ALL marketing communications</td></tr><tr><td>`subscribed`</td><td>The customers are subscribed and are counted towards marketing caps</td></tr><tr><td>`archived`</td><td>The customers with `subscribed` status can be moved to `archived` to save consent, but they are not paid for</td></tr></table>
  """
  marketingStatus: String

  """The name of the person"""
  name: String!

  """The ID of the organization this person will belong to"""
  orgId: Int

  """
  The ID of the user who will be marked as the owner of this person. When omitted, the authorized user ID will be used.
  """
  ownerId: Int

  """
  A phone number supplied as a string or an array of phone objects related to the person. The structure of the array is as follows: `[{ "value": "12345", "primary": "true", "label": "mobile" }]`. Please note that only `value` is required.
  """
  phone: [Phone3ListItemInput]

  """
  The visibility of the person. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user. Read more about visibility groups <a href="https://support.pipedrive.com/en/article/visibility-groups" target="_blank" rel="noopener noreferrer">here</a>.<h4>Essential / Advanced plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers</td><tr><td>`3`</td><td>Entire company</td></tr></table><h4>Professional / Enterprise plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner only</td><tr><td>`3`</td><td>Owner's visibility group</td></tr><tr><td>`5`</td><td>Owner's visibility group and sub-groups</td></tr><tr><td>`7`</td><td>Entire company</td></tr></table>
  """
  visibleTo: String
}

input Email4ListItemInput {
  """
  The label that indicates the type of the email. (Possible values - work, home or other)
  """
  label: String

  """Boolean that indicates if email is primary for the person or not"""
  primary: Boolean

  """The email"""
  value: String
}

input Phone3ListItemInput {
  """
  The label that indicates the type of the phone number. (Possible values - work, home, mobile or other)
  """
  label: String

  """
  Boolean that indicates if phone number is primary for the person or not
  """
  primary: Boolean

  """The phone number"""
  value: String
}

type AddPersonFollower {
  data: Data94

  """If the response is successful or not"""
  success: Boolean
}

type Data94 {
  """
  The date and time when the follower was added to a person. Format: YYYY-MM-DD HH:MM:SS
  """
  addTime: String

  """The ID of the follower"""
  id: Int

  """The ID of the person to whom the follower was added"""
  personId: Int

  """The ID of the user who was added as a follower to a person"""
  userId: Int
}

input AddPersonFollowerRequestInput {
  """The ID of the user"""
  userId: Int!
}

type AddPersonPicture {
  """The picture that is associated with the item"""
  data: Data95

  """If the response is successful or not"""
  success: Boolean
}

"""The picture that is associated with the item"""
type Data95 {
  """The ID of the picture"""
  pICTUREID: PICTUREID
}

input AddPersonPictureRequestInput {
  """The height of the cropping area (in pixels)"""
  cropHeight: Int

  """The width of the cropping area (in pixels)"""
  cropWidth: Int

  """X coordinate to where start cropping form (in pixels)"""
  cropX: Int

  """Y coordinate to where start cropping form (in pixels)"""
  cropY: Int

  """One image supplied in the multipart/form-data encoding"""
  file: Upload!
}

type AddPipeline {
  """The pipeline object"""
  data: Data98

  """If the response is successful or not"""
  success: Boolean
}

"""The pipeline object"""
type Data98 {
  """Whether this pipeline will be made inactive (hidden) or active"""
  active: Boolean

  """The pipeline creation time. Format: YYYY-MM-DD HH:MM:SS."""
  addTime: String

  """Whether deal probability is disabled or enabled for this pipeline"""
  dealProbability: Boolean

  """The ID of the pipeline"""
  id: Int

  """The name of the pipeline"""
  name: String

  """
  Defines the order of pipelines. First order (`order_nr=0`) is the default pipeline.
  """
  orderNr: Int

  """The pipeline update time. Format: YYYY-MM-DD HH:MM:SS."""
  updateTime: String

  """The pipeline title displayed in the URL"""
  urlTitle: String
}

input PipelineRequestInput {
  """Whether this pipeline will be made inactive (hidden) or active"""
  active: Float

  """Whether deal probability is disabled or enabled for this pipeline"""
  dealProbability: Float

  """The name of the pipeline"""
  name: String!

  """
  Defines the order of pipelines. First order (`order_nr=0`) is the default pipeline.
  """
  orderNr: Int
}

input AddProductRequestInput {
  """Whether this product will be made active or not"""
  activeFlag: NumberBooleanDefault1

  """The product code"""
  code: String

  """The name of the product"""
  name: String!

  """
  The ID of the user who will be marked as the owner of this product. When omitted, the authorized user ID will be used.
  """
  ownerId: Int

  """
  An array of objects, each containing: `currency` (string), `price` (number), `cost` (number, optional), `overhead_cost` (number, optional). Note that there can only be one price per product per currency. When `prices` is omitted altogether, a default price of 0 and a default currency based on the company's currency will be assigned.
  """
  prices: [JSON]

  """Whether this product can be selected in deals or not"""
  selectable: Selectable2

  """The tax percentage"""
  tax: Float

  """The unit in which this product is sold"""
  unit: String

  """
  The visibility of the product. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user. Read more about visibility groups <a href="https://support.pipedrive.com/en/article/visibility-groups" target="_blank" rel="noopener noreferrer">here</a>.<h4>Essential / Advanced plan</h4><table><tr><th style="width: 40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers</td><tr><td>`3`</td><td>Entire company</td></tr></table><h4>Professional / Enterprise plan</h4><table><tr><th style="width: 40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner only</td><tr><td>`3`</td><td>Owner's visibility group</td></tr><tr><td>`5`</td><td>Owner's visibility group and sub-groups</td></tr><tr><td>`7`</td><td>Entire company</td></tr></table>
  """
  visibleTo: String
}

input ProductFieldsInput {
  """
  The type of the field<table><tr><th>Value</th><th>Description</th></tr><tr><td>`varchar`</td><td>Text (up to 255 characters)</td><tr><td>`varchar_auto`</td><td>Autocomplete text (up to 255 characters)</td><tr><td>`text`</td><td>Long text (up to 65k characters)</td><tr><td>`double`</td><td>Numeric value</td><tr><td>`monetary`</td><td>Monetary field (has a numeric value and a currency value)</td><tr><td>`date`</td><td>Date (format YYYY-MM-DD)</td><tr><td>`set`</td><td>Options field with a possibility of having multiple chosen options</td><tr><td>`enum`</td><td>Options field with a single possible chosen option</td><tr><td>`user`</td><td>User field (contains a user ID of another Pipedrive user)</td><tr><td>`org`</td><td>Organization field (contains an organization ID which is stored on the same account)</td><tr><td>`people`</td><td>Person field (contains a product ID which is stored on the same account)</td><tr><td>`phone`</td><td>Phone field (up to 255 numbers and/or characters)</td><tr><td>`time`</td><td>Time field (format HH:MM:SS)</td><tr><td>`timerange`</td><td>Time-range field (has a start time and end time value, both HH:MM:SS)</td><tr><td>`daterange`</td><td>Date-range field (has a start date and end date value, both YYYY-MM-DD)</td><tr><td>`address`</td><td>Address field (autocompleted by Google Maps)</dd></table>
  """
  fieldType: FieldType2!

  """The name of the field"""
  name: String!

  """
  When `field_type` is either `set` or `enum`, possible options must be supplied as a JSON-encoded sequential array, for example:</br>`[{"label":"red"}, {"label":"blue"}, {"label":"lilac"}]`
  """
  options: [JSON]
}

type NewFollower {
  data: Data111

  """If the response is successful or not"""
  success: Boolean
}

type Data111 {
  """The follower creation time. Format: YYYY-MM-DD HH:MM:SS"""
  addTime: String

  """The ID of the follower"""
  id: Int

  """The ID of the product"""
  productId: Int

  """The ID of the user that was added as follower"""
  userId: Int
}

input AddProductFollowerRequestInput {
  """The ID of the user"""
  userId: Int!
}

input AddRecurringSubscriptionRequestInput {
  """The interval between payments"""
  cadenceType: CadenceType!

  """
  The currency of the recurring subscription. Accepts a 3-character currency code.
  """
  currency: String!

  """The amount of each payment"""
  cycleAmount: Int!

  """
  Shows how many payments the subscription has. Note that one field must be set: `cycles_count` or `infinite`. If `cycles_count` is set, then `cycle_amount` and `start_date` are also required.
  """
  cyclesCount: Int

  """The ID of the deal this recurring subscription is associated with"""
  dealId: Int!

  """The description of the recurring subscription"""
  description: String

  """
  This indicates that the recurring subscription will last until it's manually canceled or deleted. Note that only one field must be set: `cycles_count` or `infinite`.
  """
  infinite: Boolean

  """
  Array of additional payments. It requires a minimum structure as follows: [{ amount:SUM, description:DESCRIPTION, due_at:PAYMENT_DATE }]. Replace SUM with a payment amount, DESCRIPTION with an explanation string, PAYMENT_DATE with a date (format YYYY-MM-DD).
  """
  payments: [JSON]

  """The start date of the recurring subscription. Format: YYYY-MM-DD"""
  startDate: String!

  """
  Indicates that the deal value must be set to recurring subscription's MRR value
  """
  updateDealValue: Boolean
}

enum CadenceType {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

type AddRole {
  """The response data"""
  data: Data119

  """If the response is successful or not"""
  success: Boolean
}

"""The response data"""
type Data119 {
  """The ID of the created role"""
  id: Int
}

"""The details of the role"""
input AddRoleRequestInput {
  """The name of the role"""
  name: String!

  """The ID of the parent role"""
  parentRoleId: Int
}

type AddRoleAssignment {
  """The response data"""
  data: Data124

  """If the response is successful or not"""
  success: Boolean
}

"""The response data"""
type Data124 {
  """The ID of the role the user was added to"""
  roleId: Int

  """The ID of the user that was added to the role"""
  userId: Int
}

input AddRoleAssignmentRequestInput {
  """The ID of the user"""
  userId: Int!
}

type Stages {
  """Updated stage object"""
  data: Data129

  """If the request was successful or not"""
  success: Boolean
}

"""Updated stage object"""
type Data129 {
  """Whether the stage is active or deleted"""
  activeFlag: Boolean

  """The stage creation time. Format: YYYY-MM-DD HH:MM:SS."""
  addTime: String

  """
  The success probability percentage of the deal. Used/shown when the deal weighted values are used.
  """
  dealProbability: Int

  """The ID of the stage"""
  id: Int

  """The name of the stage"""
  name: String

  """Defines the order of the stage"""
  orderNr: Int

  """The ID of the pipeline to add the stage to"""
  pipelineId: Int

  """
  The number of days the deals not updated in this stage would become rotten. Applies only if the `rotten_flag` is set.
  """
  rottenDays: Int

  """Whether deals in this stage can become rotten"""
  rottenFlag: RottenFlag

  """The stage update time. Format: YYYY-MM-DD HH:MM:SS."""
  updateTime: String
}

input AddStageRequestInput {
  """
  The success probability percentage of the deal. Used/shown when deal weighted values are used.
  """
  dealProbability: Int

  """The name of the stage"""
  name: String!

  """The ID of the pipeline to add stage to"""
  pipelineId: Int!

  """
  The number of days the deals not updated in this stage would become rotten. Applies only if the `rotten_flag` is set.
  """
  rottenDays: Int

  """Whether deals in this stage can become rotten"""
  rottenFlag: RottenFlag
}

input AddSubscriptionInstallmentRequestInput {
  """
  The currency of the installment subscription. Accepts a 3-character currency code.
  """
  currency: String!

  """The ID of the deal this installment subscription is associated with"""
  dealId: Int!

  """
  Array of payments. It requires a minimum structure as follows: [{ amount:SUM, description:DESCRIPTION, due_at:PAYMENT_DATE }]. Replace SUM with a payment amount, DESCRIPTION with an explanation string, PAYMENT_DATE with a date (format YYYY-MM-DD).
  """
  payments: [JSON]!

  """
  Indicates that the deal value must be set to the installment subscription's total value
  """
  updateDealValue: Boolean
}

input AddTeamRequestInput {
  """The team description"""
  description: String

  """The team manager ID"""
  managerId: Int!

  """The team name"""
  name: String!

  """The list of user IDs"""
  users: [Int]
}

input AddTeamUserRequestInput {
  """The list of user IDs"""
  users: [Int]!
}

input AddUserRequestInput {
  """
  The access given to the user. Each item in the array represents access to a specific app. Optionally may include either admin flag or permission set ID to specify which access to give within the app. If both are omitted, the default access for the corresponding app will be used. It requires structure as follows: `[{ app: 'sales', permission_set_id: '62cc4d7f-4038-4352-abf3-a8c1c822b631' }, { app: 'global', admin: true }, { app: 'account_settings' }]`
  
  """
  access: [Access2ListItemInput]

  """
  Whether the user is active or not. `false` = Not activated, `true` = Activated
  """
  activeFlag: Boolean

  """The email of the user"""
  email: String!
}

input Access2ListItemInput {
  admin: Boolean
  app: App2!
  permissionSetId: String
}

type Webhook {
  data: Data141

  """The status of the response"""
  status: String

  """If the response is successful or not"""
  success: Boolean
}

type Data141 {
  """The date when the Webhook was added"""
  addTime: String

  """Any additional data related to the Webhook"""
  additionalData: JSON

  """The ID of the admin of the Webhook"""
  adminId: Int

  """The ID of the company related to the Webhook"""
  companyId: Int

  """The Webhook action"""
  eventAction: String

  """The Webhook object"""
  eventObject: String

  """The password of the `subscription_url` of the Webhook"""
  httpAuthPassword: String

  """The username of the `subscription_url` of the Webhook"""
  httpAuthUser: String

  """The ID of the Webhook"""
  id: Int

  """The Webhook's status"""
  isActive: Float

  """The last delivery time of the Webhook"""
  lastDeliveryTime: String

  """The last delivery HTTP status of the Webhook"""
  lastHttpStatus: Int

  """The ID of the user who owns the Webhook"""
  ownerId: Int

  """The removal reason of the Webhook (if removed)"""
  removeReason: String

  """The date when the Webhook was removed (if removed)"""
  removeTime: String

  """The subscription URL of the Webhook"""
  subscriptionUrl: String

  """The type of the Webhook"""
  type: Type6

  """The ID of the user related to the Webhook"""
  userId: Int
}

input AddWebhookRequestInput {
  """
  The type of action to receive notifications about. Wildcard will match all supported actions.
  """
  eventAction: EventAction!

  """
  The type of object to receive notifications about. Wildcard will match all supported objects.
  """
  eventObject: EventObject!

  """
  The HTTP basic auth password of the subscription URL endpoint (if required)
  """
  httpAuthPassword: String

  """
  The HTTP basic auth username of the subscription URL endpoint (if required)
  """
  httpAuthUser: String

  """
  A full, valid, publicly accessible URL which determines where to send the notifications. Please note that you cannot use Pipedrive API endpoints as the `subscription_url` and the chosen URL must not redirect to another link.
  """
  subscriptionUrl: String!

  """
  The ID of the user that this webhook will be authorized with. You have the option to use a different user's `user_id`. If it is not set, the current user's `user_id` will be used. As each webhook event is checked against a user’s permissions, the webhook will only be sent if the user has access to the specified object(s). If you want to receive notifications for all events, please use a top-level admin user’s `user_id`.
  """
  userId: Int

  """The webhook's version"""
  version: Version
}

enum EventAction {
  ADDED
  UPDATED
  MERGED
  DELETED
  _
}

enum EventObject {
  ACTIVITY
  ACTIVITYTYPE
  DEAL
  NOTE
  ORGANIZATION
  PERSON
  PIPELINE
  PRODUCT
  STAGE
  USER
  _
}

enum Version {
  _1_0
  _2_0
}

input CancelRecurringSubscriptionRequestInput {
  """
  The subscription termination date. All payments after specified date will be deleted. Default value is the current date.
  """
  endDate: String
}

type DeleteActivities {
  data: Data
  success: Boolean
}

type Data {
  """An array of the IDs of activities that were deleted"""
  id: [Int]
}

type DeleteActivity {
  data: Data3
  success: Boolean
}

type Data3 {
  """The ID of the activity that was deleted"""
  id: Int
}

type DeleteActivityTypes {
  data: Data5

  """If the response is successful or not"""
  success: Boolean
}

type Data5 {
  """The IDs of the deleted activity types"""
  id: [Int]
}

type DeleteCallLog {
  """If the response is successful or not"""
  success: Boolean
}

type Channel {
  success: Boolean
}

type DeleteComment {
  """If the response is successful or not"""
  data: Boolean

  """If the request was successful or not"""
  success: Boolean
}

type ChannelConversation {
  success: Boolean
}

type DeleteDeal {
  data: Data20

  """If the request was successful or not"""
  success: Boolean
}

type Data20 {
  """The ID of the deal that was deleted"""
  id: Int
}

type DeleteField {
  data: Data42

  """If the response is successful or not"""
  success: Boolean
}

type Data42 {
  """The ID of the field that was deleted"""
  id: Int
}

type DeleteFields {
  data: Data41

  """If the response is successful or not"""
  success: Boolean
}

type Data41 {
  """The list of deleted field IDs"""
  id: [Int]
}

type DeleteDealFollower {
  data: Data28

  """If the request was successful or not"""
  success: Boolean
}

type Data28 {
  """The ID of the deal follower that was deleted"""
  id: Int
}

type DeleteDealParticipant {
  data: Data33

  """If the request was successful or not"""
  success: Boolean
}

type Data33 {
  """The ID of the deal participant that was deleted"""
  id: Int
}

type DeleteDealProduct {
  data: Data39

  """If the request was successful or not"""
  success: Boolean
}

type Data39 {
  """The ID of an attached product that was deleted from the deal"""
  id: Int
}

type DeleteDeals {
  data: Data16

  """If the response is successful or not"""
  success: Boolean
}

type Data16 {
  """The list of deleted deals IDs"""
  id: [Int]
}

type DeleteFile {
  data: Data45

  """If the request was successful or not"""
  success: Boolean
}

type Data45 {
  """The ID of the file"""
  id: Int
}

type DeleteFilter {
  data: Data49

  """If the response is successful or not"""
  success: Boolean
}

type Data49 {
  """The ID of the deleted filter"""
  id: Int
}

type DeleteFilters {
  data: Data46

  """If the response is successful or not"""
  success: Boolean
}

type Data46 {
  """The array of the IDs of the deleted filter"""
  id: [Int]
}

type DeleteGoal {
  """If the request was successful or not"""
  success: Boolean
}

type LeadId {
  data: Data58
  success: Boolean
}

type Data58 {
  id: ID
}

type DeleteMailThread {
  data: Data67

  """If the response is successful or not"""
  success: Boolean
}

type Data67 {
  """The ID of the deleted mail thread"""
  id: Int
}

type DeleteNote {
  """If the response is successful or not"""
  data: Boolean

  """If the request was successful or not"""
  success: Boolean
}

type DeleteOrganization {
  data: Data78

  """If the request was successful or not"""
  success: Boolean
}

type Data78 {
  """The ID of the organization that was deleted"""
  id: Int
}

type DeleteOrganizationFollower {
  data: Data82

  """If the request was successful or not"""
  success: Boolean
}

type Data82 {
  """The ID of the follower that was deleted from the organization"""
  id: Int
}

type DeleteOrganizationRelationship {
  data: Data87

  """If the response is successful or not"""
  success: Boolean
}

type Data87 {
  """The ID of the deleted organization relationship"""
  id: Int
}

type DeleteOrganizations {
  data: Data75

  """If the request was successful or not"""
  success: Boolean
}

type Data75 {
  """The IDs of the organizations that were deleted"""
  id: [Float]
}

type DeletePerson {
  data: Data92

  """If the response is successful or not"""
  success: Boolean
}

type Data92 {
  """The ID of the deleted person"""
  id: Int
}

type DeletePersons {
  data: Data90

  """If the response is successful or not"""
  success: Boolean
}

type Data90 {
  """The list of deleted persons IDs"""
  id: [Int]
}

type DeletePipeline {
  data: Data99

  """If the request was successful or not"""
  success: Boolean
}

type Data99 {
  """Deleted Pipeline ID"""
  id: Int
}

type DeleteProduct {
  data: Data107

  """If the response is successful or not"""
  success: Boolean
}

type Data107 {
  """The ID of the removed product"""
  id: Int
}

type DeleteProductField {
  data: Data116

  """If the response is successful or not"""
  success: Boolean
}

type Data116 {
  """The ID of the deleted product field"""
  id: Int
}

type DeleteProductFields {
  data: Data113

  """If the response is successful or not"""
  success: Boolean
}

type Data113 {
  """Array of all the IDs of the deleted product fields"""
  id: [Int]
}

type DeleteProductFollower {
  data: Data112

  """If the response is successful or not"""
  success: Boolean
}

type Data112 {
  """The ID of the removed follower"""
  id: Int
}

type DeleteRole {
  """The response data"""
  data: Data120

  """If the response is successful or not"""
  success: Boolean
}

"""The response data"""
type Data120 {
  """The ID of the deleted role"""
  id: Int
}

type DeleteRoleAssignment {
  """The response data"""
  data: Data122

  """If the response is successful or not"""
  success: Boolean
}

"""The response data"""
type Data122 {
  """The ID of the role the user was removed from"""
  id: Int
}

input DeleteRoleAssignmentRequestInput {
  """The ID of the user"""
  userId: Int!
}

type DeleteStage {
  data: Data130

  """If the request was successful or not"""
  success: Boolean
}

type Data130 {
  """Deleted stage ID"""
  id: Int
}

type DeleteStages {
  data: Data127

  """If the request was successful or not"""
  success: Boolean
}

type Data127 {
  """The list of deleted stage IDs"""
  id: [Int]
}

input DeleteTeamUserRequestInput {
  """The list of user IDs"""
  users: [Int]!
}

type Base {
  """The status of the response"""
  status: String

  """If the response is successful or not"""
  success: Boolean
}

type DuplicateDeal {
  """The deal object"""
  data: Data22

  """If the response is successful or not"""
  success: Boolean
}

"""The deal object"""
type Data22 {
  """Whether the deal is active or not"""
  active: Boolean

  """The number of activities associated with the deal"""
  activitiesCount: Int

  """The creation date and time of the deal"""
  addTime: String

  """The BCC email of the deal"""
  ccEmail: String

  """The date and time of closing the deal"""
  closeTime: String

  """The ID of the deal creator"""
  creatorUserId: Int

  """The currency associated with the deal"""
  currency: String

  """Whether the deal is deleted or not"""
  deleted: Boolean

  """The number of completed activities associated with the deal"""
  doneActivitiesCount: Int

  """The number of emails associated with the deal"""
  emailMessagesCount: Int

  """The expected close date of the deal"""
  expectedCloseDate: String

  """The number of files associated with the deal"""
  filesCount: Int

  """The date and time of the first time changing the deal status as won"""
  firstWonTime: String

  """The number of followers associated with the deal"""
  followersCount: Int

  """The deal value formatted with selected currency. E.g. US$500"""
  formattedValue: String

  """The weighted_value formatted with selected currency. E.g. US$500"""
  formattedWeightedValue: String

  """The ID of the deal"""
  id: Int

  """The label assigned to the deal"""
  label: Int

  """The date of the last activity associated with the deal"""
  lastActivityDate: String

  """The ID of the last activity associated with the deal"""
  lastActivityId: Int

  """The date and time of the last incoming email associated with the deal"""
  lastIncomingMailTime: String

  """The date and time of the last outgoing email associated with the deal"""
  lastOutgoingMailTime: String

  """The reason for losing the deal"""
  lostReason: String

  """The date and time of changing the deal status as lost"""
  lostTime: String

  """The date of the next activity associated with the deal"""
  nextActivityDate: String

  """The duration of the next activity associated with the deal"""
  nextActivityDuration: String

  """The ID of the next activity associated with the deal"""
  nextActivityId: Int

  """The note of the next activity associated with the deal"""
  nextActivityNote: String

  """The subject of the next activity associated with the deal"""
  nextActivitySubject: String

  """The time of the next activity associated with the deal"""
  nextActivityTime: String

  """The type of the next activity associated with the deal"""
  nextActivityType: String

  """The number of notes associated with the deal"""
  notesCount: Int

  """If the organization that is associated with the deal is hidden or not"""
  orgHidden: Boolean

  """The ID of the organization associated with the deal"""
  orgId: Int

  """The name of the organization associated with the deal"""
  orgName: String

  """The name of the deal owner"""
  ownerName: String

  """The number of participants associated with the deal"""
  participantsCount: Int

  """If the person that is associated with the deal is hidden or not"""
  personHidden: Boolean

  """The ID of the person associated with the deal"""
  personId: Int

  """The name of the person associated with the deal"""
  personName: String

  """The ID of pipeline associated with the deal"""
  pipelineId: Int

  """The success probability percentage of the deal"""
  probability: Float

  """The number of products associated with the deal"""
  productsCount: Int

  """The date and time of changing the deal status as rotten"""
  rottenTime: String

  """The last updated date and time of the deal stage"""
  stageChangeTime: String

  """The ID of the deal stage"""
  stageId: Int

  """The order number of the deal stage associated with the deal"""
  stageOrderNr: Int

  """The status of the deal"""
  status: String

  """The title of the deal"""
  title: String

  """The number of incomplete activities associated with the deal"""
  undoneActivitiesCount: Int

  """The last updated date and time of the deal"""
  updateTime: String

  """The ID of the user"""
  userId: Int

  """The value of the deal"""
  value: Float

  """The visibility of the deal"""
  visibleTo: String

  """
  Probability times deal value. Probability can either be deal probability or if not set, then stage probability.
  """
  weightedValue: Float

  """The currency associated with the deal"""
  weightedValueCurrency: String

  """The date and time of changing the deal status as won"""
  wonTime: String
}

type LinkFileToItem {
  """The file data"""
  data: Data44

  """If the request was successful or not"""
  success: Boolean
}

input LinkFileToItemRequestInput {
  """The ID of the item to associate the file with"""
  itemId: Int!

  """The item type"""
  itemType: ItemType!

  """The remote item ID"""
  remoteId: String!

  """
  The location type to send the file to. Only `googledrive` is supported at the moment.
  """
  remoteLocation: RemoteLocation!
}

type MergeDeals {
  data: Data30

  """If the response is successful or not"""
  success: Boolean
}

type Data30 {
  """Whether the deal is active or not"""
  active: Boolean

  """The number of activities associated with the deal"""
  activitiesCount: Int

  """The creation date and time of the deal"""
  addTime: String

  """The BCC email of the deal"""
  ccEmail: String

  """The date and time of closing the deal"""
  closeTime: String

  """The ID of the deal creator"""
  creatorUserId: Int

  """The currency associated with the deal"""
  currency: String

  """Whether the deal is deleted or not"""
  deleted: Boolean

  """The number of completed activities associated with the deal"""
  doneActivitiesCount: Int

  """The number of emails associated with the deal"""
  emailMessagesCount: Int

  """The expected close date of the deal"""
  expectedCloseDate: String

  """The number of files associated with the deal"""
  filesCount: Int

  """The date and time of the first time changing the deal status as won"""
  firstWonTime: String

  """The number of followers associated with the deal"""
  followersCount: Int

  """The deal value formatted with selected currency. E.g. US$500"""
  formattedValue: String

  """The weighted_value formatted with selected currency. E.g. US$500"""
  formattedWeightedValue: String

  """The ID of the deal"""
  id: Int

  """The label assigned to the deal"""
  label: Int

  """The date of the last activity associated with the deal"""
  lastActivityDate: String

  """The ID of the last activity associated with the deal"""
  lastActivityId: Int

  """The date and time of the last incoming email associated with the deal"""
  lastIncomingMailTime: String

  """The date and time of the last outgoing email associated with the deal"""
  lastOutgoingMailTime: String

  """The reason for losing the deal"""
  lostReason: String

  """The date and time of changing the deal status as lost"""
  lostTime: String

  """The deal ID of the deal which the original deal was merged with"""
  mergeWhatId: Int

  """The date of the next activity associated with the deal"""
  nextActivityDate: String

  """The duration of the next activity associated with the deal"""
  nextActivityDuration: String

  """The ID of the next activity associated with the deal"""
  nextActivityId: Int

  """The note of the next activity associated with the deal"""
  nextActivityNote: String

  """The subject of the next activity associated with the deal"""
  nextActivitySubject: String

  """The time of the next activity associated with the deal"""
  nextActivityTime: String

  """The type of the next activity associated with the deal"""
  nextActivityType: String

  """The number of notes associated with the deal"""
  notesCount: Int

  """If the organization that is associated with the deal is hidden or not"""
  orgHidden: Boolean

  """The ID of the organization associated with the deal"""
  orgId: Int

  """The name of the organization associated with the deal"""
  orgName: String

  """The name of the deal owner"""
  ownerName: String

  """The number of participants associated with the deal"""
  participantsCount: Int

  """If the person that is associated with the deal is hidden or not"""
  personHidden: Boolean

  """The ID of the person associated with the deal"""
  personId: Int

  """The name of the person associated with the deal"""
  personName: String

  """The ID of pipeline associated with the deal"""
  pipelineId: Int

  """The success probability percentage of the deal"""
  probability: Float

  """The number of products associated with the deal"""
  productsCount: Int

  """The date and time of changing the deal status as rotten"""
  rottenTime: String

  """The last updated date and time of the deal stage"""
  stageChangeTime: String

  """The ID of the deal stage"""
  stageId: Int

  """The order number of the deal stage associated with the deal"""
  stageOrderNr: Int

  """The status of the deal"""
  status: String

  """The title of the deal"""
  title: String

  """The number of incomplete activities associated with the deal"""
  undoneActivitiesCount: Int

  """The last updated date and time of the deal"""
  updateTime: String

  """The ID of the user"""
  userId: Int

  """The value of the deal"""
  value: Float

  """The visibility of the deal"""
  visibleTo: String

  """
  Probability times deal value. Probability can either be deal probability or if not set, then stage probability.
  """
  weightedValue: Float

  """The currency associated with the deal"""
  weightedValueCurrency: String

  """The date and time of changing the deal status as won"""
  wonTime: String
}

input MergeDealsRequestInput {
  """The ID of the deal that the deal will be merged with"""
  mergeWithId: Int!
}

type MergeOrganizations {
  data: Data83

  """If the request was successful or not"""
  success: Boolean
}

type Data83 {
  """The ID of the merged organization"""
  id: Int
}

input MergeOrganizationsRequestInput {
  """The ID of the organization that the organization will be merged with"""
  mergeWithId: Int!
}

type MergePersons {
  data: MergePersonItem

  """If the response is successful or not"""
  success: Boolean
}

type MergePersonItem {
  """Whether the person is active or not"""
  activeFlag: Boolean

  """The count of activities related to the person"""
  activitiesCount: Int

  """
  The date and time when the person was added/created. Format: YYYY-MM-DD HH:MM:SS
  """
  addTime: String

  """The BCC email associated with the person"""
  ccEmail: String

  """The count of closed deals related with the item"""
  closedDealsCount: Int

  """The ID of the company related to the person"""
  companyId: Int

  """The count of done activities related to the person"""
  doneActivitiesCount: Int

  """
  An email address as a string or an array of email objects related to the person. The structure of the array is as follows: `[{ "value": "mail@example.com", "primary": "true", "label": "main" } ]`. Please note that only `value` is required.
  """
  email: [Email3ListItem]

  """The count of email messages related to the person"""
  emailMessagesCount: Int

  """The count of files related to the person"""
  filesCount: Int

  """The first letter of the name of the person"""
  firstChar: String

  """The first name of the person"""
  firstName: String

  """The count of followers related to the person"""
  followersCount: Int

  """The ID of the person"""
  id: Int

  """The label assigned to the person"""
  label: Int

  """The date of the last activity associated with the deal"""
  lastActivityDate: String

  """The ID of the last activity associated with the deal"""
  lastActivityId: Int

  """
  The date and time of the last incoming email associated with the person
  """
  lastIncomingMailTime: String

  """The last name of the person"""
  lastName: String

  """
  The date and time of the last outgoing email associated with the person
  """
  lastOutgoingMailTime: String

  """The count of lost deals related with the item"""
  lostDealsCount: Int

  """The ID of the person with what the main person was merged"""
  mergeWhatId: Int

  """The name of the person"""
  name: String

  """The date of the next activity associated with the deal"""
  nextActivityDate: String

  """The ID of the next activity associated with the deal"""
  nextActivityId: Int

  """The time of the next activity associated with the deal"""
  nextActivityTime: String

  """The count of notes related to the person"""
  notesCount: Int

  """The count of open deals related with the item"""
  openDealsCount: Int

  """The ID of the organization related to the person"""
  orgId: Int

  """The name of the organization associated with the person"""
  orgName: String

  """The ID of the owner related to the person"""
  ownerId: Int

  """The name of the owner associated with the person"""
  ownerName: String

  """The count of closed participant deals related with the item"""
  participantClosedDealsCount: Int

  """The count of open participant deals related with the item"""
  participantOpenDealsCount: Int

  """
  A phone number supplied as a string or an array of phone objects related to the person. The structure of the array is as follows: `[{ "value": "12345", "primary": "true", "label": "mobile" }]`. Please note that only `value` is required.
  """
  phone: [Phone3ListItem]
  pictureId: PictureId

  """The count of related closed deals related with the item"""
  relatedClosedDealsCount: Int

  """The count of related lost deals related with the item"""
  relatedLostDealsCount: Int

  """The count of related open deals related with the item"""
  relatedOpenDealsCount: Int

  """The count of related won deals related with the item"""
  relatedWonDealsCount: Int

  """The count of undone activities related to the person"""
  undoneActivitiesCount: Int

  """
  The last updated date and time of the person. Format: YYYY-MM-DD HH:MM:SS
  """
  updateTime: String

  """The visibility group ID of who can see the person"""
  visibleTo: String

  """The count of won deals related with the item"""
  wonDealsCount: Int
}

input MergePersonsRequestInput {
  """
  The ID of the person that will not be overwritten. This person’s data will be prioritized in case of conflict with the other person.
  """
  mergeWithId: Int!
}

type ChannelsMessagesReceive2 {
  data: Data12

  """If the request was successful or not"""
  success: Boolean
}

type Data12 {
  """The list of attachments available in the message"""
  attachments: [AttachmentsListItem]

  """The channel ID as in the provider"""
  channelId: String!

  """The ID of the conversation"""
  conversationId: String!

  """A URL that can open the conversation in the provider's side"""
  conversationLink: String

  """
  The date and time when the message was created in the provider, in UTC. Format: YYYY-MM-DD HH:MM
  """
  createdAt: String!

  """The ID of the message"""
  id: String!

  """The body of the message"""
  message: String!

  """
  The date and time when the message can no longer receive a reply, in UTC. Format: YYYY-MM-DD HH:MM
  """
  replyBy: String

  """The ID of the provider's user that sent the message"""
  senderId: String!

  """The status of the message"""
  status: Status!
}

type AttachmentsListItem {
  """The ID of the attachment"""
  id: String!

  """
  If true, it will use the getMessageById endpoint for fetching updated attachment's urls. Find out more [here](https://pipedrive.readme.io/docs/implementing-messaging-app-extension)
  """
  linkExpires: Boolean

  """The name of the attachment"""
  name: String

  """A URL to a preview picture of the file"""
  previewUrl: String

  """The size of the attachment"""
  size: Float

  """The mime-type of the attachment"""
  type: String!

  """A URL to the file"""
  url: String!
}

enum Status {
  SENT
  DELIVERED
  READ
  FAILED
}

input ChannelsMessagesReceiveInput {
  """The list of attachments available in the message"""
  attachments: [AttachmentsListItemInput]

  """The channel ID as in the provider"""
  channelId: String!

  """The ID of the conversation"""
  conversationId: String!

  """A URL that can open the conversation in the provider's side"""
  conversationLink: String

  """
  The date and time when the message was created in the provider, in UTC. Format: YYYY-MM-DD HH:MM
  """
  createdAt: String!

  """The ID of the message"""
  id: String!

  """The body of the message"""
  message: String!

  """
  The date and time when the message can no longer receive a reply, in UTC. Format: YYYY-MM-DD HH:MM
  """
  replyBy: String

  """The ID of the provider's user that sent the message"""
  senderId: String!

  """The status of the message"""
  status: Status!
}

input AttachmentsListItemInput {
  """The ID of the attachment"""
  id: String!

  """
  If true, it will use the getMessageById endpoint for fetching updated attachment's urls. Find out more [here](https://pipedrive.readme.io/docs/implementing-messaging-app-extension)
  """
  linkExpires: Boolean

  """The name of the attachment"""
  name: String

  """A URL to a preview picture of the file"""
  previewUrl: String

  """The size of the attachment"""
  size: Float

  """The mime-type of the attachment"""
  type: String!

  """A URL to the file"""
  url: String!
}

type UpdateActivity {
  data: ActivityResponseObject
  relatedObjects: RelatedObjects2
  success: Boolean
}

input UpdateActivityRequestInput {
  """
  The attendees of the activity. This can be either your existing Pipedrive contacts or an external email address. It requires a structure as follows: `[{"email_address":"mail@example.org"}]` or `[{"person_id":1, "email_address":"mail@example.org"}]`
  """
  attendees: [JSON]

  """
  Set the activity as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset by never setting it or overriding it with `null`. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.
  """
  busyFlag: BusyFlag2

  """The ID of the deal this activity is associated with"""
  dealId: Int

  """Whether the activity is done or not. 0 = Not done, 1 = Done"""
  done: Float

  """The due date of the activity. Format: YYYY-MM-DD"""
  dueDate: String

  """The due time of the activity in UTC. Format: HH:MM"""
  dueTime: String

  """The duration of the activity. Format: HH:MM"""
  duration: String

  """The ID of the lead this activity is associated with"""
  leadId: String

  """
  The address of the activity. Pipedrive will automatically check if the location matches a geo-location on Google maps.
  """
  location: String

  """The note of the activity (HTML format)"""
  note: String

  """The ID of the organization this activity is associated with"""
  orgId: Int

  """
  List of multiple persons (participants) this activity is associated with. It requires a structure as follows: `[{"person_id":1,"primary_flag":true}]`
  """
  participants: [JSON]

  """The ID of the person this activity is associated with"""
  personId: Int

  """
  Additional details about the activity that is synced to your external calendar. Unlike the note added to the activity, the description is publicly visible to any guests added to the activity.
  """
  publicDescription: String

  """The subject of the activity"""
  subject: String

  """
  The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes.
  """
  type: String

  """The ID of the user whom the activity is assigned to"""
  userId: Int
}

input UpdateActivityTypeRequestInput {
  """
  A designated color for the activity type in 6-character HEX format (e.g. `FFFFFF` for white, `000000` for black)
  """
  color: String

  """Icon graphic to use for representing this activity type"""
  iconKey: IconKey

  """The name of the activity type"""
  name: String

  """
  An order number for this activity type. Order numbers should be used to order the types in the activity type selections.
  """
  orderNr: Int
}

input UpdateDealRequestInput {
  """
  The currency of the deal. Accepts a 3-character currency code. If omitted, currency will be set to the default currency of the authorized user.
  """
  currency: String

  """The expected close date of the deal. In ISO 8601 format: YYYY-MM-DD."""
  expectedCloseDate: String

  """
  The optional message about why the deal was lost (to be used when status = lost)
  """
  lostReason: String

  """
  The ID of an organization which this deal will be linked to. If the organization does not exist yet, it needs to be created first. This property is required unless `person_id` is specified.
  """
  orgId: Int

  """
  The ID of a person which this deal will be linked to. If the person does not exist yet, it needs to be created first. This property is required unless `org_id` is specified.
  """
  personId: Int

  """
  The ID of the pipeline this deal will be added to. By default, the deal will be added to the first stage of the specified pipeline. Please note that `pipeline_id` and `stage_id` should not be used together as `pipeline_id` will be ignored.
  """
  pipelineId: Int

  """
  The success probability percentage of the deal. Used/shown only when `deal_probability` for the pipeline of the deal is enabled.
  """
  probability: Float

  """
  The ID of the stage this deal will be added to. Please note that a pipeline will be assigned automatically based on the `stage_id`. If omitted, the deal will be placed in the first stage of the default pipeline.
  """
  stageId: Int

  """
  open = Open, won = Won, lost = Lost, deleted = Deleted. If omitted, status will be set to open.
  """
  status: Status2

  """The title of the deal"""
  title: String

  """
  The ID of the user which will be the owner of the created deal. If not provided, the user making the request will be used.
  """
  userId: Int

  """The value of the deal. If omitted, value will be set to 0."""
  value: String

  """
  The visibility of the deal. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user. Read more about visibility groups <a href="https://support.pipedrive.com/en/article/visibility-groups" target="_blank" rel="noopener noreferrer">here</a>.<h4>Essential / Advanced plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers</td><tr><td>`3`</td><td>Entire company</td></tr></table><h4>Professional / Enterprise plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner only</td><tr><td>`3`</td><td>Owner's visibility group</td></tr><tr><td>`5`</td><td>Owner's visibility group and sub-groups</td></tr><tr><td>`7`</td><td>Entire company</td></tr></table>
  """
  visibleTo: String
}

input UpdateFieldRequestInput {
  """
  Whether the field is available in 'add new' modal or not (both in web and mobile app)
  """
  addVisibleFlag: AddVisibleFlag2

  """The name of the field"""
  name: String

  """
  When `field_type` is either set or enum, possible options must be supplied as a JSON-encoded sequential array of objects. All active items must be supplied and already existing items must have their ID supplied. New items only require a label. Example: `[{"id":123,"label":"Existing Item"},{"label":"New Item"}]`
  """
  options: String
}

enum AddVisibleFlag2 {
  TRUE
  FALSE
}

type GetProductAttachement {
  """The updated product object attached to the deal"""
  data: Data38

  """If the response is successful or not"""
  success: Boolean
}

"""The updated product object attached to the deal"""
type Data38 {
  """Whether the product is active or not"""
  activeFlag: Boolean

  """The date and time when the product was added to the deal"""
  addTime: String

  """A textual comment associated with this product-deal attachment"""
  comments: String

  """The ID of the company"""
  companyId: Int

  """The currency associated with the deal product"""
  currency: String

  """The ID of the deal"""
  dealId: Int

  """The discount %. If omitted, will be set to 0."""
  discountPercentage: Float

  """The duration of the product. If omitted, will be set to 1."""
  duration: Float

  """The unit duration of the product"""
  durationUnit: String

  """
  The ID of the deal-product (the ID of the product attached to the deal)
  """
  id: Int

  """The price at which this product will be added to the deal"""
  itemPrice: Float!

  """The date and time when the deal product was last edited"""
  lastEdit: String

  """The product name"""
  name: String

  """The ID of the product to use"""
  productId: Int!

  """
  The ID of the product variation to use. When omitted, no variation will be used.
  """
  productVariationId: Int

  """
  Quantity – e.g. how many items of this product will be added to the deal
  """
  quantity: Int!

  """The sum of all the products attached to the deal"""
  sum: Float

  """The product sum without the discount"""
  sumNoDiscount: Float

  """The tax percentage"""
  tax: Float
}

input UpdateDealProductRequestInput {
  """A textual comment associated with this product-deal attachment"""
  comments: String

  """The discount %. If omitted, will be set to 0."""
  discountPercentage: Float

  """The duration of the product"""
  duration: Float

  """The unit duration of the product"""
  durationUnit: String

  """The price at which this product will be added to the deal"""
  itemPrice: Float

  """The ID of the product to use"""
  productId: Int!

  """
  The ID of the product variation to use. When omitted, no variation will be used.
  """
  productVariationId: Int

  """How many items of this product will be added to the deal"""
  quantity: Int

  """The tax percentage"""
  tax: Float
}

type UpdateFile {
  """The file data"""
  data: Data44

  """If the request was successful or not"""
  success: Boolean
}

input UpdateFileRequestInput {
  """The description of the file"""
  description: String

  """The visible name of the file"""
  name: String
}

input UpdateFilterRequestInput {
  """
  The conditions of the filter as a JSON object. Please note that a maximum of 16 conditions is allowed per filter and `date` values must be supplied in the `YYYY-MM-DD` format. It requires a minimum structure as follows: `{"glue":"and","conditions":[{"glue":"and","conditions": [CONDITION_OBJECTS]},{"glue":"or","conditions":[CONDITION_OBJECTS]}]}`. Replace `CONDITION_OBJECTS` with JSON objects of the following structure: `{"object":"","field_id":"", "operator":"","value":"", "extra_value":""}` or leave the array empty. Depending on the object type you should use another API endpoint to get `field_id`. There are five types of objects you can choose from: `"person"`, `"deal"`, `"organization"`, `"product"`, `"activity"` and you can use these types of operators depending on what type of a field you have: `"IS NOT NULL"`, `"IS NULL"`, `"<="`, `">="`, `"<"`, `">"`, `"!="`, `"="`, `"LIKE '$%'"`, `"LIKE '%$%'"`, `"NOT LIKE '$%'"`. To get a better understanding of how filters work try creating them directly from the Pipedrive application.
  """
  conditions: JSON!

  """The name of the filter"""
  name: String
}

input BasicGoalRequestInput {
  """
  Who this goal is assigned to. It requires the following JSON structure: `{ "id": "1", "type": "person" }`. `type` can be either `person`, `company` or `team`. ID of the assignee person, company or team.
  """
  assignee: JSON

  """
  The date when the goal starts and ends. It requires the following JSON structure: `{ "start": "2019-01-01", "end": "2022-12-31" }`. Date in format of YYYY-MM-DD. "end" can be set to `null` for an infinite, open-ended goal.
  """
  duration: JSON

  """
  The expected outcome of the goal. Expected outcome can be tracked either by `quantity` or by `sum`. It requires the following JSON structure: `{ "target": "50", "tracking_metric": "quantity" }` or `{ "target": "50", "tracking_metric": "sum", "currency_id": 1 }`. `currency_id` should only be added to `sum` type of goals.
  """
  expectedOutcome: JSON

  """The interval of the goal"""
  interval: Interval

  """The title of the goal"""
  title: String

  """
  The type of the goal. It requires the following JSON structure: `{ "name": "deals_started", "params": { "pipeline_id": [1, 2], "activity_type_id": [9] } }`. Type can be one of: `deals_won`, `deals_progressed`, `activities_completed`, `activities_added`, `deals_started` or `revenue_forecast`. `params` can include `pipeline_id`, `stage_id` or `activity_type_id`. `stage_id` is related to only `deals_progressed` type of goals and `activity_type_id` to `activities_completed` or `activities_added` types of goals. The `pipeline_id` and `activity_type_id` need to be given as an array of integers. To track the goal in all pipelines, set `pipeline_id` as `null` and similarly, to track the goal for all activities, set `activity_type_id` as `null`.”
  """
  type: JSON
}

input UpdateLeadRequestInput {
  """
  The date of when the deal which will be created from the lead is expected to be closed. In ISO 8601 format: YYYY-MM-DD.
  """
  expectedCloseDate: String

  """A flag indicating whether the lead is archived or not"""
  isArchived: Boolean

  """The IDs of the lead labels which will be associated with the lead"""
  labelIds: [ID]

  """
  The ID of an organization which this lead will be linked to. If the organization does not exist yet, it needs to be created first. A lead always has to be linked to a person or organization or both.
  """
  organizationId: Int

  """
  The ID of the user which will be the owner of the created lead. If not provided, the user making the request will be used.
  """
  ownerId: Int

  """
  The ID of a person which this lead will be linked to. If the person does not exist yet, it needs to be created first. A lead always has to be linked to a person or organization or both.
  
  """
  personId: Int

  """The name of the lead"""
  title: String

  """The potential value of the lead"""
  value: Value2Input

  """
  The visibility of the lead. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user. Read more about visibility groups <a href="https://support.pipedrive.com/en/article/visibility-groups" target="_blank" rel="noopener noreferrer">here</a>.<h4>Essential / Advanced plan</h4><table><tr><th style="width: 40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers</td><tr><td>`3`</td><td>Entire company</td></tr></table><h4>Professional / Enterprise plan</h4><table><tr><th style="width: 40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner only</td><tr><td>`3`</td><td>Owner's visibility group</td></tr><tr><td>`5`</td><td>Owner's visibility group and sub-groups</td></tr><tr><td>`7`</td><td>Entire company</td></tr></table>
  """
  visibleTo: String

  """
  A flag indicating whether the lead was seen by someone in the Pipedrive UI
  """
  wasSeen: WasSeen
}

"""The potential value of the lead"""
input Value2Input {
  amount: Float!
  currency: String!
}

input UpdateLeadLabelRequestInput {
  """The color of the label. Only a subset of colors can be used."""
  color: Color

  """The name of the lead label"""
  name: String
}

type UpdateMailThreadDetails {
  """The mail thread object"""
  data: BaseMailThread

  """If the response is successful or not"""
  success: Boolean
}

"""The mail thread object"""
type BaseMailThread {
  """The connection account ID"""
  accountId: String

  """The time when the mail thread was inserted to database"""
  addTime: String

  """Whether all the mail thread messages have been sent"""
  allMessagesSentFlag: Float

  """Whether the mail thread is archived"""
  archivedFlag: Float

  """The ID of the deal"""
  dealId: Int

  """Status of the deal"""
  dealStatus: String

  """Whether the mail thread is deleted"""
  deletedFlag: Float

  """Parties of the drafted mail thread"""
  draftsParties: [JSON]

  """Whether the mail thread has been deleted externally"""
  externalDeletedFlag: Float

  """
  The time when the mail thread has had the first message received or created
  """
  firstMessageTimestamp: String

  """Whether the mail thread was initialized by others"""
  firstMessageToMeFlag: Float

  """Folders in which messages from thread are being stored"""
  folders: [String]

  """Whether the mail thread has an attachment"""
  hasAttachmentsFlag: Float

  """Whether the mail thread has any drafts"""
  hasDraftFlag: Float

  """Whether the mail thread has inline attachments"""
  hasInlineAttachmentsFlag: Float

  """Whether the mail thread has real attachments (which are not inline)"""
  hasRealAttachmentsFlag: Float

  """Whether the mail thread has messages sent"""
  hasSentFlag: Float

  """ID of the mail thread"""
  id: Int

  """The last time when the mail thread has had a message received"""
  lastMessageReceivedTimestamp: String

  """The last time when the mail thread has had a message sent"""
  lastMessageSentTimestamp: String

  """Last message timestamp"""
  lastMessageTimestamp: String

  """The ID of the lead"""
  leadId: ID

  """Whether the link tracking of the mail thread is enabled"""
  mailLinkTrackingEnabledFlag: Float

  """Mail tracking status"""
  mailTrackingStatus: String

  """An amount of messages"""
  messageCount: Int

  """Parties of the mail thread"""
  parties: Parties

  """Whether the mail thread is read"""
  readFlag: Float

  """Whether the mail thread is shared"""
  sharedFlag: Float

  """Whether one of the parties of the mail thread is Bcc"""
  smartBccFlag: Float

  """A snippet"""
  snippet: String

  """A snippet from a draft"""
  snippetDraft: String

  """A snippet from a message sent"""
  snippetSent: String

  """The subject"""
  subject: String

  """Whether the mail thread is synced"""
  syncedFlag: Float

  """The time when the mail thread was updated in database received"""
  updateTime: String

  """ID of the user whom mail message will be assigned to"""
  userId: Int

  """Version"""
  version: Float
}

input UpdateMailThreadDetailsRequestInput {
  """
  Whether this thread is archived or not. You can only archive threads that belong to Inbox folder. Archived threads will disappear from Inbox.
  """
  archivedFlag: Float

  """The ID of the deal this thread is associated with"""
  dealId: Int

  """The ID of the lead this thread is associated with"""
  leadId: ID

  """Whether this thread is read or unread"""
  readFlag: Float

  """Whether this thread is shared with other users in your company"""
  sharedFlag: Float
}

input NoteRequestInput {
  """
  The optional creation date & time of the note in UTC. Can be set in the past or in the future. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS
  """
  addTime: String

  """
  The content of the note in HTML format. Subject to sanitization on the back-end.
  """
  content: String

  """The ID of the deal the note will be attached to"""
  dealId: Int

  """The ID of the lead the note will be attached to"""
  leadId: ID

  """The ID of the organization the note will be attached to"""
  orgId: Int

  """The ID of the person the note will be attached to"""
  personId: Int

  """
  If set, the results are filtered by note to deal pinning state (`deal_id` is also required)
  """
  pinnedToDealFlag: Float

  """
  If set, the results are filtered by note to lead pinning state (`lead_id` is also required)
  """
  pinnedToLeadFlag: Float

  """
  If set, the results are filtered by note to organization pinning state (`org_id` is also required)
  """
  pinnedToOrganizationFlag: Float

  """
  If set, the results are filtered by note to person pinning state (`person_id` is also required)
  """
  pinnedToPersonFlag: Float

  """
  The ID of the user who will be marked as the author of the note. Only an admin can change the author.
  """
  userId: Int
}

type UpdateOrganization {
  data: BaseOrganizationItem
  relatedObjects: RelatedObjects7

  """If the response is successful or not"""
  success: Boolean
}

type BaseOrganizationItem {
  """Whether the organization is active or not"""
  activeFlag: Boolean

  """The count of activities related to the organization"""
  activitiesCount: Int

  """The creation date and time of the organization"""
  addTime: String

  """The full address of the organization"""
  address: String

  """The level 1 admin area of the organization location"""
  addressAdminAreaLevel1: String

  """The level 2 admin area of the organization location"""
  addressAdminAreaLevel2: String

  """The country of the organization location"""
  addressCountry: String

  """The formatted organization location"""
  addressFormattedAddress: String

  """The locality of the organization location"""
  addressLocality: String

  """The postal code of the organization location"""
  addressPostalCode: String

  """The route of the organization location"""
  addressRoute: String

  """The street number of the organization location"""
  addressStreetNumber: String

  """The sub-locality of the organization location"""
  addressSublocality: String

  """The sub-premise of the organization location"""
  addressSubpremise: String

  """The BCC email of the organization"""
  ccEmail: String

  """The count of closed deals related with the item"""
  closedDealsCount: Int

  """The ID of the company related to the organization"""
  companyId: Int

  """The country code of the organization"""
  countryCode: String

  """The count of done activities related to the organization"""
  doneActivitiesCount: Int

  """The count of email messages related to the organization"""
  emailMessagesCount: Int

  """The count of files related to the organization"""
  filesCount: Int

  """The first character of the organization name"""
  firstChar: String

  """The count of followers related to the organization"""
  followersCount: Int

  """The ID of the organization"""
  id: Int

  """The ID of the label"""
  label: Int

  """The date of the last activity associated with the deal"""
  lastActivityDate: String

  """The ID of the last activity associated with the deal"""
  lastActivityId: Int

  """The count of lost deals related with the item"""
  lostDealsCount: Int

  """The name of the organization"""
  name: String

  """The date of the next activity associated with the deal"""
  nextActivityDate: String

  """The ID of the next activity associated with the deal"""
  nextActivityId: Int

  """The time of the next activity associated with the deal"""
  nextActivityTime: String

  """The count of notes related to the organization"""
  notesCount: Int

  """The count of open deals related with the item"""
  openDealsCount: Int
  ownerId: OwnerId

  """The name of the organization owner"""
  ownerName: String

  """The count of persons related to the organization"""
  peopleCount: Int
  pictureId: PictureId2

  """The count of related closed deals related with the item"""
  relatedClosedDealsCount: Int

  """The count of related lost deals related with the item"""
  relatedLostDealsCount: Int

  """The count of related open deals related with the item"""
  relatedOpenDealsCount: Int

  """The count of related won deals related with the item"""
  relatedWonDealsCount: Int

  """The count of undone activities related to the organization"""
  undoneActivitiesCount: Int

  """The last updated date and time of the organization"""
  updateTime: String

  """The visibility group ID of who can see the organization"""
  visibleTo: String

  """The count of won deals related with the item"""
  wonDealsCount: Int
}

input UpdateOrganizationRequestInput {
  """The name of the organization"""
  name: String

  """
  The ID of the user who will be marked as the owner of this organization. When omitted, the authorized user ID will be used.
  """
  ownerId: Int

  """
  The visibility of the organization. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user. Read more about visibility groups <a href="https://support.pipedrive.com/en/article/visibility-groups" target="_blank" rel="noopener noreferrer">here</a>.<h4>Essential / Advanced plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers</td><tr><td>`3`</td><td>Entire company</td></tr></table><h4>Professional / Enterprise plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner only</td><tr><td>`3`</td><td>Owner's visibility group</td></tr><tr><td>`5`</td><td>Owner's visibility group and sub-groups</td></tr><tr><td>`7`</td><td>Entire company</td></tr></table>
  """
  visibleTo: String
}

type UpdateOrganizationRelationship {
  data: Data86
  relatedObjects: RelatedObjects10

  """If the response is successful or not"""
  success: Boolean
}

input OrganizationRelationshipInput {
  """The ID of the base organization for the returned calculated values"""
  orgId: Int

  """
  The linked organization in this relationship. If type is `parent`, then the linked organization is the daughter.
  """
  relLinkedOrgId: Int

  """
  The owner of this relationship. If type is `parent`, then the owner is the parent and the linked organization is the daughter.
  """
  relOwnerOrgId: Int

  """The type of organization relationship"""
  type: Type4
}

type UpdatePerson {
  data: PersonItem
  relatedObjects: RelatedObjects6

  """If the response is successful or not"""
  success: Boolean
}

input UpdatePersonRequestInput {
  """
  The optional creation date & time of the person in UTC. Requires admin user API token. Format: YYYY-MM-DD HH:MM:SS
  """
  addTime: String

  """
  An email address as a string or an array of email objects related to the person. The structure of the array is as follows: `[{ "value": "mail@example.com", "primary": "true", "label": "main" }]`. Please note that only `value` is required.
  """
  email: [Email4ListItemInput]

  """
  If the person does not have a valid email address, then the marketing status is **not set** and `no_consent` is returned for the `marketing_status` value when the new person is created. If the change is forbidden, the status will remain unchanged for every call that tries to modify the marketing status. Please be aware that it is only allowed **once** to change the marketing status from an old status to a new one.<table><tr><th>Value</th><th>Description</th></tr><tr><td>`no_consent`</td><td>The customer has not given consent to receive any marketing communications</td></tr><tr><td>`unsubscribed`</td><td>The customers have unsubscribed from ALL marketing communications</td></tr><tr><td>`subscribed`</td><td>The customers are subscribed and are counted towards marketing caps</td></tr><tr><td>`archived`</td><td>The customers with `subscribed` status can be moved to `archived` to save consent, but they are not paid for</td></tr></table>
  """
  marketingStatus: String

  """The name of the person"""
  name: String

  """The ID of the organization this person will belong to"""
  orgId: Int

  """
  The ID of the user who will be marked as the owner of this person. When omitted, the authorized user ID will be used.
  """
  ownerId: Int

  """
  A phone number supplied as a string or an array of phone objects related to the person. The structure of the array is as follows: `[{ "value": "12345", "primary": "true", "label": "mobile" }]`. Please note that only `value` is required.
  """
  phone: [Phone3ListItemInput]

  """
  The visibility of the person. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user. Read more about visibility groups <a href="https://support.pipedrive.com/en/article/visibility-groups" target="_blank" rel="noopener noreferrer">here</a>.<h4>Essential / Advanced plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers</td><tr><td>`3`</td><td>Entire company</td></tr></table><h4>Professional / Enterprise plan</h4><table><tr><th style="width:40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner only</td><tr><td>`3`</td><td>Owner's visibility group</td></tr><tr><td>`5`</td><td>Owner's visibility group and sub-groups</td></tr><tr><td>`7`</td><td>Entire company</td></tr></table>
  """
  visibleTo: String
}

type UpdatePipeline {
  """The pipeline object"""
  data: Data100

  """If the response is successful or not"""
  success: Boolean
}

"""The pipeline object"""
type Data100 {
  """Whether this pipeline will be made inactive (hidden) or active"""
  active: Boolean

  """The pipeline creation time. Format: YYYY-MM-DD HH:MM:SS."""
  addTime: String

  """Whether deal probability is disabled or enabled for this pipeline"""
  dealProbability: Boolean

  """The ID of the pipeline"""
  id: Int

  """The name of the pipeline"""
  name: String

  """
  Defines the order of pipelines. First order (`order_nr=0`) is the default pipeline.
  """
  orderNr: Int

  """A boolean that shows if the pipeline is selected from a filter or not"""
  selected: Boolean

  """The pipeline update time. Format: YYYY-MM-DD HH:MM:SS."""
  updateTime: String

  """The pipeline title displayed in the URL"""
  urlTitle: String
}

input PipelineRequest2Input {
  """Whether this pipeline will be made inactive (hidden) or active"""
  active: Float

  """Whether deal probability is disabled or enabled for this pipeline"""
  dealProbability: Float

  """The name of the pipeline"""
  name: String

  """
  Defines the order of pipelines. First order (`order_nr=0`) is the default pipeline.
  """
  orderNr: Int
}

type UpdateProduct {
  data: Data108
  relatedObjects: RelatedObjects

  """If the response is successful or not"""
  success: Boolean
}

type Data108 {
  """Whether this product is active or not"""
  activeFlag: ActiveFlag

  """The product code"""
  code: String

  """The ID of the product"""
  id: Float

  """The name of the product"""
  name: String

  """Information about the Pipedrive user who owns the product"""
  ownerId: JSON

  """
  Object of objects, each containing: currency (string), price (number), cost (number, optional), overhead_cost (number, optional)
  """
  prices: JSON

  """Whether this product is selected in deals or not"""
  selectable: Selectable

  """The ax percentage"""
  tax: Float

  """The unit in which this product is sold"""
  unit: String

  """Visibility of the product"""
  visibleTo: String
}

input AddProductRequest2Input {
  """Whether this product will be made active or not"""
  activeFlag: NumberBooleanDefault1

  """The product code"""
  code: String

  """The name of the product"""
  name: String!

  """
  The ID of the user who will be marked as the owner of this product. When omitted, the authorized user ID will be used.
  """
  ownerId: Int

  """
  An array of objects, each containing: `currency` (string), `price` (number), `cost` (number, optional), `overhead_cost` (number, optional). Note that there can only be one price per product per currency. When `prices` is omitted altogether, a default price of 0 and a default currency based on the company's currency will be assigned.
  """
  prices: [JSON]

  """Whether this product can be selected in deals or not"""
  selectable: Selectable2

  """The tax percentage"""
  tax: Float

  """The unit in which this product is sold"""
  unit: String

  """
  The visibility of the product. If omitted, the visibility will be set to the default visibility setting of this item type for the authorized user. Read more about visibility groups <a href="https://support.pipedrive.com/en/article/visibility-groups" target="_blank" rel="noopener noreferrer">here</a>.<h4>Essential / Advanced plan</h4><table><tr><th style="width: 40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner &amp; followers</td><tr><td>`3`</td><td>Entire company</td></tr></table><h4>Professional / Enterprise plan</h4><table><tr><th style="width: 40px">Value</th><th>Description</th></tr><tr><td>`1`</td><td>Owner only</td><tr><td>`3`</td><td>Owner's visibility group</td></tr><tr><td>`5`</td><td>Owner's visibility group and sub-groups</td></tr><tr><td>`7`</td><td>Entire company</td></tr></table>
  """
  visibleTo: String
}

input UpdateProductFieldInput {
  """The name of the field"""
  name: String

  """
  When `field_type` is either set or enum, possible options on update must be supplied as an array of objects each containing id and label, for example: [{"id":1, "label":"red"},{"id":2, "label":"blue"},{"id":3, "label":"lilac"}]
  """
  options: [JSON]
}

input UpdateRecurringSubscriptionRequestInput {
  """The amount of each payment"""
  cycleAmount: Int

  """The description of the recurring subscription"""
  description: String

  """All payments after that date will be affected. Format: YYYY-MM-DD"""
  effectiveDate: String!

  """
  Array of additional payments. It requires a minimum structure as follows: [{ amount:SUM, description:DESCRIPTION, due_at:PAYMENT_DATE }]. Replace SUM with a payment amount, DESCRIPTION with an explanation string, PAYMENT_DATE with a date (format YYYY-MM-DD).
  """
  payments: [JSON]

  """
  Indicates that the deal value must be set to recurring subscription's MRR value
  """
  updateDealValue: Boolean
}

type UpdateRole {
  """The response data"""
  data: Data121

  """If the response is successful or not"""
  success: Boolean
}

"""The response data"""
type Data121 {
  """The ID of the updated role"""
  id: Int
}

"""The details of the role"""
input BaseRoleRequestInput {
  """The name of the role"""
  name: String

  """The ID of the parent role"""
  parentRoleId: Int
}

input UpdateStageRequestInput {
  """
  The success probability percentage of the deal. Used/shown when deal weighted values are used.
  """
  dealProbability: Int

  """The name of the stage"""
  name: String

  """
  An order number for this stage. Order numbers should be used to order the stages in the pipeline.
  """
  orderNr: Int

  """The ID of the pipeline to add stage to"""
  pipelineId: Int

  """
  The number of days the deals not updated in this stage would become rotten. Applies only if the `rotten_flag` is set.
  """
  rottenDays: Int

  """Whether deals in this stage can become rotten"""
  rottenFlag: RottenFlag
}

input UpdateSubscriptionInstallmentRequestInput {
  """
  Array of payments. It requires a minimum structure as follows: [{ amount:SUM, description:DESCRIPTION, due_at:PAYMENT_DATE }]. Replace SUM with a payment amount, DESCRIPTION with a explanation string, PAYMENT_DATE with a date (format YYYY-MM-DD).
  """
  payments: [JSON]!

  """
  Indicates that the deal value must be set to installment subscription's total value
  """
  updateDealValue: Boolean
}

input UpdateTeamRequestInput {
  """Flag that indicates whether the team is active"""
  activeFlag: Float

  """Flag that indicates whether the team is deleted"""
  deletedFlag: Float

  """The team description"""
  description: String

  """The team manager ID"""
  managerId: Int

  """The team name"""
  name: String

  """The list of user IDs"""
  users: [Int]
}

input UpdateUserRequestInput {
  """
  Whether the user is active or not. `false` = Not activated, `true` = Activated
  """
  activeFlag: Boolean!
}
