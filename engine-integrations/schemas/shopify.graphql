schema {
  query: Query
  mutation: Mutation
}

"""A checkout that was abandoned by the customer."""
type Shopify_AbandonedCheckout implements Shopify_Navigable & Shopify_Node {
  """The URL for the buyer to recover their checkout."""
  abandonedCheckoutUrl: URL!
  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!
  """A globally-unique identifier."""
  id: ID!
  """The number of products in the checkout."""
  lineItemsQuantity: Int!
  """
  The sum of all items in the checkout, including discounts, shipping, taxes, and tips.
  """
  totalPriceSet: Shopify_MoneyBag!
}

"""A browse, cart, or checkout that was abandoned by a customer."""
type Shopify_Abandonment implements Shopify_Node {
  """The abandonment payload for the abandoned checkout."""
  abandonedCheckoutPayload: Shopify_AbandonedCheckout
  """The abandonment type."""
  abandonmentType: Shopify_AbandonmentAbandonmentType!
  """The app associated with an abandoned checkout."""
  app: Shopify_App!
  """The date and time when the abandonment was created."""
  createdAt: DateTime!
  """The customer who abandoned this event."""
  customer: Shopify_Customer!
  """
  Whether the customer has completed an order since this checkout has been abandoned.
  """
  customerHasNoOrderSinceAbandonment: Boolean!
  """
  The number of days since the last abandonment email was sent to the customer.
  """
  daysSinceLastAbandonmentEmail: Int!
  """When the email was sent, if that is the case."""
  emailSentAt: DateTime
  """The email state (e.g., sent or not sent)."""
  emailState: Shopify_AbandonmentEmailState
  """The number of hours since the customer has last abandoned a checkout."""
  hoursSinceLastAbandonedCheckout: Float
  """A globally-unique identifier."""
  id: ID!
  """Whether the products in abandonment are available."""
  inventoryAvailable: Boolean!
  """
  Whether the abandonment event comes from the Online Store sales channel.
  """
  isFromOnlineStore: Boolean!
  """Whether the abandonment event comes from the Shop app sales channel."""
  isFromShopApp: Boolean!
  """Whether the abandonment event comes from Shop Pay."""
  isFromShopPay: Boolean!
  """
  Whether the customer did not complete another most significant step since this abandonment.
  """
  isMostSignificantAbandonment: Boolean!
  """The date for the latest browse abandonment."""
  lastBrowseAbandonmentDate: DateTime!
  """The date for the latest cart abandonment."""
  lastCartAbandonmentDate: DateTime!
  """The date for the latest checkout abandonment."""
  lastCheckoutAbandonmentDate: DateTime!
  """The most recent step type."""
  mostRecentStep: Shopify_AbandonmentAbandonmentType!
  """The products added to the cart during the customer abandoned visit."""
  productsAddedToCart(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CustomerVisitProductInfoConnection!
  """The products viewed during the customer abandoned visit."""
  productsViewed(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CustomerVisitProductInfoConnection!
  """The date and time when the visit started."""
  visitStartedAt: DateTime
}

"""Specifies the abandonment type."""
enum Shopify_AbandonmentAbandonmentType {
  """The abandonment event is an abandoned browse."""
  BROWSE
  """The abandonment event is an abandoned cart."""
  CART
  """The abandonment event is an abandoned checkout."""
  CHECKOUT
}

"""Specifies the email state."""
enum Shopify_AbandonmentEmailState {
  """The email has not yet been sent."""
  NOT_SENT
  """The email has been sent."""
  SENT
  """The email has been scheduled for later delivery."""
  SCHEDULED
}

"""Return type for `abandonmentEmailStateUpdate` mutation."""
type Shopify_AbandonmentEmailStateUpdatePayload {
  """The updated abandonment."""
  abandonment: Shopify_Abandonment
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_AbandonmentEmailStateUpdateUserError!]!
}

"""
An error that occurs during the execution of `AbandonmentEmailStateUpdate`.
"""
type Shopify_AbandonmentEmailStateUpdateUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_AbandonmentEmailStateUpdateUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `AbandonmentEmailStateUpdateUserError`.
"""
enum Shopify_AbandonmentEmailStateUpdateUserErrorCode {
  """Unable to find an Abandonment for the provided ID."""
  ABANDONMENT_NOT_FOUND
}

"""
The permission required to access a Shopify Admin API or Storefront API resource
for a shop. Merchants grant access scopes that are requested by applications.
"""
type Shopify_AccessScope {
  """
  A description of the actions that the access scope allows an app to perform.
  """
  description: String!
  """
  A readable string that represents the access scope. The string usually follows
  the format `{action}_{resource}`. `{action}` is `read` or `write`, and
  `{resource}` is the resource that the action can be performed on. `{action}`
  and `{resource}` are separated by an underscore. For example, `read_orders` or
  `write_products`.
  """
  handle: String!
}

"""A sale associated with an order price adjustment."""
type Shopify_AdjustmentSale implements Shopify_Sale {
  """The type of order action that the sale represents."""
  actionType: Shopify_SaleActionType!
  """The unique identifier for the sale."""
  id: ID!
  """The line type assocated with the sale."""
  lineType: Shopify_SaleLineType!
  """The number of units either ordered or intended to be returned."""
  quantity: Int
  """All individual taxes associated with the sale."""
  taxes: [Shopify_SaleTax!]!
  """The total sale amount after taxes and discounts."""
  totalAmount: Shopify_MoneyBag!
  """The total discounts allocated to the sale after taxes."""
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag!
  """The total discounts allocated to the sale before taxes."""
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag!
  """The total amount of taxes for the sale."""
  totalTaxAmount: Shopify_MoneyBag!
}

"""Targets all items the cart for a specified discount."""
type Shopify_AllDiscountItems {
  """
  Whether all items are eligible for the discount. This value always returns `true`.
  """
  allItems: Boolean!
}

"""
A version of the API, as defined by [Shopify API versioning](https://shopify.dev/api/usage/versioning).
Versions are commonly referred to by their handle (for example, `2021-10`).
"""
type Shopify_ApiVersion {
  """The human-readable name of the version."""
  displayName: String!
  """
  The unique identifier of an ApiVersion. All supported API versions have a date-based (YYYY-MM) or `unstable` handle.
  """
  handle: String!
  """
  Whether the version is actively supported by Shopify. Supported API versions
  are guaranteed to be stable. Unsupported API versions include unstable,
  release candidate, and end-of-life versions that are marked as unsupported.
  For more information, refer to
  [Versioning](https://shopify.dev/api/usage/versioning).
  """
  supported: Boolean!
}

"""A Shopify application."""
type Shopify_App implements Shopify_Node {
  """A unique application API identifier."""
  apiKey: String!
  """App store page URL of the app."""
  appStoreAppUrl: URL
  """App store page URL of the developer who created the app."""
  appStoreDeveloperUrl: URL
  """The access scopes available to the app."""
  availableAccessScopes: [Shopify_AccessScope!]!
  """Banner image for the app."""
  banner: Shopify_Image!
  """Description of the app."""
  description: String
  """The name of the app developer."""
  developerName: String
  """The type of app developer."""
  developerType: Shopify_AppDeveloperType!
  """Website of the developer who created the app."""
  developerUrl: URL! @deprecated(reason: "Use `appStoreDeveloperUrl` instead.")
  """Whether the app uses the Embedded App SDK."""
  embedded: Boolean!
  """Requirements that must be met before the app can be installed."""
  failedRequirements: [Shopify_FailedRequirement!]!
  """
  A list of app features that are shown in the Shopify App Store listing.
  """
  features: [String!]!
  """Feedback from this app about the store."""
  feedback: Shopify_AppFeedback
  """Handle of the app."""
  handle: String
  """Icon that represents the app."""
  icon: Shopify_Image!
  """A globally-unique identifier."""
  id: ID!
  """Webpage where you can install the app."""
  installUrl: URL
  """
  Corresponding AppInstallation for this shop and App.
  Returns null if the App is not installed.
  """
  installation: Shopify_AppInstallation
  """
  Whether the app is the [post purchase](https://shopify.dev/apps/checkout/post-purchase) app in use.
  """
  isPostPurchaseAppInUse: Boolean!
  """Webpage that the app starts in."""
  launchUrl: URL! @deprecated(reason: "Use AppInstallation.launchUrl instead")
  """
  Menu items for the app, which also appear as submenu items in left navigation sidebar in the Shopify admin.
  """
  navigationItems: [Shopify_NavigationItem!]! @deprecated(reason: "Use AppInstallation.navigationItems instead")
  """Whether the app was previously installed on the current shop."""
  previouslyInstalled: Boolean!
  """Detailed information about the app pricing."""
  pricingDetails: String
  """Summary of the app pricing details."""
  pricingDetailsSummary: String!
  """Link to app privacy policy."""
  privacyPolicyUrl: URL
  """The public category for the app."""
  publicCategory: Shopify_AppPublicCategory!
  """Whether the app is published to the Shopify App Store."""
  published: Boolean!
  """The access scopes requested by the app."""
  requestedAccessScopes: [Shopify_AccessScope!]!
  """Screenshots of the app."""
  screenshots: [Shopify_Image!]!
  """Whether the app was developed by Shopify."""
  shopifyDeveloped: Boolean!
  """Name of the app."""
  title: String!
  """
  Message that appears when the app is uninstalled. For example:
  By removing this app, you will no longer be able to publish products to
  MySocialSite or view this app in your Shopify admin. You can re-enable this
  channel at any time.
  """
  uninstallMessage: String!
  """Webpage where you can uninstall the app."""
  uninstallUrl: URL @deprecated(reason: "Use AppInstallation.uninstallUrl instead")
  """The webhook API version for the app."""
  webhookApiVersion: String!
}

"""An auto-generated type for paginating through multiple Apps."""
type Shopify_AppConnection {
  """A list of edges."""
  edges: [Shopify_AppEdge!]!
  """A list of the nodes contained in AppEdge."""
  nodes: [Shopify_App!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
App credits can be applied by the merchant towards future app purchases, subscriptions, or usage records in Shopify.
"""
type Shopify_AppCredit implements Shopify_Node {
  """The amount that can be used towards future app purchases in Shopify."""
  amount: Shopify_MoneyV2!
  """The date and time when the app credit was created."""
  createdAt: DateTime!
  """The description of the app credit."""
  description: String!
  """A globally-unique identifier."""
  id: ID!
  """Whether the app credit is a test transaction."""
  test: Boolean!
}

"""An auto-generated type for paginating through multiple AppCredits."""
type Shopify_AppCreditConnection {
  """A list of edges."""
  edges: [Shopify_AppCreditEdge!]!
  """A list of the nodes contained in AppCreditEdge."""
  nodes: [Shopify_AppCredit!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `appCreditCreate` mutation."""
type Shopify_AppCreditCreatePayload {
  """The newly created app credit."""
  appCredit: Shopify_AppCredit
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An auto-generated type which holds one AppCredit and a cursor during pagination.
"""
type Shopify_AppCreditEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of AppCreditEdge."""
  node: Shopify_AppCredit!
}

"""Possible types of app developer."""
enum Shopify_AppDeveloperType {
  """Indicates the app developer is Shopify."""
  SHOPIFY
  """Indicates the app developer is a Partner."""
  PARTNER
  """Indicates the app developer works directly for a Merchant."""
  MERCHANT
  """
  Indicates the app developer is unknown. It is not categorized as any of the other developer types.
  """
  UNKNOWN
}

"""A script that defines a discount type."""
type Shopify_AppDiscountType {
  """The app providing the app discount type."""
  app: Shopify_App!
  """The App Bridge details for discount type configuration."""
  appBridge: Shopify_FunctionsAppBridge!
  """The client ID of the app providing the app discount type."""
  appKey: String!
  """A description of the app discount type."""
  description: String
  """The class of the app discount type."""
  discountClass: Shopify_DiscountClass!
  """The ID of the function providing the app discount type."""
  functionId: String!
  """
  The target type of the app discount type. Possible values: `SHIPPING_LINE` and `LINE_ITEM`.
  """
  targetType: Shopify_DiscountApplicationTargetType!
  """The title of the app discount type."""
  title: String!
}

"""
An auto-generated type which holds one App and a cursor during pagination.
"""
type Shopify_AppEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of AppEdge."""
  node: Shopify_App!
}

"""
Reports the status of shops and their resources and displays this information
within Shopify admin. AppFeedback is used to notify merchants about steps they need to take
to set up an app on their store.
"""
type Shopify_AppFeedback {
  """The application associated to the feedback."""
  app: Shopify_App!
  """A link to where merchants can resolve errors."""
  link: Shopify_Link
  """The feedback message presented to the merchant."""
  messages: [Shopify_UserError!]!
}

"""Represents an installed application on a shop."""
type Shopify_AppInstallation implements Shopify_HasMetafields & Shopify_Node {
  """
  The access scopes granted to the application by a merchant during installation.
  """
  accessScopes: [Shopify_AccessScope!]!
  """
  The active application subscriptions billed to the shop on a recurring basis.
  """
  activeSubscriptions: [Shopify_AppSubscription!]!
  """All subscriptions created for a shop."""
  allSubscriptions(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_AppSubscriptionSortKeys = CREATED_AT
  ): Shopify_AppSubscriptionConnection!
  """Application which is installed."""
  app: Shopify_App!
  """Channel associated with the installed application."""
  channel: Shopify_Channel @deprecated(reason: "Use `publication` instead.")
  """Credits that can be used towards future app purchases."""
  credits(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_AppTransactionSortKeys = CREATED_AT
  ): Shopify_AppCreditConnection!
  """A globally-unique identifier."""
  id: ID!
  """The URL to launch the application."""
  launchUrl: URL!
  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String
    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield
  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String
    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!
  """One-time purchases to a shop."""
  oneTimePurchases(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_AppTransactionSortKeys = CREATED_AT
  ): Shopify_AppPurchaseOneTimeConnection!
  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!
    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield
  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
  """The publication associated with the installed application."""
  publication: Shopify_Publication
  """
  The records that track the externally-captured revenue for the app. The records are used for revenue attribution purposes.
  """
  revenueAttributionRecords(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_AppRevenueAttributionRecordSortKeys = CREATED_AT
  ): Shopify_AppRevenueAttributionRecordConnection!
  """Subscriptions charge to a shop on a recurring basis."""
  subscriptions: [Shopify_AppSubscription!]! @deprecated(reason: "Use `activeSubscriptions` instead.")
  """The URL to uninstall the application."""
  uninstallUrl: URL
}

"""
The possible categories of an app installation, based on their purpose
or the environment they can run in.
"""
enum Shopify_AppInstallationCategory {
  """
  Apps that serve as channels through which sales are made, such as the online store.
  """
  CHANNEL
  """Apps that can be used in the POS mobile client."""
  POS_EMBEDDED
}

"""
An auto-generated type for paginating through multiple AppInstallations.
"""
type Shopify_AppInstallationConnection {
  """A list of edges."""
  edges: [Shopify_AppInstallationEdge!]!
  """A list of the nodes contained in AppInstallationEdge."""
  nodes: [Shopify_AppInstallation!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one AppInstallation and a cursor during pagination.
"""
type Shopify_AppInstallationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of AppInstallationEdge."""
  node: Shopify_AppInstallation!
}

"""The levels of privacy of an app installation."""
enum Shopify_AppInstallationPrivacy {
  PUBLIC
  PRIVATE
}

"""The set of valid sort keys for the AppInstallation query."""
enum Shopify_AppInstallationSortKeys {
  """Sort by the `installed_at` value."""
  INSTALLED_AT
  """Sort by the `app_title` value."""
  APP_TITLE
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
The pricing model for the app subscription.
The pricing model input can be either `appRecurringPricingDetails` or `appUsagePricingDetails`.
"""
input Shopify_AppPlanInput {
  """The pricing details for usage-based billing."""
  appUsagePricingDetails: Shopify_AppUsagePricingInput
  """The pricing details for recurring billing."""
  appRecurringPricingDetails: Shopify_AppRecurringPricingInput
}

"""The app plan that the merchant is subscribed to."""
type Shopify_AppPlanV2 {
  """The plan billed to a shop on a recurring basis."""
  pricingDetails: Shopify_AppPricingDetails!
}

"""
The information about the price that's charged to a shop every plan period.
The concrete type can be `AppRecurringPricing` for recurring billing or `AppUsagePricing` for usage-based billing.
"""
union Shopify_AppPricingDetails = Shopify_AppRecurringPricing | Shopify_AppUsagePricing

"""The frequency at which the shop is billed for an app subscription."""
enum Shopify_AppPricingInterval {
  """The app subscription bills the shop annually."""
  ANNUAL
  """The app subscription bills the shop every 30 days."""
  EVERY_30_DAYS
}

"""The public-facing category for an app."""
enum Shopify_AppPublicCategory {
  """
  The app's public category is [private](https://shopify.dev/apps/distribution#deprecated-app-types).
  """
  PRIVATE
  """
  The app's public category is [public](https://shopify.dev/apps/distribution#capabilities-and-requirements).
  """
  PUBLIC
  """
  The app's public category is [custom](https://shopify.dev/apps/distribution#capabilities-and-requirements).
  """
  CUSTOM
  """
  The app's public category is other. An app is in this category if it's not
  classified under any of the other app types (private, public, or custom).
  """
  OTHER
}

"""Services and features purchased once by the store."""
interface Shopify_AppPurchase {
  """The date and time when the app purchase occurred."""
  createdAt: DateTime!
  """The name of the app purchase."""
  name: String!
  """The amount to be charged to the store for the app purchase."""
  price: Shopify_MoneyV2!
  """The status of the app purchase."""
  status: Shopify_AppPurchaseStatus!
  """Whether the app purchase is a test transaction."""
  test: Boolean!
}

"""Services and features purchased once by a store."""
type Shopify_AppPurchaseOneTime implements Shopify_AppPurchase & Shopify_Node {
  """The date and time when the app purchase occurred."""
  createdAt: DateTime!
  """A globally-unique identifier."""
  id: ID!
  """The name of the app purchase."""
  name: String!
  """The amount to be charged to the store for the app purchase."""
  price: Shopify_MoneyV2!
  """The status of the app purchase."""
  status: Shopify_AppPurchaseStatus!
  """Whether the app purchase is a test transaction."""
  test: Boolean!
}

"""
An auto-generated type for paginating through multiple AppPurchaseOneTimes.
"""
type Shopify_AppPurchaseOneTimeConnection {
  """A list of edges."""
  edges: [Shopify_AppPurchaseOneTimeEdge!]!
  """A list of the nodes contained in AppPurchaseOneTimeEdge."""
  nodes: [Shopify_AppPurchaseOneTime!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `appPurchaseOneTimeCreate` mutation."""
type Shopify_AppPurchaseOneTimeCreatePayload {
  """The newly created app one-time purchase."""
  appPurchaseOneTime: Shopify_AppPurchaseOneTime
  """
  The URL that the merchant can access to approve or decline the newly created app one-time purchase.
  
  If the merchant declines, then the merchant is redirected to the app and
  receives a notification message stating that the charge was declined.
  If the merchant approves and they're successfully invoiced, then the state of
  the charge changes from `pending` to `active`.
  
  You get paid after the charge is activated.
  """
  confirmationUrl: URL
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An auto-generated type which holds one AppPurchaseOneTime and a cursor during pagination.
"""
type Shopify_AppPurchaseOneTimeEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of AppPurchaseOneTimeEdge."""
  node: Shopify_AppPurchaseOneTime!
}

"""
The approval status of the app purchase.

The merchant is charged for the purchase immediately after approval, and the status changes to `active`.
If the payment fails, then the app purchase remains `pending`.

Purchases start as `pending` and can change to: `active`, `declined`, `expired`. After a purchase changes, it
remains in that final state.
"""
enum Shopify_AppPurchaseStatus {
  """
  The app purchase has been approved by the merchant and is ready to be
  activated by the app. App purchases created through the GraphQL Admin API are
  activated upon approval.
  """
  ACCEPTED @deprecated(reason: "As of API version 2021-01, when a merchant accepts an app purchase, the status immediately changes from `pending` to `active`.")
  """
  The app purchase was approved by the merchant and has been activated by the
  app. Active app purchases are charged to the merchant and are paid out to the partner.
  """
  ACTIVE
  """The app purchase was declined by the merchant."""
  DECLINED
  """The app purchase was not accepted within two days of being created."""
  EXPIRED
  """The app purchase is pending approval by the merchant."""
  PENDING
}

"""
The pricing information about a subscription app.
The object contains an interval (the frequency at which the shop is billed for an app subscription) and
a price (the amount to be charged to the subscribing shop at each interval).
"""
type Shopify_AppRecurringPricing {
  """
  The discount applied to the subscription for a given number of billing intervals.
  """
  discount: Shopify_AppSubscriptionDiscount
  """
  The frequency at which the subscribing shop is billed for an app subscription.
  """
  interval: Shopify_AppPricingInterval!
  """
  The amount and currency to be charged to the subscribing shop every billing interval.
  """
  price: Shopify_MoneyV2!
}

"""
Instructs the app subscription to generate a fixed charge on a recurring basis.
The frequency is specified by the billing interval.
"""
input Shopify_AppRecurringPricingInput {
  """How often the app subscription generates a charge."""
  interval: Shopify_AppPricingInterval = EVERY_30_DAYS
  """The amount to be charged to the store every billing interval."""
  price: Shopify_MoneyInput!
  """
  The discount applied to the subscription for a given number of billing intervals.
  """
  discount: Shopify_AppSubscriptionDiscountInput
}

"""Represents app revenue that was captured externally by the partner."""
type Shopify_AppRevenueAttributionRecord implements Shopify_Node {
  """The financial amount captured in this attribution."""
  amount: Shopify_MoneyV2!
  """The timestamp when the financial amount was captured."""
  capturedAt: DateTime!
  """The timestamp at which this revenue attribution was issued."""
  createdAt: DateTime!
  """A globally-unique identifier."""
  id: ID!
  """
  The unique value submitted during the creation of the app revenue attribution record.
  For more information, refer to
  [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
  """
  idempotencyKey: String!
  """Indicates whether this is a test submission."""
  test: Boolean!
  """The type of revenue attribution."""
  type: Shopify_AppRevenueAttributionType!
}

"""
An auto-generated type for paginating through multiple AppRevenueAttributionRecords.
"""
type Shopify_AppRevenueAttributionRecordConnection {
  """A list of edges."""
  edges: [Shopify_AppRevenueAttributionRecordEdge!]!
  """A list of the nodes contained in AppRevenueAttributionRecordEdge."""
  nodes: [Shopify_AppRevenueAttributionRecord!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `appRevenueAttributionRecordCreate` mutation."""
type Shopify_AppRevenueAttributionRecordCreatePayload {
  """The created app revenue attribution record."""
  appRevenueAttributionRecord: Shopify_AppRevenueAttributionRecord
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_AppRevenueAttributionRecordCreateUserError!]!
}

"""
An error that occurs during the execution of `AppRevenueAttributionRecordCreate`.
"""
type Shopify_AppRevenueAttributionRecordCreateUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_AppRevenueAttributionRecordCreateUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `AppRevenueAttributionRecordCreateUserError`.
"""
enum Shopify_AppRevenueAttributionRecordCreateUserErrorCode {
  """The input value is invalid."""
  INVALID
  """The input value is already taken."""
  TAKEN
}

"""Return type for `appRevenueAttributionRecordDelete` mutation."""
type Shopify_AppRevenueAttributionRecordDeletePayload {
  """The ID of the revenue attribution that was deleted, if one was."""
  deletedId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_AppRevenueAttributionRecordDeleteUserError!]!
}

"""
An error that occurs during the execution of `AppRevenueAttributionRecordDelete`.
"""
type Shopify_AppRevenueAttributionRecordDeleteUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_AppRevenueAttributionRecordDeleteUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `AppRevenueAttributionRecordDeleteUserError`.
"""
enum Shopify_AppRevenueAttributionRecordDeleteUserErrorCode {
  """The input value is invalid."""
  INVALID
}

"""
An auto-generated type which holds one AppRevenueAttributionRecord and a cursor during pagination.
"""
type Shopify_AppRevenueAttributionRecordEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of AppRevenueAttributionRecordEdge."""
  node: Shopify_AppRevenueAttributionRecord!
}

"""Allows to supply an app revenue attribution record."""
input Shopify_AppRevenueAttributionRecordInput {
  """
  The unique value submitted during creation.
  For more information, refer to
  [Idempotent requests](https://shopify.dev/api/usage/idempotent-requests).
  """
  idempotencyKey: String!
  """The timestamp when the financial amount was captured."""
  capturedAt: DateTime!
  """The financial amount captured in this attribution."""
  amount: Shopify_MoneyInput!
  """The type of revenue attribution."""
  type: Shopify_AppRevenueAttributionType!
  """Indicates whether this is a test submission."""
  test: Boolean!
}

"""The set of valid sort keys for the AppRevenueAttributionRecord query."""
enum Shopify_AppRevenueAttributionRecordSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""Represents the billing types of revenue attribution."""
enum Shopify_AppRevenueAttributionType {
  """App purchase related revenue collection."""
  APPLICATION_PURCHASE
  """App subscription revenue collection."""
  APPLICATION_SUBSCRIPTION
  """App usage-based revenue collection."""
  APPLICATION_USAGE
  """Other app revenue collection type."""
  OTHER
}

"""
Provides users access to services and/or features for a duration of time.
"""
type Shopify_AppSubscription implements Shopify_Node {
  """The date and time when the app subscription was created."""
  createdAt: DateTime!
  """
  The date and time when the current app subscription period ends. Returns `null` if the subscription isn't active.
  """
  currentPeriodEnd: DateTime
  """A globally-unique identifier."""
  id: ID!
  """The plans attached to the app subscription."""
  lineItems: [Shopify_AppSubscriptionLineItem!]!
  """The name of the app subscription."""
  name: String!
  """
  The URL that the merchant is redirected to after approving the app subscription.
  """
  returnUrl: URL!
  """The status of the app subscription."""
  status: Shopify_AppSubscriptionStatus!
  """Specifies whether the app subscription is a test transaction."""
  test: Boolean!
  """
  The number of free trial days, starting at the subscription's creation date, by which billing is delayed.
  """
  trialDays: Int!
}

"""Return type for `appSubscriptionCancel` mutation."""
type Shopify_AppSubscriptionCancelPayload {
  """The cancelled app subscription."""
  appSubscription: Shopify_AppSubscription
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An auto-generated type for paginating through multiple AppSubscriptions.
"""
type Shopify_AppSubscriptionConnection {
  """A list of edges."""
  edges: [Shopify_AppSubscriptionEdge!]!
  """A list of the nodes contained in AppSubscriptionEdge."""
  nodes: [Shopify_AppSubscription!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `appSubscriptionCreate` mutation."""
type Shopify_AppSubscriptionCreatePayload {
  """The newly-created app subscription."""
  appSubscription: Shopify_AppSubscription
  """
  The URL pointing to the page where the merchant approves or declines the charges for an app subscription.
  """
  confirmationUrl: URL
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Discount applied to the recurring pricing portion of a subscription."""
type Shopify_AppSubscriptionDiscount {
  """
  The total number of billing intervals to which the discount will be applied.
  The discount will be applied to an indefinite number of billing intervals if this value is blank.
  """
  durationLimitInIntervals: Int
  """The price of the subscription after the discount is applied."""
  priceAfterDiscount: Shopify_MoneyV2!
  """
  The remaining number of billing intervals to which the discount will be applied.
  """
  remainingDurationInIntervals: Int
  """The value of the discount applied every billing interval."""
  value: Shopify_AppSubscriptionDiscountValue!
}

"""The fixed amount value of a discount."""
type Shopify_AppSubscriptionDiscountAmount {
  """The fixed amount value of a discount."""
  amount: Shopify_MoneyV2!
}

"""
Specifies a discount to the recurring pricing portion of a subscription over a number of billing intervals.
"""
input Shopify_AppSubscriptionDiscountInput {
  """The value to be discounted every billing interval."""
  value: Shopify_AppSubscriptionDiscountValueInput
  """
  The total number of billing intervals to which the discount will be applied.
  The discount will be applied to an indefinite number of billing intervals if this value is left blank.
  """
  durationLimitInIntervals: Int
}

"""The percentage value of a discount."""
type Shopify_AppSubscriptionDiscountPercentage {
  """The percentage value of a discount."""
  percentage: Float!
}

"""The value of the discount."""
union Shopify_AppSubscriptionDiscountValue = Shopify_AppSubscriptionDiscountAmount | Shopify_AppSubscriptionDiscountPercentage

"""Specifies the value discounted every billing interval."""
input Shopify_AppSubscriptionDiscountValueInput {
  """The percentage value of a discount."""
  percentage: Float
  """The monetary value of a discount."""
  amount: Shopify_Decimal
}

"""
An auto-generated type which holds one AppSubscription and a cursor during pagination.
"""
type Shopify_AppSubscriptionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of AppSubscriptionEdge."""
  node: Shopify_AppSubscription!
}

"""The plan attached to an app subscription."""
type Shopify_AppSubscriptionLineItem {
  """A globally-unique identifier."""
  id: ID!
  """The pricing model for the app subscription."""
  plan: Shopify_AppPlanV2!
  """A list of the store's usage records for a usage pricing plan."""
  usageRecords(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_AppUsageRecordSortKeys = CREATED_AT
  ): Shopify_AppUsageRecordConnection!
}

"""
Allows an app to add more than one pricing plan to an app subscription.
"""
input Shopify_AppSubscriptionLineItemInput {
  """The pricing model for the app subscription."""
  plan: Shopify_AppPlanInput!
}

"""Return type for `appSubscriptionLineItemUpdate` mutation."""
type Shopify_AppSubscriptionLineItemUpdatePayload {
  """The updated app subscription."""
  appSubscription: Shopify_AppSubscription
  """
  The URL where the merchant approves or declines the updated app subscription line item.
  """
  confirmationUrl: URL
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
The replacement behavior when creating an app subscription for a merchant with an already existing app subscription.
"""
enum Shopify_AppSubscriptionReplacementBehavior {
  """
  Cancels the merchant's current app subscription immediately and replaces it with the newly created app subscription.
  """
  APPLY_IMMEDIATELY
  """
  Defers canceling the merchant's current app subscription and applying the
  newly created app subscription until the start of the next billing cycle.
  """
  APPLY_ON_NEXT_BILLING_CYCLE
  """
  Cancels the merchant's current app subscription immediately and replaces it
  with the newly created app subscription, with the exception of
  the following scenarios where replacing the current app subscription will be
  deferred until the start of the next billing cycle.
  1) The current app subscription is annual and the newly created app subscription is also annual but is of a lesser value.
  2) The current app subscription is annual and the newly created app subscription is monthly.
  3) The current app subscription and the newly created app subscription are identical except for the `discount` value.
  """
  STANDARD
}

"""The set of valid sort keys for the AppSubscription query."""
enum Shopify_AppSubscriptionSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""The status of the app subscription."""
enum Shopify_AppSubscriptionStatus {
  """The app subscription is pending approval by the merchant."""
  PENDING
  """
  The app subscription has been approved by the merchant and is ready to be activated by the app.
  """
  ACCEPTED @deprecated(reason: "As of API version 2021-01, when a merchant approves an app subscription, the status immediately transitions from `pending` to `active`.")
  """
  The app subscription has been approved by the merchant. Active app
  subscriptions are billed to the shop. After payment, partners receive payouts.
  """
  ACTIVE
  """
  The app subscription was declined by the merchant. This is a terminal state.
  """
  DECLINED
  """
  The app subscription wasn't approved by the merchant within two days of being created. This is a terminal state.
  """
  EXPIRED
  """
  The app subscription is on hold due to non-payment. The subscription re-activates after payments resume.
  """
  FROZEN
  """
  The app subscription was cancelled by the app. This could be caused by the app
  being uninstalled, a new app subscription being activated, or a direct
  cancellation by the app. This is a terminal state.
  """
  CANCELLED
}

"""Return type for `appSubscriptionTrialExtend` mutation."""
type Shopify_AppSubscriptionTrialExtendPayload {
  """The app subscription that had its trial extended."""
  appSubscription: Shopify_AppSubscription
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_AppSubscriptionTrialExtendUserError!]!
}

"""
An error that occurs during the execution of `AppSubscriptionTrialExtend`.
"""
type Shopify_AppSubscriptionTrialExtendUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_AppSubscriptionTrialExtendUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `AppSubscriptionTrialExtendUserError`.
"""
enum Shopify_AppSubscriptionTrialExtendUserErrorCode {
  """The app subscription wasn't found."""
  SUBSCRIPTION_NOT_FOUND
  """The trial isn't active."""
  TRIAL_NOT_ACTIVE
  """The app subscription isn't active."""
  SUBSCRIPTION_NOT_ACTIVE
}

"""The set of valid sort keys for the AppTransaction query."""
enum Shopify_AppTransactionSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
Defines a usage pricing model for the app subscription.
These charges are variable based on how much the merchant uses the app.
"""
type Shopify_AppUsagePricing {
  """The total usage records for interval."""
  balanceUsed: Shopify_MoneyV2!
  """
  The capped amount prevents the merchant from being charged for any usage over that amount during a billing period.
  This prevents billing from exceeding a maximum threshold over the duration of the billing period.
  For the merchant to continue using the app after exceeding a capped amount,
  they would need to agree to a new usage charge.
  """
  cappedAmount: Shopify_MoneyV2!
  """The frequency with which the app usage records are billed."""
  interval: Shopify_AppPricingInterval!
  """
  The terms and conditions for app usage pricing.
  Must be present in order to create usage charges.
  The terms are presented to the merchant when they approve an app's usage charges.
  """
  terms: String!
}

"""
Allows an app to issue arbitrary charges for app usage associated with a subscription.
"""
input Shopify_AppUsagePricingInput {
  """
  The maximum amount of usage charges that can be incurred within a subscription billing interval.
  """
  cappedAmount: Shopify_MoneyInput!
  """
  The terms and conditions for app usage. These terms stipulate the pricing model for the charges that an app creates.
  """
  terms: String!
}

"""Store usage for app subscriptions with usage pricing."""
type Shopify_AppUsageRecord implements Shopify_Node {
  """The date and time when the usage record was created."""
  createdAt: DateTime!
  """The description of the app usage record."""
  description: String!
  """A globally-unique identifier."""
  id: ID!
  """The price of the usage record."""
  price: Shopify_MoneyV2!
  """Defines the usage pricing plan the merchant is subscribed to."""
  subscriptionLineItem: Shopify_AppSubscriptionLineItem!
}

"""
An auto-generated type for paginating through multiple AppUsageRecords.
"""
type Shopify_AppUsageRecordConnection {
  """A list of edges."""
  edges: [Shopify_AppUsageRecordEdge!]!
  """A list of the nodes contained in AppUsageRecordEdge."""
  nodes: [Shopify_AppUsageRecord!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `appUsageRecordCreate` mutation."""
type Shopify_AppUsageRecordCreatePayload {
  """The newly created app usage record."""
  appUsageRecord: Shopify_AppUsageRecord
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An auto-generated type which holds one AppUsageRecord and a cursor during pagination.
"""
type Shopify_AppUsageRecordEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of AppUsageRecordEdge."""
  node: Shopify_AppUsageRecord!
}

"""The set of valid sort keys for the AppUsageRecord query."""
enum Shopify_AppUsageRecordSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
An Amazon Web Services Amazon Resource Name (ARN), including the Region and account ID.
For more information, refer to [Amazon Resource Names](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
"""
scalar Shopify_ARN

"""Represents a generic custom attribute."""
type Shopify_Attribute {
  """Key or name of the attribute."""
  key: String!
  """Value of the attribute."""
  value: String
}

"""Specifies the input fields required for an attribute."""
input Shopify_AttributeInput {
  """Key or name of the attribute."""
  key: String!
  """Value of the attribute."""
  value: String!
}

"""
Automatic discount applications capture the intentions of a discount that was automatically applied.
"""
type Shopify_AutomaticDiscountApplication implements Shopify_DiscountApplication {
  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: Shopify_DiscountApplicationAllocationMethod!
  """
  An ordered index that can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.
  """
  index: Int!
  """How the discount amount is distributed on the discounted lines."""
  targetSelection: Shopify_DiscountApplicationTargetSelection!
  """Whether the discount is applied on line items or shipping lines."""
  targetType: Shopify_DiscountApplicationTargetType!
  """The title of the discount application."""
  title: String!
  """The value of the discount application."""
  value: Shopify_PricingValue!
}

"""The set of valid sort keys for the AutomaticDiscount query."""
enum Shopify_AutomaticDiscountSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
Represents an object containing all information for channels available to a shop.
"""
type Shopify_AvailableChannelDefinitionsByChannel {
  """The channel definitions for channels installed on a shop."""
  channelDefinitions: [Shopify_ChannelDefinition!]!
  """The name of the channel."""
  channelName: String!
}

"""The possible types for a badge."""
enum Shopify_BadgeType {
  """This badge has type `default`."""
  DEFAULT
  """This badge has type `success`."""
  SUCCESS
  """This badge has type `attention`."""
  ATTENTION
  """This badge has type `warning`."""
  WARNING
  """This badge has type `info`."""
  INFO
}

"""
Basic events chronicle resource activities such as the creation of an article, the fulfillment of an order, or
the addition of a product.
"""
type Shopify_BasicEvent implements Shopify_Event & Shopify_Node {
  """The name of the app that created the event."""
  appTitle: String
  """Whether the event was created by an app."""
  attributeToApp: Boolean!
  """Whether the event was caused by an admin user."""
  attributeToUser: Boolean!
  """The date and time when the event was created."""
  createdAt: DateTime!
  """Whether the event is critical."""
  criticalAlert: Boolean!
  """A globally-unique identifier."""
  id: ID!
  """Human readable text that describes the event."""
  message: Shopify_FormattedString!
}

"""
Represents an error that happens during the execution of a billing attempt mutation.
"""
type Shopify_BillingAttemptUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_BillingAttemptUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `BillingAttemptUserError`.
"""
enum Shopify_BillingAttemptUserErrorCode {
  """The input value is invalid."""
  INVALID
  """The input value is blank."""
  BLANK
  """Subscription contract does not exist."""
  CONTRACT_NOT_FOUND
  """Origin time cannot be before the contract creation time."""
  ORIGIN_TIME_BEFORE_CONTRACT_CREATION
  """
  Billing cycle selector cannot select upcoming billing cycle past limit.
  """
  UPCOMING_CYCLE_LIMIT_EXCEEDED
  """
  Billing cycle selector cannot select billing cycle outside of index range.
  """
  CYCLE_INDEX_OUT_OF_RANGE
  """
  Billing cycle selector cannot select billing cycle outside of start date range.
  """
  CYCLE_START_DATE_OUT_OF_RANGE
  """
  Origin time needs to be within the selected billing cycle's start and end at date.
  """
  ORIGIN_TIME_OUT_OF_RANGE
}

"""Possible error codes that can be returned by `BulkMutationUserError`."""
enum Shopify_BulkMutationErrorCode {
  """
  The operation did not run because another bulk mutation is already running.
  [Wait for the operation to finish](https://shopify.dev/api/usage/bulk-operations/imports#wait-for-the-operation-to-finish)
  before retrying this operation.
  """
  OPERATION_IN_PROGRESS
  """
  The operation did not run because the mutation is invalid. Check your mutation syntax and try again.
  """
  INVALID_MUTATION
  """
  The JSONL file submitted via the `stagedUploadsCreate` mutation is invalid. Update the file and try again.
  """
  INVALID_STAGED_UPLOAD_FILE
  """
  The JSONL file could not be found. Try [uploading the file](https://shopify.dev/api/usage/bulk-operations/imports#generate-the-uploaded-url-and-parameters)
  again, and check that you've entered the URL correctly for the
  `stagedUploadPath` mutation argument.
  """
  NO_SUCH_FILE
  """
  There was a problem reading the JSONL file. This error might be intermittent,
  so you can try performing the same query again.
  """
  INTERNAL_FILE_SERVER_ERROR
}

"""Represents an error that happens during execution of a bulk mutation."""
type Shopify_BulkMutationUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_BulkMutationErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
An asynchronous long-running operation to fetch data in bulk or to bulk import data.

Bulk operations are created using the `bulkOperationRunQuery` or `bulkOperationRunMutation` mutation. After
they are created, clients should poll the `status` field for updates. When `COMPLETED`, the `url` field contains
a link to the data in [JSONL](http://jsonlines.org/) format.

Refer to the [bulk operations guide](https://shopify.dev/api/usage/bulk-operations/imports) for more details.
"""
type Shopify_BulkOperation implements Shopify_Node {
  """When the bulk operation was successfully completed."""
  completedAt: DateTime
  """When the bulk operation was created."""
  createdAt: DateTime!
  """Error code for failed operations."""
  errorCode: Shopify_BulkOperationErrorCode
  """File size in bytes of the file in the `url` field."""
  fileSize: Shopify_UnsignedInt64
  """A globally-unique identifier."""
  id: ID!
  """
  A running count of all the objects processed.
  For example, when fetching all the products and their variants, this field counts both products and variants.
  This field can be used to track operation progress.
  """
  objectCount: Shopify_UnsignedInt64!
  """
  The URL that points to the partial or incomplete response data (in
  [JSONL](http://jsonlines.org/) format) that was returned by a failed operation.
  The URL expires 7 days after the operation fails. Returns `null` when there's no data available.
  """
  partialDataUrl: URL
  """GraphQL query document specified in `bulkOperationRunQuery`."""
  query: String!
  """
  A running count of all the objects that are processed at the root of the query.
  For example, when fetching all the products and their variants, this field only counts products.
  This field can be used to track operation progress.
  """
  rootObjectCount: Shopify_UnsignedInt64!
  """Status of the bulk operation."""
  status: Shopify_BulkOperationStatus!
  """The bulk operation's type."""
  type: Shopify_BulkOperationType!
  """
  The URL that points to the response data in [JSONL](http://jsonlines.org/) format.
  The URL expires 7 days after the operation completes.
  """
  url: URL
}

"""Return type for `bulkOperationCancel` mutation."""
type Shopify_BulkOperationCancelPayload {
  """The bulk operation to be canceled."""
  bulkOperation: Shopify_BulkOperation
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Error codes for failed bulk operations."""
enum Shopify_BulkOperationErrorCode {
  """
  The provided operation `query` returned access denied due to missing
  [access scopes](https://shopify.dev/api/usage/access-scopes).
  Review the requested object permissions and execute the query as a normal non-bulk GraphQL request to see more details.
  """
  ACCESS_DENIED
  """
  The operation resulted in partial or incomplete data due to internal server errors during execution.
  These errors might be intermittent, so you can try performing the same query again.
  """
  INTERNAL_SERVER_ERROR
  """
  The operation resulted in partial or incomplete data due to query timeouts during execution.
  In some cases, timeouts can be avoided by modifying your `query` to select fewer fields.
  """
  TIMEOUT
}

"""Return type for `bulkOperationRunMutation` mutation."""
type Shopify_BulkOperationRunMutationPayload {
  """The newly created bulk operation."""
  bulkOperation: Shopify_BulkOperation
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BulkMutationUserError!]!
}

"""Return type for `bulkOperationRunQuery` mutation."""
type Shopify_BulkOperationRunQueryPayload {
  """The newly created bulk operation."""
  bulkOperation: Shopify_BulkOperation
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""The valid values for the status of a bulk operation."""
enum Shopify_BulkOperationStatus {
  """The bulk operation has been canceled."""
  CANCELED
  """
  Cancelation has been initiated on the bulk operation. There may be a short delay from when a cancelation
  starts until the operation is actually canceled.
  """
  CANCELING
  """The bulk operation has successfully completed."""
  COMPLETED
  """The bulk operation has been created."""
  CREATED
  """The bulk operation URL has expired."""
  EXPIRED
  """
  The bulk operation has failed. For information on why the operation failed, use
  [BulkOperation.errorCode](https://shopify.dev/api/admin-graphql/latest/enums/bulkoperationerrorcode).
  """
  FAILED
  """The bulk operation is runnning."""
  RUNNING
}

"""The valid values for the bulk operation's type."""
enum Shopify_BulkOperationType {
  """The bulk operation is a query."""
  QUERY
  """The bulk operation is a mutation."""
  MUTATION
}

"""Return type for `bulkProductResourceFeedbackCreate` mutation."""
type Shopify_BulkProductResourceFeedbackCreatePayload {
  """The feedback that is created."""
  feedback: [Shopify_ProductResourceFeedback!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BulkProductResourceFeedbackCreateUserError!]!
}

"""
An error that occurs during the execution of `BulkProductResourceFeedbackCreate`.
"""
type Shopify_BulkProductResourceFeedbackCreateUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_BulkProductResourceFeedbackCreateUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `BulkProductResourceFeedbackCreateUserError`.
"""
enum Shopify_BulkProductResourceFeedbackCreateUserErrorCode {
  """
  The operation was attempted on too many feedback objects. The maximum number
  of feedback objects that you can operate on is 50.
  """
  MAXIMUM_FEEDBACK_LIMIT_EXCEEDED
  """
  The feedback for a later version of this resource was already accepted.
  """
  OUTDATED_FEEDBACK
  """The product wasn't found or isn't available to the channel."""
  PRODUCT_NOT_FOUND
  """The input value is invalid."""
  INVALID
  """The input value is blank."""
  BLANK
  """The input value needs to be blank."""
  PRESENT
  """
  The input value should be less than or equal to the maximum value allowed.
  """
  LESS_THAN_OR_EQUAL_TO
}

"""
Possible error codes that can be returned by `BusinessCustomerUserError`.
"""
enum Shopify_BusinessCustomerErrorCode {
  """An internal error occurred."""
  INTERNAL_ERROR
  """The resource wasn't found."""
  RESOURCE_NOT_FOUND
  """Deleting the resource failed."""
  FAILED_TO_DELETE
  """Missing a required field."""
  REQUIRED
  """The input is empty."""
  NO_INPUT
  """The input is invalid."""
  INVALID_INPUT
  """Unexpected type."""
  UNEXPECTED_TYPE
  """The field value is too long."""
  TOO_LONG
  """The number of resources exceeded the limit."""
  LIMIT_REACHED
  """The input value is invalid."""
  INVALID
  """The input value is blank."""
  BLANK
  """The input value is already taken."""
  TAKEN
}

"""
An error that happens during the execution of a business customer mutation.
"""
type Shopify_BusinessCustomerUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_BusinessCustomerErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""Settings describing the behavior of checkout for a B2B buyer."""
type Shopify_BuyerExperienceConfiguration {
  """Whether to checkout to draft order for merchant review."""
  checkoutToDraft: Boolean!
  """
  Whether a buyer must pay at checkout or they can also choose to pay
  later using net terms.
  """
  payNowOnly: Boolean!
  """Represents the merchant configured payment terms."""
  paymentTermsTemplate: Shopify_PaymentTermsTemplate
}

"""The input fields specifying the behavior of checkout for a B2B buyer."""
input Shopify_BuyerExperienceConfigurationInput {
  """Whether to checkout to draft order for merchant review."""
  checkoutToDraft: Boolean
  """Represents the merchant configured payment terms."""
  paymentTermsTemplateId: ID
}

"""
A discount that is automatically applied to an order that is being edited.
"""
type Shopify_CalculatedAutomaticDiscountApplication implements Shopify_CalculatedDiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: Shopify_DiscountApplicationAllocationMethod!
  """The level at which the discount was applied."""
  appliedTo: Shopify_DiscountApplicationLevel!
  """
  The description of discount application. Indicates the reason why the discount was applied.
  """
  description: String
  """A globally-unique identifier."""
  id: ID!
  """How the discount amount is distributed on the discounted lines."""
  targetSelection: Shopify_DiscountApplicationTargetSelection!
  """Whether the discount is applied on line items or shipping lines."""
  targetType: Shopify_DiscountApplicationTargetType!
  """The value of the discount application."""
  value: Shopify_PricingValue!
}

"""
An amount discounting the line that has been allocated by an associated discount application.
"""
type Shopify_CalculatedDiscountAllocation {
  """
  The money amount that's allocated by the discount application in shop and presentment currencies.
  """
  allocatedAmountSet: Shopify_MoneyBag!
  """The discount that the allocated amount originated from."""
  discountApplication: Shopify_CalculatedDiscountApplication!
}

"""
A [discount application](https://shopify.dev/api/admin-graphql/latest/interfaces/discountapplication) involved in order editing that might be newly added or have new changes applied.
"""
interface Shopify_CalculatedDiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: Shopify_DiscountApplicationAllocationMethod!
  """The level at which the discount was applied."""
  appliedTo: Shopify_DiscountApplicationLevel!
  """
  The description of discount application. Indicates the reason why the discount was applied.
  """
  description: String
  """A globally-unique identifier."""
  id: ID!
  """How the discount amount is distributed on the discounted lines."""
  targetSelection: Shopify_DiscountApplicationTargetSelection!
  """Whether the discount is applied on line items or shipping lines."""
  targetType: Shopify_DiscountApplicationTargetType!
  """The value of the discount application."""
  value: Shopify_PricingValue!
}

"""
An auto-generated type for paginating through multiple CalculatedDiscountApplications.
"""
type Shopify_CalculatedDiscountApplicationConnection {
  """A list of edges."""
  edges: [Shopify_CalculatedDiscountApplicationEdge!]!
  """A list of the nodes contained in CalculatedDiscountApplicationEdge."""
  nodes: [Shopify_CalculatedDiscountApplication!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one CalculatedDiscountApplication and a cursor during pagination.
"""
type Shopify_CalculatedDiscountApplicationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of CalculatedDiscountApplicationEdge."""
  node: Shopify_CalculatedDiscountApplication!
}

"""A discount code that is applied to an order that is being edited."""
type Shopify_CalculatedDiscountCodeApplication implements Shopify_CalculatedDiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: Shopify_DiscountApplicationAllocationMethod!
  """The level at which the discount was applied."""
  appliedTo: Shopify_DiscountApplicationLevel!
  """
  The string identifying the discount code that was used at the time of application.
  """
  code: String!
  """
  The description of discount application. Indicates the reason why the discount was applied.
  """
  description: String
  """A globally-unique identifier."""
  id: ID!
  """How the discount amount is distributed on the discounted lines."""
  targetSelection: Shopify_DiscountApplicationTargetSelection!
  """Whether the discount is applied on line items or shipping lines."""
  targetType: Shopify_DiscountApplicationTargetType!
  """The value of the discount application."""
  value: Shopify_PricingValue!
}

"""The computed properties for a draft order."""
type Shopify_CalculatedDraftOrder {
  """Order-level discount applied to the draft order."""
  appliedDiscount: Shopify_DraftOrderAppliedDiscount
  """
  The available shipping rates for the draft order. Requires a customer with a
  valid shipping address and at least one line item.
  """
  availableShippingRates: [Shopify_ShippingRate!]!
  """Whether the billing address matches the shipping address."""
  billingAddressMatchesShippingAddress: Boolean!
  """The currency of the store for this draft order."""
  currencyCode: Shopify_CurrencyCode!
  """
  Customer who will be sent an invoice for the draft order, if there is one.
  """
  customer: Shopify_Customer
  """Line items in the draft order with their computed properties."""
  lineItems: [Shopify_CalculatedDraftOrderLineItem!]!
  """
  A subtotal of the line items and corresponding discounts. The subtotal doesn't
  include shipping charges, shipping discounts, taxes, or order discounts.
  """
  lineItemsSubtotalPrice: Shopify_MoneyBag!
  """The name of the selected market."""
  marketName: String!
  """The selected market region country code for the draft order."""
  marketRegionCountryCode: CountryCode!
  """Phone number assigned to draft order."""
  phone: String
  """The payment currency of the customer for this draft order."""
  presentmentCurrencyCode: Shopify_CurrencyCode!
  """The purchasing entity for the draft order."""
  purchasingEntity: Shopify_PurchasingEntity
  """Line item that contains the shipping costs."""
  shippingLine: Shopify_ShippingLine
  """
  Subtotal of the line items and their discounts (does not contain shipping charges or shipping discounts, or taxes).
  """
  subtotalPrice: Shopify_Money!
  """
  Subtotal of the line items and their discounts (does not contain shipping charges or shipping discounts, or taxes).
  """
  subtotalPriceSet: Shopify_MoneyBag!
  """Total amount of taxes charged for each line item and shipping line."""
  taxLines: [Shopify_TaxLine!]!
  """Total discounts for this draft order."""
  totalDiscountsSet: Shopify_MoneyBag!
  """Total price of line items for this draft order."""
  totalLineItemsPriceSet: Shopify_MoneyBag!
  """
  Total amount of the draft order (includes taxes, shipping charges, and discounts).
  """
  totalPrice: Shopify_Money!
  """
  Total amount of the draft order(includes taxes, shipping charges, and discounts).
  """
  totalPriceSet: Shopify_MoneyBag!
  """Total shipping charge for the draft order."""
  totalShippingPrice: Shopify_Money!
  """Total shipping charge for the draft order."""
  totalShippingPriceSet: Shopify_MoneyBag!
  """Total amount of taxes for the draft order."""
  totalTax: Shopify_Money!
  """Total amount of taxes for the draft order."""
  totalTaxSet: Shopify_MoneyBag!
}

"""The computed line items for a draft order."""
type Shopify_CalculatedDraftOrderLineItem {
  """The discount applied to the line item."""
  appliedDiscount: Shopify_DraftOrderAppliedDiscount
  """
  Whether the line item is a custom line item (`true`) or a product variant line item (`false`).
  """
  custom: Boolean!
  """
  A list of attributes that represent custom features or special requests.
  """
  customAttributes: [Shopify_Attribute!]!
  """
  Additional information (metafields) about the line item with the associated types.
  """
  customAttributesV2: [Shopify_TypedAttribute!]!
  """Total price with discounts applied."""
  discountedTotal: Shopify_MoneyV2!
  """The total price with discounts applied."""
  discountedTotalSet: Shopify_MoneyBag!
  """The unit price with discounts applied."""
  discountedUnitPrice: Shopify_MoneyV2!
  """Unit price with discounts applied."""
  discountedUnitPriceSet: Shopify_MoneyBag!
  """
  Name of the service provider who fulfilled the order.
  
  Valid values are either **manual** or the name of the provider.
  For example, **amazon**, **shipwire**.
  
  Deleted fulfillment services will return null.
  """
  fulfillmentService: Shopify_FulfillmentService
  """The image associated with the draft order line item."""
  image: Shopify_Image
  """Whether the line item represents the purchase of a gift card."""
  isGiftCard: Boolean!
  """The name of the product."""
  name: String!
  """
  The total price (without discounts) of the line item, based on the original unit price of the variant x quantity.
  """
  originalTotal: Shopify_MoneyV2!
  """
  The total price (without discounts) of the line item, based on the original unit price of the variant x quantity.
  """
  originalTotalSet: Shopify_MoneyBag!
  """The variant price without any discounts applied."""
  originalUnitPrice: Shopify_MoneyV2!
  """The variant price without any discounts applied."""
  originalUnitPriceSet: Shopify_MoneyBag!
  """The product associated with the draft order line item."""
  product: Shopify_Product
  """The number of variant items requested in the draft order."""
  quantity: Int!
  """Whether physical shipping is required for the variant."""
  requiresShipping: Boolean!
  """The SKU number of the product variant."""
  sku: String
  """Whether the variant is taxable."""
  taxable: Boolean!
  """
  The title of the product or variant. This field only applies to custom line items.
  """
  title: String!
  """The total value of the discount."""
  totalDiscount: Shopify_MoneyV2!
  """The total value of the discount."""
  totalDiscountSet: Shopify_MoneyBag!
  """The variant associated with the draft order line item."""
  variant: Shopify_ProductVariant
  """The name of the variant."""
  variantTitle: String
  """The name of the vendor who created the product variant."""
  vendor: String
  """The weight unit and value for a draft order line item."""
  weight: Shopify_Weight
}

"""
A line item involved in order editing that may be newly added or have new changes applied.
"""
type Shopify_CalculatedLineItem {
  """
  The discounts that have been allocated onto the line item by discount applications.
  """
  calculatedDiscountAllocations: [Shopify_CalculatedDiscountAllocation!]!
  """
  A list of attributes that represent custom features or special requests.
  """
  customAttributes: [Shopify_Attribute!]!
  """
  The discounts that have been allocated onto the line item by discount applications.
  """
  discountAllocations: [Shopify_DiscountAllocation!]! @deprecated(reason: "Use `calculatedDiscountAllocations` instead.")
  """
  The price of a single quantity of the line item with line item discounts
  applied, in shop and presentment currencies. Discounts applied to the entire
  order aren't included in this price.
  """
  discountedUnitPriceSet: Shopify_MoneyBag!
  """The total number of items that can be edited."""
  editableQuantity: Int!
  """The editable quantity prior to any changes made in the current edit."""
  editableQuantityBeforeChanges: Int!
  """The total price of editable lines in shop and presentment currencies."""
  editableSubtotalSet: Shopify_MoneyBag!
  """Whether the calculated line item has a staged discount."""
  hasStagedLineItemDiscount: Boolean!
  """A globally-unique identifier."""
  id: ID!
  """The image object associated to the line item's variant."""
  image: Shopify_Image
  """
  The variant unit price in shop and presentment currencies, without any discounts applied.
  """
  originalUnitPriceSet: Shopify_MoneyBag!
  """The total number of items."""
  quantity: Int!
  """Whether the line item can be restocked or not."""
  restockable: Boolean!
  """Whether the changes on the line item will result in a restock."""
  restocking: Boolean!
  """The variant SKU number."""
  sku: String
  """A list of changes that affect this line item."""
  stagedChanges: [Shopify_OrderStagedChange!]!
  """The title of the product."""
  title: String!
  """
  The total price of uneditable lines in shop and presentment currencies.
  """
  uneditableSubtotalSet: Shopify_MoneyBag!
  """
  The product variant associated with this line item. The value is null for custom line items and items where
  the variant has been deleted.
  """
  variant: Shopify_ProductVariant
  """The title of the variant."""
  variantTitle: String
}

"""
An auto-generated type for paginating through multiple CalculatedLineItems.
"""
type Shopify_CalculatedLineItemConnection {
  """A list of edges."""
  edges: [Shopify_CalculatedLineItemEdge!]!
  """A list of the nodes contained in CalculatedLineItemEdge."""
  nodes: [Shopify_CalculatedLineItem!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one CalculatedLineItem and a cursor during pagination.
"""
type Shopify_CalculatedLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of CalculatedLineItemEdge."""
  node: Shopify_CalculatedLineItem!
}

"""
Represents a discount that was manually created for an order that is being edited.
"""
type Shopify_CalculatedManualDiscountApplication implements Shopify_CalculatedDiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: Shopify_DiscountApplicationAllocationMethod!
  """The level at which the discount was applied."""
  appliedTo: Shopify_DiscountApplicationLevel!
  """
  The description of discount application. Indicates the reason why the discount was applied.
  """
  description: String
  """A globally-unique identifier."""
  id: ID!
  """How the discount amount is distributed on the discounted lines."""
  targetSelection: Shopify_DiscountApplicationTargetSelection!
  """Whether the discount is applied on line items or shipping lines."""
  targetType: Shopify_DiscountApplicationTargetType!
  """The value of the discount application."""
  value: Shopify_PricingValue!
}

"""An order with edits applied but not saved."""
type Shopify_CalculatedOrder implements Shopify_Node {
  """
  Returns only the new discount applications being added to the order in the current edit.
  """
  addedDiscountApplications(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CalculatedDiscountApplicationConnection!
  """
  Returns only the new line items being added to the order during the current edit.
  """
  addedLineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CalculatedLineItemConnection!
  """
  Amount of the order-level discount (does not contain any line item discounts) in shop and presentment currencies.
  """
  cartDiscountAmountSet: Shopify_MoneyBag
  """Whether the changes have been applied and saved to the order."""
  committed: Boolean!
  """A globally-unique identifier."""
  id: ID!
  """
  Returns all items on the order that existed before starting the edit.
  Will include any changes that have been made.
  Will not include line items added during the current edit.
  """
  lineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """
    Supported filter parameters:
     - `editable`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_CalculatedLineItemConnection!
  """The HTML of the customer notification for the order edit."""
  notificationPreviewHtml: Shopify_HTML
  """The customer notification title."""
  notificationPreviewTitle: String!
  """The order without any changes applied."""
  order: Shopify_Order! @deprecated(reason: "Use `originalOrder` instead.")
  """The order without any changes applied."""
  originalOrder: Shopify_Order!
  """List of changes made to the order during the current edit."""
  stagedChanges(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_OrderStagedChangeConnection!
  """
  The sum of the quantities for the line items that contribute to the order's subtotal.
  """
  subtotalLineItemsQuantity: Int!
  """
  The subtotal of the line items, in shop and presentment currencies, after all
  the discounts are applied.  The subtotal does not include shipping.  The
  subtotal includes taxes for taxes-included orders and excludes taxes for
  taxes-excluded orders.
  """
  subtotalPriceSet: Shopify_MoneyBag
  """Taxes charged for the line item."""
  taxLines: [Shopify_TaxLine!]!
  """
  Total price of the order less the total amount received from the customer in shop and presentment currencies.
  """
  totalOutstandingSet: Shopify_MoneyBag!
  """
  Total amount of the order (includes taxes and discounts) in shop and presentment currencies.
  """
  totalPriceSet: Shopify_MoneyBag!
}

"""
A discount created by a Shopify script for an order that is being edited.
"""
type Shopify_CalculatedScriptDiscountApplication implements Shopify_CalculatedDiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: Shopify_DiscountApplicationAllocationMethod!
  """The level at which the discount was applied."""
  appliedTo: Shopify_DiscountApplicationLevel!
  """
  The description of discount application. Indicates the reason why the discount was applied.
  """
  description: String
  """A globally-unique identifier."""
  id: ID!
  """How the discount amount is distributed on the discounted lines."""
  targetSelection: Shopify_DiscountApplicationTargetSelection!
  """Whether the discount is applied on line items or shipping lines."""
  targetType: Shopify_DiscountApplicationTargetType!
  """The value of the discount application."""
  value: Shopify_PricingValue!
}

"""Card payment details related to a transaction."""
type Shopify_CardPaymentDetails {
  """
  The response code from the address verification system (AVS). The code is always a single letter.
  """
  avsResultCode: String
  """
  The issuer identification number (IIN), formerly known as bank identification
  number (BIN) of the customer's credit card. This is made up of the first few
  digits of the credit card number.
  """
  bin: String
  """The name of the company that issued the customer's credit card."""
  company: String
  """
  The response code from the credit card company indicating whether the customer
  entered the card security code, or card verification value, correctly. The
  code is a single letter or empty string.
  """
  cvvResultCode: String
  """The month in which the used credit card expires."""
  expirationMonth: Int
  """The year in which the used credit card expires."""
  expirationYear: Int
  """The holder of the credit card."""
  name: String
  """
  The customer's credit card number, with most of the leading digits redacted.
  """
  number: String
  """Digital wallet used for the payment."""
  wallet: Shopify_DigitalWallet
}

"""
A channel represents an app where you sell a group of products and collections.
A channel can be a platform or marketplace such as Facebook or Pinterest, an online store, or POS.
"""
type Shopify_Channel implements Shopify_Node {
  """The underlying app used by the channel."""
  app: Shopify_App!
  """
  The collection publications for the list of collections published to the channel.
  """
  collectionPublicationsV3(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ResourcePublicationConnection!
  """The list of collections published to the channel."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CollectionConnection!
  """The unique identifier for the channel."""
  handle: String! @deprecated(reason: "Use `id` instead.")
  """Whether the collection is available to the channel."""
  hasCollection(
    """The collection ID to check."""
    id: ID!
  ): Boolean!
  """A globally-unique identifier."""
  id: ID!
  """The name of the channel."""
  name: String!
  """
  The menu items for the channel, which also appear as submenu items in the left navigation sidebar in the Shopify admin.
  """
  navigationItems: [Shopify_NavigationItem!]! @deprecated(reason: "Use [AppInstallation.navigationItems](\n          https://shopify.dev/api/admin-graphql/current/objects/AppInstallation#field-appinstallation-navigationitems) instead.")
  """Home page for the channel."""
  overviewPath: URL @deprecated(reason: "Use [AppInstallation.launchUrl](\n          https://shopify.dev/api/admin-graphql/current/objects/AppInstallation#field-appinstallation-launchurl) instead.")
  """The product publications for the products published to the channel."""
  productPublications(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductPublicationConnection! @deprecated(reason: "Use `productPublicationsV3` instead.")
  """
  The product publications for the list of products published to the channel.
  """
  productPublicationsV3(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ResourcePublicationConnection!
  """The list of products published to the channel."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductConnection!
  """Whether the channel supports future publishing."""
  supportsFuturePublishing: Boolean!
}

"""An auto-generated type for paginating through multiple Channels."""
type Shopify_ChannelConnection {
  """A list of edges."""
  edges: [Shopify_ChannelEdge!]!
  """A list of the nodes contained in ChannelEdge."""
  nodes: [Shopify_Channel!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
A channel definition represents channels surfaces on the platform.
A channel definition can be a platform or a subsegment of it such as Facebook
Home, Instagram Live, Instagram Shops, or WhatsApp chat.
"""
type Shopify_ChannelDefinition implements Shopify_Node {
  """Name of the channel that this sub channel belongs to."""
  channelName: String!
  """Unique string used as a public identifier for the channel definition."""
  handle: String!
  """The unique identifier for the channel definition."""
  id: ID!
  """
  Name of the sub channel (e.g. Online Store, Instagram Shopping, TikTok Live).
  """
  subChannelName: String!
  """Icon displayed when showing the channel in admin."""
  svgIcon: String
}

"""
An auto-generated type which holds one Channel and a cursor during pagination.
"""
type Shopify_ChannelEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of ChannelEdge."""
  node: Shopify_Channel!
}

"""Contains the information for a given sales channel."""
type Shopify_ChannelInformation implements Shopify_Node {
  """The app associated with the channel."""
  app: Shopify_App!
  """The channel definition associated with the channel."""
  channelDefinition: Shopify_ChannelDefinition
  """The unique identifier for the channel."""
  channelId: ID!
  """A globally-unique identifier."""
  id: ID!
}

"""
A checkout profile defines the branding settings and the UI extensions for a
store's checkout. A checkout profile could be published or draft. A store might
have at most one published checkout profile, which is used to render their live
checkout. The store could also have multiple draft profiles that were created,
previewed, and published using the admin checkout editor.
"""
type Shopify_CheckoutProfile implements Shopify_Node {
  """The date and time when the checkout profile was created."""
  createdAt: DateTime!
  """The date and time when the checkout profile was last edited."""
  editedAt: DateTime!
  """A globally-unique identifier."""
  id: ID!
  """Whether the checkout profile is published or not."""
  isPublished: Boolean!
  """The profile name."""
  name: String!
  """The date and time when the checkout profile was last updated."""
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple CheckoutProfiles.
"""
type Shopify_CheckoutProfileConnection {
  """A list of edges."""
  edges: [Shopify_CheckoutProfileEdge!]!
  """A list of the nodes contained in CheckoutProfileEdge."""
  nodes: [Shopify_CheckoutProfile!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one CheckoutProfile and a cursor during pagination.
"""
type Shopify_CheckoutProfileEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of CheckoutProfileEdge."""
  node: Shopify_CheckoutProfile!
}

"""The set of valid sort keys for the CheckoutProfile query."""
enum Shopify_CheckoutProfileSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `updated_at` value."""
  UPDATED_AT
  """Sort by the `edited_at` value."""
  EDITED_AT
  """Sort by the `is_published` value."""
  IS_PUBLISHED
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""The set of valid sort keys for the CodeDiscount query."""
enum Shopify_CodeDiscountSortKeys {
  """Sort by the `starts_at` value."""
  STARTS_AT
  """Sort by the `ends_at` value."""
  ENDS_AT
  """Sort by the `title` value."""
  TITLE
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `updated_at` value."""
  UPDATED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
Represents a group of products that can be displayed in online stores and other
sales channels in categories, which makes it easy for customers to find them.
For example, an athletics store might create different collections for running
attire, shoes, and accessories.

Collections can be defined by conditions, such as whether they match certain
product tags. These are called smart or automated collections.

Collections can also be created for a custom group of products. These are called custom or manual collections.
"""
type Shopify_Collection implements Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_HasPublishedTranslations & Shopify_Node & Shopify_Publishable {
  """
  The number of publications a resource is published to without feedback errors.
  """
  availablePublicationCount: Int!
  """
  A single-line, text-only description of the collection, stripped of any HTML
  tags and formatting that were included in the description.
  """
  description(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String!
  """
  The description of the collection, including any HTML tags and formatting.
  This content is typically displayed to customers, such as on an online store,
  depending on the theme.
  """
  descriptionHtml: Shopify_HTML!
  """
  Information about the collection that's provided through resource feedback.
  """
  feedback: Shopify_ResourceFeedback
  """
  A unique string that identifies the collection. If a handle isn't specified
  when a collection is created, it's automatically generated from the
  collection's original title, and typically includes words from the title
  separated by hyphens. For example, a collection that was created with the
  title `Summer Catalog 2022` might have the handle `summer-catalog-2022`.
  
  If the title is changed, the handle doesn't automatically change.
  
  The handle can be used in themes by the Liquid templating language to refer to
  the collection, but using the ID is preferred because it never changes.
  """
  handle: String!
  """Whether the collection includes the specified product."""
  hasProduct(
    """The ID of the product to check."""
    id: ID!
  ): Boolean!
  """A globally-unique identifier."""
  id: ID!
  """The image associated with the collection."""
  image: Shopify_Image
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: Shopify_UnsignedInt64!
  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String
    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield
  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String
    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!
  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String
    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!
  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!
    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield
  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
  """The products that are included in the collection."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductCollectionSortKeys = COLLECTION_DEFAULT
  ): Shopify_ProductConnection!
  """The number of products in the collection."""
  productsCount: Int!
  """The number of publications a resource is published on."""
  publicationCount(
    """
    Include only the resource's publications that are published. If false, then
    return all the resource's publications including future publications.
    """
    onlyPublished: Boolean = true
  ): Int!
  """The channels where the collection is published."""
  publications(
    """
    Whether or not to return only the collection publications that are published.
    """
    onlyPublished: Boolean = true
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CollectionPublicationConnection! @deprecated(reason: "Use `resourcePublications` instead.")
  """Check to see whether the resource is published to a given channel."""
  publishedOnChannel(
    """The ID of the channel to check."""
    channelId: ID!
  ): Boolean! @deprecated(reason: "Use `publishedOnPublication` instead.")
  """
  Check to see whether the resource is published to the calling app's channel.
  """
  publishedOnCurrentChannel: Boolean! @deprecated(reason: "Use `publishedOnCurrentPublication` instead.")
  """
  Check to see whether the resource is published to the calling app's publication.
  """
  publishedOnCurrentPublication: Boolean!
  """Check to see whether the resource is published to a given publication."""
  publishedOnPublication(
    """The ID of the publication to check."""
    publicationId: ID!
  ): Boolean!
  """The list of resources that are published to a publication."""
  resourcePublications(
    """
    Whether to return only the resources that are currently published. If false,
    then also returns the resources that are scheduled to be published.
    """
    onlyPublished: Boolean = true
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ResourcePublicationConnection!
  """
  The list of resources that are either published or staged to be published to a publication.
  """
  resourcePublicationsV2(
    """
    Whether to return only the resources that are currently published. If false,
    then also returns the resources that are scheduled or staged to be published.
    """
    onlyPublished: Boolean = true
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ResourcePublicationV2Connection!
  """
  For a smart (automated) collection, specifies the rules that determine whether a product is included.
  """
  ruleSet: Shopify_CollectionRuleSet
  """
  If the default SEO fields for page title and description have been modified, contains the modified information.
  """
  seo: Shopify_SEO!
  """
  The order in which the products in the collection are displayed by default in
  the Shopify admin and in sales channels, such as an online store.
  """
  sortOrder: Shopify_CollectionSortOrder!
  """
  The Storefront GraphQL API ID of the `Collection`.
  
  As of the `2022-04` version release, the Storefront GraphQL API will no longer
  return Base64 encoded IDs to match the behavior of the Admin GraphQL API.
  Therefore, you can safely use the `id` field's value instead.
  """
  storefrontId: Shopify_StorefrontID! @deprecated(reason: "Use `id` instead.")
  """
  The suffix of the Liquid template being used to show the collection in an
  online store. For example, if the value is `custom`, then the collection is
  using the `collection.custom.liquid` template. If the value is `null`, then
  the collection is using the default `collection.liquid` template.
  """
  templateSuffix: String
  """
  The name of the collection. It's displayed in the Shopify admin and is
  typically displayed in sales channels, such as an online store.
  """
  title: String!
  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Shopify_PublishedTranslation!]!
  """The list of channels that the resource is not published to."""
  unpublishedChannels(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ChannelConnection! @deprecated(reason: "Use `unpublishedPublications` instead.")
  """The list of publications that the resource is not published to."""
  unpublishedPublications(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PublicationConnection!
  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the collection was last modified.
  """
  updatedAt: DateTime!
}

"""Return type for `collectionAddProducts` mutation."""
type Shopify_CollectionAddProductsPayload {
  """The updated collection. Returns `null` if an error is raised."""
  collection: Shopify_Collection
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `collectionAddProductsV2` mutation."""
type Shopify_CollectionAddProductsV2Payload {
  """The asynchronous job adding the products."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_CollectionAddProductsV2UserError!]!
}

"""
An error that occurs during the execution of `CollectionAddProductsV2`.
"""
type Shopify_CollectionAddProductsV2UserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_CollectionAddProductsV2UserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `CollectionAddProductsV2UserError`.
"""
enum Shopify_CollectionAddProductsV2UserErrorCode {
  """Can't manually add products to a smart collection."""
  CANT_ADD_TO_SMART_COLLECTION
  """Collection doesn't exist."""
  COLLECTION_DOES_NOT_EXIST
}

"""An auto-generated type for paginating through multiple Collections."""
type Shopify_CollectionConnection {
  """A list of edges."""
  edges: [Shopify_CollectionEdge!]!
  """A list of the nodes contained in CollectionEdge."""
  nodes: [Shopify_Collection!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `collectionCreate` mutation."""
type Shopify_CollectionCreatePayload {
  """The collection that has been created."""
  collection: Shopify_Collection
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Specifies the collection to delete."""
input Shopify_CollectionDeleteInput {
  """The ID of the collection to be deleted."""
  id: ID!
}

"""Return type for `collectionDelete` mutation."""
type Shopify_CollectionDeletePayload {
  """
  The ID of the collection that was deleted. Returns `null` if the collection doesn't exist.
  """
  deletedCollectionId: ID
  """The shop associated with the collection."""
  shop: Shopify_Shop!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An auto-generated type which holds one Collection and a cursor during pagination.
"""
type Shopify_CollectionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of CollectionEdge."""
  node: Shopify_Collection!
}

"""Specifies the input fields required to create a collection."""
input Shopify_CollectionInput {
  """The description of the collection, in HTML format."""
  descriptionHtml: String
  """
  A unique human-friendly string for the collection. Automatically generated from the collection's title.
  """
  handle: String
  """
  Specifies the collection to update or create a new collection if absent. Required for updating a collection.
  """
  id: ID
  """The image associated with the collection."""
  image: Shopify_ImageInput
  """
  Initial list of collection products. Only valid with `collectionCreate` and without rules.
  """
  products: [ID!]
  """The private metafields to associate with the collection."""
  privateMetafields: [Shopify_PrivateMetafieldInput!]
  """The rules used to assign products to the collection."""
  ruleSet: Shopify_CollectionRuleSetInput
  """The theme template used when viewing the collection in a store."""
  templateSuffix: String
  """The order in which the collection's products are sorted."""
  sortOrder: Shopify_CollectionSortOrder
  """The title of the collection. Required for creating a new collection."""
  title: String
  """The metafields to associate with the collection."""
  metafields: [Shopify_MetafieldInput!]
  """SEO information for the collection."""
  seo: Shopify_SEOInput
  """
  Indicates whether a redirect is required after a new handle has been provided.
  If true, then the old handle is redirected to the new one automatically.
  """
  redirectNewHandle: Boolean = false
}

"""Represents the publications where a collection is published."""
type Shopify_CollectionPublication {
  """The channel where the collection will be published."""
  channel: Shopify_Channel! @deprecated(reason: "Use `publication` instead.")
  """The collection to be published on the publication."""
  collection: Shopify_Collection!
  """Whether the publication is published or not."""
  isPublished: Boolean!
  """The publication where the collection will be published."""
  publication: Shopify_Publication!
  """The date that the publication was or is going to be published."""
  publishDate: DateTime!
}

"""
An auto-generated type for paginating through multiple CollectionPublications.
"""
type Shopify_CollectionPublicationConnection {
  """A list of edges."""
  edges: [Shopify_CollectionPublicationEdge!]!
  """A list of the nodes contained in CollectionPublicationEdge."""
  nodes: [Shopify_CollectionPublication!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one CollectionPublication and a cursor during pagination.
"""
type Shopify_CollectionPublicationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of CollectionPublicationEdge."""
  node: Shopify_CollectionPublication!
}

"""Specifies the publications to which a collection will be published."""
input Shopify_CollectionPublicationInput {
  """The ID of the publication."""
  publicationId: ID
}

"""
Specifies a collection to publish and the sales channels to publish it to.
"""
input Shopify_CollectionPublishInput {
  """The collection to create or update publications for."""
  id: ID!
  """The channels where the collection will be published."""
  collectionPublications: [Shopify_CollectionPublicationInput!]!
}

"""Return type for `collectionPublish` mutation."""
type Shopify_CollectionPublishPayload {
  """The published collection."""
  collection: Shopify_Collection
  """The channels where the collection has been published."""
  collectionPublications: [Shopify_CollectionPublication!]
  """The shop associated with the collection."""
  shop: Shopify_Shop!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `collectionRemoveProducts` mutation."""
type Shopify_CollectionRemoveProductsPayload {
  """The asynchronous job removing the products."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `collectionReorderProducts` mutation."""
type Shopify_CollectionReorderProductsPayload {
  """The asynchronous job reordering the products."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Represents at rule that's used to assign products to a collection."""
type Shopify_CollectionRule {
  """
  The attribute that the rule focuses on. For example, `title` or `product_type`.
  """
  column: Shopify_CollectionRuleColumn!
  """The value that the operator is applied to. For example, `Hats`."""
  condition: String!
  """The value that the operator is applied to."""
  conditionObject: Shopify_CollectionRuleConditionObject
  """
  The type of operator that the rule is based on. For example, `equals`, `contains`, or `not_equals`.
  """
  relation: Shopify_CollectionRuleRelation!
}

"""
Specifies the attribute of a product being used to populate the smart collection.
"""
enum Shopify_CollectionRuleColumn {
  """
  The [`tag`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-producttype) attribute.
  """
  TAG
  """
  The [`title`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-title) attribute.
  """
  TITLE
  """
  The [`type`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-producttype) attribute.
  """
  TYPE
  """
  The [`product_taxonomy_node_id`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-productcategory) attribute.
  """
  PRODUCT_TAXONOMY_NODE_ID
  """
  The [`vendor`](https://shopify.dev/api/admin-graphql/latest/objects/Product#field-product-vendor) attribute.
  """
  VENDOR
  """
  The [`variant_price`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-price) attribute.
  """
  VARIANT_PRICE
  """
  An attribute evaluated based on the `compare_at_price` attribute of the product's variants.
  With `is_set` relation, the rule matches products with at least one variant with `compare_at_price` set.
  With `is_not_set` relation, the rule matches matches products with at least one variant with `compare_at_price` not set.
  """
  IS_PRICE_REDUCED
  """
  The [`variant_compare_at_price`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-compareatprice) attribute.
  """
  VARIANT_COMPARE_AT_PRICE
  """
  The [`variant_weight`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-weight) attribute.
  """
  VARIANT_WEIGHT
  """
  The [`variant_inventory`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-inventoryquantity) attribute.
  """
  VARIANT_INVENTORY
  """
  The [`variant_title`](https://shopify.dev/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-title) attribute.
  """
  VARIANT_TITLE
  """
  This category includes metafield definitions that have the `useAsCollectionCondition` flag set to true.
  """
  PRODUCT_METAFIELD_DEFINITION
  """
  This category includes metafield definitions that have the `useAsCollectionCondition` flag set to true.
  """
  VARIANT_METAFIELD_DEFINITION
}

"""Specifies object for the condition of the rule."""
union Shopify_CollectionRuleConditionObject = Shopify_CollectionRuleMetafieldCondition | Shopify_CollectionRuleProductCategoryCondition | Shopify_CollectionRuleTextCondition

"""
This object defines all columns and allowed relations that can be used in rules
for smart collections to automatically include the matching products.
"""
type Shopify_CollectionRuleConditions {
  """Allowed relations of the rule."""
  allowedRelations: [Shopify_CollectionRuleRelation!]!
  """Most commonly used relation for this rule."""
  defaultRelation: Shopify_CollectionRuleRelation!
  """Additional attributes defining the rule."""
  ruleObject: Shopify_CollectionRuleConditionsRuleObject
  """Type of the rule."""
  ruleType: Shopify_CollectionRuleColumn!
}

"""Specifies object with additional rule attributes."""
union Shopify_CollectionRuleConditionsRuleObject = Shopify_CollectionRuleMetafieldCondition

"""Specifies a rule to associate with a collection."""
input Shopify_CollectionRuleInput {
  """
  The attribute that the rule focuses on. For example, `title` or `product_type`.
  """
  column: Shopify_CollectionRuleColumn!
  """
  The type of operator that the rule is based on. For example, `equals`, `contains`, or `not_equals`.
  """
  relation: Shopify_CollectionRuleRelation!
  """The value that the operator is applied to. For example, `Hats`."""
  condition: String!
  """
  The object ID that points to additional attributes for the collection rule.
  This is only required when using metafield definition rules.
  """
  conditionObjectId: ID
}

"""
Identifies a metafield definition used as a rule for the smart collection.
"""
type Shopify_CollectionRuleMetafieldCondition {
  """The metafield definition associated with the condition."""
  metafieldDefinition: Shopify_MetafieldDefinition!
}

"""Specifies the condition for a Product Category field."""
type Shopify_CollectionRuleProductCategoryCondition {
  """The value of the condition."""
  value: Shopify_ProductTaxonomyNode!
}

"""Specifies the relationship between the `column` and the `condition`."""
enum Shopify_CollectionRuleRelation {
  """The attribute contains the condition."""
  CONTAINS
  """The attribute ends with the condition."""
  ENDS_WITH
  """The attribute is equal to the condition."""
  EQUALS
  """The attribute is greater than the condition."""
  GREATER_THAN
  """The attribute is not set (equal to `null`)."""
  IS_NOT_SET
  """The attribute is set (not equal to `null`)."""
  IS_SET
  """The attribute is less than the condition."""
  LESS_THAN
  """The attribute does not contain the condition."""
  NOT_CONTAINS
  """The attribute does not equal the condition."""
  NOT_EQUALS
  """The attribute starts with the condition."""
  STARTS_WITH
}

"""
The set of rules that are used to determine which products are included in the collection.
"""
type Shopify_CollectionRuleSet {
  """
  Whether products must match any or all of the rules to be included in the collection.
  If true, then products must match at least one of the rules to be included in the collection.
  If false, then products must match all of the rules to be included in the collection.
  """
  appliedDisjunctively: Boolean!
  """The rules used to assign products to the collection."""
  rules: [Shopify_CollectionRule!]!
}

"""Specifies a rule set for the collection."""
input Shopify_CollectionRuleSetInput {
  """
  Whether products must match any or all of the rules to be included in the collection.
  If true, then products must match at least one of the rules to be included in the collection.
  If false, then products must match all of the rules to be included in the collection.
  """
  appliedDisjunctively: Boolean!
  """The rules used to assign products to the collection."""
  rules: [Shopify_CollectionRuleInput!]
}

"""Specifies the condition for a text field."""
type Shopify_CollectionRuleTextCondition {
  """The value of the condition."""
  value: String!
}

"""The set of valid sort keys for the Collection query."""
enum Shopify_CollectionSortKeys {
  """Sort by the `title` value."""
  TITLE
  """Sort by the `updated_at` value."""
  UPDATED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""Specifies the sort order for the products in the collection."""
enum Shopify_CollectionSortOrder {
  """Alphabetically, in ascending order (A - Z)."""
  ALPHA_ASC
  """Alphabetically, in descending order (Z - A)."""
  ALPHA_DESC
  """By best-selling products."""
  BEST_SELLING
  """By date created, in ascending order (oldest - newest)."""
  CREATED
  """By date created, in descending order (newest - oldest)."""
  CREATED_DESC
  """In the order set manually by the merchant."""
  MANUAL
  """By price, in ascending order (lowest - highest)."""
  PRICE_ASC
  """By price, in descending order (highest - lowest)."""
  PRICE_DESC
}

"""
Specifies the collection to unpublish and the sales channels to remove it from.
"""
input Shopify_CollectionUnpublishInput {
  """The collection to create or update publications for."""
  id: ID!
  """The channels where the collection is published."""
  collectionPublications: [Shopify_CollectionPublicationInput!]!
}

"""Return type for `collectionUnpublish` mutation."""
type Shopify_CollectionUnpublishPayload {
  """The collection that has been unpublished."""
  collection: Shopify_Collection
  """The shop associated with the collection."""
  shop: Shopify_Shop!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `collectionUpdate` mutation."""
type Shopify_CollectionUpdatePayload {
  """The updated collection."""
  collection: Shopify_Collection
  """The asynchronous job updating the products based on the new rule set."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
Comment events are generated by staff members of a shop.
They are created when a staff member adds a comment to the timeline of an order, draft order, customer, or transfer.
"""
type Shopify_CommentEvent implements Shopify_Event & Shopify_Node {
  """The name of the app that created the event."""
  appTitle: String
  """The attachments associated with the comment event."""
  attachments: [Shopify_CommentEventAttachment!]!
  """Whether the event was created by an app."""
  attributeToApp: Boolean!
  """Whether the event was caused by an admin user."""
  attributeToUser: Boolean!
  """The name of the user that authored the comment event."""
  author: Shopify_StaffMember!
  """
  Whether the comment event can be deleted. If true, then the comment event can be deleted.
  """
  canDelete: Boolean!
  """
  Whether the comment event can be edited. If true, then the comment event can be edited.
  """
  canEdit: Boolean!
  """The date and time when the event was created."""
  createdAt: DateTime!
  """Whether the event is critical."""
  criticalAlert: Boolean!
  """
  Whether the comment event has been edited. If true, then the comment event has been edited.
  """
  edited: Boolean!
  """
  The object reference associated with the comment event. For example, a product or discount).
  """
  embed: Shopify_CommentEventEmbed
  """A globally-unique identifier."""
  id: ID!
  """Human readable text that describes the event."""
  message: Shopify_FormattedString!
  """The raw body of the comment event."""
  rawMessage: String!
  """The parent subject to which the comment event belongs."""
  subject: Shopify_CommentEventSubject!
}

"""A file attachment associated to a comment event."""
type Shopify_CommentEventAttachment {
  """
  The file extension of the comment event attachment, indicating the file format.
  """
  fileExtension: String
  """A globally-unique identifier."""
  id: ID!
  """The image attached to the comment event."""
  image: Shopify_Image
  """The filename of the comment event attachment."""
  name: String!
  """The size of the attachment."""
  size: Int!
  """The URL of the attachment."""
  url: URL!
}

"""The main embed of a comment event."""
union Shopify_CommentEventEmbed = Shopify_Customer | Shopify_DraftOrder | Shopify_Order | Shopify_Product | Shopify_ProductVariant

"""The subject line of a comment event."""
interface Shopify_CommentEventSubject {
  """
  Whether the timeline subject has a timeline comment. If true, then a timeline comment exists.
  """
  hasTimelineComment: Boolean!
  """A globally-unique identifier."""
  id: ID!
}

"""Return type for `companiesDelete` mutation."""
type Shopify_CompaniesDeletePayload {
  """A list of IDs of the deleted companies."""
  deletedCompanyIds: [ID!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""
Represents information about a company which is also a customer of the shop.
"""
type Shopify_Company implements Shopify_CommentEventSubject & Shopify_HasEvents & Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_Navigable & Shopify_Node {
  """The number of contacts that belong to the company."""
  contactCount: Int!
  """The list of roles for the company contacts."""
  contactRoles(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_CompanyContactRoleSortKeys = ID
  ): Shopify_CompanyContactRoleConnection!
  """The list of contacts in the company."""
  contacts(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_CompanyContactSortKeys = ID
    """
    Supported filter parameters:
     - `company_id`
     - `company_location_id`
     - `created_at`
     - `email`
     - `location_name`
     - `name`
     - `role_name`
     - `status`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_CompanyContactConnection!
  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company was created in Shopify.
  """
  createdAt: DateTime!
  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company became the customer.
  """
  customerSince: DateTime!
  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!
  """The role proposed by default for a contact at the company."""
  defaultRole: Shopify_CompanyContactRole
  """The list of the company's draft orders."""
  draftOrders(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_DraftOrderSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `customer_id`
     - `source`
     - `status`
     - `tag`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_DraftOrderConnection!
  """The paginated list of events associated with the host subject."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_EventSortKeys = ID
    """
    Supported filter parameters:
     - `comments`
     - `created_at`
     - `subject_type`
     - `verb`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_EventConnection!
  """A unique externally-supplied identifier for the company."""
  externalId: String
  """Whether the merchant added a timeline comment to the company."""
  hasTimelineComment: Boolean!
  """A globally-unique identifier."""
  id: ID!
  """
  The lifetime duration of the company, since it became a customer of the shop. Examples: `2 days`, `3 months`, `1 year`.
  """
  lifetimeDuration: String!
  """The number of locations that belong to the company."""
  locationCount: Int!
  """The list of locations in the company."""
  locations(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_CompanyLocationSortKeys = ID
    """
    Supported filter parameters:
     - `company_id`
     - `created_at`
     - `external_id`
     - `ids`
     - `name`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_CompanyLocationConnection!
  """The main contact for the company."""
  mainContact: Shopify_CompanyContact
  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String
    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield
  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String
    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!
  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String
    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!
  """The name of the company."""
  name: String!
  """A note about the company."""
  note: String
  """
  The total number of orders placed for this company, across all its locations.
  """
  orderCount: Int!
  """The list of the company's orders."""
  orders(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_OrderSortKeys = ID
  ): Shopify_OrderConnection!
  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!
    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield
  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
  """The total amount spent by this company, across all its locations."""
  totalSpent: Shopify_MoneyV2!
  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company was last modified.
  """
  updatedAt: DateTime!
}

"""Represents a billing or shipping address for a company location."""
type Shopify_CompanyAddress implements Shopify_Node {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String!
  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String
  """The name of the city, district, village, or town."""
  city: String
  """The name of the company."""
  companyName: String!
  """The name of the country."""
  country: String
  """
  The two-letter code for the country of the address.
  For example, US.
  """
  countryCode: CountryCode!
  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at which the company address was created.
  """
  createdAt: DateTime!
  """The formatted version of the address."""
  formattedAddress(
    """Whether to include the recipient's name in the formatted address."""
    withName: Boolean = false
    """Whether to include the company name in the formatted address."""
    withCompanyName: Boolean = true
  ): [String!]!
  """A comma-separated list of the values for city, province, and country."""
  formattedArea: String
  """A globally-unique identifier."""
  id: ID!
  """
  A unique phone number for the customer.
  Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String
  """The region of the address, such as the province, state, or district."""
  province: String
  """The identity of the recipient e.g. 'Receiving Department'."""
  recipient: String
  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601))
  at which the company address was last updated.
  """
  updatedAt: DateTime!
  """The zip or postal code of the address."""
  zip: String
  """
  The two-letter code for the region.
  For example, ON.
  """
  zoneCode: String
}

"""Return type for `companyAddressDelete` mutation."""
type Shopify_CompanyAddressDeletePayload {
  """The ID of the deleted address."""
  deletedAddressId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""
Specifies the input fields to create or update the address of a company location.
"""
input Shopify_CompanyAddressInput {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String
  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String
  """The name of the city, district, village, or town."""
  city: String
  """The zip or postal code of the address."""
  zip: String
  """The identity of the recipient e.g. 'Receiving Department'."""
  recipient: String
  """
  A phone number for the recipient. Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String
  """
  The two-letter code ([ISO 3166-2
  alpha-2]](https://en.wikipedia.org/wiki/ISO_3166-2) format) for the region of
  the address, such as the province, state, or district. For example, `ON` for
  Ontario, Canada.
  """
  zoneCode: String
  """
  The two-letter code ([ISO 3166-1
  alpha-2]](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format) for the
  country of the address. For example, `US`` for the United States.
  """
  countryCode: CountryCode
}

"""The valid values for the address type of a company."""
enum Shopify_CompanyAddressType {
  """The address is a billing address."""
  BILLING
  """The address is a shipping address."""
  SHIPPING
}

"""Return type for `companyAssignCustomerAsContact` mutation."""
type Shopify_CompanyAssignCustomerAsContactPayload {
  """The created company contact."""
  companyContact: Shopify_CompanyContact
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""Return type for `companyAssignMainContact` mutation."""
type Shopify_CompanyAssignMainContactPayload {
  """The company for which the main contact is assigned."""
  company: Shopify_Company
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""An auto-generated type for paginating through multiple Companies."""
type Shopify_CompanyConnection {
  """A list of edges."""
  edges: [Shopify_CompanyEdge!]!
  """A list of the nodes contained in CompanyEdge."""
  nodes: [Shopify_Company!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
A person that acts on behalf of company associated to [a
customer](https://shopify.dev/api/admin-graphql/latest/objects/customer).
"""
type Shopify_CompanyContact implements Shopify_Node {
  """The company to which the contact belongs."""
  company: Shopify_Company!
  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601))
  at which the company contact was created at Shopify.
  """
  createdAt: DateTime!
  """The customer associated to this contact."""
  customer: Shopify_Customer!
  """The list of draft orders for the company contact."""
  draftOrders(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_DraftOrderSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `customer_id`
     - `source`
     - `status`
     - `tag`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_DraftOrderConnection!
  """A globally-unique identifier."""
  id: ID!
  """Whether the contact is the main contact of the company."""
  isMainContact: Boolean!
  """
  The lifetime duration of the company contact, since its creation date on
  Shopify. Examples: `1 year`, `2 months`, `3 days`.
  """
  lifetimeDuration: String!
  """The company contact's locale (language)."""
  locale: String
  """The list of orders for the company contact."""
  orders(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_OrderSortKeys = ID
  ): Shopify_OrderConnection!
  """The list of roles assigned to this company contact."""
  roleAssignments(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_CompanyContactRoleAssignmentSortKeys = ID
    """
    Supported filter parameters:
     - `company_contact_id`
     - `company_contact_role_id`
     - `company_id`
     - `company_location_id`
     - `created_at`
     - `location_name`
     - `role_name`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_CompanyContactRoleAssignmentConnection!
  """The company contact's job title."""
  title: String
  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601))
  at which the company contact was last updated.
  """
  updatedAt: DateTime!
}

"""Return type for `companyContactAssignRole` mutation."""
type Shopify_CompanyContactAssignRolePayload {
  """The company contact role assignment."""
  companyContactRoleAssignment: Shopify_CompanyContactRoleAssignment
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""Return type for `companyContactAssignRoles` mutation."""
type Shopify_CompanyContactAssignRolesPayload {
  """
  A list of newly created assignments of company contacts to a company location.
  """
  roleAssignments: [Shopify_CompanyContactRoleAssignment!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""
An auto-generated type for paginating through multiple CompanyContacts.
"""
type Shopify_CompanyContactConnection {
  """A list of edges."""
  edges: [Shopify_CompanyContactEdge!]!
  """A list of the nodes contained in CompanyContactEdge."""
  nodes: [Shopify_CompanyContact!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `companyContactCreate` mutation."""
type Shopify_CompanyContactCreatePayload {
  """The created company contact."""
  companyContact: Shopify_CompanyContact
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""Return type for `companyContactDelete` mutation."""
type Shopify_CompanyContactDeletePayload {
  """The ID of the deleted company contact."""
  deletedCompanyContactId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""
An auto-generated type which holds one CompanyContact and a cursor during pagination.
"""
type Shopify_CompanyContactEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of CompanyContactEdge."""
  node: Shopify_CompanyContact!
}

"""
The company contact attributes to use when creating a company or updating a company contact.
"""
input Shopify_CompanyContactInput {
  """The company contact's first name."""
  firstName: String
  """The company contact's last name."""
  lastName: String
  """The unique email address of the company contact."""
  email: String
  """The title of the company contact."""
  title: String
  """The contact's locale."""
  locale: String
  """The phone number of the company contact."""
  phone: String
}

"""Return type for `companyContactRevokeRole` mutation."""
type Shopify_CompanyContactRevokeRolePayload {
  """The role assignment that was revoked."""
  revokedCompanyContactRoleAssignmentId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""Return type for `companyContactRevokeRoles` mutation."""
type Shopify_CompanyContactRevokeRolesPayload {
  """
  A list of role assignment IDs that were removed from the company contact.
  """
  revokedRoleAssignmentIds: [ID!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""
The role for a [company contact](https://shopify.dev/api/admin-graphql/latest/objects/companycontact).
"""
type Shopify_CompanyContactRole implements Shopify_Node {
  """A globally-unique identifier."""
  id: ID!
  """
  The name of a role.
  For example, `admin` or `buyer`.
  """
  name: String!
  """A note for the role."""
  note: String
}

"""The role and location to assign to a company contact."""
input Shopify_CompanyContactRoleAssign {
  """The role ID."""
  companyContactRoleId: ID!
  """The location."""
  companyLocationId: ID!
}

"""
The CompanyContactRoleAssignment describes the company and location associated to a company contact's role.
"""
type Shopify_CompanyContactRoleAssignment implements Shopify_Node {
  """The company this role assignment belongs to."""
  company: Shopify_Company!
  """The company contact for whom this role is assigned."""
  companyContact: Shopify_CompanyContact!
  """The company location to which the role is assigned."""
  companyLocation: Shopify_CompanyLocation!
  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the assignment record was created.
  """
  createdAt: DateTime!
  """A globally-unique identifier."""
  id: ID!
  """The role that is assigned to the company contact."""
  role: Shopify_CompanyContactRole!
  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the assignment record was last updated.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple CompanyContactRoleAssignments.
"""
type Shopify_CompanyContactRoleAssignmentConnection {
  """A list of edges."""
  edges: [Shopify_CompanyContactRoleAssignmentEdge!]!
  """A list of the nodes contained in CompanyContactRoleAssignmentEdge."""
  nodes: [Shopify_CompanyContactRoleAssignment!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one CompanyContactRoleAssignment and a cursor during pagination.
"""
type Shopify_CompanyContactRoleAssignmentEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of CompanyContactRoleAssignmentEdge."""
  node: Shopify_CompanyContactRoleAssignment!
}

"""The set of valid sort keys for the CompanyContactRoleAssignment query."""
enum Shopify_CompanyContactRoleAssignmentSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `updated_at` value."""
  UPDATED_AT
  """Sort by the `location_name` value."""
  LOCATION_NAME
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
An auto-generated type for paginating through multiple CompanyContactRoles.
"""
type Shopify_CompanyContactRoleConnection {
  """A list of edges."""
  edges: [Shopify_CompanyContactRoleEdge!]!
  """A list of the nodes contained in CompanyContactRoleEdge."""
  nodes: [Shopify_CompanyContactRole!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one CompanyContactRole and a cursor during pagination.
"""
type Shopify_CompanyContactRoleEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of CompanyContactRoleEdge."""
  node: Shopify_CompanyContactRole!
}

"""The set of valid sort keys for the CompanyContactRole query."""
enum Shopify_CompanyContactRoleSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `updated_at` value."""
  UPDATED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""Return type for `companyContactsDelete` mutation."""
type Shopify_CompanyContactsDeletePayload {
  """The list of IDs of the deleted company contacts."""
  deletedCompanyContactIds: [ID!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""The set of valid sort keys for the CompanyContact query."""
enum Shopify_CompanyContactSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `updated_at` value."""
  UPDATED_AT
  """Sort by the `title` value."""
  TITLE
  """Sort by the `company_id` value."""
  COMPANY_ID
  """Sort by the `name` value."""
  NAME
  """Sort by the `email` value."""
  EMAIL
  """Sort by the `name_email` value."""
  NAME_EMAIL
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""Return type for `companyContactUpdate` mutation."""
type Shopify_CompanyContactUpdatePayload {
  """The updated company contact."""
  companyContact: Shopify_CompanyContact
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""
Provides the fields and values to use when creating a company and its associated resources.
"""
input Shopify_CompanyCreateInput {
  """The attributes for the company."""
  company: Shopify_CompanyInput!
  """The attributes for the company contact."""
  companyContact: Shopify_CompanyContactInput
  """The attributes for the company location."""
  companyLocation: Shopify_CompanyLocationInput
}

"""Return type for `companyCreate` mutation."""
type Shopify_CompanyCreatePayload {
  """The created company."""
  company: Shopify_Company
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""Return type for `companyDelete` mutation."""
type Shopify_CompanyDeletePayload {
  """The ID of the deleted company."""
  deletedCompanyId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""
An auto-generated type which holds one Company and a cursor during pagination.
"""
type Shopify_CompanyEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of CompanyEdge."""
  node: Shopify_Company!
}

"""The company attributes to use when creating or updating a company."""
input Shopify_CompanyInput {
  """The name of the company."""
  name: String
  """A note about the company."""
  note: String
  """A unique externally-supplied identifier for the company."""
  externalId: String
  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) at
            which the company became the customer.
  """
  customerSince: DateTime
}

"""
A location or branch of a [company that's a
customer](https://shopify.dev/api/admin-graphql/latest/objects/company) of the
shop. Configuration of B2B relationship, for example prices lists and checkout
settings, may be done for a location.
"""
type Shopify_CompanyLocation implements Shopify_CommentEventSubject & Shopify_HasEvents & Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_Navigable & Shopify_Node {
  """The address used as billing address for the location."""
  billingAddress: Shopify_CompanyAddress
  """The configuration for the buyer's B2B checkout."""
  buyerExperienceConfiguration: Shopify_BuyerExperienceConfiguration
  """The company that the company location belongs to."""
  company: Shopify_Company!
  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601))
  at which the company location was created in Shopify.
  """
  createdAt: DateTime!
  """
  The location's currency based on the shipping address. If the shipping address
  is empty, then the value is the shop's primary market.
  """
  currency: Shopify_CurrencyCode!
  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!
  """The list of draft orders for the company location."""
  draftOrders(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_DraftOrderSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `customer_id`
     - `source`
     - `status`
     - `tag`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_DraftOrderConnection!
  """The paginated list of events associated with the host subject."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_EventSortKeys = ID
    """
    Supported filter parameters:
     - `comments`
     - `created_at`
     - `subject_type`
     - `verb`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_EventConnection!
  """A unique externally-supplied identifier for the company location."""
  externalId: String
  """Whether the merchant added a timeline comment to the company location."""
  hasTimelineComment: Boolean!
  """A globally-unique identifier."""
  id: ID!
  """The preferred locale of the company location."""
  locale: String
  """
  The market that includes the location's shipping address. If the shipping
  address is empty, then the value is the shop's primary market.
  """
  market: Shopify_Market!
  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String
    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield
  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String
    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!
  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String
    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!
  """The name of the company location."""
  name: String!
  """A note about the company location."""
  note: String
  """The total number of orders placed for the location."""
  orderCount: Int!
  """The list of orders for the company location."""
  orders(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_OrderSortKeys = ID
  ): Shopify_OrderConnection!
  """The phone number of the company location."""
  phone: String
  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!
    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield
  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
  """The list of roles assigned to the company location."""
  roleAssignments(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_CompanyContactRoleAssignmentSortKeys = ID
    """
    Supported filter parameters:
     - `company_contact_id`
     - `company_contact_role_id`
     - `company_id`
     - `company_location_id`
     - `created_at`
     - `location_name`
     - `role_name`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_CompanyContactRoleAssignmentConnection!
  """The address used as shipping address for the location."""
  shippingAddress: Shopify_CompanyAddress
  """The list of tax exemptions applied to the location."""
  taxExemptions: [Shopify_TaxExemption!]!
  """The tax registration ID for the company location."""
  taxRegistrationId: String
  """The total amount spent by the location."""
  totalSpent: Shopify_MoneyV2!
  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601))
  at which the company location was last modified.
  """
  updatedAt: DateTime!
}

"""Return type for `companyLocationAssignAddress` mutation."""
type Shopify_CompanyLocationAssignAddressPayload {
  """The list of updated addresses on the company location."""
  addresses: [Shopify_CompanyAddress!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""Return type for `companyLocationAssignRoles` mutation."""
type Shopify_CompanyLocationAssignRolesPayload {
  """
  A list of newly created assignments of company contacts to a company location.
  """
  roleAssignments: [Shopify_CompanyContactRoleAssignment!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""Return type for `companyLocationAssignTaxExemptions` mutation."""
type Shopify_CompanyLocationAssignTaxExemptionsPayload {
  """The updated company location."""
  companyLocation: Shopify_CompanyLocation
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""
An auto-generated type for paginating through multiple CompanyLocations.
"""
type Shopify_CompanyLocationConnection {
  """A list of edges."""
  edges: [Shopify_CompanyLocationEdge!]!
  """A list of the nodes contained in CompanyLocationEdge."""
  nodes: [Shopify_CompanyLocation!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `companyLocationCreate` mutation."""
type Shopify_CompanyLocationCreatePayload {
  """The created company location."""
  companyLocation: Shopify_CompanyLocation
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""Return type for `companyLocationCreateTaxRegistration` mutation."""
type Shopify_CompanyLocationCreateTaxRegistrationPayload {
  """The company location with the created tax registration."""
  companyLocation: Shopify_CompanyLocation
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""Return type for `companyLocationDelete` mutation."""
type Shopify_CompanyLocationDeletePayload {
  """The ID of the deleted company location."""
  deletedCompanyLocationId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""
An auto-generated type which holds one CompanyLocation and a cursor during pagination.
"""
type Shopify_CompanyLocationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of CompanyLocationEdge."""
  node: Shopify_CompanyLocation!
}

"""
The company location fields to use when creating or updating a company location.
"""
input Shopify_CompanyLocationInput {
  """The name of the company location."""
  name: String
  """The phone number of the company location."""
  phone: String
  """The preferred locale of the company location."""
  locale: String
  """A unique externally-supplied identifier for the company location."""
  externalId: String
  """A note about the company location."""
  note: String
  """The configuration for the buyer's checkout at the company location."""
  buyerExperienceConfiguration: Shopify_BuyerExperienceConfigurationInput
  """
  The input fields to create or update the billing address for a company location.
  """
  billingAddress: Shopify_CompanyAddressInput
  """
  The input fields to create or update the shipping address for a company location.
  """
  shippingAddress: Shopify_CompanyAddressInput
  """
  Whether the billing address is the same as the shipping address. If the value
  is true, then the input for `billingAddress` is ignored.
  """
  billingSameAsShipping: Boolean
  """The tax registration ID of the company location."""
  taxRegistrationId: String
  """The list of tax exemptions to apply to the company location."""
  taxExemptions: [Shopify_TaxExemption!]
}

"""Return type for `companyLocationRevokeRoles` mutation."""
type Shopify_CompanyLocationRevokeRolesPayload {
  """
  A list of role assignment IDs that were removed from the company location.
  """
  revokedRoleAssignmentIds: [ID!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""Return type for `companyLocationRevokeTaxExemptions` mutation."""
type Shopify_CompanyLocationRevokeTaxExemptionsPayload {
  """The updated company location."""
  companyLocation: Shopify_CompanyLocation
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""Return type for `companyLocationRevokeTaxRegistration` mutation."""
type Shopify_CompanyLocationRevokeTaxRegistrationPayload {
  """The updated company location."""
  companyLocation: Shopify_CompanyLocation
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""The role and contact to assign on a location."""
input Shopify_CompanyLocationRoleAssign {
  """The role ID."""
  companyContactRoleId: ID!
  """The company contact ID.."""
  companyContactId: ID!
}

"""Return type for `companyLocationsDelete` mutation."""
type Shopify_CompanyLocationsDeletePayload {
  """A list of IDs of the deleted company locations."""
  deletedCompanyLocationIds: [ID!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""The set of valid sort keys for the CompanyLocation query."""
enum Shopify_CompanyLocationSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `updated_at` value."""
  UPDATED_AT
  """Sort by the `name` value."""
  NAME
  """Sort by the `company_id` value."""
  COMPANY_ID
  """Sort by the `company_and_location_name` value."""
  COMPANY_AND_LOCATION_NAME
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
The company location fields to use when creating or updating a company location.
"""
input Shopify_CompanyLocationUpdateInput {
  """The name of the company location."""
  name: String
  """The phone number of the company location."""
  phone: String
  """The preferred locale of the company location."""
  locale: String
  """A unique externally-supplied identifier for the company location."""
  externalId: String
  """A note about the company location."""
  note: String
  """The configuration for the buyer's checkout at the company location."""
  buyerExperienceConfiguration: Shopify_BuyerExperienceConfigurationInput
}

"""Return type for `companyLocationUpdate` mutation."""
type Shopify_CompanyLocationUpdatePayload {
  """The updated company location."""
  companyLocation: Shopify_CompanyLocation
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""Return type for `companyRevokeMainContact` mutation."""
type Shopify_CompanyRevokeMainContactPayload {
  """The company from which the main contact is revoked."""
  company: Shopify_Company
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""The set of valid sort keys for the Company query."""
enum Shopify_CompanySortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `updated_at` value."""
  UPDATED_AT
  """Sort by the `since_date` value."""
  SINCE_DATE
  """Sort by the `name` value."""
  NAME
  """Sort by the `order_count` value."""
  ORDER_COUNT
  """Sort by the `total_spent` value."""
  TOTAL_SPENT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""Return type for `companyUpdate` mutation."""
type Shopify_CompanyUpdatePayload {
  """The updated company."""
  company: Shopify_Company
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BusinessCustomerUserError!]!
}

"""The context data that determines the pricing of a variant."""
input Shopify_ContextualPricingContext {
  """The country code used to fetch country-specific prices."""
  country: CountryCode
  """The CompanyLocation ID used to fetch company location specific prices."""
  companyLocationId: ID
}

"""
The list of all the countries from the combined shipping zones for the shop.
"""
type Shopify_CountriesInShippingZones {
  """The list of all the countries from all the combined shipping zones."""
  countryCodes: [CountryCode!]!
  """Whether 'Rest of World' has been defined in any of the shipping zones."""
  includeRestOfWorld: Boolean!
}

"""
The code designating a country/region, which generally follows ISO 3166-1 alpha-2 guidelines.
If a territory doesn't have a country code value in the `CountryCode` enum, then it might be considered a subdivision
of another country. For example, the territories associated with Spain are represented by the country code `ES`,
and the territories associated with the United States of America are represented by the country code `US`.
"""
enum CountryCode {
  """Afghanistan."""
  AF
  """Åland Islands."""
  AX
  """Albania."""
  AL
  """Algeria."""
  DZ
  """Andorra."""
  AD
  """Angola."""
  AO
  """Anguilla."""
  AI
  """Antigua & Barbuda."""
  AG
  """Argentina."""
  AR
  """Armenia."""
  AM
  """Aruba."""
  AW
  """Ascension Island."""
  AC
  """Australia."""
  AU
  """Austria."""
  AT
  """Azerbaijan."""
  AZ
  """Bahamas."""
  BS
  """Bahrain."""
  BH
  """Bangladesh."""
  BD
  """Barbados."""
  BB
  """Belarus."""
  BY
  """Belgium."""
  BE
  """Belize."""
  BZ
  """Benin."""
  BJ
  """Bermuda."""
  BM
  """Bhutan."""
  BT
  """Bolivia."""
  BO
  """Bosnia & Herzegovina."""
  BA
  """Botswana."""
  BW
  """Bouvet Island."""
  BV
  """Brazil."""
  BR
  """British Indian Ocean Territory."""
  IO
  """Brunei."""
  BN
  """Bulgaria."""
  BG
  """Burkina Faso."""
  BF
  """Burundi."""
  BI
  """Cambodia."""
  KH
  """Canada."""
  CA
  """Cape Verde."""
  CV
  """Caribbean Netherlands."""
  BQ
  """Cayman Islands."""
  KY
  """Central African Republic."""
  CF
  """Chad."""
  TD
  """Chile."""
  CL
  """China."""
  CN
  """Christmas Island."""
  CX
  """Cocos (Keeling) Islands."""
  CC
  """Colombia."""
  CO
  """Comoros."""
  KM
  """Congo - Brazzaville."""
  CG
  """Congo - Kinshasa."""
  CD
  """Cook Islands."""
  CK
  """Costa Rica."""
  CR
  """Croatia."""
  HR
  """Cuba."""
  CU
  """Curaçao."""
  CW
  """Cyprus."""
  CY
  """Czechia."""
  CZ
  """Côte d’Ivoire."""
  CI
  """Denmark."""
  DK
  """Djibouti."""
  DJ
  """Dominica."""
  DM
  """Dominican Republic."""
  DO
  """Ecuador."""
  EC
  """Egypt."""
  EG
  """El Salvador."""
  SV
  """Equatorial Guinea."""
  GQ
  """Eritrea."""
  ER
  """Estonia."""
  EE
  """Eswatini."""
  SZ
  """Ethiopia."""
  ET
  """Falkland Islands."""
  FK
  """Faroe Islands."""
  FO
  """Fiji."""
  FJ
  """Finland."""
  FI
  """France."""
  FR
  """French Guiana."""
  GF
  """French Polynesia."""
  PF
  """French Southern Territories."""
  TF
  """Gabon."""
  GA
  """Gambia."""
  GM
  """Georgia."""
  GE
  """Germany."""
  DE
  """Ghana."""
  GH
  """Gibraltar."""
  GI
  """Greece."""
  GR
  """Greenland."""
  GL
  """Grenada."""
  GD
  """Guadeloupe."""
  GP
  """Guatemala."""
  GT
  """Guernsey."""
  GG
  """Guinea."""
  GN
  """Guinea-Bissau."""
  GW
  """Guyana."""
  GY
  """Haiti."""
  HT
  """Heard & McDonald Islands."""
  HM
  """Vatican City."""
  VA
  """Honduras."""
  HN
  """Hong Kong SAR."""
  HK
  """Hungary."""
  HU
  """Iceland."""
  IS
  """India."""
  IN
  """Indonesia."""
  ID
  """Iran."""
  IR
  """Iraq."""
  IQ
  """Ireland."""
  IE
  """Isle of Man."""
  IM
  """Israel."""
  IL
  """Italy."""
  IT
  """Jamaica."""
  JM
  """Japan."""
  JP
  """Jersey."""
  JE
  """Jordan."""
  JO
  """Kazakhstan."""
  KZ
  """Kenya."""
  KE
  """Kiribati."""
  KI
  """North Korea."""
  KP
  """Kosovo."""
  XK
  """Kuwait."""
  KW
  """Kyrgyzstan."""
  KG
  """Laos."""
  LA
  """Latvia."""
  LV
  """Lebanon."""
  LB
  """Lesotho."""
  LS
  """Liberia."""
  LR
  """Libya."""
  LY
  """Liechtenstein."""
  LI
  """Lithuania."""
  LT
  """Luxembourg."""
  LU
  """Macao SAR."""
  MO
  """Madagascar."""
  MG
  """Malawi."""
  MW
  """Malaysia."""
  MY
  """Maldives."""
  MV
  """Mali."""
  ML
  """Malta."""
  MT
  """Martinique."""
  MQ
  """Mauritania."""
  MR
  """Mauritius."""
  MU
  """Mayotte."""
  YT
  """Mexico."""
  MX
  """Moldova."""
  MD
  """Monaco."""
  MC
  """Mongolia."""
  MN
  """Montenegro."""
  ME
  """Montserrat."""
  MS
  """Morocco."""
  MA
  """Mozambique."""
  MZ
  """Myanmar (Burma)."""
  MM
  """Namibia."""
  NA
  """Nauru."""
  NR
  """Nepal."""
  NP
  """Netherlands."""
  NL
  """Netherlands Antilles."""
  AN
  """New Caledonia."""
  NC
  """New Zealand."""
  NZ
  """Nicaragua."""
  NI
  """Niger."""
  NE
  """Nigeria."""
  NG
  """Niue."""
  NU
  """Norfolk Island."""
  NF
  """North Macedonia."""
  MK
  """Norway."""
  NO
  """Oman."""
  OM
  """Pakistan."""
  PK
  """Palestinian Territories."""
  PS
  """Panama."""
  PA
  """Papua New Guinea."""
  PG
  """Paraguay."""
  PY
  """Peru."""
  PE
  """Philippines."""
  PH
  """Pitcairn Islands."""
  PN
  """Poland."""
  PL
  """Portugal."""
  PT
  """Qatar."""
  QA
  """Cameroon."""
  CM
  """Réunion."""
  RE
  """Romania."""
  RO
  """Russia."""
  RU
  """Rwanda."""
  RW
  """St. Barthélemy."""
  BL
  """St. Helena."""
  SH
  """St. Kitts & Nevis."""
  KN
  """St. Lucia."""
  LC
  """St. Martin."""
  MF
  """St. Pierre & Miquelon."""
  PM
  """Samoa."""
  WS
  """San Marino."""
  SM
  """São Tomé & Príncipe."""
  ST
  """Saudi Arabia."""
  SA
  """Senegal."""
  SN
  """Serbia."""
  RS
  """Seychelles."""
  SC
  """Sierra Leone."""
  SL
  """Singapore."""
  SG
  """Sint Maarten."""
  SX
  """Slovakia."""
  SK
  """Slovenia."""
  SI
  """Solomon Islands."""
  SB
  """Somalia."""
  SO
  """South Africa."""
  ZA
  """South Georgia & South Sandwich Islands."""
  GS
  """South Korea."""
  KR
  """South Sudan."""
  SS
  """Spain."""
  ES
  """Sri Lanka."""
  LK
  """St. Vincent & Grenadines."""
  VC
  """Sudan."""
  SD
  """Suriname."""
  SR
  """Svalbard & Jan Mayen."""
  SJ
  """Sweden."""
  SE
  """Switzerland."""
  CH
  """Syria."""
  SY
  """Taiwan."""
  TW
  """Tajikistan."""
  TJ
  """Tanzania."""
  TZ
  """Thailand."""
  TH
  """Timor-Leste."""
  TL
  """Togo."""
  TG
  """Tokelau."""
  TK
  """Tonga."""
  TO
  """Trinidad & Tobago."""
  TT
  """Tristan da Cunha."""
  TA
  """Tunisia."""
  TN
  """Turkey."""
  TR
  """Turkmenistan."""
  TM
  """Turks & Caicos Islands."""
  TC
  """Tuvalu."""
  TV
  """Uganda."""
  UG
  """Ukraine."""
  UA
  """United Arab Emirates."""
  AE
  """United Kingdom."""
  GB
  """United States."""
  US
  """U.S. Outlying Islands."""
  UM
  """Uruguay."""
  UY
  """Uzbekistan."""
  UZ
  """Vanuatu."""
  VU
  """Venezuela."""
  VE
  """Vietnam."""
  VN
  """British Virgin Islands."""
  VG
  """Wallis & Futuna."""
  WF
  """Western Sahara."""
  EH
  """Yemen."""
  YE
  """Zambia."""
  ZM
  """Zimbabwe."""
  ZW
  """Unknown Region."""
  ZZ
}

"""
The country-specific harmonized system code and ISO country code for an inventory item.
"""
type Shopify_CountryHarmonizedSystemCode {
  """
  The ISO 3166-1 alpha-2 country code for the country that issued the specified harmonized system code.
  """
  countryCode: CountryCode!
  """
  The country-specific harmonized system code. These are usually longer than 6 digits.
  """
  harmonizedSystemCode: String!
}

"""
An auto-generated type for paginating through multiple CountryHarmonizedSystemCodes.
"""
type Shopify_CountryHarmonizedSystemCodeConnection {
  """A list of edges."""
  edges: [Shopify_CountryHarmonizedSystemCodeEdge!]!
  """A list of the nodes contained in CountryHarmonizedSystemCodeEdge."""
  nodes: [Shopify_CountryHarmonizedSystemCode!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one CountryHarmonizedSystemCode and a cursor during pagination.
"""
type Shopify_CountryHarmonizedSystemCodeEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of CountryHarmonizedSystemCodeEdge."""
  node: Shopify_CountryHarmonizedSystemCode!
}

"""The fields required to specify a harmonized system code."""
input Shopify_CountryHarmonizedSystemCodeInput {
  """Country specific harmonized system code."""
  harmonizedSystemCode: String!
  """
  The ISO 3166-1 alpha-2 country code for the country that issued the specified harmonized system code.
  """
  countryCode: CountryCode!
}

"""Specifies the input fields required to create a media object."""
input Shopify_CreateMediaInput {
  """
  The original source of the media object. This might be an external URL or a staged upload URL.
  """
  originalSource: String!
  """The alt text associated with the media."""
  alt: String
  """The media content type."""
  mediaContentType: Shopify_MediaContentType!
}

"""The part of the image that should remain after cropping."""
enum Shopify_CropRegion {
  """Keep the center of the image."""
  CENTER
  """Keep the top of the image."""
  TOP
  """Keep the bottom of the image."""
  BOTTOM
  """Keep the left of the image."""
  LEFT
  """Keep the right of the image."""
  RIGHT
}

"""
The three-letter currency codes that represent the world currencies used in
stores. These include standard ISO 4217 codes, legacy codes,
and non-standard codes.
"""
enum Shopify_CurrencyCode {
  """United States Dollars (USD)."""
  USD
  """Euro (EUR)."""
  EUR
  """United Kingdom Pounds (GBP)."""
  GBP
  """Canadian Dollars (CAD)."""
  CAD
  """Afghan Afghani (AFN)."""
  AFN
  """Albanian Lek (ALL)."""
  ALL
  """Algerian Dinar (DZD)."""
  DZD
  """Angolan Kwanza (AOA)."""
  AOA
  """Argentine Pesos (ARS)."""
  ARS
  """Armenian Dram (AMD)."""
  AMD
  """Aruban Florin (AWG)."""
  AWG
  """Australian Dollars (AUD)."""
  AUD
  """Barbadian Dollar (BBD)."""
  BBD
  """Azerbaijani Manat (AZN)."""
  AZN
  """Bangladesh Taka (BDT)."""
  BDT
  """Bahamian Dollar (BSD)."""
  BSD
  """Bahraini Dinar (BHD)."""
  BHD
  """Burundian Franc (BIF)."""
  BIF
  """Belize Dollar (BZD)."""
  BZD
  """Bermudian Dollar (BMD)."""
  BMD
  """Bhutanese Ngultrum (BTN)."""
  BTN
  """Bosnia and Herzegovina Convertible Mark (BAM)."""
  BAM
  """Brazilian Real (BRL)."""
  BRL
  """Bolivian Boliviano (BOB)."""
  BOB
  """Botswana Pula (BWP)."""
  BWP
  """Brunei Dollar (BND)."""
  BND
  """Bulgarian Lev (BGN)."""
  BGN
  """Burmese Kyat (MMK)."""
  MMK
  """Cambodian Riel."""
  KHR
  """Cape Verdean escudo (CVE)."""
  CVE
  """Cayman Dollars (KYD)."""
  KYD
  """Central African CFA Franc (XAF)."""
  XAF
  """Chilean Peso (CLP)."""
  CLP
  """Chinese Yuan Renminbi (CNY)."""
  CNY
  """Colombian Peso (COP)."""
  COP
  """Comorian Franc (KMF)."""
  KMF
  """Congolese franc (CDF)."""
  CDF
  """Costa Rican Colones (CRC)."""
  CRC
  """Croatian Kuna (HRK)."""
  HRK
  """Czech Koruny (CZK)."""
  CZK
  """Danish Kroner (DKK)."""
  DKK
  """Dominican Peso (DOP)."""
  DOP
  """East Caribbean Dollar (XCD)."""
  XCD
  """Egyptian Pound (EGP)."""
  EGP
  """Ethiopian Birr (ETB)."""
  ETB
  """CFP Franc (XPF)."""
  XPF
  """Fijian Dollars (FJD)."""
  FJD
  """Gambian Dalasi (GMD)."""
  GMD
  """Ghanaian Cedi (GHS)."""
  GHS
  """Guatemalan Quetzal (GTQ)."""
  GTQ
  """Guyanese Dollar (GYD)."""
  GYD
  """Georgian Lari (GEL)."""
  GEL
  """Haitian Gourde (HTG)."""
  HTG
  """Honduran Lempira (HNL)."""
  HNL
  """Hong Kong Dollars (HKD)."""
  HKD
  """Hungarian Forint (HUF)."""
  HUF
  """Icelandic Kronur (ISK)."""
  ISK
  """Indian Rupees (INR)."""
  INR
  """Indonesian Rupiah (IDR)."""
  IDR
  """Israeli New Shekel (NIS)."""
  ILS
  """Iraqi Dinar (IQD)."""
  IQD
  """Jamaican Dollars (JMD)."""
  JMD
  """Japanese Yen (JPY)."""
  JPY
  """Jersey Pound."""
  JEP
  """Jordanian Dinar (JOD)."""
  JOD
  """Kazakhstani Tenge (KZT)."""
  KZT
  """Kenyan Shilling (KES)."""
  KES
  """Kuwaiti Dinar (KWD)."""
  KWD
  """Kyrgyzstani Som (KGS)."""
  KGS
  """Laotian Kip (LAK)."""
  LAK
  """Latvian Lati (LVL)."""
  LVL
  """Lebanese Pounds (LBP)."""
  LBP
  """Lesotho Loti (LSL)."""
  LSL
  """Liberian Dollar (LRD)."""
  LRD
  """Lithuanian Litai (LTL)."""
  LTL
  """Malagasy Ariary (MGA)."""
  MGA
  """Macedonia Denar (MKD)."""
  MKD
  """Macanese Pataca (MOP)."""
  MOP
  """Malawian Kwacha (MWK)."""
  MWK
  """Maldivian Rufiyaa (MVR)."""
  MVR
  """Mexican Pesos (MXN)."""
  MXN
  """Malaysian Ringgits (MYR)."""
  MYR
  """Mauritian Rupee (MUR)."""
  MUR
  """Moldovan Leu (MDL)."""
  MDL
  """Moroccan Dirham."""
  MAD
  """Mongolian Tugrik."""
  MNT
  """Mozambican Metical."""
  MZN
  """Namibian Dollar."""
  NAD
  """Nepalese Rupee (NPR)."""
  NPR
  """Netherlands Antillean Guilder."""
  ANG
  """New Zealand Dollars (NZD)."""
  NZD
  """Nicaraguan Córdoba (NIO)."""
  NIO
  """Nigerian Naira (NGN)."""
  NGN
  """Norwegian Kroner (NOK)."""
  NOK
  """Omani Rial (OMR)."""
  OMR
  """Panamian Balboa (PAB)."""
  PAB
  """Pakistani Rupee (PKR)."""
  PKR
  """Papua New Guinean Kina (PGK)."""
  PGK
  """Paraguayan Guarani (PYG)."""
  PYG
  """Peruvian Nuevo Sol (PEN)."""
  PEN
  """Philippine Peso (PHP)."""
  PHP
  """Polish Zlotych (PLN)."""
  PLN
  """Qatari Rial (QAR)."""
  QAR
  """Romanian Lei (RON)."""
  RON
  """Russian Rubles (RUB)."""
  RUB
  """Rwandan Franc (RWF)."""
  RWF
  """Samoan Tala (WST)."""
  WST
  """Saudi Riyal (SAR)."""
  SAR
  """Serbian dinar (RSD)."""
  RSD
  """Seychellois Rupee (SCR)."""
  SCR
  """Singapore Dollars (SGD)."""
  SGD
  """Sudanese Pound (SDG)."""
  SDG
  """Syrian Pound (SYP)."""
  SYP
  """South African Rand (ZAR)."""
  ZAR
  """South Korean Won (KRW)."""
  KRW
  """South Sudanese Pound (SSP)."""
  SSP
  """Solomon Islands Dollar (SBD)."""
  SBD
  """Sri Lankan Rupees (LKR)."""
  LKR
  """Surinamese Dollar (SRD)."""
  SRD
  """Swazi Lilangeni (SZL)."""
  SZL
  """Swedish Kronor (SEK)."""
  SEK
  """Swiss Francs (CHF)."""
  CHF
  """Taiwan Dollars (TWD)."""
  TWD
  """Thai baht (THB)."""
  THB
  """Tanzanian Shilling (TZS)."""
  TZS
  """Trinidad and Tobago Dollars (TTD)."""
  TTD
  """Tunisian Dinar (TND)."""
  TND
  """Turkish Lira (TRY)."""
  TRY
  """Turkmenistani Manat (TMT)."""
  TMT
  """Ugandan Shilling (UGX)."""
  UGX
  """Ukrainian Hryvnia (UAH)."""
  UAH
  """United Arab Emirates Dirham (AED)."""
  AED
  """Uruguayan Pesos (UYU)."""
  UYU
  """Uzbekistan som (UZS)."""
  UZS
  """Vanuatu Vatu (VUV)."""
  VUV
  """Vietnamese đồng (VND)."""
  VND
  """West African CFA franc (XOF)."""
  XOF
  """Yemeni Rial (YER)."""
  YER
  """Zambian Kwacha (ZMW)."""
  ZMW
  """Belarusian Ruble (BYN)."""
  BYN
  """Belarusian Ruble (BYR)."""
  BYR @deprecated(reason: "`BYR` is deprecated. Use `BYN` available from version `2021-01` onwards instead.")
  """Djiboutian Franc (DJF)."""
  DJF
  """Eritrean Nakfa (ERN)."""
  ERN
  """Falkland Islands Pounds (FKP)."""
  FKP
  """Gibraltar Pounds (GIP)."""
  GIP
  """Guinean Franc (GNF)."""
  GNF
  """Iranian Rial (IRR)."""
  IRR
  """Kiribati Dollar (KID)."""
  KID
  """Libyan Dinar (LYD)."""
  LYD
  """Mauritanian Ouguiya (MRU)."""
  MRU
  """Sierra Leonean Leone (SLL)."""
  SLL
  """Saint Helena Pounds (SHP)."""
  SHP
  """Somali Shilling (SOS)."""
  SOS
  """Sao Tome And Principe Dobra (STD)."""
  STD @deprecated(reason: "`STD` is deprecated. Use `STN` available from version `2022-07` onwards instead.")
  """Sao Tome And Principe Dobra (STN)."""
  STN
  """Tajikistani Somoni (TJS)."""
  TJS
  """Tongan Pa'anga (TOP)."""
  TOP
  """Venezuelan Bolivares (VED)."""
  VED
  """Venezuelan Bolivares (VEF)."""
  VEF @deprecated(reason: "`VEF` is deprecated. Use `VES` available from version `2020-10` onwards instead.")
  """Venezuelan Bolivares (VES)."""
  VES
  """Unrecognized currency."""
  XXX
}

"""
Currency formats configured for the merchant. These formats are available to use within Liquid.
"""
type Shopify_CurrencyFormats {
  """Money without currency in HTML."""
  moneyFormat: Shopify_FormattedString!
  """Money without currency in emails."""
  moneyInEmailsFormat: String!
  """Money with currency in HTML."""
  moneyWithCurrencyFormat: Shopify_FormattedString!
  """Money with currency in emails."""
  moneyWithCurrencyInEmailsFormat: String!
}

"""A setting for a presentment currency."""
type Shopify_CurrencySetting {
  """The currency's ISO code."""
  currencyCode: Shopify_CurrencyCode!
  """The full name of the currency."""
  currencyName: String!
  """
  Whether the currency is enabled or not. An enabled currency setting is visible
  to buyers and allows orders to be generated with that currency as presentment.
  """
  enabled: Boolean!
  """
  The date and time when the active exchange rate for the currency was last
  modified. It can be the automatic rate's creation date, or the manual rate's
  last updated at date if active.
  """
  rateUpdatedAt: DateTime
}

"""
An auto-generated type for paginating through multiple CurrencySettings.
"""
type Shopify_CurrencySettingConnection {
  """A list of edges."""
  edges: [Shopify_CurrencySettingEdge!]!
  """A list of the nodes contained in CurrencySettingEdge."""
  nodes: [Shopify_CurrencySetting!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one CurrencySetting and a cursor during pagination.
"""
type Shopify_CurrencySettingEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of CurrencySettingEdge."""
  node: Shopify_CurrencySetting!
}

"""
Represents information about a customer of the shop, such as the customer's contact details, their order
history, and whether they've agreed to receive marketing material by email.

**Caution:** Only use this data if it's required for your app's functionality.
Shopify will restrict [access to
scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a
legitimate use for the associated data.
"""
type Shopify_Customer implements Shopify_CommentEventSubject & Shopify_HasEvents & Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_LegacyInteroperability & Shopify_Node {
  """Whether the customer has agreed to receive marketing material."""
  acceptsMarketing: Boolean! @deprecated(reason: "Use `emailMarketingConsent` instead.")
  """
  The date and time when the customer consented or objected to receiving marketing material by email.
  """
  acceptsMarketingUpdatedAt: DateTime! @deprecated(reason: "Use `emailMarketingConsent` instead.")
  """A list of addresses associated with the customer."""
  addresses(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_MailingAddress!]!
  """
  The total amount that the customer has spent on orders in their lifetime.
  """
  amountSpent: Shopify_MoneyV2!
  """The average amount that the customer spent per order."""
  averageOrderAmount: Shopify_Money @deprecated(reason: "Use `averageOrderAmountV2` instead.")
  """The average amount that the customer spent per order."""
  averageOrderAmountV2: Shopify_MoneyV2
  """
  Whether the merchant can delete the customer from their store.
  
  A customer can be deleted from a store only if they have not yet made an order. After a customer makes an
  order, they can't be deleted from a store.
  """
  canDelete: Boolean!
  """A list of the customer's company contact profiles."""
  companyContactProfiles: [Shopify_CompanyContact!]!
  """The date and time when the customer was added to the store."""
  createdAt: DateTime!
  """The default address associated with the customer."""
  defaultAddress: Shopify_MailingAddress
  """
  The full name of the customer, based on the values for first_name and last_name. If the first_name and
  last_name are not available, then this falls back to the customer's email
  address, and if that is not available, the customer's phone number.
  """
  displayName: String!
  """The customer's email address."""
  email: String
  """
  The current email marketing state for the customer.
  If the customer doesn't have an email address, then this property is `null`.
  """
  emailMarketingConsent: Shopify_CustomerEmailMarketingConsentState
  """A list of events associated with the customer."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_EventSortKeys = ID
    """
    Supported filter parameters:
     - `comments`
     - `created_at`
     - `subject_type`
     - `verb`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_EventConnection!
  """The customer's first name."""
  firstName: String
  """
  Whether the timeline subject has a timeline comment. If true, then a timeline comment exists.
  """
  hasTimelineComment: Boolean!
  """A globally-unique identifier."""
  id: ID!
  """The image associated with the customer."""
  image: Shopify_Image!
  """The customer's last name."""
  lastName: String
  """The customer's last order."""
  lastOrder: Shopify_Order
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: Shopify_UnsignedInt64!
  """
  The amount of time since the customer was first added to the store.
  
  Example: 'about 12 years'.
  """
  lifetimeDuration: String!
  """The customer's locale."""
  locale: String!
  """The market that includes the customer’s default address."""
  market: Shopify_Market
  """
  The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines, that the
  customer gave when they consented to receive marketing material by email.
  
  If the customer does not accept email marketing, then this property is `null`.
  """
  marketingOptInLevel: Shopify_CustomerMarketingOptInLevel @deprecated(reason: "Use `emailMarketingConsent` instead.")
  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String
    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield
  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String
    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!
  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String
    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!
  """A unique identifier for the customer that's used with Multipass login."""
  multipassIdentifier: String
  """A note about the customer."""
  note: String
  """
  The number of orders that the customer has made at the store in their lifetime.
  """
  numberOfOrders: Shopify_UnsignedInt64!
  """A list of the customer's orders."""
  orders(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_OrderSortKeys = ID
    """
    Supported filter parameters:
     - `cart_token`
     - `channel`
     - `channel_id`
     - `chargeback_status`
     - `checkout_token`
     - `created_at`
     - `credit_card_last4`
     - `customer_id`
     - `delivery_method`
     - `discount_code`
     - `earliest_fulfill_by`
     - `email`
     - `financial_status`
     - `fraud_protection_level`
     - `fulfillment_location_id`
     - `fulfillment_status`
     - `gateway`
     - `location_id`
     - `name`
     - `payment_id`
     - `payment_provider_id`
     - `processed_at`
     - `reference_location_id`
     - `return_status`
     - `risk_level`
     - `sales_channel`
     - `sku`
     - `source_identifier`
     - `source_name`
     - `status`
     - `tag`
     - `tag_not`
     - `test`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_OrderConnection!
  """A list of the customer's payment methods."""
  paymentMethods(
    """Whether to show the customer's revoked payment method."""
    showRevoked: Boolean = false
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CustomerPaymentMethodConnection!
  """The customer's phone number."""
  phone: String
  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!
    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield
  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
  """
  Possible subscriber states of a customer defined by their subscription contracts.
  """
  productSubscriberStatus: Shopify_CustomerProductSubscriberStatus!
  """
  The current SMS marketing state for the customer's phone number.
  
  If the customer does not have a phone number, then this property is `null`.
  """
  smsMarketingConsent: Shopify_CustomerSmsMarketingConsentState
  """The state of the customer's account with the shop."""
  state: Shopify_CustomerState!
  """The statistics for a given customer."""
  statistics: Shopify_CustomerStatistics!
  """A list of the customer's subscription contracts."""
  subscriptionContracts(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionContractConnection!
  """A comma separated list of tags that have been added to the customer."""
  tags: [String!]!
  """
  Whether the customer is exempt from being charged taxes on their orders.
  """
  taxExempt: Boolean!
  """The list of tax exemptions applied to the customer."""
  taxExemptions: [Shopify_TaxExemption!]!
  """The URL to unsubscribe the customer from the mailing list."""
  unsubscribeUrl: URL!
  """The date and time when the customer was last updated."""
  updatedAt: DateTime!
  """
  Whether the email address is formatted correctly.
  
  Returns `true` when the email is formatted correctly and
  belongs to an existing domain. This doesn't guarantee that
  the email address actually exists.
  """
  validEmailAddress: Boolean!
  """
  Whether the customer has verified their email address. Defaults to `true` if
  the customer is created through the Shopify admin or API.
  """
  verifiedEmail: Boolean!
}

"""Return type for `customerAddTaxExemptions` mutation."""
type Shopify_CustomerAddTaxExemptionsPayload {
  """The updated customer."""
  customer: Shopify_Customer
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""An auto-generated type for paginating through multiple Customers."""
type Shopify_CustomerConnection {
  """A list of edges."""
  edges: [Shopify_CustomerEdge!]!
  """A list of the nodes contained in CustomerEdge."""
  nodes: [Shopify_Customer!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
The source that collected the customer's consent to receive marketing materials.
"""
enum Shopify_CustomerConsentCollectedFrom {
  """The customer consent was collected by Shopify."""
  SHOPIFY
  """The customer consent was collected outside of Shopify."""
  OTHER
}

"""Return type for `customerCreate` mutation."""
type Shopify_CustomerCreatePayload {
  """The created customer."""
  customer: Shopify_Customer
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Represents a card instrument for customer payment method."""
type Shopify_CustomerCreditCard {
  """The billing address of the card."""
  billingAddress: Shopify_CustomerCreditCardBillingAddress
  """The brand of the card."""
  brand: String!
  """Whether the card is about to expire."""
  expiresSoon: Boolean!
  """The expiry month of the card."""
  expiryMonth: Int!
  """The expiry year of the card."""
  expiryYear: Int!
  """The card's BIN number."""
  firstDigits: String
  """
  The payment method can be revoked if there are no active subscription contracts.
  """
  isRevocable: Boolean!
  """The last 4 digits of the card."""
  lastDigits: String!
  """The masked card number with only the last 4 digits displayed."""
  maskedNumber: String!
  """The name of the card holder."""
  name: String!
  """The source of the card if coming from a wallet such as Apple Pay."""
  source: String
  """The last 4 digits of the Device Account Number."""
  virtualLastDigits: String
}

"""The billing address of a credit card payment instrument."""
type Shopify_CustomerCreditCardBillingAddress {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String
  """The name of the city, district, village, or town."""
  city: String
  """The name of the country."""
  country: String
  """
  The two-letter code for the country of the address.
  For example, US.
  """
  countryCode: CountryCode
  """The first name in the billing address."""
  firstName: String
  """The last name in the billing address."""
  lastName: String
  """The region of the address, such as the province, state, or district."""
  province: String
  """
  The two-letter code for the region.
  For example, ON.
  """
  provinceCode: String
  """The zip or postal code of the address."""
  zip: String
}

"""Specifies the customer to delete."""
input Shopify_CustomerDeleteInput {
  """The ID of the customer to delete."""
  id: ID!
}

"""Return type for `customerDelete` mutation."""
type Shopify_CustomerDeletePayload {
  """The ID of the deleted customer."""
  deletedCustomerId: ID
  """The shop of the deleted customer."""
  shop: Shopify_Shop!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An auto-generated type which holds one Customer and a cursor during pagination.
"""
type Shopify_CustomerEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of CustomerEdge."""
  node: Shopify_Customer!
}

"""Represents an email address."""
type Shopify_CustomerEmailAddress {
  """The customer's default email address."""
  emailAddress: String!
  """Whether the customer has subscribed to email marketing."""
  marketingState: Shopify_CustomerEmailAddressMarketingState!
  """The URL to unsubscribe a member from all mailing lists."""
  marketingUnsubscribeUrl: URL!
  """
  Whether the customer has opted in to having their opened emails tracked.
  """
  openTrackingLevel: Shopify_CustomerEmailAddressOpenTrackingLevel!
  """
  The URL that can be used to opt a customer in or out of email open tracking.
  """
  openTrackingUrl: URL!
}

"""Possible marketing states for the customer’s email address."""
enum Shopify_CustomerEmailAddressMarketingState {
  """The customer’s email address marketing state is invalid."""
  INVALID
  """The customer is not subscribed to email marketing."""
  NOT_SUBSCRIBED
  """The customer is in the process of subscribing to email marketing."""
  PENDING
  """The customer is subscribed to email marketing."""
  SUBSCRIBED
  """
  The customer is not subscribed to email marketing but was previously subscribed.
  """
  UNSUBSCRIBED
}

"""
The different levels related to whether a customer has opted in to having their opened emails tracked.
"""
enum Shopify_CustomerEmailAddressOpenTrackingLevel {
  """
  The customer has not specified whether they want to opt in or out of having their open emails tracked.
  """
  UNKNOWN
  """The customer has opted in to having their open emails tracked."""
  OPTED_IN
  """The customer has opted out of having their open emails tracked."""
  OPTED_OUT
}

"""
Information that describes when a customer consented to
        receiving marketing material by email.
"""
input Shopify_CustomerEmailMarketingConsentInput {
  """
  The customer opt-in level at the time of subscribing to marketing material.
  """
  marketingOptInLevel: Shopify_CustomerMarketingOptInLevel
  """
  The current marketing state associated with the customer's email.
            If the customer doesn't have an email, then this field is `null`.
  """
  marketingState: Shopify_CustomerEmailMarketingState!
  """
  The latest date and time when the customer consented or objected to
            receiving marketing material by email.
  """
  consentUpdatedAt: DateTime
}

"""
The record of when a customer consented to receive marketing material by email.
"""
type Shopify_CustomerEmailMarketingConsentState {
  """
  The date and time at which the customer consented to receive marketing material by email.
  The customer's consent state reflects the consent record with the most recent `consent_updated_at` date.
  If no date is provided, then the date and time at which the consent information was sent is used.
  """
  consentUpdatedAt: DateTime
  """
  The marketing subscription opt-in level, as described by the M3AAWG best practices guidelines,
  that the customer gave when they consented to receive marketing material by email.
  """
  marketingOptInLevel: Shopify_CustomerMarketingOptInLevel
  """The current email marketing state for the customer."""
  marketingState: Shopify_CustomerEmailMarketingState!
}

"""The email consent information to update for a given customer ID."""
input Shopify_CustomerEmailMarketingConsentUpdateInput {
  """
  The ID of the customer for which to update the email marketing consent
  information. The customer must have a unique email address associated to the
  record. If not, add the email address using the `customerUpdate` mutation first.
  """
  customerId: ID!
  """
  The marketing consent information when the customer consented to receiving marketing material by email.
  """
  emailMarketingConsent: Shopify_CustomerEmailMarketingConsentInput!
}

"""Return type for `customerEmailMarketingConsentUpdate` mutation."""
type Shopify_CustomerEmailMarketingConsentUpdatePayload {
  """The updated customer."""
  customer: Shopify_Customer
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_CustomerEmailMarketingConsentUpdateUserError!]!
}

"""
An error that occurs during the execution of `CustomerEmailMarketingConsentUpdate`.
"""
type Shopify_CustomerEmailMarketingConsentUpdateUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_CustomerEmailMarketingConsentUpdateUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `CustomerEmailMarketingConsentUpdateUserError`.
"""
enum Shopify_CustomerEmailMarketingConsentUpdateUserErrorCode {
  """The input value is invalid."""
  INVALID
  """The input value isn't included in the list."""
  INCLUSION
  """Unexpected internal error happened."""
  INTERNAL_ERROR
  """Missing a required argument."""
  MISSING_ARGUMENT
}

"""The possible email marketing states for a customer."""
enum Shopify_CustomerEmailMarketingState {
  """The customer isn't subscribed to email marketing."""
  NOT_SUBSCRIBED
  """The customer is in the process of subscribing to email marketing."""
  PENDING
  """The customer is subscribed to email marketing."""
  SUBSCRIBED
  """
  The customer isn't currently subscribed to email marketing but was previously subscribed.
  """
  UNSUBSCRIBED
  """
  The customer's personal data is erased. This value is internally-set and read-only.
  """
  REDACTED
  """The customer’s email address marketing state is invalid."""
  INVALID
}

"""Return type for `customerGenerateAccountActivationUrl` mutation."""
type Shopify_CustomerGenerateAccountActivationUrlPayload {
  """The generated account activation URL."""
  accountActivationUrl: URL
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
Provides the fields and values to use when creating or updating a customer.
"""
input Shopify_CustomerInput {
  """The addresses for a customer."""
  addresses: [Shopify_MailingAddressInput!]
  """The unique email address of the customer."""
  email: String
  """The customer's first name."""
  firstName: String
  """The ID of the customer to update."""
  id: ID
  """The customer's last name."""
  lastName: String
  """The customer's locale."""
  locale: String
  """Additional metafields to associate to the customer."""
  metafields: [Shopify_MetafieldInput!]
  """A note about the customer."""
  note: String
  """The unique phone number for the customer."""
  phone: String
  """The private metafields to associate with the customer."""
  privateMetafields: [Shopify_PrivateMetafieldInput!]
  """
  A list of tags to associate with the customer. Can be an array or a
  comma-separated list. Example values: `["tag1", "tag2", "tag3"]`, `"tag1, tag2, tag3"`
  
  Updating `tags` overwrites any existing tags that were previously added to the
  customer. To add new tags without overwriting
  existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
  mutation.
  """
  tags: [String!]
  """
  Information that describes when the customer consented to receiving marketing
          material by email. The `email` field is required when creating a customer with email marketing
          consent information.
  """
  emailMarketingConsent: Shopify_CustomerEmailMarketingConsentInput
  """
  The marketing consent information when the customer consented to receiving marketing
          material by SMS. The `phone` field is required when creating a customer with SMS
          marketing consent information.
  """
  smsMarketingConsent: Shopify_CustomerSmsMarketingConsentInput
  """Whether the customer is exempt from paying taxes on their order."""
  taxExempt: Boolean
  """The list of tax exemptions to apply to the customer."""
  taxExemptions: [Shopify_TaxExemption!]
}

"""Represents a customer's visiting activities on a shop's online store."""
type Shopify_CustomerJourney {
  """The position of the current order within the customer's order history."""
  customerOrderIndex: Int!
  """
  The amount of days between first session and order creation date. First
  session represents first session since the last order, or first session within
  the 30 day attribution window, if more than 30 days has passed since the last order.
  """
  daysToConversion: Int!
  """The customer's first session going into the shop."""
  firstVisit: Shopify_CustomerVisit!
  """The last session before an order is made."""
  lastVisit: Shopify_CustomerVisit
  """Events preceding a customer order, such as shop sessions."""
  moments: [Shopify_CustomerMoment!]!
}

"""Represents a customer's visiting activities on a shop's online store."""
type Shopify_CustomerJourneySummary {
  """
  The position of the current order within the customer's order history. Test orders aren't included.
  """
  customerOrderIndex: Int
  """
  The number of days between the first session and the order creation date. The
  first session represents the first session since the last order, or the first
  session within the 30 day attribution window, if more than 30 days have passed
  since the last order.
  """
  daysToConversion: Int
  """The customer's first session going into the shop."""
  firstVisit: Shopify_CustomerVisit
  """The last session before an order is made."""
  lastVisit: Shopify_CustomerVisit
  """The events preceding a customer's order, such as shop sessions."""
  moments(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CustomerMomentConnection
  """
  The total number of customer moments associated with this order. Returns null
  if the order is still in the process of being attributed.
  """
  momentsCount: Int
  """Whether the attributed sessions for the order have been created yet."""
  ready: Boolean!
}

"""
The possible values for the marketing subscription opt-in level enabled at the
time the customer consented to receive marketing information.

The levels are defined by [the M3AAWG best practices guideline
  document](https://www.m3aawg.org/sites/maawg/files/news/M3AAWG_Senders_BCP_Ver3-2015-02.pdf).
"""
enum Shopify_CustomerMarketingOptInLevel {
  """
  After providing their information, the customer receives marketing information without any
  intermediate steps.
  """
  SINGLE_OPT_IN
  """
  After providing their information, the customer receives a confirmation and is required to
  perform a intermediate step before receiving marketing information.
  """
  CONFIRMED_OPT_IN
  """
  The customer receives marketing information but how they were opted in is unknown.
  """
  UNKNOWN
}

"""
Represents a session preceding an order, often used for building a timeline of events leading to an order.
"""
interface Shopify_CustomerMoment {
  """The date and time when the customer's session occurred."""
  occurredAt: DateTime!
}

"""
An auto-generated type for paginating through multiple CustomerMoments.
"""
type Shopify_CustomerMomentConnection {
  """A list of edges."""
  edges: [Shopify_CustomerMomentEdge!]!
  """A list of the nodes contained in CustomerMomentEdge."""
  nodes: [Shopify_CustomerMoment!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one CustomerMoment and a cursor during pagination.
"""
type Shopify_CustomerMomentEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of CustomerMomentEdge."""
  node: Shopify_CustomerMoment!
}

"""All possible instruments for CustomerPaymentMethods."""
union Shopify_CustomerPaymentInstrument = Shopify_CustomerCreditCard | Shopify_CustomerPaypalBillingAgreement | Shopify_CustomerShopPayAgreement

"""The billing address of a payment instrument."""
type Shopify_CustomerPaymentInstrumentBillingAddress {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String
  """The name of the city, district, village, or town."""
  city: String
  """The name of the country."""
  country: String
  """
  The two-letter code for the country of the address.
  For example, US.
  """
  countryCode: CountryCode
  """The name of the buyer of the address."""
  name: String
  """The region of the address, such as the province, state, or district."""
  province: String
  """
  The two-letter code for the region.
  For example, ON.
  """
  provinceCode: String
  """The zip or postal code of the address."""
  zip: String
}

"""A customer's payment method."""
type Shopify_CustomerPaymentMethod implements Shopify_Node {
  """The customer to whom the payment method belongs."""
  customer: Shopify_Customer
  """The ID of this payment method."""
  id: ID!
  """The instrument for this payment method."""
  instrument: Shopify_CustomerPaymentInstrument
  """The time that the payment method was revoked."""
  revokedAt: DateTime
  """The revocation reason for this payment method."""
  revokedReason: Shopify_CustomerPaymentMethodRevocationReason
  """List Subscription Contracts."""
  subscriptionContracts(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionContractConnection!
}

"""
An auto-generated type for paginating through multiple CustomerPaymentMethods.
"""
type Shopify_CustomerPaymentMethodConnection {
  """A list of edges."""
  edges: [Shopify_CustomerPaymentMethodEdge!]!
  """A list of the nodes contained in CustomerPaymentMethodEdge."""
  nodes: [Shopify_CustomerPaymentMethod!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `customerPaymentMethodCreditCardCreate` mutation."""
type Shopify_CustomerPaymentMethodCreditCardCreatePayload {
  """The customer payment method."""
  customerPaymentMethod: Shopify_CustomerPaymentMethod
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `customerPaymentMethodCreditCardUpdate` mutation."""
type Shopify_CustomerPaymentMethodCreditCardUpdatePayload {
  """The customer payment method."""
  customerPaymentMethod: Shopify_CustomerPaymentMethod
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An auto-generated type which holds one CustomerPaymentMethod and a cursor during pagination.
"""
type Shopify_CustomerPaymentMethodEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of CustomerPaymentMethodEdge."""
  node: Shopify_CustomerPaymentMethod!
}

"""Return type for `customerPaymentMethodGetUpdateUrl` mutation."""
type Shopify_CustomerPaymentMethodGetUpdateUrlPayload {
  """The URL to redirect the customer to update the payment method."""
  updatePaymentMethodUrl: URL
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_CustomerPaymentMethodGetUpdateUrlUserError!]!
}

"""
An error that occurs during the execution of `CustomerPaymentMethodGetUpdateUrl`.
"""
type Shopify_CustomerPaymentMethodGetUpdateUrlUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_CustomerPaymentMethodGetUpdateUrlUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `CustomerPaymentMethodGetUpdateUrlUserError`.
"""
enum Shopify_CustomerPaymentMethodGetUpdateUrlUserErrorCode {
  """Payment method doesn't exist."""
  PAYMENT_METHOD_DOES_NOT_EXIST
  """Invalid payment instrument."""
  INVALID_INSTRUMENT
  """Too many requests."""
  TOO_MANY_REQUESTS
  """Customer doesn't exist."""
  CUSTOMER_DOES_NOT_EXIST
}

"""
Return type for `customerPaymentMethodPaypalBillingAgreementCreate` mutation.
"""
type Shopify_CustomerPaymentMethodPaypalBillingAgreementCreatePayload {
  """The customer payment method."""
  customerPaymentMethod: Shopify_CustomerPaymentMethod
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_CustomerPaymentMethodUserError!]!
}

"""
Return type for `customerPaymentMethodPaypalBillingAgreementUpdate` mutation.
"""
type Shopify_CustomerPaymentMethodPaypalBillingAgreementUpdatePayload {
  """The customer payment method."""
  customerPaymentMethod: Shopify_CustomerPaymentMethod
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_CustomerPaymentMethodUserError!]!
}

"""Return type for `customerPaymentMethodRemoteCreate` mutation."""
type Shopify_CustomerPaymentMethodRemoteCreatePayload {
  """The customer payment method."""
  customerPaymentMethod: Shopify_CustomerPaymentMethod
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_CustomerPaymentMethodRemoteUserError!]!
}

"""
Return type for `customerPaymentMethodRemoteCreditCardCreate` mutation.
"""
type Shopify_CustomerPaymentMethodRemoteCreditCardCreatePayload {
  """The customer payment method."""
  customerPaymentMethod: Shopify_CustomerPaymentMethod
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_CustomerPaymentMethodUserError!]!
}

"""
Input for a remote gateway payment method, only one remote reference permitted.
"""
input Shopify_CustomerPaymentMethodRemoteInput {
  """Input containing the fields for a remote stripe payment method."""
  stripePaymentMethod: Shopify_RemoteStripePaymentMethodInput
  """The input fields for a remote authorize net customer profile."""
  authorizeNetCustomerPaymentProfile: Shopify_RemoteAuthorizeNetCustomerPaymentProfileInput
  """The input fields for a remote Braintree customer profile."""
  braintreePaymentMethod: Shopify_RemoteBraintreePaymentMethodInput
}

"""Represents an error in the input of a mutation."""
type Shopify_CustomerPaymentMethodRemoteUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_CustomerPaymentMethodRemoteUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `CustomerPaymentMethodRemoteUserError`.
"""
enum Shopify_CustomerPaymentMethodRemoteUserErrorCode {
  """The input value is invalid."""
  INVALID
  """The input value needs to be blank."""
  PRESENT
  """The input value is already taken."""
  TAKEN
  """Exactly one remote reference is required."""
  EXACTLY_ONE_REMOTE_REFERENCE_REQUIRED
  """Authorize.net is not enabled for subscriptions."""
  AUTHORIZE_NET_NOT_ENABLED_FOR_SUBSCRIPTIONS
  """Braintree is not enabled for subscriptions."""
  BRAINTREE_NOT_ENABLED_FOR_SUBSCRIPTIONS
}

"""The revocation reason types for a customer payment method."""
enum Shopify_CustomerPaymentMethodRevocationReason {
  """The Authorize.net payment gateway is not enabled."""
  AUTHORIZE_NET_GATEWAY_NOT_ENABLED
  """
  Authorize.net did not return any payment methods. Make sure that the correct Authorize.net account is linked.
  """
  AUTHORIZE_NET_RETURNED_NO_PAYMENT_METHOD
  """The credit card failed to update."""
  FAILED_TO_UPDATE_CREDIT_CARD
  """Failed to contact the Stripe API."""
  STRIPE_API_AUTHENTICATION_ERROR
  """Invalid request. Failed to retrieve payment method from Stripe."""
  STRIPE_API_INVALID_REQUEST_ERROR
  """The Stripe payment gateway is not enabled."""
  STRIPE_GATEWAY_NOT_ENABLED
  """
  Stripe did not return any payment methods. Make sure that the correct Stripe account is linked.
  """
  STRIPE_RETURNED_NO_PAYMENT_METHOD
  """The Stripe payment method type should be card."""
  STRIPE_PAYMENT_METHOD_NOT_CARD
  """Failed to contact Braintree API."""
  BRAINTREE_API_AUTHENTICATION_ERROR
  """The Braintree payment gateway is not enabled."""
  BRAINTREE_GATEWAY_NOT_ENABLED
  """
  Braintree returned no payment methods. Make sure the correct Braintree account is linked.
  """
  BRAINTREE_RETURNED_NO_PAYMENT_METHOD
  """
  The Braintree payment method type should be a credit card or Apple Pay card.
  """
  BRAINTREE_PAYMENT_METHOD_NOT_CARD
  """The payment method was manually revoked."""
  MANUALLY_REVOKED
  """
  The payment method was replaced with an existing payment method. The
  associated contracts have been migrated to the other payment method.
  """
  MERGED
}

"""Return type for `customerPaymentMethodRevoke` mutation."""
type Shopify_CustomerPaymentMethodRevokePayload {
  """The ID of the revoked customer payment method."""
  revokedCustomerPaymentMethodId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `customerPaymentMethodSendUpdateEmail` mutation."""
type Shopify_CustomerPaymentMethodSendUpdateEmailPayload {
  """The customer to whom an update payment method email was sent."""
  customer: Shopify_Customer
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Represents an error in the input of a mutation."""
type Shopify_CustomerPaymentMethodUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_CustomerPaymentMethodUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `CustomerPaymentMethodUserError`.
"""
enum Shopify_CustomerPaymentMethodUserErrorCode {
  """The input value is invalid."""
  INVALID
  """The input value needs to be blank."""
  PRESENT
  """The input value is already taken."""
  TAKEN
}

"""Represents a PayPal instrument for customer payment method."""
type Shopify_CustomerPaypalBillingAgreement {
  """The billing address of this payment method."""
  billingAddress: Shopify_CustomerPaymentInstrumentBillingAddress
  """Whether the PayPal billing agreement is inactive."""
  inactive: Boolean!
  """
  Whether the payment method can be revoked.The payment method can be revoked if there are no active subscription contracts.
  """
  isRevocable: Boolean!
  """The customers's PayPal account email address."""
  paypalAccountEmail: String
}

"""A phone number."""
type Shopify_CustomerPhoneNumber {
  """Whether the customer has subscribed to SMS marketing material."""
  marketingState: Shopify_CustomerSmsMarketingState!
  """A customer's phone number."""
  phoneNumber: String!
}

"""The valid tiers for the predicted spend of a customer with a shop."""
enum Shopify_CustomerPredictedSpendTier {
  """
  The customer's spending is predicted to be in the top spending range for the shop in the following year.
  """
  HIGH
  """
  The customer's spending is predicted to be in the normal spending range for the shop in the following year.
  """
  MEDIUM
  """
  The customer's spending is predicted to be zero, or in the lowest spending range for the shop in the following year.
  """
  LOW
}

"""
The possible product subscription states for a customer, as defined by the customer's subscription contracts.
"""
enum Shopify_CustomerProductSubscriberStatus {
  """The customer has at least one active subscription contract."""
  ACTIVE
  """
  The customer's last subscription contract was cancelled and there are no other active or paused
  subscription contracts.
  """
  CANCELLED
  """
  The customer's last subscription contract expired and there are no other active or paused
  subscription contracts.
  """
  EXPIRED
  """
  The customer's last subscription contract failed and there are no other active or paused
  subscription contracts.
  """
  FAILED
  """The customer has never had a subscription contract."""
  NEVER_SUBSCRIBED
  """
  The customer has at least one paused subscription contract and there are no other active
  subscription contracts.
  """
  PAUSED
}

"""Return type for `customerRemoveTaxExemptions` mutation."""
type Shopify_CustomerRemoveTaxExemptionsPayload {
  """The updated customer."""
  customer: Shopify_Customer
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `customerReplaceTaxExemptions` mutation."""
type Shopify_CustomerReplaceTaxExemptionsPayload {
  """The updated customer."""
  customer: Shopify_Customer
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""The set of valid sort keys for the CustomerSavedSearch query."""
enum Shopify_CustomerSavedSearchSortKeys {
  """Sort by the `name` value."""
  NAME
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""The member of a segment."""
type Shopify_CustomerSegmentMember {
  """The total amount of money that the member has spent on orders."""
  amountSpent: Shopify_MoneyV2
  """The member's default address."""
  defaultAddress: Shopify_MailingAddress
  """The member's default email address."""
  defaultEmailAddress: Shopify_CustomerEmailAddress
  """The member's default phone number."""
  defaultPhoneNumber: Shopify_CustomerPhoneNumber
  """
  The full name of the member, which is based on the values of the `first_name`
  and `last_name` fields. If the member's first name and last name aren't
  available, then the customer's email address is used. If the customer's email
  address isn't available, then the customer's phone number is used.
  """
  displayName: String!
  """The member's first name."""
  firstName: String
  """The member’s ID."""
  id: ID!
  """The member's last name."""
  lastName: String
  """The ID of the member's most recent order."""
  lastOrderId: ID
  """A note about the member."""
  note: String
  """The total number of orders that the member has made."""
  numberOfOrders: Shopify_UnsignedInt64
}

"""The connection type for the `CustomerSegmentMembers` object."""
type Shopify_CustomerSegmentMemberConnection {
  """A list of edges."""
  edges: [Shopify_CustomerSegmentMemberEdge!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
  """The statistics for a given segment."""
  statistics: Shopify_SegmentStatistics!
}

"""
An auto-generated type which holds one CustomerSegmentMember and a cursor during pagination.
"""
type Shopify_CustomerSegmentMemberEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of CustomerSegmentMemberEdge."""
  node: Shopify_CustomerSegmentMember!
}

"""
A job to determine a list of members, such as customers, that are associated with an individual segment.
"""
type Shopify_CustomerSegmentMembersQuery implements Shopify_JobResult & Shopify_Node {
  """The current total number of members in a given segment."""
  currentCount: Int!
  """This indicates if the job is still queued or has been run."""
  done: Boolean!
  """
  A globally-unique identifier that's returned when running an asynchronous mutation.
  """
  id: ID!
}

"""Return type for `customerSegmentMembersQueryCreate` mutation."""
type Shopify_CustomerSegmentMembersQueryCreatePayload {
  """The newly created customer segment members query."""
  customerSegmentMembersQuery: Shopify_CustomerSegmentMembersQuery
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_CustomerSegmentMembersQueryUserError!]!
}

"""
Provides the fields and values to use when creating a customer segment members query.
"""
input Shopify_CustomerSegmentMembersQueryInput {
  """The ID of the segment."""
  segmentId: ID
  """The query to use to filter the members."""
  query: String
  """
  Reverse the order of the list. The sorting behaviour defaults to ascending order.
  """
  reverse: Boolean = false
  """Sort the list by a given key."""
  sortKey: String
}

"""Represents a customer segment members query custom error."""
type Shopify_CustomerSegmentMembersQueryUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_CustomerSegmentMembersQueryUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `CustomerSegmentMembersQueryUserError`.
"""
enum Shopify_CustomerSegmentMembersQueryUserErrorCode {
  """The input value is invalid."""
  INVALID
}

"""Represents a Shop Pay card instrument for customer payment method."""
type Shopify_CustomerShopPayAgreement {
  """Whether the card is about to expire."""
  expiresSoon: Boolean!
  """The expiry month of the card."""
  expiryMonth: Int!
  """The expiry year of the card."""
  expiryYear: Int!
  """Whether the Shop Pay billing agreement is inactive."""
  inactive: Boolean!
  """
  The payment method can be revoked if there are no active subscription contracts.
  """
  isRevocable: Boolean!
  """The last 4 digits of the card."""
  lastDigits: String!
  """The masked card number with only the last 4 digits displayed."""
  maskedNumber: String!
  """The name of the card holder."""
  name: String!
}

"""
An error that occurs during execution of an SMS marketing consent mutation.
"""
type Shopify_CustomerSmsMarketingConsentError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_CustomerSmsMarketingConsentErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `CustomerSmsMarketingConsentError`.
"""
enum Shopify_CustomerSmsMarketingConsentErrorCode {
  """The input value is invalid."""
  INVALID
  """The input value isn't included in the list."""
  INCLUSION
  """Unexpected internal error happened."""
  INTERNAL_ERROR
  """Missing a required argument."""
  MISSING_ARGUMENT
}

"""
The marketing consent information when the customer consented to
        receiving marketing material by SMS.
"""
input Shopify_CustomerSmsMarketingConsentInput {
  """
  The marketing subscription opt-in level that was set when the customer consented to receive marketing information.
  """
  marketingOptInLevel: Shopify_CustomerMarketingOptInLevel
  """The current SMS marketing state for the customer."""
  marketingState: Shopify_CustomerSmsMarketingState!
  """
  The date and time when the customer consented to receive marketing material by SMS.
  If no date is provided, then the date and time when the consent information was sent is used.
  """
  consentUpdatedAt: DateTime
}

"""
The record of when a customer consented to receive marketing material by SMS.

The customer's consent state reflects the record with the most recent date when consent was updated.
"""
type Shopify_CustomerSmsMarketingConsentState {
  """
  The source from which the SMS marketing information for the customer was collected.
  """
  consentCollectedFrom: Shopify_CustomerConsentCollectedFrom
  """
  The date and time when the customer consented to receive marketing material by SMS.
  If no date is provided, then the date and time when the consent information was sent is used.
  """
  consentUpdatedAt: DateTime
  """
  The marketing subscription opt-in level that was set when the customer consented to receive marketing information.
  """
  marketingOptInLevel: Shopify_CustomerMarketingOptInLevel!
  """The current SMS marketing state for the customer."""
  marketingState: Shopify_CustomerSmsMarketingState!
}

"""
The SMS marketing consent information to update for a given customer ID.
"""
input Shopify_CustomerSmsMarketingConsentUpdateInput {
  """
  The ID of the customer to update the SMS marketing consent information for.
  The customer must have a unique phone number associated to the record. If not,
  add the phone number using the `customerUpdate` mutation first.
  """
  customerId: ID!
  """
  The marketing consent information when the customer consented to receiving marketing material by SMS.
  """
  smsMarketingConsent: Shopify_CustomerSmsMarketingConsentInput!
}

"""Return type for `customerSmsMarketingConsentUpdate` mutation."""
type Shopify_CustomerSmsMarketingConsentUpdatePayload {
  """The updated customer."""
  customer: Shopify_Customer
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_CustomerSmsMarketingConsentError!]!
}

"""The valid SMS marketing states for a customer’s phone number."""
enum Shopify_CustomerSmsMarketingState {
  """The customer hasn't subscribed to SMS marketing."""
  NOT_SUBSCRIBED
  """The customer is in the process of subscribing to SMS marketing."""
  PENDING
  """The customer is subscribed to SMS marketing."""
  SUBSCRIBED
  """
  The customer isn't currently subscribed to SMS marketing but was previously subscribed.
  """
  UNSUBSCRIBED
  """
  The customer's personal data is erased. This value is internally-set and read-only.
  """
  REDACTED
}

"""The set of valid sort keys for the Customer query."""
enum Shopify_CustomerSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `name` value."""
  NAME
  """Sort by the `location` value."""
  LOCATION
  """Sort by the `orders_count` value."""
  ORDERS_COUNT
  """Sort by the `last_order_date` value."""
  LAST_ORDER_DATE
  """Sort by the `total_spent` value."""
  TOTAL_SPENT
  """Sort by the `updated_at` value."""
  UPDATED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""The valid values for the state of a customer's account with a shop."""
enum Shopify_CustomerState {
  """The customer declined the email invite to create an account."""
  DECLINED
  """
  The customer doesn't have an active account. Customer accounts can be disabled from the Shopify admin at any time.
  """
  DISABLED
  """The customer has created an account."""
  ENABLED
  """The customer has received an email invite to create an account."""
  INVITED
}

"""A customer's computed statistics."""
type Shopify_CustomerStatistics {
  """The predicted spend tier of a customer with a shop."""
  predictedSpendTier: Shopify_CustomerPredictedSpendTier
}

"""Return type for `customerUpdateDefaultAddress` mutation."""
type Shopify_CustomerUpdateDefaultAddressPayload {
  """The customer whose address was updated."""
  customer: Shopify_Customer
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `customerUpdate` mutation."""
type Shopify_CustomerUpdatePayload {
  """The updated customer."""
  customer: Shopify_Customer
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
Represents a customer's session visiting a shop's online store, including
information about the marketing activity attributed to starting the session.
"""
type Shopify_CustomerVisit implements Shopify_CustomerMoment & Shopify_Node {
  """A globally-unique identifier."""
  id: ID!
  """URL of the first page the customer landed on for the session."""
  landingPage: URL
  """
  Landing page information with URL linked in HTML. For example, the first page
  the customer visited was store.myshopify.com/products/1.
  """
  landingPageHtml: Shopify_HTML
  """
  Represent actions taken by an app, on behalf of a merchant,
  to market Shopify resources such as products, collections, and discounts.
  """
  marketingEvent: Shopify_MarketingEvent
  """The date and time when the customer's session occurred."""
  occurredAt: DateTime!
  """
  Marketing referral code from the link that the customer clicked to visit the store.
  Supports the following URL attributes: _ref_, _source_, or _r_.
  For example, if the URL is myshopifystore.com/products/slide?ref=j2tj1tn2, then this value is j2tj1tn2.
  """
  referralCode: String
  """Referral information with URLs linked in HTML."""
  referralInfoHtml: Shopify_FormattedString!
  """
  Webpage where the customer clicked a link that sent them to the online store.
  For example, _https://randomblog.com/page1_ or _android-app://com.google.android.gm_.
  """
  referrerUrl: URL
  """
  Source from which the customer visited the store, such as a platform (Facebook, Google), email, direct,
  a website domain, QR code, or unknown.
  """
  source: String!
  """Describes the source explicitly for first or last session."""
  sourceDescription: String
  """Type of marketing tactic."""
  sourceType: Shopify_MarketingTactic
  """
  A set of UTM parameters gathered from the URL parameters of the referrer.
  """
  utmParameters: Shopify_UTMParameters
}

"""
This type returns the information about the product and product variant from a customer visit.
"""
type Shopify_CustomerVisitProductInfo {
  """
  The product information. If `null`, then the product was deleted from the store.
  """
  product: Shopify_Product
  """The quantity of the product that the customer requested."""
  quantity: Int!
  """The product variant information, if the product variant exists."""
  variant: Shopify_ProductVariant
}

"""
An auto-generated type for paginating through multiple CustomerVisitProductInfos.
"""
type Shopify_CustomerVisitProductInfoConnection {
  """A list of edges."""
  edges: [Shopify_CustomerVisitProductInfoEdge!]!
  """A list of the nodes contained in CustomerVisitProductInfoEdge."""
  nodes: [Shopify_CustomerVisitProductInfo!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one CustomerVisitProductInfo and a cursor during pagination.
"""
type Shopify_CustomerVisitProductInfoEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of CustomerVisitProductInfoEdge."""
  node: Shopify_CustomerVisitProductInfo!
}

"""The input fields for a custom shipping package used to pack shipment."""
input Shopify_CustomShippingPackageInput {
  """Weight of the empty shipping package."""
  weight: Shopify_WeightInput
  """Outside dimensions of the empty shipping package."""
  dimensions: Shopify_ObjectDimensionsInput
  """
  The default package is the one used to calculate shipping costs on checkout.
  """
  default: Boolean = false
  """Descriptive name for the package."""
  name: String
  """Type of package."""
  type: Shopify_ShippingPackageType
}

"""
Represents an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)-encoded date string.
For example, September 7, 2019 is represented as `"2019-07-16"`.
"""
scalar Date

"""
Represents an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)-encoded date and time string.
For example, 3:50 pm on September 7, 2019 in the time zone of UTC (Coordinated Universal Time) is
represented as `"2019-09-07T15:50:00Z`".
"""
scalar DateTime

"""Days of the week from Monday to Sunday."""
enum Shopify_DayOfTheWeek {
  """Monday."""
  MONDAY
  """Tuesday."""
  TUESDAY
  """Wednesday."""
  WEDNESDAY
  """Thursday."""
  THURSDAY
  """Friday."""
  FRIDAY
  """Saturday."""
  SATURDAY
  """Sunday."""
  SUNDAY
}

"""
A signed decimal number, which supports arbitrary precision and is serialized as a string.

Example values: `"29.99"`, `"29.999"`.
"""
scalar Shopify_Decimal

"""
A token that delegates a set of scopes from the original permission.

To learn more about creating delegate access tokens, refer to
[Delegate OAuth access tokens to subsystems]
(https://shopify.dev/apps/auth/oauth/delegate-access-tokens).
"""
type Shopify_DelegateAccessToken {
  """The list of permissions associated with the token."""
  accessScopes: [String!]!
  """The issued delegate access token."""
  accessToken: String!
  """The date and time when the delegate access token was created."""
  createdAt: DateTime!
}

"""Return type for `delegateAccessTokenCreate` mutation."""
type Shopify_DelegateAccessTokenCreatePayload {
  """The delegate access token."""
  delegateAccessToken: Shopify_DelegateAccessToken
  """The user's shop."""
  shop: Shopify_Shop!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DelegateAccessTokenCreateUserError!]!
}

"""
An error that occurs during the execution of `DelegateAccessTokenCreate`.
"""
type Shopify_DelegateAccessTokenCreateUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_DelegateAccessTokenCreateUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `DelegateAccessTokenCreateUserError`.
"""
enum Shopify_DelegateAccessTokenCreateUserErrorCode {
  """The access scope can't be empty."""
  EMPTY_ACCESS_SCOPE
  """The parent access token can't be a delegate token."""
  DELEGATE_ACCESS_TOKEN
  """The expires_in value must be greater than 0."""
  NEGATIVE_EXPIRES_IN
  """The delegate token can't expire after the parent token."""
  EXPIRES_AFTER_PARENT
  """The parent access token can't have a refresh token."""
  REFRESH_TOKEN
  """Persistence failed."""
  PERSISTENCE_FAILED
  """Unknown scopes."""
  UNKNOWN_SCOPES
}

"""The input fields for a delegate access token."""
input Shopify_DelegateAccessTokenInput {
  """The list of scopes that will be delegated to the new access token."""
  delegateAccessScope: [String!]!
  """
  The amount of time, in seconds, after which the delegate access token is no longer valid.
  """
  expiresIn: Int
}

"""
Deletion events chronicle the destruction of resources (e.g. products and collections).
Once deleted, the deletion event is the only trace of the original's existence,
as the resource itself has been removed and can no longer be accessed.
"""
type Shopify_DeletionEvent {
  """
  The date and time when the deletion event for the related resource was generated.
  """
  occurredAt: DateTime!
  """The id of the resource that was deleted."""
  subjectId: ID!
  """The type of resource that was deleted."""
  subjectType: Shopify_DeletionEventSubjectType!
}

"""An auto-generated type for paginating through multiple DeletionEvents."""
type Shopify_DeletionEventConnection {
  """A list of edges."""
  edges: [Shopify_DeletionEventEdge!]!
  """A list of the nodes contained in DeletionEventEdge."""
  nodes: [Shopify_DeletionEvent!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DeletionEvent and a cursor during pagination.
"""
type Shopify_DeletionEventEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of DeletionEventEdge."""
  node: Shopify_DeletionEvent!
}

"""The set of valid sort keys for the DeletionEvent query."""
enum Shopify_DeletionEventSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""The supported subject types of deletion events."""
enum Shopify_DeletionEventSubjectType {
  COLLECTION
  PRODUCT
}

"""
A shipping service and a list of countries that the service is available for.
"""
type Shopify_DeliveryAvailableService {
  """The countries the service provider ships to."""
  countries: Shopify_DeliveryCountryCodesOrRestOfWorld!
  """The name of the service."""
  name: String!
}

"""A shipping service provider or a carrier account."""
type Shopify_DeliveryCarrierService implements Shopify_Node {
  """The list of services offered for given destinations."""
  availableServicesForCountries(
    """The locations of the possible origins."""
    origins: [ID!]
    """The country codes of the destinations."""
    countryCodes: [CountryCode!]
    """Whether to use 'Rest of World' as the destination."""
    restOfWorld: Boolean!
  ): [Shopify_DeliveryAvailableService!]!
  """
  The properly formatted name of the shipping service provider, ready to display.
  """
  formattedName: String
  """The logo of the service provider."""
  icon: Shopify_Image!
  """A globally-unique identifier."""
  id: ID!
  """The name of the shipping service provider."""
  name: String
}

"""A carrier service and the associated list of shop locations."""
type Shopify_DeliveryCarrierServiceAndLocations {
  """The carrier service."""
  carrierService: Shopify_DeliveryCarrierService!
  """The list of locations that support this carrier service."""
  locations: [Shopify_Location!]!
}

"""
A condition that must pass for a delivery method definition to be applied to an order.
"""
type Shopify_DeliveryCondition implements Shopify_Node {
  """The value (weight or price) that the condition field is compared to."""
  conditionCriteria: Shopify_DeliveryConditionCriteria!
  """The field to compare the criterion value against, using the operator."""
  field: Shopify_DeliveryConditionField!
  """A globally-unique identifier."""
  id: ID!
  """The operator to compare the field and criterion value."""
  operator: Shopify_DeliveryConditionOperator!
}

"""The value (weight or price) that the condition field is compared to."""
union Shopify_DeliveryConditionCriteria = Shopify_MoneyV2 | Shopify_Weight

"""The field type that the condition will be applied to."""
enum Shopify_DeliveryConditionField {
  """The condition will check against the total weight of the order."""
  TOTAL_WEIGHT
  """The condition will check against the total price of the order."""
  TOTAL_PRICE
}

"""The operator to use to determine if the condition passes."""
enum Shopify_DeliveryConditionOperator {
  """
  The condition will check whether the field is greater than or equal to the criterion.
  """
  GREATER_THAN_OR_EQUAL_TO
  """
  The condition will check if the field is less than or equal to the criterion.
  """
  LESS_THAN_OR_EQUAL_TO
}

"""A country that is used to define a shipping zone."""
type Shopify_DeliveryCountry implements Shopify_Node {
  """
  A two-letter country code in ISO 3166-1 alpha-2 standard.
  It also includes a flag indicating whether the country should be
  a part of the 'Rest Of World' shipping zone.
  """
  code: Shopify_DeliveryCountryCodeOrRestOfWorld!
  """A globally-unique identifier."""
  id: ID!
  """The full name of the country."""
  name: String!
  """The list of regions associated with this country."""
  provinces: [Shopify_DeliveryProvince!]!
  """
  The translated name of the country. The translation returned is based on the system's locale.
  """
  translatedName: String!
}

"""The country details and the associated shipping zone."""
type Shopify_DeliveryCountryAndZone {
  """The country details."""
  country: Shopify_DeliveryCountry!
  """The name of the shipping zone."""
  zone: String!
}

"""
The country code and whether the country is a part of the 'Rest Of World' shipping zone.
"""
type Shopify_DeliveryCountryCodeOrRestOfWorld {
  """The country code in the ISO 3166-1 alpha-2 format."""
  countryCode: CountryCode
  """Whether the country is a part of the 'Rest of World' shipping zone."""
  restOfWorld: Boolean!
}

"""
The list of country codes and information whether the countries
are a part of the 'Rest Of World' shipping zone.
"""
type Shopify_DeliveryCountryCodesOrRestOfWorld {
  """List of applicable country codes in the ISO 3166-1 alpha-2 format."""
  countryCodes: [CountryCode!]!
  """Whether the countries are a part of the 'Rest of World' shipping zone."""
  restOfWorld: Boolean!
}

"""The input fields to specify a country."""
input Shopify_DeliveryCountryInput {
  """The country code of the country in the ISO 3166-1 alpha-2 format."""
  code: CountryCode
  """Whether the country is a part of the 'Rest of World' shipping zone."""
  restOfWorld: Boolean
  """The regions associated with this country."""
  provinces: [Shopify_DeliveryProvinceInput!]
  """Associate all available provinces with this country."""
  includeAllProvinces: Boolean
}

"""
Whether the shop is blocked from converting to full multi-location delivery
profiles mode. If the shop is blocked, then the blocking reasons are also returned.
"""
type Shopify_DeliveryLegacyModeBlocked {
  """
  Whether the shop can convert to full multi-location delivery profiles mode.
  """
  blocked: Boolean!
  """
  The reasons why the shop is blocked from converting to full multi-location delivery profiles mode.
  """
  reasons: [Shopify_DeliveryLegacyModeBlockedReason!]
}

"""
Reasons the shop is blocked from converting to full multi-location delivery profiles mode.
"""
enum Shopify_DeliveryLegacyModeBlockedReason {
  """
  Multi-Location mode is disabled. The shop can't convert to full multi-location delivery profiles mode.
  """
  MULTI_LOCATION_DISABLED @deprecated(reason: "All shops are now using multi-location mode.")
  """There are no locations for this store that can fulfill online orders."""
  NO_LOCATIONS_FULFILLING_ONLINE_ORDERS
}

"""Local pickup settings associated with a location."""
type Shopify_DeliveryLocalPickupSettings {
  """Additional instructions or information related to the local pickup."""
  instructions: String!
  """The estimated pickup time to show customers at checkout."""
  pickupTime: Shopify_DeliveryLocalPickupTime!
}

"""
Possible pickup time values that a location enabled for local pickup can have.
"""
enum Shopify_DeliveryLocalPickupTime {
  """Usually ready in 1 hour."""
  ONE_HOUR
  """Usually ready in 2 hours."""
  TWO_HOURS
  """Usually ready in 4 hours."""
  FOUR_HOURS
  """Usually ready in 24 hours."""
  TWENTY_FOUR_HOURS
  """Usually ready in 2-4 days."""
  TWO_TO_FOUR_DAYS
  """Usually ready in 5+ days."""
  FIVE_OR_MORE_DAYS
}

"""
A location group is a collection of locations. They share zones and delivery methods across delivery
profiles.
"""
type Shopify_DeliveryLocationGroup implements Shopify_Node {
  """A globally-unique identifier."""
  id: ID!
  """A list of all locations that are part of this location group."""
  locations(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_LocationSortKeys = NAME
    """
    Supported filter parameters:
     - `active`
     - `address1`
     - `address2`
     - `city`
     - `country`
     - `legacy`
     - `name`
     - `province`
     - `zip`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """If true, also include the legacy locations of fulfillment services."""
    includeLegacy: Boolean = false
    """If true, also include the locations that are deactivated."""
    includeInactive: Boolean = false
  ): Shopify_LocationConnection!
  """A count of all locations that are part of this location group."""
  locationsCount: Int!
}

"""
Links a location group with a zone and the associated method definitions.
"""
type Shopify_DeliveryLocationGroupZone {
  """The number of method definitions for the zone."""
  methodDefinitionCounts: Shopify_DeliveryMethodDefinitionCounts!
  """The method definitions associated to a zone and location group."""
  methodDefinitions(
    """Return only eligible or ineligible method definitions."""
    eligible: Boolean
    """Return only merchant or participant method definitions."""
    type: Shopify_DeliveryMethodDefinitionType
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_MethodDefinitionSortKeys = ID
  ): Shopify_DeliveryMethodDefinitionConnection!
  """The zone associated to a location group."""
  zone: Shopify_DeliveryZone!
}

"""
An auto-generated type for paginating through multiple DeliveryLocationGroupZones.
"""
type Shopify_DeliveryLocationGroupZoneConnection {
  """A list of edges."""
  edges: [Shopify_DeliveryLocationGroupZoneEdge!]!
  """A list of the nodes contained in DeliveryLocationGroupZoneEdge."""
  nodes: [Shopify_DeliveryLocationGroupZone!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DeliveryLocationGroupZone and a cursor during pagination.
"""
type Shopify_DeliveryLocationGroupZoneEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of DeliveryLocationGroupZoneEdge."""
  node: Shopify_DeliveryLocationGroupZone!
}

"""
The input fields for a delivery zone associated to a location group and profile.
"""
input Shopify_DeliveryLocationGroupZoneInput {
  """A globally-unique identifier of the zone."""
  id: ID
  """The name of the zone."""
  name: String
  """A list of countries to associate with the zone."""
  countries: [Shopify_DeliveryCountryInput!]
  """A list of method definitions to create."""
  methodDefinitionsToCreate: [Shopify_DeliveryMethodDefinitionInput!]
  """A list of method definitions to update."""
  methodDefinitionsToUpdate: [Shopify_DeliveryMethodDefinitionInput!]
}

"""A local pickup setting associated with a location."""
input Shopify_DeliveryLocationLocalPickupEnableInput {
  """The ID of the location associated with the location setting."""
  locationId: ID!
  """The time of the local pickup."""
  pickupTime: Shopify_DeliveryLocalPickupTime!
  """The instructions for the local pickup."""
  instructions: String
}

"""
Represents an error that happened when changing local pickup settings for a location.
"""
type Shopify_DeliveryLocationLocalPickupSettingsError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_DeliveryLocationLocalPickupSettingsErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `DeliveryLocationLocalPickupSettingsError`.
"""
enum Shopify_DeliveryLocationLocalPickupSettingsErrorCode {
  """
  Provided locationId is not for an active location belonging to this store.
  """
  ACTIVE_LOCATION_NOT_FOUND
  """An error occurred while changing the local pickup settings."""
  GENERIC_ERROR
}

"""The delivery method used by a fulfillment order."""
type Shopify_DeliveryMethod implements Shopify_Node {
  """A globally-unique identifier."""
  id: ID!
  """
  The maximum date and time by which the delivery is expected to be completed.
  """
  maxDeliveryDateTime: DateTime
  """The type of the delivery method."""
  methodType: Shopify_DeliveryMethodType!
  """
  The minimum date and time by which the delivery is expected to be completed.
  """
  minDeliveryDateTime: DateTime
}

"""
A method definition contains the delivery rate and the conditions that must be met for the method to be
applied.
"""
type Shopify_DeliveryMethodDefinition implements Shopify_Node {
  """Whether this method definition is active."""
  active: Boolean!
  """The description of the method definition."""
  description: String
  """A globally-unique identifier."""
  id: ID!
  """
  The method conditions that must pass for this method definition to be applied to an order.
  """
  methodConditions: [Shopify_DeliveryCondition!]!
  """The name of the method definition."""
  name: String!
  """
  The provided rate for this method definition, from a rate definition or participant.
  """
  rateProvider: Shopify_DeliveryRateProvider!
}

"""
An auto-generated type for paginating through multiple DeliveryMethodDefinitions.
"""
type Shopify_DeliveryMethodDefinitionConnection {
  """A list of edges."""
  edges: [Shopify_DeliveryMethodDefinitionEdge!]!
  """A list of the nodes contained in DeliveryMethodDefinitionEdge."""
  nodes: [Shopify_DeliveryMethodDefinition!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
The number of method definitions for a zone, separated into merchant-owned and participant definitions.
"""
type Shopify_DeliveryMethodDefinitionCounts {
  """The number of participant method definitions for the specified zone."""
  participantDefinitionsCount: Int!
  """
  The number of merchant-defined method definitions for the specified zone.
  """
  rateDefinitionsCount: Int!
}

"""
An auto-generated type which holds one DeliveryMethodDefinition and a cursor during pagination.
"""
type Shopify_DeliveryMethodDefinitionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of DeliveryMethodDefinitionEdge."""
  node: Shopify_DeliveryMethodDefinition!
}

"""The input fields for a method definition."""
input Shopify_DeliveryMethodDefinitionInput {
  """
  A globally-unique identifier of the method definition. Use only when updating a method definiton.
  """
  id: ID
  """The name of the method definition."""
  name: String
  """The description of the method definition."""
  description: String
  """Whether to use this method definition during rate calculation."""
  active: Boolean
  """A rate definition to apply to the method definition."""
  rateDefinition: Shopify_DeliveryRateDefinitionInput
  """A participant to apply to the method definition."""
  participant: Shopify_DeliveryParticipantInput
  """A list of weight conditions on the method definition."""
  weightConditionsToCreate: [Shopify_DeliveryWeightConditionInput!]
  """A list of price conditions on the method definition."""
  priceConditionsToCreate: [Shopify_DeliveryPriceConditionInput!]
  """A list of conditions to update on the method definition."""
  conditionsToUpdate: [Shopify_DeliveryUpdateConditionInput!]
}

"""The different types of method definitions to filter by."""
enum Shopify_DeliveryMethodDefinitionType {
  """A static merchant-defined rate."""
  MERCHANT
  """A dynamic participant rate."""
  PARTICIPANT
}

"""Possible method types that a delivery method can have."""
enum Shopify_DeliveryMethodType {
  """The order is shipped."""
  SHIPPING
  """The order is picked up by the customer."""
  PICK_UP
  """No delivery is needed."""
  NONE
  """The order is delivered to a retail store."""
  RETAIL
  """The order is delivered using a local delivery service."""
  LOCAL
}

"""
A participant defines carrier-calculated rates for shipping services
with a possible merchant-defined fixed fee or a percentage-of-rate fee.
"""
type Shopify_DeliveryParticipant implements Shopify_Node {
  """
  Whether to display new shipping services automatically to the customer when the service becomes available.
  """
  adaptToNewServicesFlag: Boolean!
  """The carrier used for this participant."""
  carrierService: Shopify_DeliveryCarrierService!
  """The merchant-defined fixed fee for this participant."""
  fixedFee: Shopify_MoneyV2
  """A globally-unique identifier."""
  id: ID!
  """
  The carrier-specific services offered by the participant, and whether each service is active.
  """
  participantServices: [Shopify_DeliveryParticipantService!]!
  """The merchant-defined percentage-of-rate fee for this participant."""
  percentageOfRateFee: Float!
}

"""The input fields for a participant."""
input Shopify_DeliveryParticipantInput {
  """The ID of the participant."""
  id: ID
  """The ID of the carrier service for this participant."""
  carrierServiceId: ID
  """The fixed feed that is defined by the merchant for this participant."""
  fixedFee: Shopify_MoneyInput
  """The merchant-defined percentage-of-rate fee for this participant."""
  percentageOfRateFee: Float
  """The list of shipping services offered by the participant."""
  participantServices: [Shopify_DeliveryParticipantServiceInput!]
  """
  Whether to automatically display new shipping services to the customer when a service becomes available.
  """
  adaptToNewServices: Boolean
}

"""A mail service provided by the participant."""
type Shopify_DeliveryParticipantService {
  """Whether the service is active."""
  active: Boolean!
  """The name of the service."""
  name: String!
}

"""The input fields for a shipping service provided by a participant."""
input Shopify_DeliveryParticipantServiceInput {
  """The name of the service."""
  name: String!
  """Whether the service is active."""
  active: Boolean!
}

"""
The input fields for a price-based condition of a delivery method definition.
"""
input Shopify_DeliveryPriceConditionInput {
  """The monetary value to compare the price of an order to."""
  criteria: Shopify_MoneyInput
  """The operator to use for comparison."""
  operator: Shopify_DeliveryConditionOperator
}

"""
How many product variants are in a profile. This count is capped at 500.
"""
type Shopify_DeliveryProductVariantsCount {
  """Whether the count has reached the cap of 500."""
  capped: Boolean!
  """The product variant count."""
  count: Int!
}

"""
A shipping profile. In Shopify, a shipping profile is a set of shipping rates
scoped to a set of products or variants that can be shipped from selected
locations to zones.
"""
type Shopify_DeliveryProfile implements Shopify_Node {
  """The number of active shipping rates for the profile."""
  activeMethodDefinitionsCount: Int!
  """Whether this is the default profile."""
  default: Boolean!
  """A globally-unique identifier."""
  id: ID!
  """
  Whether this shop has enabled legacy compatibility mode for delivery profiles.
  """
  legacyMode: Boolean!
  """The number of locations without rates defined."""
  locationsWithoutRatesCount: Int!
  """The name of the delivery profile."""
  name: String!
  """The number of active origin locations for the profile."""
  originLocationCount: Int!
  """
  The number of product variants for this profile. The count for the default profile is not supported and will return -1.
  """
  productVariantsCount: Int! @deprecated(reason: "Use `productVariantsCountV2` instead.")
  """How many product variants are in this profile."""
  productVariantsCountV2: Shopify_DeliveryProductVariantsCount!
  """The products and variants associated with this profile."""
  profileItems(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_DeliveryProfileItemConnection!
  """The location groups and associated zones using this profile."""
  profileLocationGroups(
    """Filter the location groups of the profile by location group ID."""
    locationGroupId: ID
  ): [Shopify_DeliveryProfileLocationGroup!]!
  """Selling plan groups associated with the specified delivery profile."""
  sellingPlanGroups(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SellingPlanGroupConnection!
  """
  List of locations that have not been assigned to a location group for this profile.
  """
  unassignedLocations: [Shopify_Location!]!
  """
  List of locations that have not been assigned to a location group for this profile.
  """
  unassignedLocationsPaginated(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_LocationConnection!
  """The number of countries with active rates to deliver to."""
  zoneCountryCount: Int!
}

"""
An auto-generated type for paginating through multiple DeliveryProfiles.
"""
type Shopify_DeliveryProfileConnection {
  """A list of edges."""
  edges: [Shopify_DeliveryProfileEdge!]!
  """A list of the nodes contained in DeliveryProfileEdge."""
  nodes: [Shopify_DeliveryProfile!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `deliveryProfileCreate` mutation."""
type Shopify_deliveryProfileCreatePayload {
  """The delivery profile that was created."""
  profile: Shopify_DeliveryProfile
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An auto-generated type which holds one DeliveryProfile and a cursor during pagination.
"""
type Shopify_DeliveryProfileEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of DeliveryProfileEdge."""
  node: Shopify_DeliveryProfile!
}

"""The input fields for a delivery profile."""
input Shopify_DeliveryProfileInput {
  """The name of the delivery profile."""
  name: String
  """The list of location groups associated with the delivery profile."""
  profileLocationGroups: [Shopify_DeliveryProfileLocationGroupInput!]
  """
  The list of location groups to be created in the delivery profile.
  
  **Note:** due to the potential complexity of the nested data, it is
  recommended to send no more than 5 location groups per each request.
  """
  locationGroupsToCreate: [Shopify_DeliveryProfileLocationGroupInput!]
  """
  The list of location groups to be updated in the delivery profile.
  
  **Note:** due to the potential complexity of the nested data, it is
  recommended to send no more than 5 location groups per each request.
  """
  locationGroupsToUpdate: [Shopify_DeliveryProfileLocationGroupInput!]
  """The list of location groups to be deleted from the delivery profile."""
  locationGroupsToDelete: [ID!]
  """
  The list of product variant IDs to be associated with the delivery profile.
  """
  variantsToAssociate: [ID!]
  """
  The list of product variant IDs to be dissociated from the delivery profile.
  The dissociated product variants are moved back to the default delivery profile.
  """
  variantsToDissociate: [ID!]
  """The list of zone IDs to delete."""
  zonesToDelete: [ID!]
  """The list of method definition IDs to delete."""
  methodDefinitionsToDelete: [ID!]
  """The list of condition IDs to delete."""
  conditionsToDelete: [ID!]
  """
  The list of selling plan groups to be associated with the delivery profile.
  """
  sellingPlanGroupsToAssociate: [ID!]
  """
  The list of selling plan groups to be dissociated with the delivery profile.
  """
  sellingPlanGroupsToDissociate: [ID!]
}

"""
A product and the subset of associated variants that are part of this delivery profile.
"""
type Shopify_DeliveryProfileItem implements Shopify_Node {
  """A globally-unique identifier."""
  id: ID!
  """A product associated with this profile."""
  product: Shopify_Product!
  """The product variants associated with this delivery profile."""
  variants(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductVariantConnection!
}

"""
An auto-generated type for paginating through multiple DeliveryProfileItems.
"""
type Shopify_DeliveryProfileItemConnection {
  """A list of edges."""
  edges: [Shopify_DeliveryProfileItemEdge!]!
  """A list of the nodes contained in DeliveryProfileItemEdge."""
  nodes: [Shopify_DeliveryProfileItem!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DeliveryProfileItem and a cursor during pagination.
"""
type Shopify_DeliveryProfileItemEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of DeliveryProfileItemEdge."""
  node: Shopify_DeliveryProfileItem!
}

"""
Links a location group with zones. Both are associated to a delivery profile.
"""
type Shopify_DeliveryProfileLocationGroup {
  """
  The countries already selected in any zone for the specified location group.
  """
  countriesInAnyZone: [Shopify_DeliveryCountryAndZone!]!
  """The collection of locations that make up the specified location group."""
  locationGroup: Shopify_DeliveryLocationGroup!
  """The applicable zones associated to the specified location group."""
  locationGroupZones(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_DeliveryLocationGroupZoneConnection!
}

"""
The input fields for a location group associated to a delivery profile.
"""
input Shopify_DeliveryProfileLocationGroupInput {
  """The globally-unique identifier of the delivery profile location group."""
  id: ID
  """The list of location IDs to be moved to this location group."""
  locations: [ID!]
  """
  The list of location IDs to be added to this location group.
  
  **Note:** due to API input array limits, a maximum of 250 items can be sent per each request.
  """
  locationsToAdd: [ID!]
  """
  The list of location IDs to be removed from this location group.
  
  **Note:** due to API input array limits, a maximum of 250 items can be sent per each request.
  """
  locationsToRemove: [ID!]
  """
  The list of location group zones to create.
  
  **Note:** due to the potential complexity of the nested data, it is
  recommended to send no more than 5 zones per each request.
  """
  zonesToCreate: [Shopify_DeliveryLocationGroupZoneInput!]
  """
  The list of location group zones to update.
  
  **Note:** due to the potential complexity of the nested data, it is
  recommended to send no more than 5 zones per each request.
  """
  zonesToUpdate: [Shopify_DeliveryLocationGroupZoneInput!]
}

"""Return type for `deliveryProfileRemove` mutation."""
type Shopify_deliveryProfileRemovePayload {
  """The delivery profile deletion job triggered by the mutation."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `deliveryProfileUpdate` mutation."""
type Shopify_deliveryProfileUpdatePayload {
  """The delivery profile that was updated."""
  profile: Shopify_DeliveryProfile
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""A region that is used to define a shipping zone."""
type Shopify_DeliveryProvince implements Shopify_Node {
  """The code of the region."""
  code: String!
  """A globally-unique identifier."""
  id: ID!
  """The full name of the region."""
  name: String!
  """
  The translated name of the region. The translation returned is based on the system's locale.
  """
  translatedName: String!
}

"""The input fields to specify a region."""
input Shopify_DeliveryProvinceInput {
  """The code of the region."""
  code: String!
}

"""
The merchant-defined rate of the [DeliveryMethodDefinition](https://shopify.dev/api/admin-graphql/latest/objects/DeliveryMethodDefinition).
"""
type Shopify_DeliveryRateDefinition implements Shopify_Node {
  """A globally-unique identifier."""
  id: ID!
  """The price of this rate."""
  price: Shopify_MoneyV2!
}

"""The input fields for a rate definition."""
input Shopify_DeliveryRateDefinitionInput {
  """A globally-unique identifier of the rate definition."""
  id: ID
  """The price of the rate definition."""
  price: Shopify_MoneyInput!
}

"""A rate provided by a merchant-defined rate or a participant."""
union Shopify_DeliveryRateProvider = Shopify_DeliveryParticipant | Shopify_DeliveryRateDefinition

"""
The `DeliverySetting` object enables you to manage shop-wide shipping settings.
You can enable legacy compatibility mode for the multi-location delivery profiles feature
if the legacy mode isn't blocked.
"""
type Shopify_DeliverySetting {
  """
  Whether the shop is blocked from converting to full multi-location delivery
  profiles mode. If the shop is blocked, then the blocking reasons are also returned.
  """
  legacyModeBlocked: Shopify_DeliveryLegacyModeBlocked!
  """
  Enables legacy compatability mode for the multi-location delivery profiles feature.
  """
  legacyModeProfiles: Boolean!
}

"""The input fields for shop-level delivery settings."""
input Shopify_DeliverySettingInput {
  """
  Whether legacy compatability mode is enabled for the multi-location delivery profiles feature.
  """
  legacyModeProfiles: Boolean
}

"""Return type for `deliverySettingUpdate` mutation."""
type Shopify_DeliverySettingUpdatePayload {
  """The updated delivery shop level settings."""
  setting: Shopify_DeliverySetting
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `deliveryShippingOriginAssign` mutation."""
type Shopify_DeliveryShippingOriginAssignPayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
The input fields for updating the condition of a delivery method definition.
"""
input Shopify_DeliveryUpdateConditionInput {
  """A globally-unique identifier of the condition."""
  id: ID!
  """The value that will be used in comparison."""
  criteria: Float
  """The unit associated with the value that will be used in comparison."""
  criteriaUnit: String
  """The property of an order that will be used in comparison."""
  field: Shopify_DeliveryConditionField
  """The operator to use for comparison."""
  operator: Shopify_DeliveryConditionOperator
}

"""
The input fields for a weight-based condition of a delivery method definition.
"""
input Shopify_DeliveryWeightConditionInput {
  """The weight value to compare the weight of an order to."""
  criteria: Shopify_WeightInput
  """The operator to use for comparison."""
  operator: Shopify_DeliveryConditionOperator
}

"""
A zone is a group of countries that have the same shipping rates. Customers can
order products from a store only if they choose a shipping destination that's
included in one of the store's zones.
"""
type Shopify_DeliveryZone implements Shopify_Node {
  """The list of countries within the zone."""
  countries: [Shopify_DeliveryCountry!]!
  """A globally-unique identifier."""
  id: ID!
  """The name of the zone."""
  name: String!
}

"""
Digital wallet, such as Apple Pay, which can be used for accelerated checkouts.
"""
enum Shopify_DigitalWallet {
  """Apple Pay."""
  APPLE_PAY
  """Android Pay."""
  ANDROID_PAY
  """Google Pay."""
  GOOGLE_PAY
  """Shopify Pay."""
  SHOPIFY_PAY
}

"""A discount."""
union Shopify_Discount = Shopify_DiscountAutomaticApp | Shopify_DiscountAutomaticBasic | Shopify_DiscountAutomaticBxgy | Shopify_DiscountCodeApp | Shopify_DiscountCodeBasic | Shopify_DiscountCodeBxgy | Shopify_DiscountCodeFreeShipping

"""
An amount that's allocated to a line based on an associated discount application.
"""
type Shopify_DiscountAllocation {
  """
  The money amount that's allocated to a line based on the associated discount application.
  """
  allocatedAmount: Shopify_MoneyV2! @deprecated(reason: "Use `allocatedAmountSet` instead.")
  """
  The money amount that's allocated to a line based on the associated discount
  application in shop and presentment currencies.
  """
  allocatedAmountSet: Shopify_MoneyBag!
  """The discount application that the allocated amount originated from."""
  discountApplication: Shopify_DiscountApplication!
}

"""
The fixed amount value of a discount, and whether the amount is applied to each
entitled item or spread evenly across the entitled items.
"""
type Shopify_DiscountAmount {
  """The value of the discount."""
  amount: Shopify_MoneyV2!
  """
  If true, then the discount is applied to each of the entitled items. If false,
  then the amount is split across all of the entitled items.
  """
  appliesOnEachItem: Boolean!
}

"""Specifies the value of the discount and how it is applied."""
input Shopify_DiscountAmountInput {
  """The value of the discount."""
  amount: Shopify_Decimal
  """
  If true, then the discount is applied to each of the entitled items. If false,
  then the amount is split across all of the entitled items.
  """
  appliesOnEachItem: Boolean
}

"""
Discount applications capture the intentions of a discount source at
the time of application on an order's line items or shipping lines.

Discount applications don't represent the actual final amount discounted on a
line (line item or shipping line). The actual amount discounted on a line is
represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
"""
interface Shopify_DiscountApplication {
  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: Shopify_DiscountApplicationAllocationMethod!
  """
  An ordered index that can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.
  """
  index: Int!
  """How the discount amount is distributed on the discounted lines."""
  targetSelection: Shopify_DiscountApplicationTargetSelection!
  """Whether the discount is applied on line items or shipping lines."""
  targetType: Shopify_DiscountApplicationTargetType!
  """The value of the discount application."""
  value: Shopify_PricingValue!
}

"""
The method by which the discount's value is allocated onto its entitled lines.
"""
enum Shopify_DiscountApplicationAllocationMethod {
  """The value is spread across all entitled lines."""
  ACROSS
  """The value is applied onto every entitled line."""
  EACH
  """The value is specifically applied onto a particular line."""
  ONE @deprecated(reason: "Use ACROSS instead.")
}

"""
An auto-generated type for paginating through multiple DiscountApplications.
"""
type Shopify_DiscountApplicationConnection {
  """A list of edges."""
  edges: [Shopify_DiscountApplicationEdge!]!
  """A list of the nodes contained in DiscountApplicationEdge."""
  nodes: [Shopify_DiscountApplication!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DiscountApplication and a cursor during pagination.
"""
type Shopify_DiscountApplicationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of DiscountApplicationEdge."""
  node: Shopify_DiscountApplication!
}

"""The level at which the discount's value is applied."""
enum Shopify_DiscountApplicationLevel {
  """
  The discount is applied at the order level.
  Order level discounts are not factored into the discountedUnitPriceSet on line items.
  """
  ORDER
  """
  The discount is applied at the line level.
  Line level discounts are factored into the discountedUnitPriceSet on line items.
  """
  LINE
}

"""
The lines on the order to which the discount is applied, of the type defined by
the discount application's `targetType`. For example, the value `ENTITLED`, combined with a `targetType` of
`LINE_ITEM`, applies the discount on all line items that are entitled to the discount.
The value `ALL`, combined with a `targetType` of `SHIPPING_LINE`, applies the discount on all shipping lines.
"""
enum Shopify_DiscountApplicationTargetSelection {
  """The discount is allocated onto all the lines."""
  ALL
  """The discount is allocated onto only the lines that it's entitled for."""
  ENTITLED
  """The discount is allocated onto explicitly chosen lines."""
  EXPLICIT
}

"""
The type of line (i.e. line item or shipping line) on an order that the discount is applicable towards.
"""
enum Shopify_DiscountApplicationTargetType {
  """The discount applies onto line items."""
  LINE_ITEM
  """The discount applies onto shipping lines."""
  SHIPPING_LINE
}

"""
The type of discount associated to the automatic discount. For example, the
automatic discount might offer a basic discount using a fixed percentage, or a
fixed amount, on specific products from the order. The automatic discount may
also be a BXGY discount, which offers customer discounts on select products if
they add a specific product to their order.
"""
union Shopify_DiscountAutomatic = Shopify_DiscountAutomaticApp | Shopify_DiscountAutomaticBasic | Shopify_DiscountAutomaticBxgy

"""Return type for `discountAutomaticActivate` mutation."""
type Shopify_DiscountAutomaticActivatePayload {
  """The activated automatic discount."""
  automaticDiscountNode: Shopify_DiscountAutomaticNode
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""An automatic app discount."""
type Shopify_DiscountAutomaticApp {
  """The app discount type providing the discount type."""
  appDiscountType: Shopify_AppDiscountType!
  """
  The number of times the discount has been used. This value is updated
  asynchronously and can be different than the actual usage count.
  """
  asyncUsageCount: Int!
  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWith!
  """The date and time when the discount was created."""
  createdAt: DateTime!
  """The class of the discount for combining purposes."""
  discountClass: Shopify_DiscountClass!
  """The ID for the discount."""
  discountId: ID!
  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime
  """The error history on the most recent version of the app discount."""
  errorHistory: Shopify_FunctionsErrorHistory
  """The date and time when the discount starts."""
  startsAt: DateTime!
  """The status of the discount."""
  status: Shopify_DiscountStatus!
  """The title of the discount."""
  title: String!
  """The date and time when the discount was updated."""
  updatedAt: DateTime!
}

"""Return type for `discountAutomaticAppCreate` mutation."""
type Shopify_DiscountAutomaticAppCreatePayload {
  """The created app discount."""
  automaticAppDiscount: Shopify_DiscountAutomaticApp
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""The input fields to create an app discount."""
input Shopify_DiscountAutomaticAppInput {
  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWithInput
  """The ID of the function providing the app discount type."""
  functionId: String
  """The title of the discount."""
  title: String
  """The date and time when the discount starts."""
  startsAt: DateTime
  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime
  """Additional metafields to associate to the discount."""
  metafields: [Shopify_MetafieldInput!] = []
}

"""Return type for `discountAutomaticAppUpdate` mutation."""
type Shopify_DiscountAutomaticAppUpdatePayload {
  """The updated automatic app discount."""
  automaticAppDiscount: Shopify_DiscountAutomaticApp
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""
An automatic discount that offers customers a percentage discount, or fixed
amount discount, on specific products, collections, or the entire order.
"""
type Shopify_DiscountAutomaticBasic {
  """
  The number of times the discount has been used. This value is updated
  asynchronously and can be different than the actual usage count.
  """
  asyncUsageCount: Int!
  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWith!
  """The date and time when the discount was created."""
  createdAt: DateTime!
  """
  The qualifying items in an order, the quantity of each one, and the total value of the discount.
  """
  customerGets: Shopify_DiscountCustomerGets!
  """The class of the discount for combining purposes."""
  discountClass: Shopify_MerchandiseDiscountClass!
  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime
  """
  The minimum subtotal or quantity that's required for the discount to be applied.
  """
  minimumRequirement: Shopify_DiscountMinimumRequirement!
  """A short summary of the discount."""
  shortSummary: String!
  """The date and time when the discount starts."""
  startsAt: DateTime!
  """The status of the discount."""
  status: Shopify_DiscountStatus!
  """A detailed summary of the discount."""
  summary: String!
  """The title of the discount."""
  title: String!
  """The number of times that the discount has been used."""
  usageCount: Int! @deprecated(reason: "Use `asyncUsageCount` instead.")
}

"""Return type for `discountAutomaticBasicCreate` mutation."""
type Shopify_DiscountAutomaticBasicCreatePayload {
  """The created automatic discount."""
  automaticDiscountNode: Shopify_DiscountAutomaticNode
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""The input that's used to create or update an automatic basic discount."""
input Shopify_DiscountAutomaticBasicInput {
  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWithInput
  """The title of the discount."""
  title: String
  """The date and time when the discount starts."""
  startsAt: DateTime
  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime
  """
  The minimum subtotal or quantity that's required for the discount to be applied.
  """
  minimumRequirement: Shopify_DiscountMinimumRequirementInput
  """Information about the qualifying items and their discount."""
  customerGets: Shopify_DiscountCustomerGetsInput
}

"""Return type for `discountAutomaticBasicUpdate` mutation."""
type Shopify_DiscountAutomaticBasicUpdatePayload {
  """The updated automatic discount."""
  automaticDiscountNode: Shopify_DiscountAutomaticNode
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""Return type for `discountAutomaticBulkDelete` mutation."""
type Shopify_DiscountAutomaticBulkDeletePayload {
  """The asynchronous job removing the automatic discounts."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""
An automatic discount that offers customers a Buy X, Get Y (BXGY) discount.
"""
type Shopify_DiscountAutomaticBxgy implements Shopify_HasEvents & Shopify_Node {
  """
  The number of times the discount has been used. This value is updated
  asynchronously and can be different than the actual usage count.
  """
  asyncUsageCount: Int!
  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWith!
  """The date and time when the discount was created."""
  createdAt: DateTime!
  """
  The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
  """
  customerBuys: Shopify_DiscountCustomerBuys!
  """
  The qualifying items in an order, the quantity of each one, and the total value of the discount.
  """
  customerGets: Shopify_DiscountCustomerGets!
  """The class of the discount for combining purposes."""
  discountClass: Shopify_MerchandiseDiscountClass!
  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime
  """The paginated list of events associated with the host subject."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_EventSortKeys = ID
    """
    Supported filter parameters:
     - `comments`
     - `created_at`
     - `subject_type`
     - `verb`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_EventConnection!
  """A legacy unique identifier for the discount."""
  id: ID! @deprecated(reason: "Use DiscountAutomaticNode.id instead.")
  """The date and time when the discount starts."""
  startsAt: DateTime!
  """The status of the discount."""
  status: Shopify_DiscountStatus!
  """A detailed summary of the discount."""
  summary: String!
  """The title of the discount."""
  title: String!
  """The number of times that the discount has been used."""
  usageCount: Int! @deprecated(reason: "Use `asyncUsageCount` instead.")
  """
  The maximum number of times that the discount can be applied to an order.
  """
  usesPerOrderLimit: Int
}

"""Return type for `discountAutomaticBxgyCreate` mutation."""
type Shopify_DiscountAutomaticBxgyCreatePayload {
  """The created automatic discount."""
  automaticDiscountNode: Shopify_DiscountAutomaticNode
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""
Specifies input field to create or update an automatic Buy X, Get Y (BXGY) discount.
"""
input Shopify_DiscountAutomaticBxgyInput {
  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWithInput
  """The date and time when the discount starts."""
  startsAt: DateTime
  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime
  """The title of the discount."""
  title: String
  """
  The maximum number of times that the discount can be applied to an order.
  """
  usesPerOrderLimit: Shopify_UnsignedInt64
  """
  The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
  """
  customerBuys: Shopify_DiscountCustomerBuysInput
  """
  The qualifying items in an order, the quantity of each one, and the total value of the discount.
  """
  customerGets: Shopify_DiscountCustomerGetsInput
}

"""Return type for `discountAutomaticBxgyUpdate` mutation."""
type Shopify_DiscountAutomaticBxgyUpdatePayload {
  """The updated automatic discount."""
  automaticDiscountNode: Shopify_DiscountAutomaticNode
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""
An auto-generated type for paginating through multiple DiscountAutomatics.
"""
type Shopify_DiscountAutomaticConnection {
  """A list of edges."""
  edges: [Shopify_DiscountAutomaticEdge!]!
  """A list of the nodes contained in DiscountAutomaticEdge."""
  nodes: [Shopify_DiscountAutomatic!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `discountAutomaticDeactivate` mutation."""
type Shopify_DiscountAutomaticDeactivatePayload {
  """The deactivated automatic discount."""
  automaticDiscountNode: Shopify_DiscountAutomaticNode
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""Return type for `discountAutomaticDelete` mutation."""
type Shopify_DiscountAutomaticDeletePayload {
  """The deleted automatic discount ID."""
  deletedAutomaticDiscountId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""
An auto-generated type which holds one DiscountAutomatic and a cursor during pagination.
"""
type Shopify_DiscountAutomaticEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of DiscountAutomaticEdge."""
  node: Shopify_DiscountAutomatic!
}

"""A node containing an automatic discount and its related events."""
type Shopify_DiscountAutomaticNode implements Shopify_HasEvents & Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_Node {
  """The automatic discount object."""
  automaticDiscount: Shopify_DiscountAutomatic!
  """The paginated list of events associated with the host subject."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_EventSortKeys = ID
    """
    Supported filter parameters:
     - `comments`
     - `created_at`
     - `subject_type`
     - `verb`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_EventConnection!
  """A globally-unique identifier."""
  id: ID!
  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String
    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield
  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String
    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!
  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String
    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!
  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!
    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield
  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
}

"""
An auto-generated type for paginating through multiple DiscountAutomaticNodes.
"""
type Shopify_DiscountAutomaticNodeConnection {
  """A list of edges."""
  edges: [Shopify_DiscountAutomaticNodeEdge!]!
  """A list of the nodes contained in DiscountAutomaticNodeEdge."""
  nodes: [Shopify_DiscountAutomaticNode!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DiscountAutomaticNode and a cursor during pagination.
"""
type Shopify_DiscountAutomaticNodeEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of DiscountAutomaticNodeEdge."""
  node: Shopify_DiscountAutomaticNode!
}

"""The class of the discount for combining purposes."""
enum Shopify_DiscountClass {
  """Combined as a product discount."""
  PRODUCT
  """Combined as an order discount."""
  ORDER
  """Combined as a shipping discount."""
  SHIPPING
}

"""
The type of discount associated with the discount code. For example, the
discount code might offer a basic discount of a fixed percentage, or a fixed
amount, on specific products or the order. Alternatively, the discount might
offer the customer free shipping on their order. A third option is a Buy X, Get
Y (BXGY) discount, which offers a customer discounts on select products if they
add a specific product to their order.
"""
union Shopify_DiscountCode = Shopify_DiscountCodeApp | Shopify_DiscountCodeBasic | Shopify_DiscountCodeBxgy | Shopify_DiscountCodeFreeShipping

"""Return type for `discountCodeActivate` mutation."""
type Shopify_DiscountCodeActivatePayload {
  """The activated code discount."""
  codeDiscountNode: Shopify_DiscountCodeNode
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""A code app discount."""
type Shopify_DiscountCodeApp {
  """The app discount type providing the discount type."""
  appDiscountType: Shopify_AppDiscountType!
  """Whether the discount can be applied only once per customer."""
  appliesOncePerCustomer: Boolean!
  """The number of times that the discount has been used."""
  asyncUsageCount: Int!
  """The number of redeem codes for the discount."""
  codeCount: Int!
  """A list of redeem codes for the discount."""
  codes(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_DiscountCodeSortKeys = ID
    """
    Supported filter parameters:
     - `times_used`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_DiscountRedeemCodeConnection!
  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWith!
  """The date and time when the discount was created."""
  createdAt: DateTime!
  """The customers that can use the discount."""
  customerSelection: Shopify_DiscountCustomerSelection!
  """The class of the discount for combining purposes."""
  discountClass: Shopify_DiscountClass!
  """The ID for the discount."""
  discountId: ID!
  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime
  """The error history on the most recent version of the discount."""
  errorHistory: Shopify_FunctionsErrorHistory
  """Indicates whether there are any timeline comments on the discount."""
  hasTimelineComment: Boolean!
  """
  The number of times a discount applies on recurring purchases (subscriptions).
  """
  recurringCycleLimit: Int
  """URLs that can be used to share the discount."""
  shareableUrls: [Shopify_DiscountShareableUrl!]!
  """The date and time when the discount starts."""
  startsAt: DateTime!
  """The status of the discount."""
  status: Shopify_DiscountStatus!
  """The title of the discount."""
  title: String!
  """The total sales from orders where the discount was used."""
  totalSales: Shopify_MoneyV2
  """The maximum number of times that the discount can be used."""
  usageLimit: Int
}

"""Return type for `discountCodeAppCreate` mutation."""
type Shopify_DiscountCodeAppCreatePayload {
  """The created code app discount."""
  codeAppDiscount: Shopify_DiscountCodeApp
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""The input fields to create a code app discount."""
input Shopify_DiscountCodeAppInput {
  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWithInput
  """The ID of the function providing the app discount type."""
  functionId: String
  """The title of the discount."""
  title: String
  """The date and time when the discount starts."""
  startsAt: DateTime
  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime
  """
  The maximum number of times that the discount can be used. For open-ended discounts, use `null`.
  """
  usageLimit: Int
  """Whether the discount can be applied only once per customer."""
  appliesOncePerCustomer: Boolean
  """The customers that can use the discount."""
  customerSelection: Shopify_DiscountCustomerSelectionInput
  """The code to use the discount."""
  code: String
  """Additional metafields to associate to the discount."""
  metafields: [Shopify_MetafieldInput!] = []
}

"""
Discount code applications capture the intentions of a discount code at
the time that it is applied onto an order.

Discount applications don't represent the actual final amount discounted on a
line (line item or shipping line). The actual amount discounted on a line is
represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
"""
type Shopify_DiscountCodeApplication implements Shopify_DiscountApplication {
  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: Shopify_DiscountApplicationAllocationMethod!
  """
  The string identifying the discount code that was used at the time of application.
  """
  code: String!
  """
  An ordered index that can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.
  """
  index: Int!
  """How the discount amount is distributed on the discounted lines."""
  targetSelection: Shopify_DiscountApplicationTargetSelection!
  """Whether the discount is applied on line items or shipping lines."""
  targetType: Shopify_DiscountApplicationTargetType!
  """The value of the discount application."""
  value: Shopify_PricingValue!
}

"""Return type for `discountCodeAppUpdate` mutation."""
type Shopify_DiscountCodeAppUpdatePayload {
  """The updated code app discount."""
  codeAppDiscount: Shopify_DiscountCodeApp
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""
A code discount that offers customers a percentage or fixed amount discount on
specific products, collections, or the entire order.
"""
type Shopify_DiscountCodeBasic {
  """Whether the discount can be applied only once per customer."""
  appliesOncePerCustomer: Boolean!
  """The number of times that the discount has been used."""
  asyncUsageCount: Int!
  """The number of redeem codes for the discount."""
  codeCount: Int!
  """A list of redeem codes for the discount."""
  codes(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_DiscountCodeSortKeys = ID
    """
    Supported filter parameters:
     - `times_used`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_DiscountRedeemCodeConnection!
  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWith!
  """The date and time when the discount was created."""
  createdAt: DateTime!
  """
  The qualifying items in an order, the quantity of each one, and the total value of the discount.
  """
  customerGets: Shopify_DiscountCustomerGets!
  """The customers that can use the discount."""
  customerSelection: Shopify_DiscountCustomerSelection!
  """The class of the discount for combining purposes."""
  discountClass: Shopify_MerchandiseDiscountClass!
  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime
  """Indicates whether there are any timeline comments on the discount."""
  hasTimelineComment: Boolean!
  """
  The minimum subtotal or quantity that's required for the discount to be applied.
  """
  minimumRequirement: Shopify_DiscountMinimumRequirement
  """
  The number of times a discount applies on recurring purchases (subscriptions).
  """
  recurringCycleLimit: Int
  """URLs that can be used to share the discount."""
  shareableUrls: [Shopify_DiscountShareableUrl!]!
  """A short summary of the discount."""
  shortSummary: String!
  """The date and time when the discount starts."""
  startsAt: DateTime!
  """The status of the discount."""
  status: Shopify_DiscountStatus!
  """A detailed summary of the discount."""
  summary: String!
  """The title of the discount."""
  title: String!
  """The total sales from orders where the discount was used."""
  totalSales: Shopify_MoneyV2
  """The maximum number of times that the discount can be used."""
  usageLimit: Int
}

"""Return type for `discountCodeBasicCreate` mutation."""
type Shopify_DiscountCodeBasicCreatePayload {
  """The created code discount."""
  codeDiscountNode: Shopify_DiscountCodeNode
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""The input field to create or update a basic code discount."""
input Shopify_DiscountCodeBasicInput {
  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWithInput
  """The title of the discount."""
  title: String
  """The date and time when the discount starts."""
  startsAt: DateTime
  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime
  """
  The maximum number of times that the discount can be used. For open-ended discounts, use `null`.
  """
  usageLimit: Int
  """Whether the discount can be applied only once per customer."""
  appliesOncePerCustomer: Boolean
  """
  The minimum subtotal or quantity that's required for the discount to be applied.
  """
  minimumRequirement: Shopify_DiscountMinimumRequirementInput
  """
  The qualifying items in an order, the quantity of each one, and the total value of the discount.
  """
  customerGets: Shopify_DiscountCustomerGetsInput
  """The customers that can use the discount."""
  customerSelection: Shopify_DiscountCustomerSelectionInput
  """The code to use the discount."""
  code: String
  """
  The number of times a discount applies on recurring purchases (subscriptions).
  """
  recurringCycleLimit: Int
}

"""Return type for `discountCodeBasicUpdate` mutation."""
type Shopify_DiscountCodeBasicUpdatePayload {
  """The updated code discount."""
  codeDiscountNode: Shopify_DiscountCodeNode
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""Return type for `discountCodeBulkActivate` mutation."""
type Shopify_DiscountCodeBulkActivatePayload {
  """The asynchronous job that activates the code discounts."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""Return type for `discountCodeBulkDeactivate` mutation."""
type Shopify_DiscountCodeBulkDeactivatePayload {
  """The asynchronous job that deactivates the code discounts."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""Return type for `discountCodeBulkDelete` mutation."""
type Shopify_DiscountCodeBulkDeletePayload {
  """The asynchronous job that deletes the code discounts."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""A code discount that offers customers a Buy X, Get Y (BXGY) discount."""
type Shopify_DiscountCodeBxgy {
  """Whether the discount can be applied only once per customer."""
  appliesOncePerCustomer: Boolean!
  """The number of times that the discount has been used."""
  asyncUsageCount: Int!
  """The number of redeem codes for the discount."""
  codeCount: Int!
  """A list of redeem codes for the discount."""
  codes(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_DiscountCodeSortKeys = ID
    """
    Supported filter parameters:
     - `times_used`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_DiscountRedeemCodeConnection!
  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWith!
  """The date and time when the discount was created."""
  createdAt: DateTime!
  """
  The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
  """
  customerBuys: Shopify_DiscountCustomerBuys!
  """
  The qualifying items in an order, the quantity of each one, and the total value of the discount.
  """
  customerGets: Shopify_DiscountCustomerGets!
  """The customers that can use the discount."""
  customerSelection: Shopify_DiscountCustomerSelection!
  """The class of the discount for combining purposes."""
  discountClass: Shopify_MerchandiseDiscountClass!
  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime
  """Indicates whether there are any timeline comments on the discount."""
  hasTimelineComment: Boolean!
  """URLs that can be used to share the discount."""
  shareableUrls: [Shopify_DiscountShareableUrl!]!
  """The date and time when the discount starts."""
  startsAt: DateTime!
  """The status of the discount."""
  status: Shopify_DiscountStatus!
  """A detailed summary of the discount."""
  summary: String!
  """The title of the discount."""
  title: String!
  """The total sales from orders where the discount was used."""
  totalSales: Shopify_MoneyV2
  """The maximum number of times that the discount can be used."""
  usageLimit: Int
  """
  The maximum number of times that the discount can be applied to an order.
  """
  usesPerOrderLimit: Int
}

"""Return type for `discountCodeBxgyCreate` mutation."""
type Shopify_DiscountCodeBxgyCreatePayload {
  """The created code discount."""
  codeDiscountNode: Shopify_DiscountCodeNode
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""Specifies input field to create or update a BXGY code discount."""
input Shopify_DiscountCodeBxgyInput {
  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWithInput
  """The title of the discount."""
  title: String
  """The date and time when the discount starts."""
  startsAt: DateTime
  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime
  """
  The qualifying items and the quantity of each one that the customer has to buy to be eligible for the discount.
  """
  customerBuys: Shopify_DiscountCustomerBuysInput
  """
  The qualifying items that will be discounted, the quantity of each one, and the total value of the discount.
  """
  customerGets: Shopify_DiscountCustomerGetsInput
  """The customers that are eligible to use the discount."""
  customerSelection: Shopify_DiscountCustomerSelectionInput
  """The code to use the discount."""
  code: String
  """
  The maximum number of times that the discount can be used. For open-ended discounts, use `null`.
  """
  usageLimit: Int
  """
  The maximum number of times that the discount can be applied to an order.
  """
  usesPerOrderLimit: Int
  """Whether the discount can be applied only once per customer."""
  appliesOncePerCustomer: Boolean
}

"""Return type for `discountCodeBxgyUpdate` mutation."""
type Shopify_DiscountCodeBxgyUpdatePayload {
  """The updated code discount."""
  codeDiscountNode: Shopify_DiscountCodeNode
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""Return type for `discountCodeDeactivate` mutation."""
type Shopify_DiscountCodeDeactivatePayload {
  """The deactivated code discount."""
  codeDiscountNode: Shopify_DiscountCodeNode
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""Return type for `discountCodeDelete` mutation."""
type Shopify_DiscountCodeDeletePayload {
  """The deleted code discount ID."""
  deletedCodeDiscountId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""A code discount that offers customers free shipping on their order."""
type Shopify_DiscountCodeFreeShipping {
  """
  Whether the discount applies on regular one-time-purchase shipping lines.
  """
  appliesOnOneTimePurchase: Boolean!
  """Whether the discount applies on subscription shipping lines."""
  appliesOnSubscription: Boolean!
  """Whether the discount can be applied only once per customer."""
  appliesOncePerCustomer: Boolean!
  """The number of times that the discount has been used."""
  asyncUsageCount: Int!
  """The number of redeem codes for the discount."""
  codeCount: Int!
  """A list of redeem codes for the discount."""
  codes(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_DiscountCodeSortKeys = ID
    """
    Supported filter parameters:
     - `times_used`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_DiscountRedeemCodeConnection!
  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWith!
  """The date and time when the discount was created."""
  createdAt: DateTime!
  """The customers that can use the discount."""
  customerSelection: Shopify_DiscountCustomerSelection!
  """A shipping destination that qualifies for the discount."""
  destinationSelection: Shopify_DiscountShippingDestinationSelection!
  """The class of the discount for combining purposes."""
  discountClass: Shopify_ShippingDiscountClass!
  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime
  """Indicates whether there are any timeline comments on the discount."""
  hasTimelineComment: Boolean!
  """
  The maximum shipping price amount accepted to qualify for the discount.
  """
  maximumShippingPrice: Shopify_MoneyV2
  """
  The minimum subtotal or quantity that's required for the discount to be applied.
  """
  minimumRequirement: Shopify_DiscountMinimumRequirement
  """
  The number of times a discount applies on recurring purchases (subscriptions).
  """
  recurringCycleLimit: Int
  """URLs that can be used to share the discount."""
  shareableUrls: [Shopify_DiscountShareableUrl!]!
  """A short summary of the discount."""
  shortSummary: String!
  """The date and time when the discount starts."""
  startsAt: DateTime!
  """The status of the discount."""
  status: Shopify_DiscountStatus!
  """A detailed summary of the discount."""
  summary: String!
  """The title of the discount."""
  title: String!
  """The total sales from orders where the discount was used."""
  totalSales: Shopify_MoneyV2
  """The maximum number of times that the discount can be used."""
  usageLimit: Int
}

"""Return type for `discountCodeFreeShippingCreate` mutation."""
type Shopify_DiscountCodeFreeShippingCreatePayload {
  """The created code discount."""
  codeDiscountNode: Shopify_DiscountCodeNode
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""Specifies input field to create or update free shipping code discount."""
input Shopify_DiscountCodeFreeShippingInput {
  """
  Determines which discount classes the shipping discount can combine with.
  """
  combinesWith: Shopify_DiscountCombinesWithInput
  """The title of the discount."""
  title: String
  """The date and time when the discount starts."""
  startsAt: DateTime
  """
  The date and time when the discount ends. For open-ended discounts, use `null`.
  """
  endsAt: DateTime
  """The code to use the discount."""
  code: String
  """
  The maximum number of times that the discount can be used. For open-ended discounts, use `null`.
  """
  usageLimit: Int
  """Whether the discount can be applied only once per customer."""
  appliesOncePerCustomer: Boolean
  """
  The minimum subtotal or quantity that's required for the discount to be applied.
  """
  minimumRequirement: Shopify_DiscountMinimumRequirementInput
  """The customers that are eligible to use the discount."""
  customerSelection: Shopify_DiscountCustomerSelectionInput
  """A list of destinations where the discount will apply."""
  destination: Shopify_DiscountShippingDestinationSelectionInput
  """The maximum shipping price that qualifies for the discount."""
  maximumShippingPrice: Shopify_Decimal
  """
  The number of times a discount applies on recurring purchases (subscriptions).
  """
  recurringCycleLimit: Int
  """Whether the discount applies on regular one-time-purchase items."""
  appliesOnOneTimePurchase: Boolean
  """Whether the discount applies on subscription items."""
  appliesOnSubscription: Boolean
}

"""Return type for `discountCodeFreeShippingUpdate` mutation."""
type Shopify_DiscountCodeFreeShippingUpdatePayload {
  """The updated code discount."""
  codeDiscountNode: Shopify_DiscountCodeNode
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""A node containing a code discount and its related events."""
type Shopify_DiscountCodeNode implements Shopify_HasEvents & Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_Node {
  """The underlying code discount object."""
  codeDiscount: Shopify_DiscountCode!
  """The paginated list of events associated with the host subject."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_EventSortKeys = ID
    """
    Supported filter parameters:
     - `comments`
     - `created_at`
     - `subject_type`
     - `verb`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_EventConnection!
  """A globally-unique identifier."""
  id: ID!
  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String
    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield
  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String
    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!
  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String
    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!
  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!
    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield
  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
}

"""
An auto-generated type for paginating through multiple DiscountCodeNodes.
"""
type Shopify_DiscountCodeNodeConnection {
  """A list of edges."""
  edges: [Shopify_DiscountCodeNodeEdge!]!
  """A list of the nodes contained in DiscountCodeNodeEdge."""
  nodes: [Shopify_DiscountCodeNode!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DiscountCodeNode and a cursor during pagination.
"""
type Shopify_DiscountCodeNodeEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of DiscountCodeNodeEdge."""
  node: Shopify_DiscountCodeNode!
}

"""Return type for `discountCodeRedeemCodeBulkDelete` mutation."""
type Shopify_DiscountCodeRedeemCodeBulkDeletePayload {
  """The asynchronous job that deletes the discount redeem codes."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""The set of valid sort keys for the DiscountCode query."""
enum Shopify_DiscountCodeSortKeys {
  """Sort by the `code` value."""
  CODE
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
A list of collections that the discount can have as a prerequisite or a list of
collections to which the discount can be applied.
"""
type Shopify_DiscountCollections {
  """
  The list of collections that the discount can have as a prerequisite or the
  list of collections to which the discount can be applied.
  """
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CollectionConnection!
}

"""Specifies the collections attached to a discount."""
input Shopify_DiscountCollectionsInput {
  """Specifies list of collection ids to add."""
  add: [ID!]
  """Specifies list of collection ids to remove."""
  remove: [ID!]
}

"""Determines which discount classes the discount can combine with."""
type Shopify_DiscountCombinesWith {
  """Combines with order discounts."""
  orderDiscounts: Boolean!
  """Combines with product discounts."""
  productDiscounts: Boolean!
  """Combines with shipping discounts."""
  shippingDiscounts: Boolean!
}

"""Determines which discount classes the discount can combine with."""
input Shopify_DiscountCombinesWithInput {
  """Combines with product discounts."""
  productDiscounts: Boolean = false
  """Combines with order discounts."""
  orderDiscounts: Boolean = false
  """Combines with shipping discounts."""
  shippingDiscounts: Boolean = false
}

"""The shipping destinations where the discount can be applied."""
type Shopify_DiscountCountries {
  """The codes for the countries where the discount can be applied."""
  countries: [CountryCode!]!
  """
  Whether the discount is applicable to countries that have not been defined in the shop's shipping zones.
  """
  includeRestOfWorld: Boolean!
}

"""
Specifies a list of countries to add or remove from the free shipping discount.
"""
input Shopify_DiscountCountriesInput {
  """
  The country codes to add to the list of countries where the discount applies.
  """
  add: [CountryCode!]
  """
  The country codes to remove from the list of countries where the discount applies.
  """
  remove: [CountryCode!]
  """
  Whether the discount code is applicable to countries that have not been defined in the shop's shipping zones.
  """
  includeRestOfWorld: Boolean = false
}

"""
The `DiscountCountryAll` object lets you target all countries as shipping destination for discount eligibility.
"""
type Shopify_DiscountCountryAll {
  """
  Whether the discount can be applied to all countries as shipping destination. This value is always `true`.
  """
  allCountries: Boolean!
}

"""
The `DiscountCustomerAll` object lets you target all customers for discount eligibility.
"""
type Shopify_DiscountCustomerAll {
  """
  Whether the discount can be applied by all customers. This value is always `true`.
  """
  allCustomers: Boolean!
}

"""
The prerequisite items and prerequisite value that a customer must have on the order for the discount to be applicable.
"""
type Shopify_DiscountCustomerBuys {
  """The items required for the discount to be applicable."""
  items: Shopify_DiscountItems!
  """The prerequisite value."""
  value: Shopify_DiscountCustomerBuysValue!
}

"""The prerequisite items and quantity for the discount."""
input Shopify_DiscountCustomerBuysInput {
  """The quantity of prerequisite items."""
  value: Shopify_DiscountCustomerBuysValueInput
  """
  The IDs of items that the customer buys. The items can be either collections or products.
  """
  items: Shopify_DiscountItemsInput
}

"""
The prerequisite for the discount to be applicable. For example, the discount
might require a customer to buy a minimum quantity of select items.
Alternatively, the discount might require a customer to spend a minimum amount
on select items.
"""
union Shopify_DiscountCustomerBuysValue = Shopify_DiscountPurchaseAmount | Shopify_DiscountQuantity

"""
The prerequisite quantity or the minimum purchase amount required for the discount.
"""
input Shopify_DiscountCustomerBuysValueInput {
  """The quantity of prerequisite items."""
  quantity: Shopify_UnsignedInt64
  """
  The prerequisite minimum purchase amount required for the discount to be applicable.
  """
  amount: Shopify_Decimal
}

"""
The qualifying items in an order, the quantity of each one, and the total value of the discount.
"""
type Shopify_DiscountCustomerGets {
  """Whether the discount applies on regular one-time-purchase items."""
  appliesOnOneTimePurchase: Boolean!
  """Whether the discount applies on subscription items."""
  appliesOnSubscription: Boolean!
  """The items to which the discount applies."""
  items: Shopify_DiscountItems!
  """Entitled quantity and the discount value."""
  value: Shopify_DiscountCustomerGetsValue!
}

"""
Specifies the items that will be discounted, the quantity of items that will be discounted, and the value of discount.
"""
input Shopify_DiscountCustomerGetsInput {
  """The quantity of items discounted and the discount value."""
  value: Shopify_DiscountCustomerGetsValueInput
  """
  The IDs of the items that the customer gets. The items can be either collections or products.
  """
  items: Shopify_DiscountItemsInput
  """Whether the discount applies on regular one-time-purchase items."""
  appliesOnOneTimePurchase: Boolean
  """Whether the discount applies on subscription items."""
  appliesOnSubscription: Boolean
}

"""
The type of the discount value and how it will be applied. For example, it might
be a percentage discount on a fixed number of items. Alternatively, it might be
a fixed amount evenly distributed across all items or on each individual item. A
third example is a percentage discount on all items.
"""
union Shopify_DiscountCustomerGetsValue = Shopify_DiscountAmount | Shopify_DiscountOnQuantity | Shopify_DiscountPercentage

"""Specifies the quantity of items discounted and the discount value."""
input Shopify_DiscountCustomerGetsValueInput {
  """The quantity of the items that are discounted and the discount value."""
  discountOnQuantity: Shopify_DiscountOnQuantityInput
  """
  The percentage value of the discount. Value must be between 0.00 - 1.00.
  """
  percentage: Float
  """The value of the discount."""
  discountAmount: Shopify_DiscountAmountInput
}

"""A list of customers eligible for the discount."""
type Shopify_DiscountCustomers {
  """The list of customers eligible for the discount."""
  customers: [Shopify_Customer!]!
}

"""
A list of customer segments that contain the customers that the discount applies to.
"""
type Shopify_DiscountCustomerSegments {
  """
  A list of customer segments that contain the customers who can use the discount.
  """
  segments: [Shopify_Segment!]!
}

"""
Specifies which customer segments to add to or remove from the discount.
"""
input Shopify_DiscountCustomerSegmentsInput {
  """
  A list of customer segments to add to the current list of customer segments.
  """
  add: [ID!]
  """
  A list of customer segments to remove from the current list of customer segments.
  """
  remove: [ID!]
}

"""
The type used for targeting a set of customers who are eligible for the
discount. For example, the discount might be available to all customers or it
might only be available to a specific set of customers. You can define the set
of customers by targeting a list of customer segments, or by targeting a list of
specific customers.
"""
union Shopify_DiscountCustomerSelection = Shopify_DiscountCustomerAll | Shopify_DiscountCustomerSegments | Shopify_DiscountCustomers

"""Specifies the customers who can use this discount."""
input Shopify_DiscountCustomerSelectionInput {
  """Whether all customers can use this discount."""
  all: Boolean
  """The list of customer IDs to add or remove from the list of customers."""
  customers: Shopify_DiscountCustomersInput
  """
  The list of customer segment IDs to add or remove from the list of customer segments.
  """
  customerSegments: Shopify_DiscountCustomerSegmentsInput
}

"""Specifies which customers to add to or remove from the discount."""
input Shopify_DiscountCustomersInput {
  """
  A list of customers to add to the current list of customers who can use the discount.
  """
  add: [ID!]
  """
  A list of customers to remove from the current list of customers who can use the discount.
  """
  remove: [ID!]
}

"""
The type of discount that will be applied. Currently, only a percentage discount is supported.
"""
union Shopify_DiscountEffect = Shopify_DiscountPercentage

"""
Specifies how the discount will be applied. Currently, only percentage off is supported.
"""
input Shopify_DiscountEffectInput {
  """
  The percentage value of the discount. Value must be between 0.00 - 1.00.
  """
  percentage: Float
}

"""Possible error codes that can be returned by `DiscountUserError`."""
enum Shopify_DiscountErrorCode {
  """The input value is blank."""
  BLANK
  """The input value needs to be blank."""
  PRESENT
  """The input value should be equal to the value allowed."""
  EQUAL_TO
  """The input value should be greater than the minimum allowed value."""
  GREATER_THAN
  """
  The input value should be greater than or equal to the minimum value allowed.
  """
  GREATER_THAN_OR_EQUAL_TO
  """The input value is invalid."""
  INVALID
  """
  The input value should be less than or equal to the maximum value allowed.
  """
  LESS_THAN_OR_EQUAL_TO
  """The input value should be less than the maximum value allowed."""
  LESS_THAN
  """The input value is already taken."""
  TAKEN
  """The input value is too long."""
  TOO_LONG
  """The input value is too short."""
  TOO_SHORT
  """Unexpected internal error happened."""
  INTERNAL_ERROR
  """Too many arguments provided."""
  TOO_MANY_ARGUMENTS
  """Missing a required argument."""
  MISSING_ARGUMENT
  """The value exceeded the maximum allowed value."""
  EXCEEDED_MAX
  """Specify a minimum subtotal or a quantity, but not both."""
  MINIMUM_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT
  """
  The active period overlaps with other automatic discounts. At any given time, only one automatic discount can be active.
  """
  ACTIVE_PERIOD_OVERLAP
  """The value is outside of the allowed range."""
  VALUE_OUTSIDE_RANGE
  """The attribute selection contains conflicting settings."""
  CONFLICT
  """The value is already present through another selection."""
  IMPLICIT_DUPLICATE
  """The input value is already present."""
  DUPLICATE
  """The input value isn't included in the list."""
  INCLUSION
  """The `combinesWith` settings are invalid for the discount class."""
  INVALID_COMBINES_WITH_FOR_DISCOUNT_CLASS
  """The discountClass is invalid for the price rule."""
  INVALID_DISCOUNT_CLASS_FOR_PRICE_RULE
  """
  The active period overlaps with too many other app-provided discounts. There's
  a limit on the number of app discounts that can be active at any given time.
  """
  MAX_APP_DISCOUNTS
}

"""
The type used to target the items required for discount eligibility, or the
items to which the application of a discount might apply. For example, for a
customer to be eligible for a discount, they're required to add an item from a
specified collection to their order. Alternatively, a customer might be required
to add a specific product or product variant. When using this type to target
which items the discount will apply to, the discount might apply to all items on
the order, or to specific products and product variants, or items in a given collection.
"""
union Shopify_DiscountItems = Shopify_AllDiscountItems | Shopify_DiscountCollections | Shopify_DiscountProducts

"""
The items attached to a discount. You can specify the discount items by product ID or collection ID.
"""
input Shopify_DiscountItemsInput {
  """The products and product variants that are attached to a discount."""
  products: Shopify_DiscountProductsInput
  """The collections that are attached to a discount."""
  collections: Shopify_DiscountCollectionsInput
  """Whether all items should be selected."""
  all: Boolean
}

"""The minimum quantity of items required for the discount to apply."""
type Shopify_DiscountMinimumQuantity {
  """
  The minimum quantity of items that's required for the discount to be applied.
  """
  greaterThanOrEqualToQuantity: Shopify_UnsignedInt64!
}

"""The minimum quantity required for the discount."""
input Shopify_DiscountMinimumQuantityInput {
  """
  The minimum quantity of items that's required for the discount to be applied.
  """
  greaterThanOrEqualToQuantity: Shopify_UnsignedInt64
}

"""
The type of mimumum requirement that must be met for the discount to be applied.
For example, a customer must spend a minimum subtotal to be eligible for the
discount. Alternatively, a customer must purchase a minimum quantity of items to
be eligible for the discount.
"""
union Shopify_DiscountMinimumRequirement = Shopify_DiscountMinimumQuantity | Shopify_DiscountMinimumSubtotal

"""The minimum quantity or subtotal required for a discount."""
input Shopify_DiscountMinimumRequirementInput {
  """The minimum required quantity."""
  quantity: Shopify_DiscountMinimumQuantityInput
  """The minimum required subtotal."""
  subtotal: Shopify_DiscountMinimumSubtotalInput
}

"""The minimum subtotal required for the discount to apply."""
type Shopify_DiscountMinimumSubtotal {
  """The minimum subtotal that's required for the discount to be applied."""
  greaterThanOrEqualToSubtotal: Shopify_MoneyV2!
}

"""The minimum subtotal required for a discount."""
input Shopify_DiscountMinimumSubtotalInput {
  """The minimum subtotal that's required for the discount to be applied."""
  greaterThanOrEqualToSubtotal: Shopify_Decimal
}

"""A discount wrapper node."""
type Shopify_DiscountNode implements Shopify_HasEvents & Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_Node {
  """A discount."""
  discount: Shopify_Discount!
  """The paginated list of events associated with the host subject."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_EventSortKeys = ID
    """
    Supported filter parameters:
     - `comments`
     - `created_at`
     - `subject_type`
     - `verb`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_EventConnection!
  """A globally-unique identifier."""
  id: ID!
  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String
    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield
  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String
    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!
  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String
    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!
  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!
    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield
  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
}

"""An auto-generated type for paginating through multiple DiscountNodes."""
type Shopify_DiscountNodeConnection {
  """A list of edges."""
  edges: [Shopify_DiscountNodeEdge!]!
  """A list of the nodes contained in DiscountNodeEdge."""
  nodes: [Shopify_DiscountNode!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DiscountNode and a cursor during pagination.
"""
type Shopify_DiscountNodeEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of DiscountNodeEdge."""
  node: Shopify_DiscountNode!
}

"""
The quantity of items discounted, the discount value, and how the discount will be applied.
"""
type Shopify_DiscountOnQuantity {
  """The discount's effect on qualifying items."""
  effect: Shopify_DiscountEffect!
  """
  The number of items being discounted. The customer must have at least this
  many items of specified products or product variants in their order to be
  eligible for the discount.
  """
  quantity: Shopify_DiscountQuantity!
}

"""Specifies the quantity of items discounted and the discount value."""
input Shopify_DiscountOnQuantityInput {
  """The quantity of items that are discounted."""
  quantity: Shopify_UnsignedInt64
  """The percentage value of the discount."""
  effect: Shopify_DiscountEffectInput
}

"""
A discount effect that gives customers a percentage off of specified items on their order.
"""
type Shopify_DiscountPercentage {
  """The percentage value of the discount."""
  percentage: Float!
}

"""
A list of products and product variants that the discount can have as a
prerequisite or a list of products and product variants to which the discount
can be applied.
"""
type Shopify_DiscountProducts {
  """
  The list of product variants that the discount can have as a prerequisite or
  the list of product variants to which the discount can be applied.
  """
  productVariants(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductVariantConnection!
  """
  The list of products that the discount can have as a prerequisite or the list
  of products to which the discount can be applied.
  """
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductConnection!
}

"""Specifies the products and product variants attached to a discount."""
input Shopify_DiscountProductsInput {
  """Specifies list of product ids to add."""
  productsToAdd: [ID!]
  """Specifies list of product ids to remove."""
  productsToRemove: [ID!]
  """Specifies list of product variant ids to add."""
  productVariantsToAdd: [ID!]
  """Specifies list of product variant ids to remove."""
  productVariantsToRemove: [ID!]
}

"""
A purchase amount in the context of a discount. This object can be used to
define the minimum purchase amount required for a discount to be applicable.
"""
type Shopify_DiscountPurchaseAmount {
  """The purchase amount in decimal format."""
  amount: Shopify_Decimal!
}

"""
A quantity of items in the context of a discount. This object can be used to
define the minimum quantity of items required to apply a discount.
Alternatively, it can be used to define the quantity of items that can be discounted.
"""
type Shopify_DiscountQuantity {
  """The quantity of items."""
  quantity: Shopify_UnsignedInt64!
}

"""
A code that a customer can use at checkout to receive a discount. For example, a
customer can use the redeem code 'SUMMER20' at checkout to receive a 20%
discount on their entire order.
"""
type Shopify_DiscountRedeemCode {
  """
  The number of times that the discount redeem code has been used. This value is
  updated asynchronously and can be different than the actual usage count.
  """
  asyncUsageCount: Int!
  """The code that a customer can use at checkout to receive a discount."""
  code: String!
  """The application that created the discount redeem code."""
  createdBy: Shopify_App
  """A globally-unique identifier of the discount redeem code."""
  id: ID!
}

"""Return type for `discountRedeemCodeBulkAdd` mutation."""
type Shopify_DiscountRedeemCodeBulkAddPayload {
  """
  The ID of the discount redeem code bulk creation operation. The properties and
  status of the operation can be tracked using the
  [`DiscountRedeemCodeBulkCreation` query](https://shopify.dev/api/admin-graphql/2022-04/queries/discountRedeemCodeBulkCreation).
  """
  bulkCreation: Shopify_DiscountRedeemCodeBulkCreation
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DiscountUserError!]!
}

"""
The properties and status of a bulk discount redeem code creation operation.
"""
type Shopify_DiscountRedeemCodeBulkCreation implements Shopify_Node {
  """
  The result of each code creation operation associated with the bulk creation
  operation including any errors that might have occurred during the operation.
  """
  codes(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_DiscountRedeemCodeBulkCreationCodeConnection!
  """The number of codes to create."""
  codesCount: Int!
  """The date and time when the bulk creation was created."""
  createdAt: DateTime!
  """The code discount associated with the created codes."""
  discountCode: Shopify_DiscountCodeNode
  """
  Whether the bulk creation is still queued (`false`) or has been run (`true`).
  """
  done: Boolean!
  """The number of codes that weren't created successfully."""
  failedCount: Int!
  """A globally-unique identifier."""
  id: ID!
  """The number of codes created successfully."""
  importedCount: Int!
}

"""
A result of a discount redeem code creation operation created by a bulk creation.
"""
type Shopify_DiscountRedeemCodeBulkCreationCode {
  """The code to use in the discount redeem code creation operation."""
  code: String!
  """
  The successfully created discount redeem code.
  
  If the discount redeem code couldn't be created, then this field is `null``.
  """
  discountRedeemCode: Shopify_DiscountRedeemCode
  """
  A list of errors that occurred during the creation operation of the discount redeem code.
  """
  errors: [Shopify_DiscountUserError!]!
}

"""
An auto-generated type for paginating through multiple DiscountRedeemCodeBulkCreationCodes.
"""
type Shopify_DiscountRedeemCodeBulkCreationCodeConnection {
  """A list of edges."""
  edges: [Shopify_DiscountRedeemCodeBulkCreationCodeEdge!]!
  """
  A list of the nodes contained in DiscountRedeemCodeBulkCreationCodeEdge.
  """
  nodes: [Shopify_DiscountRedeemCodeBulkCreationCode!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DiscountRedeemCodeBulkCreationCode and a cursor during pagination.
"""
type Shopify_DiscountRedeemCodeBulkCreationCodeEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of DiscountRedeemCodeBulkCreationCodeEdge."""
  node: Shopify_DiscountRedeemCodeBulkCreationCode!
}

"""
An auto-generated type for paginating through multiple DiscountRedeemCodes.
"""
type Shopify_DiscountRedeemCodeConnection {
  """A list of edges."""
  edges: [Shopify_DiscountRedeemCodeEdge!]!
  """A list of the nodes contained in DiscountRedeemCodeEdge."""
  nodes: [Shopify_DiscountRedeemCode!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DiscountRedeemCode and a cursor during pagination.
"""
type Shopify_DiscountRedeemCodeEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of DiscountRedeemCodeEdge."""
  node: Shopify_DiscountRedeemCode!
}

"""The redeem code to attach to a discount."""
input Shopify_DiscountRedeemCodeInput {
  """
  The code that a customer can use at checkout to receive the associated discount.
  """
  code: String!
}

"""A shareable URL for a discount code."""
type Shopify_DiscountShareableUrl {
  """
  The image URL of the item (product or collection) to which the discount applies.
  """
  targetItemImage: Shopify_Image
  """The type of page that's associated with the URL."""
  targetType: Shopify_DiscountShareableUrlTargetType!
  """The title of the page that's associated with the URL."""
  title: String!
  """The URL for the discount code."""
  url: URL!
}

"""The type of page where a shareable discount URL lands."""
enum Shopify_DiscountShareableUrlTargetType {
  """The URL lands on a home page."""
  HOME
  """The URL lands on a product page."""
  PRODUCT
  """The URL lands on a collection page."""
  COLLECTION
}

"""
The type used to target the eligible countries of an order's shipping
destination for which the discount applies. For example, the discount might be
applicable when shipping to all countries, or only to a set of countries.
"""
union Shopify_DiscountShippingDestinationSelection = Shopify_DiscountCountries | Shopify_DiscountCountryAll

"""
Specifies the destinations where the free shipping discount will be applied.
"""
input Shopify_DiscountShippingDestinationSelectionInput {
  """Whether the discount code applies to all countries."""
  all: Boolean = false
  """A list of countries where the discount code will apply."""
  countries: Shopify_DiscountCountriesInput
}

"""The set of valid sort keys for the Discount query."""
enum Shopify_DiscountSortKeys {
  """Sort by the `starts_at` value."""
  STARTS_AT
  """Sort by the `ends_at` value."""
  ENDS_AT
  """Sort by the `title` value."""
  TITLE
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `updated_at` value."""
  UPDATED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""The status of the discount."""
enum Shopify_DiscountStatus {
  """The discount is active."""
  ACTIVE
  """The discount is expired."""
  EXPIRED
  """The discount is scheduled."""
  SCHEDULED
}

"""
The type of line (line item or shipping line) on an order that the subscription discount is applicable towards.
"""
enum Shopify_DiscountTargetType {
  """The discount applies onto line items."""
  LINE_ITEM
  """The discount applies onto shipping lines."""
  SHIPPING_LINE
}

"""The type of the subscription discount."""
enum Shopify_DiscountType {
  """Manual discount type."""
  MANUAL
  """Code discount type."""
  CODE_DISCOUNT
}

"""An error that occurs during the execution of a discount mutation."""
type Shopify_DiscountUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_DiscountErrorCode
  """Extra information about this error."""
  extraInfo: String
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""Represents an error in the input of a mutation."""
interface Shopify_DisplayableError {
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""Return type for `disputeEvidenceUpdate` mutation."""
type Shopify_DisputeEvidenceUpdatePayload {
  """The updated dispute evidence."""
  disputeEvidence: Shopify_ShopifyPaymentsDisputeEvidence
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DisputeEvidenceUpdateUserError!]!
}

"""An error that occurs during the execution of `DisputeEvidenceUpdate`."""
type Shopify_DisputeEvidenceUpdateUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_DisputeEvidenceUpdateUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `DisputeEvidenceUpdateUserError`.
"""
enum Shopify_DisputeEvidenceUpdateUserErrorCode {
  """Dispute evidence could not be found."""
  DISPUTE_EVIDENCE_NOT_FOUND
  """Evidence already accepted."""
  EVIDENCE_ALREADY_ACCEPTED
  """Evidence past due date."""
  EVIDENCE_PAST_DUE_DATE
  """Combined files size is too large."""
  FILES_SIZE_EXCEEDED_LIMIT
  """Individual file size is too large."""
  TOO_LARGE
  """The input value is invalid."""
  INVALID
}

"""The possible statuses of a dispute."""
enum Shopify_DisputeStatus {
  NEEDS_RESPONSE
  UNDER_REVIEW
  CHARGE_REFUNDED
  ACCEPTED
  WON
  LOST
}

"""The possible types for a dispute."""
enum Shopify_DisputeType {
  """The dispute has turned into a chargeback."""
  CHARGEBACK
  """The dispute is in the inquiry phase."""
  INQUIRY
}

"""
A unique string that represents the address of a Shopify store on the Internet.
"""
type Shopify_Domain implements Shopify_Node {
  """The host name of the domain. For example, `example.com`."""
  host: String!
  """A globally-unique identifier."""
  id: ID!
  """The localization of the domain, if the domain doesn't redirect."""
  localization: Shopify_DomainLocalization
  """The web presence of the domain."""
  marketWebPresence: Shopify_MarketWebPresence
  """Whether SSL is enabled."""
  sslEnabled: Boolean!
  """The URL of the domain (for example, `https://example.com`)."""
  url: URL!
}

"""The country and language settings assigned to a domain."""
type Shopify_DomainLocalization {
  """
  The ISO codes for the domain’s alternate locales. For example, `["en"]`.
  """
  alternateLocales: [String!]!
  """
  The ISO code for the country assigned to the domain. For example, `"CA"` or "*" for a domain set to "Rest of world".
  """
  country: String
  """The ISO code for the domain’s default locale. For example, `"en"`."""
  defaultLocale: String!
}

"""
An order that a merchant creates on behalf of a customer. Draft orders are
useful for merchants that need to do the following tasks:

- Create new orders for sales made by phone, in person, by chat, or elsewhere.
When a merchant accepts payment for a draft order, an order is created.
- Send invoices to customers to pay with a secure checkout link.
- Use custom items to represent additional costs or products that aren't displayed in a shop's inventory.
- Re-create orders manually from active sales channels.
- Sell products at discount or wholesale rates.
- Take pre-orders.
- Save an order as a draft and resume working on it later.

For Draft orders in multiple currencies `presentment_money` is the source of
truth for what a customer is going to be charged and `shop_money` is an estimate
of what the merchant might receive in their local currency.

**Caution:** Only use this data if it's required for your app's functionality.
Shopify will restrict [access to
scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a
legitimate use for the associated data.
"""
type Shopify_DraftOrder implements Shopify_CommentEventSubject & Shopify_HasEvents & Shopify_HasLocalizationExtensions & Shopify_HasMetafields & Shopify_LegacyInteroperability & Shopify_Navigable & Shopify_Node {
  """The order-level discount applied to the draft order."""
  appliedDiscount: Shopify_DraftOrderAppliedDiscount
  """The billing address of the customer."""
  billingAddress: Shopify_MailingAddress
  """Whether the billing address matches the shipping address."""
  billingAddressMatchesShippingAddress: Boolean!
  """
  The date and time when the draft order converted to a new order,
  and the draft order's status changed to **Completed**.
  """
  completedAt: DateTime
  """The date and time when the draft order was created in Shopify."""
  createdAt: DateTime!
  """
  The three letter code for the currency of the store at the time of the most recent update to the draft order.
  """
  currencyCode: Shopify_CurrencyCode!
  """
  The custom information added to the draft order on behalf of the customer.
  """
  customAttributes: [Shopify_Attribute!]!
  """
  The customer who will be sent an invoice for the draft order, if there is one.
  """
  customer: Shopify_Customer
  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!
  """
  The email address of the customer, which is used to send notifications.
  """
  email: String
  """The list of events associated with the draft order."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_EventSortKeys = ID
    """
    Supported filter parameters:
     - `comments`
     - `created_at`
     - `subject_type`
     - `verb`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_EventConnection!
  """Whether the merchant has added timeline comments to the draft order."""
  hasTimelineComment: Boolean!
  """A globally-unique identifier."""
  id: ID!
  """The subject defined for the draft invoice email template."""
  invoiceEmailTemplateSubject: String!
  """The date and time when the invoice was last emailed to the customer."""
  invoiceSentAt: DateTime
  """
  The link to the checkout, which is sent to the customer in the invoice email.
  """
  invoiceUrl: URL
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: Shopify_UnsignedInt64!
  """The list of the line items in the draft order."""
  lineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_DraftOrderLineItemConnection!
  """
  The subtotal of the line items and corresponding discounts. The subtotal
  doesn't include shipping charges, shipping discounts, taxes, or order discounts.
  """
  lineItemsSubtotalPrice: Shopify_MoneyBag!
  """List of localization extensions for the resource."""
  localizationExtensions(
    """The country codes of the extensions."""
    countryCodes: [CountryCode!]
    """The purpose of the extensions."""
    purposes: [Shopify_LocalizationExtensionPurpose!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_LocalizationExtensionConnection!
  """The name of the selected market."""
  marketName: String!
  """The selected market region country code for the draft order."""
  marketRegionCountryCode: CountryCode!
  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String
    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield
  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String
    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!
  """
  The identifier for the draft order, which is unique within the store. For example, _#D1223_.
  """
  name: String!
  """The text from an optional note attached to the draft order."""
  note2: String
  """The order that was created from this draft order."""
  order: Shopify_Order
  """The associated payment terms for this draft order."""
  paymentTerms: Shopify_PaymentTerms
  """The phone number assigned to the draft order."""
  phone: String
  """The payment currency of the customer for this draft order."""
  presentmentCurrencyCode: Shopify_CurrencyCode!
  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!
    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield
  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
  """The purchasing entity for the draft order."""
  purchasingEntity: Shopify_PurchasingEntity
  """
  Whether the Draft Order is ready and can be completed. Draft Orders
          might have asynchronous operations that can take time to finish.
  """
  ready: Boolean!
  """The time after which inventory will automatically be restocked."""
  reserveInventoryUntil: DateTime
  """The shipping address of the customer."""
  shippingAddress: Shopify_MailingAddress
  """The line item that contains the shipping costs."""
  shippingLine: Shopify_ShippingLine
  """Status of the draft order."""
  status: Shopify_DraftOrderStatus!
  """
  The subtotal of the line items and their discounts. The subtotal doesn't
  include shipping charges, shipping discounts, or taxes.
  """
  subtotalPrice: Shopify_Money!
  """
  A subtotal of the line items and corresponding discounts. The subtotal doesn't
  include shipping charges, shipping discounts, or taxes.
  """
  subtotalPriceSet: Shopify_MoneyBag!
  """
  A comma separated list of tags associated with the draft order. Updating `tags` overwrites
  any existing tags that were previously added to the draft order. To add new tags without overwriting
  existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
  mutation.
  """
  tags: [String!]!
  """Whether the draft order is tax exempt."""
  taxExempt: Boolean!
  """Total amount of taxes charged for each line item and shipping line."""
  taxLines: [Shopify_TaxLine!]!
  """Whether the line item prices include taxes."""
  taxesIncluded: Boolean!
  """The total discounts for this draft order."""
  totalDiscountsSet: Shopify_MoneyBag!
  """The total price of line items for this draft order."""
  totalLineItemsPriceSet: Shopify_MoneyBag!
  """
  The total amount of the draft order, including taxes, shipping charges, and discounts.
  """
  totalPrice: Shopify_Money!
  """
  The total amount of the draft order including taxes, shipping charges, and discounts.
  """
  totalPriceSet: Shopify_MoneyBag!
  """The total shipping charge for the draft order."""
  totalShippingPrice: Shopify_Money!
  """The total shipping charge for the draft order."""
  totalShippingPriceSet: Shopify_MoneyBag!
  """The total amount of taxes for the draft order."""
  totalTax: Shopify_Money!
  """The total amount of taxes for the draft order."""
  totalTaxSet: Shopify_MoneyBag!
  """The total weight in grams of the draft order."""
  totalWeight: Shopify_UnsignedInt64!
  """
  The date and time when the draft order was last changed.
  The format is YYYY-MM-DD HH:mm:ss. For example, 2016-02-05 17:04:01.
  """
  updatedAt: DateTime!
  """
  Whether the draft order will be visible to the customer on the self-serve portal.
  """
  visibleToCustomer: Boolean!
}

"""The order-level discount applied to a draft order."""
type Shopify_DraftOrderAppliedDiscount {
  """Amount of the order-level discount that is applied to the draft order."""
  amount: Shopify_Money! @deprecated(reason: "Use `amountV2` instead.")
  """
  The amount of money discounted, with values shown in both shop currency and presentment currency.
  """
  amountSet: Shopify_MoneyBag!
  """Amount of money discounted."""
  amountV2: Shopify_MoneyV2!
  """Description of the order-level discount."""
  description: String!
  """Name of the order-level discount."""
  title: String
  """
  The order level discount amount. If `valueType` is `"percentage"`,
  then `value` is the percentage discount.
  """
  value: Float!
  """Type of the order-level discount."""
  valueType: Shopify_DraftOrderAppliedDiscountType!
}

"""
The input fields for applying an order-level discount to a draft order.
"""
input Shopify_DraftOrderAppliedDiscountInput {
  """
  The applied amount of the discount.
  If the type of the discount is fixed amount, then this is the fixed dollar amount.
  If the type is percentage, then this is the subtotal multiplied by the percentage.
  """
  amount: Shopify_Money
  """Reason for the discount."""
  description: String
  """Title of the discount."""
  title: String
  """
  The value of the discount.
  If the type of the discount is fixed amount, then this is a fixed dollar amount.
  If the type is percentage, then this is the percentage.
  """
  value: Float!
  """The type of discount."""
  valueType: Shopify_DraftOrderAppliedDiscountType!
}

"""The valid discount types that can be applied to a draft order."""
enum Shopify_DraftOrderAppliedDiscountType {
  """A fixed amount in the store's currency."""
  FIXED_AMOUNT
  """A percentage of the order subtotal."""
  PERCENTAGE
}

"""Return type for `draftOrderBulkAddTags` mutation."""
type Shopify_DraftOrderBulkAddTagsPayload {
  """The asynchronous job for adding tags to the draft orders."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `draftOrderBulkDelete` mutation."""
type Shopify_DraftOrderBulkDeletePayload {
  """The asynchronous job for deleting the draft orders."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `draftOrderBulkRemoveTags` mutation."""
type Shopify_DraftOrderBulkRemoveTagsPayload {
  """The asynchronous job for removing tags from the draft orders."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `draftOrderCalculate` mutation."""
type Shopify_DraftOrderCalculatePayload {
  """The calculated properties for a draft order."""
  calculatedDraftOrder: Shopify_CalculatedDraftOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `draftOrderComplete` mutation."""
type Shopify_DraftOrderCompletePayload {
  """The completed draft order."""
  draftOrder: Shopify_DraftOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""An auto-generated type for paginating through multiple DraftOrders."""
type Shopify_DraftOrderConnection {
  """A list of edges."""
  edges: [Shopify_DraftOrderEdge!]!
  """A list of the nodes contained in DraftOrderEdge."""
  nodes: [Shopify_DraftOrder!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `draftOrderCreateFromOrder` mutation."""
type Shopify_DraftOrderCreateFromOrderPayload {
  """The created Draft Order."""
  draftOrder: Shopify_DraftOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `draftOrderCreateMerchantCheckout` mutation."""
type Shopify_DraftOrderCreateMerchantCheckoutPayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `draftOrderCreate` mutation."""
type Shopify_DraftOrderCreatePayload {
  """The created draft order."""
  draftOrder: Shopify_DraftOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Specifies the draft order to delete by its ID."""
input Shopify_DraftOrderDeleteInput {
  """The ID of the draft order to delete."""
  id: ID!
}

"""Return type for `draftOrderDelete` mutation."""
type Shopify_DraftOrderDeletePayload {
  """The ID of the deleted draft order."""
  deletedId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `draftOrderDuplicate` mutation."""
type Shopify_DraftOrderDuplicatePayload {
  """The newly duplicated draft order."""
  draftOrder: Shopify_DraftOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An auto-generated type which holds one DraftOrder and a cursor during pagination.
"""
type Shopify_DraftOrderEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of DraftOrderEdge."""
  node: Shopify_DraftOrder!
}

"""The input fields used to create or update a draft order."""
input Shopify_DraftOrderInput {
  """
  The discount that will be applied to the draft order.
  A draft order line item can have one discount. A draft order can also have one order-level discount.
  """
  appliedDiscount: Shopify_DraftOrderAppliedDiscountInput
  """The mailing address associated with the payment method."""
  billingAddress: Shopify_MailingAddressInput
  """Extra information added to the customer."""
  customAttributes: [Shopify_AttributeInput!]
  """The customer's email address."""
  email: String
  """
  Product variant line item or custom line item associated to the draft order.
  Each draft order must include at least one line item.
  """
  lineItems: [Shopify_DraftOrderLineItemInput!]
  """Metafields attached to the draft order."""
  metafields: [Shopify_MetafieldInput!]
  """The private metafields attached to the draft order."""
  privateMetafields: [Shopify_PrivateMetafieldInput!]
  """
  The localization extensions attached to the draft order. For example, Tax IDs.
  """
  localizationExtensions: [Shopify_LocalizationExtensionInput!]
  """
  The text of an optional note that a shop owner can attach to the draft order.
  """
  note: String
  """The mailing address to where the order will be shipped."""
  shippingAddress: Shopify_MailingAddressInput
  """A shipping line object, which details the shipping method used."""
  shippingLine: Shopify_ShippingLineInput
  """
  A comma separated list of tags that have been added to the draft order.
  """
  tags: [String!]
  """
  Whether or not taxes are exempt for the draft order.
  If false, then Shopify will refer to the taxable field for each line item.
  If a customer is applied to the draft order, then Shopify will use the customer's tax exempt field instead.
  """
  taxExempt: Boolean
  """
  Sent as part of a draft order object to load customer shipping information.
  """
  useCustomerDefaultAddress: Boolean
  """
  Whether the draft order will be visible to the customer on the self-serve portal.
  """
  visibleToCustomer: Boolean
  """Time after which inventory will automatically be restocked."""
  reserveInventoryUntil: DateTime
  """The payment currency of the customer for this draft order."""
  presentmentCurrencyCode: Shopify_CurrencyCode
  """The selected market region country code for the draft order."""
  marketRegionCountryCode: CountryCode
  """The customer's phone number."""
  phone: String
  """The fields used to create payment terms."""
  paymentTerms: Shopify_PaymentTermsInput
  """The purchasing entity for this draft order."""
  purchasingEntity: Shopify_PurchasingEntityInput
  """
  The source of the checkout.
            To use this field for sales attribution, you must register the channels that your app is managing.
            You can register the channels that your app is managing by completing
            [this Google Form](https://docs.google.com/forms/d/e/1FAIpQLScmVTZRQNjOJ7RD738mL1lGeFjqKVe_FM2tO9xsm21QEo5Ozg/viewform?usp=sf_link).
            After you've submitted your request, you need to wait for your request to be processed by Shopify.
            You can find a list of your channels in the Partner Dashboard, in your app's Marketplace extension.
            You need to specify the handle as the `source_name` value in your request.
            The handle is the channel that the order was placed from.
  """
  sourceName: String
}

"""Return type for `draftOrderInvoicePreview` mutation."""
type Shopify_DraftOrderInvoicePreviewPayload {
  """The draft order invoice email rendered as HTML to allow previewing."""
  previewHtml: Shopify_HTML
  """The subject preview for the draft order invoice email."""
  previewSubject: Shopify_HTML
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `draftOrderInvoiceSend` mutation."""
type Shopify_DraftOrderInvoiceSendPayload {
  """The draft order an invoice email is sent for."""
  draftOrder: Shopify_DraftOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""A line item included in a draft order."""
type Shopify_DraftOrderLineItem implements Shopify_Node {
  """
  The discount that will be applied to the line item or the overall order.
  """
  appliedDiscount: Shopify_DraftOrderAppliedDiscount
  """
  Whether the line item is a custom line item (`true`) or a product variant line item (`false`).
  """
  custom: Boolean!
  """
  A list of attributes that represent custom features or special requests.
  """
  customAttributes: [Shopify_Attribute!]!
  """
  Additional information (metafields) about the line item with the associated types.
  """
  customAttributesV2: [Shopify_TypedAttribute!]!
  """The line item price after discounts are applied."""
  discountedTotal: Shopify_Money!
  """The line item price after discounts are applied."""
  discountedTotalSet: Shopify_MoneyBag!
  """
  The `discountedTotal` divided by `quantity`, resulting in the value of the discount per unit.
  """
  discountedUnitPrice: Shopify_Money!
  """
  The `discountedTotal` divided by `quantity`, resulting in the value of the discount per unit.
  """
  discountedUnitPriceSet: Shopify_MoneyBag!
  """
  Name of the service provider who fulfilled the order.
  
  Valid values are either **manual** or the name of the provider.
  For example, **amazon**, **shipwire**.
  
  Deleted fulfillment services will return null.
  """
  fulfillmentService: Shopify_FulfillmentService
  """
  The weight of the line item in grams. The weight can only be specified if the line item is a custom
  line item.
  """
  grams: Int @deprecated(reason: "Use `weight` instead.")
  """A globally-unique identifier."""
  id: ID!
  """The image associated with the draft order line item."""
  image: Shopify_Image
  """Whether the line item is a gift card."""
  isGiftCard: Boolean!
  """The name of the product."""
  name: String!
  """
  The total price (without discounts) of the line item, based on the original unit price of the variant x quantity.
  """
  originalTotal: Shopify_Money!
  """
  The total price (without discounts) of the line item,based on the original unit price of the variant x quantity.
  """
  originalTotalSet: Shopify_MoneyBag!
  """The variant price without any discounts applied."""
  originalUnitPrice: Shopify_Money!
  """The variant price without any discounts applied."""
  originalUnitPriceSet: Shopify_MoneyBag!
  """The product corresponding to the line item’s product variant."""
  product: Shopify_Product
  """The number of product variants that are requested in the draft order."""
  quantity: Int!
  """Whether physical shipping is required for the variant."""
  requiresShipping: Boolean!
  """The SKU number of the product variant."""
  sku: String
  """
  A list of tax line objects, each of which details the total taxes applicable to the order.
  """
  taxLines: [Shopify_TaxLine!]!
  """Whether the variant is taxable."""
  taxable: Boolean!
  """
  The title of the product or variant. This field only applies to custom line items.
  """
  title: String!
  """The total value of the discount that is applied to the line item."""
  totalDiscount: Shopify_Money!
  """The total value of the discount that is applied to the line item."""
  totalDiscountSet: Shopify_MoneyBag!
  """The associated variant for the line item."""
  variant: Shopify_ProductVariant
  """The name of the variant."""
  variantTitle: String
  """The name of the vendor who created the product variant."""
  vendor: String
  """The weight unit and value for a draft order line item."""
  weight: Shopify_Weight
}

"""
An auto-generated type for paginating through multiple DraftOrderLineItems.
"""
type Shopify_DraftOrderLineItemConnection {
  """A list of edges."""
  edges: [Shopify_DraftOrderLineItemEdge!]!
  """A list of the nodes contained in DraftOrderLineItemEdge."""
  nodes: [Shopify_DraftOrderLineItem!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one DraftOrderLineItem and a cursor during pagination.
"""
type Shopify_DraftOrderLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of DraftOrderLineItemEdge."""
  node: Shopify_DraftOrderLineItem!
}

"""The input fields used to create a line item for a draft order."""
input Shopify_DraftOrderLineItemInput {
  """Discount which will be applied to the line item."""
  appliedDiscount: Shopify_DraftOrderAppliedDiscountInput
  """Represents a generic custom attribute using a key value pair."""
  customAttributes: [Shopify_AttributeInput!]
  """
  The price without any discounts applied. This value is ignored when `variantId` is provided.
  """
  originalUnitPrice: Shopify_Money
  """The number of products that were purchased."""
  quantity: Int!
  """
  Whether physical shipping is required. This value is ignored when `variantId` is provided.
  """
  requiresShipping: Boolean
  """
  The SKU number of the item. This value is ignored when `variantId` is provided.
  """
  sku: String
  """
  Whether the item is taxable. This value is ignored when `variantId` is provided.
  """
  taxable: Boolean
  """Title of the item. Ignored when `variantId` is provided."""
  title: String
  """
  The ID of the product variant corresponding to the line item.
  Null if custom line item. Required if product variant line item.
  """
  variantId: ID
  """
  Specifies the weight unit and value inputs.
  This value is ignored when `variantId` is provided.
  """
  weight: Shopify_WeightInput
}

"""The set of valid sort keys for the DraftOrder query."""
enum Shopify_DraftOrderSortKeys {
  """Sort by the `number` value."""
  NUMBER
  """Sort by the `updated_at` value."""
  UPDATED_AT
  """Sort by the `status` value."""
  STATUS
  """Sort by the `total_price` value."""
  TOTAL_PRICE
  """Sort by the `customer_name` value."""
  CUSTOMER_NAME
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""The valid statuses for a draft order."""
enum Shopify_DraftOrderStatus {
  """The draft order has been paid."""
  COMPLETED
  """An invoice for the draft order has been sent to the customer."""
  INVOICE_SENT
  """
  The draft order is open. It has not been paid, and an invoice hasn't been sent.
  """
  OPEN
}

"""Represents a draft order tag."""
type Shopify_DraftOrderTag implements Shopify_Node {
  """Handle of draft order tag."""
  handle: String!
  """ID of draft order tag."""
  id: ID!
  """Title of draft order tag."""
  title: String!
}

"""Return type for `draftOrderUpdate` mutation."""
type Shopify_DraftOrderUpdatePayload {
  """The updated draft order."""
  draftOrder: Shopify_DraftOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""The duty details for a line item."""
type Shopify_Duty implements Shopify_Node {
  """
  The ISO 3166-1 alpha-2 country code of the country of origin used in calculating the duty.
  """
  countryCodeOfOrigin: CountryCode
  """The harmonized system code of the item used in calculating the duty."""
  harmonizedSystemCode: String
  """A globally-unique identifier."""
  id: ID!
  """The amount of the duty."""
  price: Shopify_MoneyBag!
  """A list of taxes charged on the duty."""
  taxLines: [Shopify_TaxLine!]!
}

"""A sale associated with a duty charge."""
type Shopify_DutySale implements Shopify_Sale {
  """The type of order action that the sale represents."""
  actionType: Shopify_SaleActionType!
  """The duty for the associated sale."""
  duty: Shopify_Duty!
  """The unique identifier for the sale."""
  id: ID!
  """The line type assocated with the sale."""
  lineType: Shopify_SaleLineType!
  """The number of units either ordered or intended to be returned."""
  quantity: Int
  """All individual taxes associated with the sale."""
  taxes: [Shopify_SaleTax!]!
  """The total sale amount after taxes and discounts."""
  totalAmount: Shopify_MoneyBag!
  """The total discounts allocated to the sale after taxes."""
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag!
  """The total discounts allocated to the sale before taxes."""
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag!
  """The total amount of taxes for the sale."""
  totalTaxAmount: Shopify_MoneyBag!
}

"""The attribute editable information."""
type Shopify_EditableProperty {
  """Whether the attribute is locked for editing."""
  locked: Boolean!
  """The reason the attribute is locked for editing."""
  reason: Shopify_FormattedString
}

"""Specifies the fields for an email."""
input Shopify_EmailInput {
  """Specifies the email subject."""
  subject: String
  """Specifies the email recipient."""
  to: String
  """Specifies the email sender."""
  from: String
  """Specifies the email body."""
  body: String
  """Specifies any bcc recipients for the email."""
  bcc: [String!]
  """Specifies a custom message to include in the email."""
  customMessage: String
}

"""Error position information in a ShopifyQL parsing error."""
type Shopify_ErrorPosition {
  """The character position of the error in the line."""
  character: Int!
  """The line number of the error."""
  line: Int!
}

"""An error that occurs during the execution of a web pixel mutation."""
type Shopify_ErrorsWebPixelUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_ErrorsWebPixelUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `ErrorsWebPixelUserError`.
"""
enum Shopify_ErrorsWebPixelUserErrorCode {
  """The input value is blank."""
  BLANK
  """The input value is already taken."""
  TAKEN
  """The record with the ID used as the input value couldn't be found."""
  NOT_FOUND
  """
  The provided settings ID does not match the expected settings definition on the app.
  """
  INVALID_SETTINGS
  """An error occurred and the web pixel couldnt be deleted."""
  UNABLE_TO_DELETE
}

"""
Events chronicle resource activities such as the creation of an article, the fulfillment of an order, or the
addition of a product.
"""
interface Shopify_Event {
  """The name of the app that created the event."""
  appTitle: String
  """Whether the event was created by an app."""
  attributeToApp: Boolean!
  """Whether the event was caused by an admin user."""
  attributeToUser: Boolean!
  """The date and time when the event was created."""
  createdAt: DateTime!
  """Whether the event is critical."""
  criticalAlert: Boolean!
  """A globally-unique identifier."""
  id: ID!
  """Human readable text that describes the event."""
  message: Shopify_FormattedString!
}

"""Return type for `eventBridgeWebhookSubscriptionCreate` mutation."""
type Shopify_EventBridgeWebhookSubscriptionCreatePayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
  """The webhook subscription that was created."""
  webhookSubscription: Shopify_WebhookSubscription
}

"""Specifies the input fields for an EventBridge webhook subscription."""
input Shopify_EventBridgeWebhookSubscriptionInput {
  """The ARN of the EventBridge partner event source."""
  arn: Shopify_ARN
  """The format in which the webhook subscription should send the data."""
  format: Shopify_WebhookSubscriptionFormat
  """The list of fields to be included in the webhook subscription."""
  includeFields: [String!]
  """
  The list of namespaces for any metafields that should be included in the webhook subscription.
  """
  metafieldNamespaces: [String!]
}

"""Return type for `eventBridgeWebhookSubscriptionUpdate` mutation."""
type Shopify_EventBridgeWebhookSubscriptionUpdatePayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
  """The webhook subscription that was updated."""
  webhookSubscription: Shopify_WebhookSubscription
}

"""An auto-generated type for paginating through multiple Events."""
type Shopify_EventConnection {
  """A list of edges."""
  edges: [Shopify_EventEdge!]!
  """A list of the nodes contained in EventEdge."""
  nodes: [Shopify_Event!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Event and a cursor during pagination.
"""
type Shopify_EventEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of EventEdge."""
  node: Shopify_Event!
}

"""The set of valid sort keys for the Event query."""
enum Shopify_EventSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""Represents a video hosted outside of Shopify."""
type Shopify_ExternalVideo implements Shopify_Media & Shopify_Node {
  """A word or phrase to share the nature or contents of a media."""
  alt: String
  """The embed URL of the video for the respective host."""
  embedUrl: URL!
  """The URL."""
  embeddedUrl: URL! @deprecated(reason: "Use `originUrl` instead.")
  """The host of the external video."""
  host: Shopify_MediaHost!
  """A globally-unique identifier."""
  id: ID!
  """The media content type."""
  mediaContentType: Shopify_MediaContentType!
  """Any errors which have occurred on the media."""
  mediaErrors: [Shopify_MediaError!]!
  """The warnings attached to the media."""
  mediaWarnings: [Shopify_MediaWarning!]!
  """The origin URL of the video on the respective host."""
  originUrl: URL!
  """The preview image for the media."""
  preview: Shopify_MediaPreviewImage
  """Current status of the media."""
  status: Shopify_MediaStatus!
}

"""Requirements that must be met before an app can be installed."""
type Shopify_FailedRequirement {
  """
  Action to be taken to resolve a failed requirement, including URL link.
  """
  action: Shopify_NavigationItem
  """
  A concise set of copy strings to be displayed to merchants, to guide them in resolving problems your app
  encounters when trying to make use of their Shop and its resources.
  """
  message: String!
}

"""A file interface."""
interface Shopify_File {
  """A word or phrase to describe the contents or the function of a file."""
  alt: String
  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
  """
  createdAt: DateTime!
  """Any errors that have occurred on the file."""
  fileErrors: [Shopify_FileError!]!
  """The status of the file."""
  fileStatus: Shopify_FileStatus!
  """The preview image for the media."""
  preview: Shopify_MediaPreviewImage
}

"""An auto-generated type for paginating through multiple Files."""
type Shopify_FileConnection {
  """A list of edges."""
  edges: [Shopify_FileEdge!]!
  """A list of the nodes contained in FileEdge."""
  nodes: [Shopify_File!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""The possible content types for a file object."""
enum Shopify_FileContentType {
  """A Shopify-hosted image."""
  IMAGE
  """A Shopify-hosted generic file."""
  FILE
  """
  A Shopify-hosted video file. It's recommended to use this type for all video files.
  """
  VIDEO
}

"""The input fields that are required to create a file object."""
input Shopify_FileCreateInput {
  """
  An external URL (for images only) or a
  [staged upload URL](https://shopify.dev/api/admin-graphql/latest/mutations/stageduploadscreate).
  """
  originalSource: String!
  """
  The file content type. If omitted, then Shopify will attempt to determine the content type during file processing.
  """
  contentType: Shopify_FileContentType
  """The alternative text description of the file."""
  alt: String
}

"""Return type for `fileCreate` mutation."""
type Shopify_FileCreatePayload {
  """The newly created files."""
  files: [Shopify_File!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_FilesUserError!]!
}

"""Return type for `fileDelete` mutation."""
type Shopify_FileDeletePayload {
  """The IDs of the deleted files."""
  deletedFileIds: [ID!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_FilesUserError!]!
}

"""
An auto-generated type which holds one File and a cursor during pagination.
"""
type Shopify_FileEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of FileEdge."""
  node: Shopify_File!
}

"""
A file error. This typically occurs when there is an issue with the file itself causing it to fail validation.
Check the file before attempting to upload again.
"""
type Shopify_FileError {
  """Code representing the type of error."""
  code: Shopify_FileErrorCode!
  """Additional details regarding the error."""
  details: String
  """Translated error message."""
  message: String!
}

"""The error types for a file."""
enum Shopify_FileErrorCode {
  """File error has occurred for an unknown reason."""
  UNKNOWN
  """File could not be processed because the signed URL was invalid."""
  INVALID_SIGNED_URL
  """File could not be processed because the image could not be downloaded."""
  IMAGE_DOWNLOAD_FAILURE
  """File could not be processed because the image could not be processed."""
  IMAGE_PROCESSING_FAILURE
  """
  File timed out because it is currently being modified by another operation.
  """
  MEDIA_TIMEOUT_ERROR
  """
  File could not be created because the external video could not be found.
  """
  EXTERNAL_VIDEO_NOT_FOUND
  """
  File could not be created because the external video is not listed or is private.
  """
  EXTERNAL_VIDEO_UNLISTED
  """
  File could not be created because the external video has an invalid aspect ratio.
  """
  EXTERNAL_VIDEO_INVALID_ASPECT_RATIO
  """
  File could not be created because embed permissions are disabled for this video.
  """
  EXTERNAL_VIDEO_EMBED_DISABLED
  """
  File could not be created because video is either not found or still transcoding.
  """
  EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING
  """
  File could not be processed because the source could not be downloaded.
  """
  GENERIC_FILE_DOWNLOAD_FAILURE
  """File could not be created because the size is too large."""
  GENERIC_FILE_INVALID_SIZE
  """File could not be created because the metadata could not be read."""
  VIDEO_METADATA_READ_ERROR
  """File could not be created because it has an invalid file type."""
  VIDEO_INVALID_FILETYPE_ERROR
  """
  File could not be created because it does not meet the minimum width requirement.
  """
  VIDEO_MIN_WIDTH_ERROR
  """
  File could not be created because it does not meet the maximum width requirement.
  """
  VIDEO_MAX_WIDTH_ERROR
  """
  File could not be created because it does not meet the minimum height requirement.
  """
  VIDEO_MIN_HEIGHT_ERROR
  """
  File could not be created because it does not meet the maximum height requirement.
  """
  VIDEO_MAX_HEIGHT_ERROR
  """
  File could not be created because it does not meet the minimum duration requirement.
  """
  VIDEO_MIN_DURATION_ERROR
  """
  File could not be created because it does not meet the maximum duration requirement.
  """
  VIDEO_MAX_DURATION_ERROR
  """Video failed validation."""
  VIDEO_VALIDATION_ERROR
  """Model failed validation."""
  MODEL3D_VALIDATION_ERROR
  """
  File could not be created because the model's thumbnail generation failed.
  """
  MODEL3D_THUMBNAIL_GENERATION_ERROR
  """
  File could not be created because the model can't be converted to USDZ format.
  """
  MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR
  """File could not be created because the model file failed processing."""
  MODEL3D_GLB_OUTPUT_CREATION_ERROR
  """File could not be created because the model file failed processing."""
  MODEL3D_PROCESSING_FAILURE
  """
  File could not be created because the image is an unsupported file type.
  """
  UNSUPPORTED_IMAGE_FILE_TYPE
  """File could not be created because the image size is too large."""
  INVALID_IMAGE_FILE_SIZE
  """
  File could not be created because the image has an invalid aspect ratio.
  """
  INVALID_IMAGE_ASPECT_RATIO
  """
  File could not be created because the image's resolution exceeds the max limit.
  """
  INVALID_IMAGE_RESOLUTION
  """
  File could not be created because the cumulative file storage limit would be exceeded.
  """
  FILE_STORAGE_LIMIT_EXCEEDED
}

"""Possible error codes that can be returned by `FilesUserError`."""
enum Shopify_FilesErrorCode {
  """The input value is invalid."""
  INVALID
  """File does not exist."""
  FILE_DOES_NOT_EXIST
  """File has a pending operation."""
  FILE_LOCKED
  """Specify one argument: search, IDs, or deleteAll."""
  TOO_MANY_ARGUMENTS
  """The search term must not be blank."""
  BLANK_SEARCH
  """At least one argument is required."""
  MISSING_ARGUMENTS
  """Search query isn't supported."""
  INVALID_QUERY
  """
  The file is not supported on trial accounts that have not validated their
  email. Either select a plan or verify the shop owner email to upload this file.
  """
  UNACCEPTABLE_UNVERIFIED_TRIAL_ASSET
  """The file type is not supported."""
  UNACCEPTABLE_ASSET
  """
  The file is not supported on trial accounts. Select a plan to upload this file.
  """
  UNACCEPTABLE_TRIAL_ASSET
  """The alt value exceeds the maximum limit of 512 characters."""
  ALT_VALUE_LIMIT_EXCEEDED
  """Exceeded the limit of non-image media per shop."""
  NON_IMAGE_MEDIA_PER_SHOP_LIMIT_EXCEEDED
}

"""The set of valid sort keys for the File query."""
enum Shopify_FileSortKeys {
  """Sort by the `filename` value."""
  FILENAME
  """Sort by the `original_upload_size` value."""
  ORIGINAL_UPLOAD_SIZE
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""The possible statuses for a file object."""
enum Shopify_FileStatus {
  """File has been uploaded but hasn't been processed."""
  UPLOADED
  """File is being processed."""
  PROCESSING
  """File is ready to be displayed."""
  READY
  """File processing has failed."""
  FAILED
}

"""
An error that happens during the execution of a Files API query or mutation.
"""
type Shopify_FilesUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_FilesErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""The input fields that are required to update a file object."""
input Shopify_FileUpdateInput {
  """The ID of the file to be updated."""
  id: ID!
  """The alternative text description of the file."""
  alt: String
  """
  The source from which to update the media preview image.
  May be an external URL or a
  [staged upload URL](https://shopify.dev/api/admin-graphql/latest/mutations/stageduploadscreate).
  """
  previewImageSource: String
}

"""Return type for `fileUpdate` mutation."""
type Shopify_FileUpdatePayload {
  """The list of updated files."""
  files: [Shopify_File!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_FilesUserError!]!
}

"""A filter option is one possible value in a search filter."""
type Shopify_FilterOption {
  """The filter option's label for display purposes."""
  label: String!
  """The filter option's value."""
  value: String!
}

"""Return type for `flowTriggerReceive` mutation."""
type Shopify_FlowTriggerReceivePayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
A string containing a strict subset of HTML code. Non-allowed tags will be stripped out.
Allowed tags:
* `a` (allowed attributes: `href`, `target`)
* `b`
* `br`
* `em`
* `i`
* `strong`
* `u`
Use [HTML](https://shopify.dev/api/admin-graphql/latest/scalars/HTML) instead if you need to
include other HTML tags.

Example value: `"Your current domain is <strong>johns-apparel.myshopify.com</strong>."`
"""
scalar Shopify_FormattedString

"""
Represents a fulfillment. In Shopify, a fulfillment represents a shipment of one
or more items in an order. When an order has been completely fulfilled, it means
that all the items that are included in the order have been sent to the
customer. There can be more than one fulfillment for an order.
"""
type Shopify_Fulfillment implements Shopify_LegacyInteroperability & Shopify_Node {
  """The date and time when the fulfillment was created."""
  createdAt: DateTime!
  """The date that this fulfillment was delivered."""
  deliveredAt: DateTime
  """Human readable display status for this fulfillment."""
  displayStatus: Shopify_FulfillmentDisplayStatus
  """The estimated date that this fulfillment will arrive."""
  estimatedDeliveryAt: DateTime
  """The history of events associated with this fulfillment."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_FulfillmentEventSortKeys = HAPPENED_AT
  ): Shopify_FulfillmentEventConnection!
  """List of the fulfillment's line items."""
  fulfillmentLineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_FulfillmentLineItemConnection!
  """A paginated list of fulfillment orders for the fulfillment."""
  fulfillmentOrders(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_FulfillmentOrderConnection!
  """A globally-unique identifier."""
  id: ID!
  """The date and time when the fulfillment went into transit."""
  inTransitAt: DateTime
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: Shopify_UnsignedInt64!
  """The location that the fulfillment was processed at."""
  location: Shopify_Location
  """Human readable reference identifier for this fulfillment."""
  name: String!
  """The order for which the fulfillment was created."""
  order: Shopify_Order!
  """
  The address at which the fulfillment occurred. Typically this is the address of the warehouse or fulfillment center.
  """
  originAddress: Shopify_FulfillmentOriginAddress
  """Whether any of the line items in the fulfillment require shipping."""
  requiresShipping: Boolean!
  """Fulfillment service associated with the fulfillment."""
  service: Shopify_FulfillmentService
  """The status of the fulfillment."""
  status: Shopify_FulfillmentStatus!
  """Sum of all line item quantities for the fulfillment."""
  totalQuantity: Int!
  """
  Tracking information associated with the fulfillment,
  such as the tracking company, tracking number, and tracking URL.
  """
  trackingInfo(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_FulfillmentTrackingInfo!]!
  """The date and time when the fulfillment was last modified."""
  updatedAt: DateTime!
}

"""Return type for `fulfillmentCancel` mutation."""
type Shopify_FulfillmentCancelPayload {
  """The canceled fulfillment."""
  fulfillment: Shopify_Fulfillment
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""An auto-generated type for paginating through multiple Fulfillments."""
type Shopify_FulfillmentConnection {
  """A list of edges."""
  edges: [Shopify_FulfillmentEdge!]!
  """A list of the nodes contained in FulfillmentEdge."""
  nodes: [Shopify_Fulfillment!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `fulfillmentCreateV2` mutation."""
type Shopify_FulfillmentCreateV2Payload {
  """The created fulfillment."""
  fulfillment: Shopify_Fulfillment
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""The display status of a fulfillment."""
enum Shopify_FulfillmentDisplayStatus {
  """Displayed as **Attempted delivery**."""
  ATTEMPTED_DELIVERY
  """Displayed as **Canceled**."""
  CANCELED
  """Displayed as **Confirmed**."""
  CONFIRMED
  """Displayed as **Delivered**."""
  DELIVERED
  """Displayed as **Failure**."""
  FAILURE
  """Displayed as **Fulfilled**."""
  FULFILLED
  """Displayed as **In transit**."""
  IN_TRANSIT
  """Displayed as **Label printed**."""
  LABEL_PRINTED
  """Displayed as **Label purchased**."""
  LABEL_PURCHASED
  """Displayed as **Label voided**."""
  LABEL_VOIDED
  """Displayed as **Marked as fulfilled**."""
  MARKED_AS_FULFILLED
  """Displayed as **Not delivered**."""
  NOT_DELIVERED
  """Displayed as **Out for delivery**."""
  OUT_FOR_DELIVERY
  """Displayed as **Ready for pickup**."""
  READY_FOR_PICKUP
  """Displayed as **Picked up**."""
  PICKED_UP
  """Displayed as **Submitted**."""
  SUBMITTED
}

"""
An auto-generated type which holds one Fulfillment and a cursor during pagination.
"""
type Shopify_FulfillmentEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of FulfillmentEdge."""
  node: Shopify_Fulfillment!
}

"""
The fulfillment event that describes the fulfilllment status at a particular time.
"""
type Shopify_FulfillmentEvent implements Shopify_Node {
  """The street address where this fulfillment event occurred."""
  address1: String
  """The city where this fulfillment event occurred."""
  city: String
  """The country where this fulfillment event occurred."""
  country: String
  """The estimated delivery date and time of the fulfillment."""
  estimatedDeliveryAt: DateTime
  """The time at which this fulfillment event happened."""
  happenedAt: DateTime!
  """A globally-unique identifier."""
  id: ID!
  """The latitude where this fulfillment event occurred."""
  latitude: Float
  """The longitude where this fulfillment event occurred."""
  longitude: Float
  """A message associated with this fulfillment event."""
  message: String
  """The province where this fulfillment event occurred."""
  province: String
  """The status of this fulfillment event."""
  status: Shopify_FulfillmentEventStatus!
  """The zip code of the location where this fulfillment event occurred."""
  zip: String
}

"""
An auto-generated type for paginating through multiple FulfillmentEvents.
"""
type Shopify_FulfillmentEventConnection {
  """A list of edges."""
  edges: [Shopify_FulfillmentEventEdge!]!
  """A list of the nodes contained in FulfillmentEventEdge."""
  nodes: [Shopify_FulfillmentEvent!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `fulfillmentEventCreate` mutation."""
type Shopify_FulfillmentEventCreatePayload {
  """The created fulfillment event."""
  fulfillmentEvent: Shopify_FulfillmentEvent
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An auto-generated type which holds one FulfillmentEvent and a cursor during pagination.
"""
type Shopify_FulfillmentEventEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of FulfillmentEventEdge."""
  node: Shopify_FulfillmentEvent!
}

"""The input fields used to create a fulfillment event."""
input Shopify_FulfillmentEventInput {
  """The street address where this fulfillment event occurred."""
  address1: String
  """The city where this fulfillment event occurred."""
  city: String
  """The country where this fulfillment event occurred."""
  country: String
  """The estimated delivery date and time of the fulfillment."""
  estimatedDeliveryAt: DateTime
  """The time at which this fulfillment event happened."""
  happenedAt: DateTime
  """
  The ID for the fulfillment that is associated with this fulfillment event.
  """
  fulfillmentId: ID!
  """The latitude where this fulfillment event occurred."""
  latitude: Float
  """The longitude where this fulfillment event occurred."""
  longitude: Float
  """A message associated with this fulfillment event."""
  message: String
  """The province where this fulfillment event occurred."""
  province: String
  """The status of this fulfillment event."""
  status: Shopify_FulfillmentEventStatus!
  """The zip code of the location where this fulfillment event occurred."""
  zip: String
}

"""The set of valid sort keys for the FulfillmentEvent query."""
enum Shopify_FulfillmentEventSortKeys {
  """Sort by the `happened_at` value."""
  HAPPENED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""The status that describes a fulfillment or delivery event."""
enum Shopify_FulfillmentEventStatus {
  """A shipping label has been purchased."""
  LABEL_PURCHASED
  """A purchased shipping label has been printed."""
  LABEL_PRINTED
  """The fulfillment is ready to be picked up."""
  READY_FOR_PICKUP
  """
  The fulfillment is confirmed. This is the default value when no other information is available.
  """
  CONFIRMED
  """The fulfillment is in transit."""
  IN_TRANSIT
  """The fulfillment is out for delivery."""
  OUT_FOR_DELIVERY
  """A delivery was attempted."""
  ATTEMPTED_DELIVERY
  """The fulfillment was successfully delivered."""
  DELIVERED
  """The fulfillment request failed."""
  FAILURE
}

"""A fulfillment hold currently applied on a fulfillment order."""
type Shopify_FulfillmentHold {
  """The reason for the fulfillment hold."""
  reason: Shopify_FulfillmentHoldReason!
  """Additional information about the fulfillment hold reason."""
  reasonNotes: String
}

"""The reason for a fulfillment hold."""
enum Shopify_FulfillmentHoldReason {
  """The fulfillment hold is applied because payment is pending."""
  AWAITING_PAYMENT
  """The fulfillment hold is applied because of a high risk of fraud."""
  HIGH_RISK_OF_FRAUD
  """The fulfillment hold is applied because of an incorrect address."""
  INCORRECT_ADDRESS
  """The fulfillment hold is applied because inventory is out of stock."""
  INVENTORY_OUT_OF_STOCK
  """The fulfillment hold is applied because of an unknown delivery date."""
  UNKNOWN_DELIVERY_DATE
  """The fulfillment hold is applied for another reason."""
  OTHER
}

"""Represents a line item from an order that's included in a fulfillment."""
type Shopify_FulfillmentLineItem implements Shopify_Node {
  """The total price after discounts are applied."""
  discountedTotal: Shopify_Money! @deprecated(reason: "Use `discountedTotalSet` instead.")
  """
  The total price after discounts are applied in shop and presentment currencies.
  """
  discountedTotalSet: Shopify_MoneyBag!
  """A globally-unique identifier."""
  id: ID!
  """The associated order's line item."""
  lineItem: Shopify_LineItem!
  """The total price before discounts are applied."""
  originalTotal: Shopify_Money! @deprecated(reason: "Use `originalTotalSet` instead.")
  """
  The total price before discounts are applied in shop and presentment currencies.
  """
  originalTotalSet: Shopify_MoneyBag!
  """Number of line items in the fulfillment."""
  quantity: Int
}

"""
An auto-generated type for paginating through multiple FulfillmentLineItems.
"""
type Shopify_FulfillmentLineItemConnection {
  """A list of edges."""
  edges: [Shopify_FulfillmentLineItemEdge!]!
  """A list of the nodes contained in FulfillmentLineItemEdge."""
  nodes: [Shopify_FulfillmentLineItem!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one FulfillmentLineItem and a cursor during pagination.
"""
type Shopify_FulfillmentLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of FulfillmentLineItemEdge."""
  node: Shopify_FulfillmentLineItem!
}

"""
Represents a fulfillment order. In Shopify, a fulfillment order represents a group of one or more items
in an order that are to be fulfilled from the same location. There can be more than one fulfillment order
for an order at a given location. Fulfillment orders are created automatically when an order is created.
To learn how to build a fulfillment app, refer to [Fulfillment apps](https://shopify.dev/apps/fulfillment).
"""
type Shopify_FulfillmentOrder implements Shopify_Node {
  """
  The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.
  
  The fulfillment order's assigned location might change in the following cases:
  
  - The fulfillment order has been entirely moved to a new location. For example, the [fulfillmentOrderMove](
    https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
    ) mutation has been called, and you see the original fulfillment order in the [movedFulfillmentOrder](
    https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove#field-fulfillmentordermovepayload-movedfulfillmentorder
    ) field within the mutation's response.
  - Work on the fulfillment order has not yet begun, which means that the fulfillment order has the
      [OPEN](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-open),
      [SCHEDULED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-scheduled), or
      [ON_HOLD](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-onhold)
      status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).
  """
  assignedLocation: Shopify_FulfillmentOrderAssignedLocation!
  """Date and time when the fulfillment order was created."""
  createdAt: DateTime!
  """Delivery method of this fulfillment order."""
  deliveryMethod: Shopify_DeliveryMethod
  """The destination where the items should be sent."""
  destination: Shopify_FulfillmentOrderDestination
  """
  The date and time at which the fulfillment order will be fulfillable. When
  this date and time is reached, the scheduled fulfillment order is
  automatically transitioned to open. For example, the `fulfill_at` date for a
  subscription order might be the 1st of each month, a pre-order `fulfill_at`
  date would be `nil`, and a standard order `fulfill_at` date would be the order creation date.
  """
  fulfillAt: DateTime
  """
  The latest date and time by which all items in the fulfillment order need to be fulfilled.
  """
  fulfillBy: DateTime
  """The fulfillment holds applied on the fulfillment order."""
  fulfillmentHolds: [Shopify_FulfillmentHold!]!
  """A list of fulfillments for the fulfillment order."""
  fulfillments(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_FulfillmentConnection!
  """A globally-unique identifier."""
  id: ID!
  """The duties delivery method of this fulfillment order."""
  internationalDuties: Shopify_FulfillmentOrderInternationalDuties
  """A list of the fulfillment order's line items."""
  lineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_FulfillmentOrderLineItemConnection!
  """
  A list of locations that the fulfillment order can potentially move to.
  """
  locationsForMove(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_FulfillmentOrderLocationForMoveConnection!
  """
  A list of requests sent by the merchant or an order management app to the fulfillment service for the fulfillment order.
  """
  merchantRequests(
    """The kind of request the merchant sent."""
    kind: Shopify_FulfillmentOrderMerchantRequestKind
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_FulfillmentOrderMerchantRequestConnection!
  """The order that's associated with the fulfillment order."""
  order: Shopify_Order!
  """The request status of the fulfillment order."""
  requestStatus: Shopify_FulfillmentOrderRequestStatus!
  """The status of the fulfillment order."""
  status: Shopify_FulfillmentOrderStatus!
  """The actions that can be performed on this fulfillment order."""
  supportedActions: [Shopify_FulfillmentOrderSupportedAction!]!
  """The date and time when the fulfillment order was last updated."""
  updatedAt: DateTime!
}

"""Return type for `fulfillmentOrderAcceptCancellationRequest` mutation."""
type Shopify_FulfillmentOrderAcceptCancellationRequestPayload {
  """The fulfillment order whose cancellation request was accepted."""
  fulfillmentOrder: Shopify_FulfillmentOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `fulfillmentOrderAcceptFulfillmentRequest` mutation."""
type Shopify_FulfillmentOrderAcceptFulfillmentRequestPayload {
  """The fulfillment order whose fulfillment request was accepted."""
  fulfillmentOrder: Shopify_FulfillmentOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""The actions that can be taken on a fulfillment order."""
enum Shopify_FulfillmentOrderAction {
  """
  Creates a fulfillment for selected line items in the fulfillment order. The
  corresponding mutation for this action is `fulfillmentCreateV2`.
  """
  CREATE_FULFILLMENT
  """
  Sends a request for fulfilling selected line items in a fulfillment order to a
  fulfillment service. The corresponding mutation for this action is
  `fulfillmentOrderSubmitFulfillmentRequest`.
  """
  REQUEST_FULFILLMENT
  """
  Cancels a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderCancel`.
  """
  CANCEL_FULFILLMENT_ORDER
  """
  Moves a fulfillment order. The corresponding mutation for this action is `fulfillmentOrderMove`.
  """
  MOVE
  """
  Sends a cancellation request to the fulfillment service of a fulfillment
  order. The corresponding mutation for this action is
  `fulfillmentOrderSubmitCancellationRequest`.
  """
  REQUEST_CANCELLATION
  """
  Marks the fulfillment order as open. The corresponding mutation for this action is `fulfillmentOrderOpen`.
  """
  MARK_AS_OPEN
  """
  Releases the fulfillment hold on the fulfillment order. The corresponding
  mutation for this action is `fulfillmentOrderReleaseHold`.
  """
  RELEASE_HOLD
  """
  Applies a fulfillment hold on an open fulfillment order. The corresponding
  mutation for this action is `fulfillmentOrderHold`.
  """
  HOLD
  """
  Opens an external URL to initiate the fulfillment process outside Shopify.
  This action should be paired with
  `FulfillmentOrderSupportedAction.externalUrl`.
  """
  EXTERNAL
}

"""
The fulfillment order's assigned location. This is the location where the fulfillment is expected to happen.

 The fulfillment order's assigned location might change in the following cases:

  - The fulfillment order has been entirely moved to a new location. For example, the [fulfillmentOrderMove](
    https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
    ) mutation has been called, and you see the original fulfillment order in the [movedFulfillmentOrder](
    https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove#field-fulfillmentordermovepayload-movedfulfillmentorder
    ) field within the mutation's response.

  - Work on the fulfillment order has not yet begun, which means that the fulfillment order has the
      [OPEN](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-open),
      [SCHEDULED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-scheduled), or
      [ON_HOLD](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-onhold)
      status, and the shop's location properties might be undergoing edits (for example, in the Shopify admin).

If the [fulfillmentOrderMove](
https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentOrderMove
) mutation has moved the fulfillment order's line items to a new location,
but hasn't moved the fulfillment order instance itself, then the original fulfillment order's assigned location
doesn't change.
This happens if the fulfillment order is being split during the move, or if all line items can be moved
to an existing fulfillment order at a new location.

Once the fulfillment order has been taken into work or canceled,
which means that the fulfillment order has the
[IN_PROGRESS](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-inprogress),
[CLOSED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-closed),
[CANCELLED](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-cancelled), or
[INCOMPLETE](https://shopify.dev/api/admin-graphql/latest/enums/FulfillmentOrderStatus#value-incomplete)
status, `FulfillmentOrderAssignedLocation` acts as a snapshot of the shop's location content.
Up-to-date shop's location data may be queried through [location](
  https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderAssignedLocation#field-fulfillmentorderassignedlocation-location
) connection.
"""
type Shopify_FulfillmentOrderAssignedLocation {
  """The first line of the address for the location."""
  address1: String
  """The second line of the address for the location."""
  address2: String
  """The city of the location."""
  city: String
  """The two-letter country code of the location."""
  countryCode: CountryCode!
  """
  The location where the fulfillment is expected to happen. This value might be different from
  `FulfillmentOrderAssignedLocation` if the location's attributes were updated
  after the fulfillment order was taken into work of canceled.
  """
  location: Shopify_Location
  """The name of the location."""
  name: String!
  """The phone number of the location."""
  phone: String
  """The province of the location."""
  province: String
  """The ZIP code of the location."""
  zip: String
}

"""The assigment status to be used to filter fulfillment orders."""
enum Shopify_FulfillmentOrderAssignmentStatus {
  """
  Fulfillment orders for which the merchant has requested cancellation of
  the previously accepted fulfillment request.
  """
  CANCELLATION_REQUESTED
  """Fulfillment orders for which the merchant has requested fulfillment."""
  FULFILLMENT_REQUESTED
  """
  Fulfillment orders for which the merchant's fulfillment request has been accepted.
  Any number of fulfillments can be created on these fulfillment orders
  to completely fulfill the requested items.
  """
  FULFILLMENT_ACCEPTED
}

"""Return type for `fulfillmentOrderCancel` mutation."""
type Shopify_FulfillmentOrderCancelPayload {
  """The fulfillment order that was marked as canceled."""
  fulfillmentOrder: Shopify_FulfillmentOrder
  """
  The fulfillment order that was created to replace the canceled fulfillment order.
  """
  replacementFulfillmentOrder: Shopify_FulfillmentOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `fulfillmentOrderClose` mutation."""
type Shopify_FulfillmentOrderClosePayload {
  """The fulfillment order that was marked as incomplete."""
  fulfillmentOrder: Shopify_FulfillmentOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An auto-generated type for paginating through multiple FulfillmentOrders.
"""
type Shopify_FulfillmentOrderConnection {
  """A list of edges."""
  edges: [Shopify_FulfillmentOrderEdge!]!
  """A list of the nodes contained in FulfillmentOrderEdge."""
  nodes: [Shopify_FulfillmentOrder!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
Represents the destination where the items should be sent upon fulfillment.
"""
type Shopify_FulfillmentOrderDestination implements Shopify_Node {
  """The first line of the address of the destination."""
  address1: String
  """The second line of the address of the destination."""
  address2: String
  """The city of the destination."""
  city: String
  """The company of the destination."""
  company: String
  """The two-letter country code of the destination."""
  countryCode: CountryCode
  """The email of the customer at the destination."""
  email: String
  """The first name of the customer at the destination."""
  firstName: String
  """A globally-unique identifier."""
  id: ID!
  """The last name of the customer at the destination."""
  lastName: String
  """The phone number of the customer at the destination."""
  phone: String
  """The province of the destination."""
  province: String
  """The ZIP code of the destination."""
  zip: String
}

"""
An auto-generated type which holds one FulfillmentOrder and a cursor during pagination.
"""
type Shopify_FulfillmentOrderEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of FulfillmentOrderEdge."""
  node: Shopify_FulfillmentOrder!
}

"""
Input arguments for the fulfillment hold applied on the fulfillment order.
"""
input Shopify_FulfillmentOrderHoldInput {
  """The reason for the fulfillment hold."""
  reason: Shopify_FulfillmentHoldReason!
  """Additional information about the fulfillment hold reason."""
  reasonNotes: String
  """
  Whether the merchant receives a notification about the fulfillment hold. The default value is `false`.
  """
  notifyMerchant: Boolean = false
  """
  A configurable ID used to track the automation system releasing these holds.
  """
  externalId: String
}

"""Return type for `fulfillmentOrderHold` mutation."""
type Shopify_FulfillmentOrderHoldPayload {
  """The fulfillment order on which a fulfillment hold was applied."""
  fulfillmentOrder: Shopify_FulfillmentOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_FulfillmentOrderHoldUserError!]!
}

"""An error that occurs during the execution of `FulfillmentOrderHold`."""
type Shopify_FulfillmentOrderHoldUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_FulfillmentOrderHoldUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `FulfillmentOrderHoldUserError`.
"""
enum Shopify_FulfillmentOrderHoldUserErrorCode {
  """The fulfillment order could not be found."""
  FULFILLMENT_ORDER_NOT_FOUND
  """The input value is already taken."""
  TAKEN
}

"""The international duties relevant to a fulfillment order."""
type Shopify_FulfillmentOrderInternationalDuties {
  """The method of duties payment. Example values: `DDP`, `DAP`."""
  incoterm: String!
}

"""
Associates an order line item with quantities requiring fulfillment from the respective fulfillment order.
"""
type Shopify_FulfillmentOrderLineItem implements Shopify_Node {
  """A globally-unique identifier."""
  id: ID!
  """The image associated to the line item's variant."""
  image: Shopify_Image
  """The associated order line item."""
  lineItem: Shopify_LineItem! @deprecated(reason: "          As of API version 2023-01, this field has been deprecated. The order line item associated with a `FulfillmentOrderLineItem`\n          shouldn't be used to determine what to fulfill. Use the `FulfillmentOrderLineItem` and `FulfillmentOrder` objects\n          instead. An order `LineItem` represents a single line item on an order, but it doesn't represent what should be fulfilled.\n")
  """
  The variant unit price without discounts applied, in shop and presentment currencies.
  """
  originalUnitPriceSet: Shopify_MoneyBag!
  """The title of the product."""
  productTitle: String!
  """The number of units remaining to be fulfilled."""
  remainingQuantity: Int!
  """Whether physical shipping is required for the variant."""
  requiresShipping: Boolean!
  """The variant SKU number."""
  sku: String
  """The total number of units to be fulfilled."""
  totalQuantity: Int!
  """The name of the variant."""
  variantTitle: String
  """The name of the vendor who made the variant."""
  vendor: String
  """Warning messages for a fulfillment order line item."""
  warnings: [Shopify_FulfillmentOrderLineItemWarning!]!
  """The weight of a line item unit."""
  weight: Shopify_Weight
}

"""
An auto-generated type for paginating through multiple FulfillmentOrderLineItems.
"""
type Shopify_FulfillmentOrderLineItemConnection {
  """A list of edges."""
  edges: [Shopify_FulfillmentOrderLineItemEdge!]!
  """A list of the nodes contained in FulfillmentOrderLineItemEdge."""
  nodes: [Shopify_FulfillmentOrderLineItem!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one FulfillmentOrderLineItem and a cursor during pagination.
"""
type Shopify_FulfillmentOrderLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of FulfillmentOrderLineItemEdge."""
  node: Shopify_FulfillmentOrderLineItem!
}

"""
The input fields used to include the quantity of the fulfillment order line item that should be fulfilled.
"""
input Shopify_FulfillmentOrderLineItemInput {
  """The ID of the fulfillment order line item."""
  id: ID!
  """The quantity of the fulfillment order line item."""
  quantity: Int!
}

"""
The input fields used to include the line items of a specified fulfillment order that should be fulfilled.
"""
input Shopify_FulfillmentOrderLineItemsInput {
  """The ID of the fulfillment order."""
  fulfillmentOrderId: ID!
  """
  The fulfillment order line items to be fulfilled.
  If left blank, all line items of the fulfillment order will be fulfilled.
  """
  fulfillmentOrderLineItems: [Shopify_FulfillmentOrderLineItemInput!]
}

"""
Specifies the input fields for marking fulfillment order line items as ready for pickup.
"""
input Shopify_FulfillmentOrderLineItemsPreparedForPickupInput {
  """
  The fulfillment orders associated with the line items which are ready to be picked up by a customer.
  """
  lineItemsByFulfillmentOrder: [Shopify_PreparedFulfillmentOrderLineItemsInput!]!
}

"""Return type for `fulfillmentOrderLineItemsPreparedForPickup` mutation."""
type Shopify_FulfillmentOrderLineItemsPreparedForPickupPayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_FulfillmentOrderLineItemsPreparedForPickupUserError!]!
}

"""
An error that occurs during the execution of `FulfillmentOrderLineItemsPreparedForPickup`.
"""
type Shopify_FulfillmentOrderLineItemsPreparedForPickupUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_FulfillmentOrderLineItemsPreparedForPickupUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `FulfillmentOrderLineItemsPreparedForPickupUserError`.
"""
enum Shopify_FulfillmentOrderLineItemsPreparedForPickupUserErrorCode {
  """
  The fulfillment order does not have any line items that can be prepared.
  """
  NO_LINE_ITEMS_TO_PREPARE_FOR_FULFILLMENT_ORDER
  """Unable to prepare quantity."""
  FULFILLMENT_ORDER_CHANGED @deprecated(reason: "This error code is deprecated and will not be emitted starting from the 2023-04 API version; it will be\nremoved in the 2023-07 API version.\n")
  """Invalid fulfillment order ID provided."""
  FULFILLMENT_ORDER_INVALID
}

"""
A fulfillment order line item warning. For example, a warning about why a fulfillment request was rejected.
"""
type Shopify_FulfillmentOrderLineItemWarning {
  """The description of warning."""
  description: String
  """The title of warning."""
  title: String
}

"""A location that a fulfillment order can potentially move to."""
type Shopify_FulfillmentOrderLocationForMove {
  """
  The location being considered as the fulfillment order's new assigned location.
  """
  location: Shopify_Location!
  """
  A human-readable string with the reason why the fulfillment order, or some of its line items, can't be
  moved to the location.
  """
  message: String
  """Whether the fulfillment order can be moved to the location."""
  movable: Boolean!
}

"""
An auto-generated type for paginating through multiple FulfillmentOrderLocationForMoves.
"""
type Shopify_FulfillmentOrderLocationForMoveConnection {
  """A list of edges."""
  edges: [Shopify_FulfillmentOrderLocationForMoveEdge!]!
  """A list of the nodes contained in FulfillmentOrderLocationForMoveEdge."""
  nodes: [Shopify_FulfillmentOrderLocationForMove!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one FulfillmentOrderLocationForMove and a cursor during pagination.
"""
type Shopify_FulfillmentOrderLocationForMoveEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of FulfillmentOrderLocationForMoveEdge."""
  node: Shopify_FulfillmentOrderLocationForMove!
}

"""
A request made by the merchant or an order management app to a fulfillment service
for a fulfillment order.
"""
type Shopify_FulfillmentOrderMerchantRequest implements Shopify_Node {
  """The fulfillment order associated with the merchant request."""
  fulfillmentOrder: Shopify_FulfillmentOrder!
  """A globally-unique identifier."""
  id: ID!
  """The kind of request made."""
  kind: Shopify_FulfillmentOrderMerchantRequestKind!
  """The optional message that the merchant included in the request."""
  message: String
  """
  Additional options requested by the merchant. These depend on the `kind` of the request.
  For example, for a `FULFILLMENT_REQUEST`, one option is `notify_customer`, which indicates whether the
  merchant intends to notify the customer upon fulfillment. The fulfillment service can then set
  `notifyCustomer` when making calls to `FulfillmentCreateV2`.
  """
  requestOptions: JSON
  """The response from the fulfillment service."""
  responseData: JSON
  """The timestamp when the request was made."""
  sentAt: DateTime!
}

"""
An auto-generated type for paginating through multiple FulfillmentOrderMerchantRequests.
"""
type Shopify_FulfillmentOrderMerchantRequestConnection {
  """A list of edges."""
  edges: [Shopify_FulfillmentOrderMerchantRequestEdge!]!
  """A list of the nodes contained in FulfillmentOrderMerchantRequestEdge."""
  nodes: [Shopify_FulfillmentOrderMerchantRequest!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one FulfillmentOrderMerchantRequest and a cursor during pagination.
"""
type Shopify_FulfillmentOrderMerchantRequestEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of FulfillmentOrderMerchantRequestEdge."""
  node: Shopify_FulfillmentOrderMerchantRequest!
}

"""The kinds of request merchants can make to a fulfillment service."""
enum Shopify_FulfillmentOrderMerchantRequestKind {
  """The merchant requests fulfillment for an `OPEN` fulfillment order."""
  FULFILLMENT_REQUEST
  """
  The merchant requests cancellation of an `IN_PROGRESS` fulfillment order.
  """
  CANCELLATION_REQUEST
}

"""Return type for `fulfillmentOrderMove` mutation."""
type Shopify_FulfillmentOrderMovePayload {
  """
  The original or new fulfillment order that represents all of the line items that were moved to the new location.
  """
  movedFulfillmentOrder: Shopify_FulfillmentOrder
  """
  The fulfillment order that was moved. If the fulfillment order has been
  partially fulfilled manually, and the unfulfilled item is successfully moved
  to a third-party fulfillment service, then fulfillment order will be closed.
  In all other use cases this fulfillment order will stay open and the location
  will be updated.
  """
  originalFulfillmentOrder: Shopify_FulfillmentOrder
  """
  A new fulfillment order representing the remaining line items that are still assigned to the original
  location. This field is returned when any line items on the original fulfillment order can't be moved
  because they are are not stocked at the new location.
  """
  remainingFulfillmentOrder: Shopify_FulfillmentOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `fulfillmentOrderOpen` mutation."""
type Shopify_FulfillmentOrderOpenPayload {
  """
  The fulfillment order that was transitioned to open and is fulfillable.
  """
  fulfillmentOrder: Shopify_FulfillmentOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `fulfillmentOrderRejectCancellationRequest` mutation."""
type Shopify_FulfillmentOrderRejectCancellationRequestPayload {
  """The fulfillment order whose cancellation request was rejected."""
  fulfillmentOrder: Shopify_FulfillmentOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `fulfillmentOrderRejectFulfillmentRequest` mutation."""
type Shopify_FulfillmentOrderRejectFulfillmentRequestPayload {
  """The fulfillment order whose fulfillment request was rejected."""
  fulfillmentOrder: Shopify_FulfillmentOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""The reason for a fulfillment order rejection."""
enum Shopify_FulfillmentOrderRejectionReason {
  """The fulfillment order was rejected because of an incorrect address."""
  INCORRECT_ADDRESS
  """The fulfillment order was rejected because inventory is out of stock."""
  INVENTORY_OUT_OF_STOCK
  """The fulfillment order was rejected because of an ineligible product."""
  INELIGIBLE_PRODUCT
  """
  The fulfillment order was rejected because of an undeliverable destination.
  """
  UNDELIVERABLE_DESTINATION
  """The fulfillment order was rejected for another reason."""
  OTHER
}

"""Return type for `fulfillmentOrderReleaseHold` mutation."""
type Shopify_FulfillmentOrderReleaseHoldPayload {
  """The fulfillment order on which the hold was released."""
  fulfillmentOrder: Shopify_FulfillmentOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_FulfillmentOrderReleaseHoldUserError!]!
}

"""
An error that occurs during the execution of `FulfillmentOrderReleaseHold`.
"""
type Shopify_FulfillmentOrderReleaseHoldUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_FulfillmentOrderReleaseHoldUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `FulfillmentOrderReleaseHoldUserError`.
"""
enum Shopify_FulfillmentOrderReleaseHoldUserErrorCode {
  """The fulfillment order wasn't found."""
  FULFILLMENT_ORDER_NOT_FOUND
}

"""The request status of a fulfillment order."""
enum Shopify_FulfillmentOrderRequestStatus {
  """
  The initial request status for the newly-created fulfillment orders. This is the only valid
  request status for fulfillment orders that aren't assigned to a fulfillment service.
  """
  UNSUBMITTED
  """The merchant requested fulfillment for this fulfillment order."""
  SUBMITTED
  """The fulfillment service accepted the merchant's fulfillment request."""
  ACCEPTED
  """The fulfillment service rejected the merchant's fulfillment request."""
  REJECTED
  """
  The merchant requested a cancellation of the fulfillment request for this fulfillment order.
  """
  CANCELLATION_REQUESTED
  """
  The fulfillment service accepted the merchant's fulfillment cancellation request.
  """
  CANCELLATION_ACCEPTED
  """
  The fulfillment service rejected the merchant's fulfillment cancellation request.
  """
  CANCELLATION_REJECTED
  """
  The fulfillment service closed the fulfillment order without completing it.
  """
  CLOSED
}

"""Return type for `fulfillmentOrderReschedule` mutation."""
type Shopify_FulfillmentOrderReschedulePayload {
  """The fulfillment order that was rescheduled."""
  fulfillmentOrder: Shopify_FulfillmentOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_FulfillmentOrderRescheduleUserError!]!
}

"""
An error that occurs during the execution of `FulfillmentOrderReschedule`.
"""
type Shopify_FulfillmentOrderRescheduleUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_FulfillmentOrderRescheduleUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `FulfillmentOrderRescheduleUserError`.
"""
enum Shopify_FulfillmentOrderRescheduleUserErrorCode {
  """Fulfillment order could not be found."""
  FULFILLMENT_ORDER_NOT_FOUND
}

"""The set of valid sort keys for the FulfillmentOrder query."""
enum Shopify_FulfillmentOrderSortKeys {
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""Return type for `fulfillmentOrdersReleaseHolds` mutation."""
type Shopify_FulfillmentOrdersReleaseHoldsPayload {
  """The asynchronous job that will release the fulfillment holds."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_FulfillmentOrdersReleaseHoldsUserError!]!
}

"""
An error that occurs during the execution of `FulfillmentOrdersReleaseHolds`.
"""
type Shopify_FulfillmentOrdersReleaseHoldsUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_FulfillmentOrdersReleaseHoldsUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `FulfillmentOrdersReleaseHoldsUserError`.
"""
enum Shopify_FulfillmentOrdersReleaseHoldsUserErrorCode {
  """Failed to create release fulfillment order holds job."""
  FAILED_TO_CREATE_JOB
}

"""Return type for `fulfillmentOrdersSetFulfillmentDeadline` mutation."""
type Shopify_FulfillmentOrdersSetFulfillmentDeadlinePayload {
  """Whether the fulfillment deadline was successfully set."""
  success: Boolean
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_FulfillmentOrdersSetFulfillmentDeadlineUserError!]!
}

"""
An error that occurs during the execution of `FulfillmentOrdersSetFulfillmentDeadline`.
"""
type Shopify_FulfillmentOrdersSetFulfillmentDeadlineUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `FulfillmentOrdersSetFulfillmentDeadlineUserError`.
"""
enum Shopify_FulfillmentOrdersSetFulfillmentDeadlineUserErrorCode {
  """The fulfillment orders could not be found."""
  FULFILLMENT_ORDERS_NOT_FOUND
}

"""The status of a fulfillment order."""
enum Shopify_FulfillmentOrderStatus {
  """The fulfillment order is ready for fulfillment."""
  OPEN
  """The fulfillment order is being processed."""
  IN_PROGRESS
  """The fulfillment order has been cancelled by the merchant."""
  CANCELLED
  """The fulfillment order cannot be completed as requested."""
  INCOMPLETE
  """The fulfillment order has been completed and closed."""
  CLOSED
  """
  The fulfillment order is deferred and will be ready for fulfillment after the date and time specified in `fulfill_at`.
  """
  SCHEDULED
  """
  The fulfillment order is on hold. The fulfillment process can't be initiated
  until the hold on the fulfillment order is released.
  """
  ON_HOLD
}

"""Return type for `fulfillmentOrderSubmitCancellationRequest` mutation."""
type Shopify_FulfillmentOrderSubmitCancellationRequestPayload {
  """The fulfillment order specified in the cancelation request."""
  fulfillmentOrder: Shopify_FulfillmentOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `fulfillmentOrderSubmitFulfillmentRequest` mutation."""
type Shopify_FulfillmentOrderSubmitFulfillmentRequestPayload {
  """The original fulfillment order intended to request fulfillment for."""
  originalFulfillmentOrder: Shopify_FulfillmentOrder
  """
  The fulfillment order that was submitted to the fulfillment service. This will be the same as
  the original fulfillment order field. The exception to this is partial fulfillment requests or
  fulfillment request for cancelled or incomplete fulfillment orders.
  """
  submittedFulfillmentOrder: Shopify_FulfillmentOrder
  """
  This field will only be present for partial fulfillment requests. This will represent the new
  fulfillment order with the remaining line items not submitted to the fulfillment service.
  """
  unsubmittedFulfillmentOrder: Shopify_FulfillmentOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
One of the actions that the fulfillment order supports in its current state.
"""
type Shopify_FulfillmentOrderSupportedAction {
  """The action value."""
  action: Shopify_FulfillmentOrderAction!
  """
  The external URL to be used to initiate the fulfillment process outside Shopify.
  Applicable only when the `action` value is `EXTERNAL`.
  """
  externalUrl: URL
}

"""
The address at which the fulfillment occurred. Typically this is the address of the warehouse or fulfillment center.
"""
type Shopify_FulfillmentOriginAddress {
  """The street address of the fulfillment location."""
  address1: String
  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String
  """The city in which the fulfillment location is located."""
  city: String
  """The country code of the fulfillment location."""
  countryCode: String!
  """The province code of the fulfillment location."""
  provinceCode: String
  """The zip code of the fulfillment location."""
  zip: String
}

"""
The input fields used to include the address at which the fulfillment occurred.
Typically the address of a warehouse or a fulfillment center.
"""
input Shopify_FulfillmentOriginAddressInput {
  """The street address of the fulfillment location."""
  address1: String
  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String
  """The city in which the fulfillment location is located."""
  city: String
  """The zip code of the fulfillment location."""
  zip: String
  """The province of the fulfillment location."""
  provinceCode: String
  """The country of the fulfillment location."""
  countryCode: String!
}

"""
A **Fulfillment Service** is a third party warehouse that prepares and ships orders
on behalf of the store owner. Fulfillment services charge a fee to package and ship items
and update product inventory levels. Some well known fulfillment services with Shopify integrations
include: Amazon, Shipwire, and Rakuten. When an app registers a new `FulfillmentService` on a store,
Shopify automatically creates a `Location` that's associated to the fulfillment service.
To learn more about fulfillment services, refer to
[Manage fulfillments as a fulfillment service app](https://shopify.dev/apps/fulfillment/fulfillment-service-apps)
guide.

## Mutations

You can work with the `FulfillmentService` object with the
[fulfillmentServiceCreate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceCreate),
[fulfillmentServiceUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceUpdate),
and [fulfillmentServiceDelete](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceDelete)
mutations.

## Hosted endpoints

Fulfillment service providers integrate with Shopify by providing Shopify with a set of hosted endpoints that
Shopify can query on certain conditions.
These endpoints must have a common prefix, and this prefix should be supplied in the `callbackUrl` parameter
in the
[fulfillmentServiceCreate](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentServiceCreate)
mutation.

- Shopify sends POST requests to the `<callbackUrl>/fulfillment_order_notification` endpoint
  to notify the fulfillment service about fulfillment requests and fulfillment cancellation requests,
  if `fulfillment_orders_opt_in` is set to `true`.

  [As of the 2022-07 API version](https://shopify.dev/changelog/legacy-fulfillment-api-deprecation),
  it's mandatory for a fulfillment service to follow a fulfillment order based workflow by
  having `fulfillment_orders_opt_in` set to `true`,
  hosting the `<callbackUrl>/fulfillment_order_notification` endpoint, and acting on fulfillment requests and cancellations.

  For more information, refer to
  [Receive fulfillment requests and cancellations](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-2-receive-fulfillment-requests-and-cancellations).
- Shopify sends GET requests to the `<callbackUrl>/fetch_tracking_numbers` endpoint to retrieve tracking numbers for orders,
  if `trackingSupport` is set to `true`.

  For more information, refer to
  [Enable tracking support](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-8-enable-tracking-support-optional).

  Fulfillment services can also update tracking information with the
  [fulfillmentTrackingInfoUpdateV2](https://shopify.dev/api/admin-graphql/latest/mutations/fulfillmentTrackingInfoUpdateV2) mutation,
  rather than waiting for Shopify to ask for tracking numbers.
- Shopify sends GET requests to the `<callbackUrl>/fetch_stock` endpoint to retrieve inventory levels,
  if `inventoryManagement` is set to `true`.

  For more information, refer to
  [Sharing inventory levels with Shopify](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-9-share-inventory-levels-with-shopify-optional).

To make sure you have everything set up correctly, you can test the `callbackUrl`-prefixed endpoints
in your development store.

## Resources and webhooks

There are a variety of objects and webhooks that enable a fulfillment service to work.
To exchange fulfillment information with Shopify, fulfillment services use the
[FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder),
[Fulfillment](https://shopify.dev/api/admin-graphql/latest/objects/Fulfillment) and
[Order](https://shopify.dev/api/admin-graphql/latest/objects/Order) objects and related mutations.
To act on fulfillment process events that happen on the Shopify side,
besides awaiting calls to `callbackUrl`-prefixed endpoints,
fulfillment services can subscribe to the
[fulfillment order](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#webhooks)
and [order](https://shopify.dev/api/admin-rest/latest/resources/webhook)
webhooks.
"""
type Shopify_FulfillmentService {
  """
  The callback URL that the fulfillment service has registered for requests. The following considerations apply:
  
  - Shopify queries the `<callbackUrl>/fetch_tracking_numbers` endpoint to retrieve tracking numbers
      for orders, if `trackingSupport` is set to `true`.
  - Shopify queries the `<callbackUrl>/fetch_stock` endpoint to retrieve inventory levels,
      if `inventoryManagement` is set to `true`.
  - Shopify uses the `<callbackUrl>/fulfillment_order_notification` endpoint to send
      [fulfillment and cancellation requests](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-2-receive-fulfillment-requests-and-cancellations),
      if the fulfillment service has opted in to the fulfillment order based workflow for managing fulfillments
      (`fulfillmentOrdersOptIn` is set to `true`).
  """
  callbackUrl: URL
  """
  Whether the fulfillment service uses the [fulfillment order based workflow](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments)
  for managing fulfillments.
  """
  fulfillmentOrdersOptIn: Boolean!
  """Human-readable unique identifier for this fulfillment service."""
  handle: String!
  """The ID of the fulfillment service."""
  id: ID!
  """
  Whether the fulfillment service tracks product inventory and provides updates to Shopify.
  """
  inventoryManagement: Boolean!
  """Location associated with the fulfillment service."""
  location: Shopify_Location
  """
  Whether the fulfillment service can stock inventory alongside other locations.
  """
  permitsSkuSharing: Boolean!
  """Whether the fulfillment service supports local deliveries."""
  productBased: Boolean!
  """The name of the fulfillment service as seen by merchants."""
  serviceName: String!
  """
  Shipping methods associated with the fulfillment service provider. Applies only to Fulfill By Amazon fulfillment service.
  """
  shippingMethods: [Shopify_ShippingMethod!]! @deprecated(reason: "The Fulfillment by Amazon feature will no longer be supported from March 30, 2023. To continue using Amazon fulfillment, merchants need to set up a Multi-Channel Fulfillment solution recommended by Amazon: https://help.shopify.com/manual/shipping/fulfillment-services/amazon#activate-fulfillment-by-amazon")
  """Type associated with the fulfillment service."""
  type: Shopify_FulfillmentServiceType!
}

"""Return type for `fulfillmentServiceCreate` mutation."""
type Shopify_FulfillmentServiceCreatePayload {
  """The created fulfillment service."""
  fulfillmentService: Shopify_FulfillmentService
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `fulfillmentServiceDelete` mutation."""
type Shopify_FulfillmentServiceDeletePayload {
  """The ID of the deleted fulfillment service."""
  deletedId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""The type of a fulfillment service."""
enum Shopify_FulfillmentServiceType {
  """Fulfillment by gift card."""
  GIFT_CARD
  """Manual fulfillment by the merchant."""
  MANUAL
  """Fullfillment by a third-party fulfillment service."""
  THIRD_PARTY
}

"""Return type for `fulfillmentServiceUpdate` mutation."""
type Shopify_FulfillmentServiceUpdatePayload {
  """The updated fulfillment service."""
  fulfillmentService: Shopify_FulfillmentService
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""The status of a fulfillment."""
enum Shopify_FulfillmentStatus {
  """
  Shopify has created the fulfillment and is waiting for the third-party
  fulfillment service to transition it to `open` or `success`.
  """
  PENDING @deprecated(reason: "This is a legacy status and is due to be deprecated.")
  """
  The third-party fulfillment service has acknowledged the fulfillment and is processing it.
  """
  OPEN @deprecated(reason: "This is a legacy status and is due to be deprecated.")
  """The fulfillment was completed successfully."""
  SUCCESS
  """The fulfillment was canceled."""
  CANCELLED
  """There was an error with the fulfillment request."""
  ERROR
  """The fulfillment request failed."""
  FAILURE
}

"""Represents the tracking information for a fulfillment."""
type Shopify_FulfillmentTrackingInfo {
  """The name of the tracking company."""
  company: String
  """The tracking number of the fulfillment."""
  number: String
  """The URLs to track the fulfillment."""
  url: URL
}

"""Return type for `fulfillmentTrackingInfoUpdateV2` mutation."""
type Shopify_FulfillmentTrackingInfoUpdateV2Payload {
  """The updated fulfillment with tracking information."""
  fulfillment: Shopify_Fulfillment
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
The input fields that specify all possible fields for tracking information.
"""
input Shopify_FulfillmentTrackingInput {
  """The tracking number of the fulfillment."""
  number: String
  """The URL to track the fulfillment."""
  url: URL
  """The name of the tracking company."""
  company: String
  """The tracking numbers of the fulfillment, if there are multiple."""
  numbers: [String!]
  """The URLs to track the fulfillment, if there are multiple."""
  urls: [URL!]
}

"""The input fields used to create a fulfillment from fulfillment orders."""
input Shopify_FulfillmentV2Input {
  """
  The fulfillment's tracking information, including a tracking URL, a tracking number,
  and the company associated with the fulfillment.
  """
  trackingInfo: Shopify_FulfillmentTrackingInput
  """
  Whether the customer is notified.
  If `true`, then a notification is sent when the fulfillment is created.
  """
  notifyCustomer: Boolean = false
  """
  Pairs of `fulfillment_order_id` and `fulfillment_order_line_items` that represent the fulfillment
  order line items that have to be fulfilled for each fulfillment order.  For any given pair, if the
  fulfillment order line items are left blank then all the fulfillment order line items of the
  associated fulfillment order ID will be fulfilled.
  """
  lineItemsByFulfillmentOrder: [Shopify_FulfillmentOrderLineItemsInput!]!
  """
  Address information about the location from which the order was fulfilled.
  """
  originAddress: Shopify_FulfillmentOriginAddressInput
}

"""The App Bridge information for a Shopify Function."""
type Shopify_FunctionsAppBridge {
  """The relative path for creating a customization."""
  createPath: String!
  """The relative path for viewing a customization."""
  detailsPath: String!
}

"""The error history from running a Shopify Function."""
type Shopify_FunctionsErrorHistory {
  """The date and time that the first error occurred."""
  errorsFirstOccurredAt: DateTime!
  """The date and time that the first error occurred."""
  firstOccurredAt: DateTime!
  """
  Whether the merchant has shared all the recent errors with the developer.
  """
  hasBeenSharedSinceLastError: Boolean!
  """
  Whether the merchant has shared all the recent errors with the developer.
  """
  hasSharedRecentErrors: Boolean!
}

"""Represents any file other than HTML."""
type Shopify_GenericFile implements Shopify_File & Shopify_Node {
  """A word or phrase to describe the contents or the function of a file."""
  alt: String
  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
  """
  createdAt: DateTime!
  """Any errors that have occurred on the file."""
  fileErrors: [Shopify_FileError!]!
  """The status of the file."""
  fileStatus: Shopify_FileStatus!
  """A globally-unique identifier."""
  id: ID!
  """The generic file's MIME type."""
  mimeType: String
  """The generic file's size in bytes."""
  originalFileSize: Int
  """The preview image for the media."""
  preview: Shopify_MediaPreviewImage
  """The generic file's URL."""
  url: URL
}

"""Represents an issued gift card."""
type Shopify_GiftCard implements Shopify_Node {
  """The gift card's remaining balance."""
  balance: Shopify_MoneyV2!
  """The date and time at which the gift card was created."""
  createdAt: DateTime!
  """The customer who will receive the gift card."""
  customer: Shopify_Customer
  """The date and time at which the gift card was disabled."""
  disabledAt: DateTime
  """Whether the gift card is enabled."""
  enabled: Boolean!
  """The date at which the gift card will expire."""
  expiresOn: Date
  """A globally-unique identifier."""
  id: ID!
  """The initial value of the gift card."""
  initialValue: Shopify_MoneyV2!
  """The final four characters of the gift card code."""
  lastCharacters: String!
  """
  The gift card code. Everything but the final four characters is masked.
  """
  maskedCode: String!
  """
  The note associated with the gift card, which is not visible to the customer.
  """
  note: String
  """
  The order associated with the gift card. This value is `null` if the gift card was issued manually.
  """
  order: Shopify_Order
}

"""An auto-generated type for paginating through multiple GiftCards."""
type Shopify_GiftCardConnection {
  """A list of edges."""
  edges: [Shopify_GiftCardEdge!]!
  """A list of the nodes contained in GiftCardEdge."""
  nodes: [Shopify_GiftCard!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Specifies the input fields to issue a gift card."""
input Shopify_GiftCardCreateInput {
  """The initial value of the gift card."""
  initialValue: Shopify_Decimal!
  """
  The gift card's code. It must be 8-20 characters long and contain only letters(a-z) and numbers(0-9).
  It is not case sensitive. If not provided, then a random code will be generated.
  """
  code: String
  """
  The ID of the customer who will receive the gift card. Requires `write_customers` access_scope.
  """
  customerId: ID
  """
  The date at which the gift card will expire. If not provided, then the gift card will never expire.
  """
  expiresOn: Date
  """
  The note associated with the gift card, which is not visible to the customer.
  """
  note: String
  """
  The suffix of the Liquid template that is used to render the gift card online.
  For example, if the value is `birthday`, then the gift card is rendered using the template `gift_card.birthday.liquid`.
  If not provided, then the default `gift_card.liquid` template is used.
  """
  templateSuffix: String
}

"""Return type for `giftCardCreate` mutation."""
type Shopify_GiftCardCreatePayload {
  """The created gift card."""
  giftCard: Shopify_GiftCard
  """The created gift card's code."""
  giftCardCode: String
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_GiftCardUserError!]!
}

"""Return type for `giftCardDisable` mutation."""
type Shopify_GiftCardDisablePayload {
  """The disabled gift card."""
  giftCard: Shopify_GiftCard
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An auto-generated type which holds one GiftCard and a cursor during pagination.
"""
type Shopify_GiftCardEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of GiftCardEdge."""
  node: Shopify_GiftCard!
}

"""Possible error codes that can be returned by `GiftCardUserError`."""
enum Shopify_GiftCardErrorCode {
  """The input value is too long."""
  TOO_LONG
  """The input value is too short."""
  TOO_SHORT
  """The input value is already taken."""
  TAKEN
  """The input value is invalid."""
  INVALID
  """Unexpected internal error happened."""
  INTERNAL_ERROR
  """Missing a required argument."""
  MISSING_ARGUMENT
  """The input value should be greater than the minimum allowed value."""
  GREATER_THAN
}

"""A sale associated with a gift card."""
type Shopify_GiftCardSale implements Shopify_Sale {
  """The type of order action that the sale represents."""
  actionType: Shopify_SaleActionType!
  """The unique identifier for the sale."""
  id: ID!
  """The line item for the associated sale."""
  lineItem: Shopify_LineItem!
  """The line type assocated with the sale."""
  lineType: Shopify_SaleLineType!
  """The number of units either ordered or intended to be returned."""
  quantity: Int
  """All individual taxes associated with the sale."""
  taxes: [Shopify_SaleTax!]!
  """The total sale amount after taxes and discounts."""
  totalAmount: Shopify_MoneyBag!
  """The total discounts allocated to the sale after taxes."""
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag!
  """The total discounts allocated to the sale before taxes."""
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag!
  """The total amount of taxes for the sale."""
  totalTaxAmount: Shopify_MoneyBag!
}

"""The set of valid sort keys for the GiftCard query."""
enum Shopify_GiftCardSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `updated_at` value."""
  UPDATED_AT
  """Sort by the `customer_name` value."""
  CUSTOMER_NAME
  """Sort by the `code` value."""
  CODE
  """Sort by the `balance` value."""
  BALANCE
  """Sort by the `amount_spent` value."""
  AMOUNT_SPENT
  """Sort by the `initial_value` value."""
  INITIAL_VALUE
  """Sort by the `disabled_at` value."""
  DISABLED_AT
  """Sort by the `expires_on` value."""
  EXPIRES_ON
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""Specifies the input fields to update a gift card."""
input Shopify_GiftCardUpdateInput {
  """
  The note associated with the gift card, which is not visible to the customer.
  """
  note: String
  """
  The date at which the gift card will expire. If set to `null`, then the gift card will never expire.
  """
  expiresOn: Date
  """
  The ID of the customer who will receive the gift card. The ID cannot be
  changed if the gift card already has an assigned customer ID.
  """
  customerId: ID
  """
  The suffix of the Liquid template that is used to render the gift card online.
  For example, if the value is `birthday`, then the gift card is rendered using the template `gift_card.birthday.liquid`.
  """
  templateSuffix: String
}

"""Return type for `giftCardUpdate` mutation."""
type Shopify_GiftCardUpdatePayload {
  """The updated gift card."""
  giftCard: Shopify_GiftCard
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
Represents an error that happens during the execution of a gift card mutation.
"""
type Shopify_GiftCardUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_GiftCardErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""Represents an object that has a list of events."""
interface Shopify_HasEvents {
  """The paginated list of events associated with the host subject."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_EventSortKeys = ID
    """
    Supported filter parameters:
     - `comments`
     - `created_at`
     - `subject_type`
     - `verb`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_EventConnection!
}

"""
Localization extensions associated with the specified resource. For example, the tax id for government invoice.
"""
interface Shopify_HasLocalizationExtensions {
  """List of localization extensions for the resource."""
  localizationExtensions(
    """The country codes of the extensions."""
    countryCodes: [CountryCode!]
    """The purpose of the extensions."""
    purposes: [Shopify_LocalizationExtensionPurpose!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_LocalizationExtensionConnection!
}

"""Resources that metafield definitions can be applied to."""
interface Shopify_HasMetafieldDefinitions {
  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String
    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!
}

"""
Represents information about the metafields associated to the specified resource.
"""
interface Shopify_HasMetafields {
  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String
    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield
  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String
    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!
  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!
    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield
  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
}

"""Published translations associated with the resource."""
interface Shopify_HasPublishedTranslations {
  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Shopify_PublishedTranslation!]!
}

"""
A string containing HTML code. Refer to the [HTML spec](https://html.spec.whatwg.org/#elements-3) for a
complete list of HTML elements.

Example value: `"<p>Grey cotton knit sweater.</p>"`
"""
scalar Shopify_HTML

"""Represents an image resource."""
type Shopify_Image implements Shopify_HasMetafields {
  """A word or phrase to share the nature or contents of an image."""
  altText: String
  """
  The original height of the image in pixels. Returns `null` if the image is not hosted by Shopify.
  """
  height: Int
  """A unique identifier for the image."""
  id: ID
  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String
    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield
  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String
    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!
  """
  The location of the original image as a URL.
  
  If there are any existing transformations in the original source URL, they will remain and not be stripped.
  """
  originalSrc: URL! @deprecated(reason: "Use `url` instead.")
  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!
    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield
  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
  """The location of the image as a URL."""
  src: URL! @deprecated(reason: "Use `url` instead.")
  """
  The location of the transformed image as a URL.
  
  All transformation arguments are considered "best-effort". If they can be applied to an image, they will be.
  Otherwise any transformations which an image type does not support will be ignored.
  """
  transformedSrc(
    """Image width in pixels between 1 and 5760."""
    maxWidth: Int
    """Image height in pixels between 1 and 5760."""
    maxHeight: Int
    """Crops the image according to the specified region."""
    crop: Shopify_CropRegion
    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int = 1
    """
    Best effort conversion of image into content type (SVG -> PNG, Anything -> JPG, Anything -> WEBP are supported).
    """
    preferredContentType: Shopify_ImageContentType
  ): URL! @deprecated(reason: "Use `url(transform:)` instead")
  """
  The location of the image as a URL.
  
  If no transform options are specified, then the original image will be preserved including any pre-applied transforms.
  
  All transformation options are considered "best-effort". Any transformation
  that the original image type doesn't support will be ignored.
  
  If you need multiple variations of the same image, then you can use [GraphQL
  aliases](https://graphql.org/learn/queries/#aliases).
  """
  url(
    """A set of options to transform the original image."""
    transform: Shopify_ImageTransformInput
  ): URL!
  """
  The original width of the image in pixels. Returns `null` if the image is not hosted by Shopify.
  """
  width: Int
}

"""An auto-generated type for paginating through multiple Images."""
type Shopify_ImageConnection {
  """A list of edges."""
  edges: [Shopify_ImageEdge!]!
  """A list of the nodes contained in ImageEdge."""
  nodes: [Shopify_Image!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""List of supported image content types."""
enum Shopify_ImageContentType {
  """A PNG image."""
  PNG
  """A JPG image."""
  JPG
  """A WEBP image."""
  WEBP
}

"""
An auto-generated type which holds one Image and a cursor during pagination.
"""
type Shopify_ImageEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of ImageEdge."""
  node: Shopify_Image!
}

"""Specifies the input fields for an image."""
input Shopify_ImageInput {
  """A globally-unique identifier."""
  id: ID
  """A word or phrase to share the nature or contents of an image."""
  altText: String
  """The URL of the image. May be a staged upload URL."""
  src: String
}

"""
The available options for transforming an image.

All transformation options are considered best effort. Any transformation that
the original image type doesn't support will be ignored.
"""
input Shopify_ImageTransformInput {
  """
  The region of the image to remain after cropping.
  Must be used in conjunction with the `maxWidth` and/or `maxHeight` fields,
  where the `maxWidth` and `maxHeight` aren't equal.
  The `crop` argument should coincide with the smaller value. A smaller `maxWidth` indicates a `LEFT` or `RIGHT` crop, while
  a smaller `maxHeight` indicates a `TOP` or `BOTTOM` crop. For example, `{
  maxWidth: 5, maxHeight: 10, crop: LEFT }` will result
  in an image with a width of 5 and height of 10, where the right side of the image is removed.
  """
  crop: Shopify_CropRegion
  """Image width in pixels between 1 and 5760."""
  maxWidth: Int
  """Image height in pixels between 1 and 5760."""
  maxHeight: Int
  """
  Image size multiplier for high-resolution retina displays. Must be within 1..3.
  """
  scale: Int = 1
  """
  Convert the source image into the preferred content type.
  Supported conversions: `.svg` to `.png`, any file type to `.jpg`, and any file type to `.webp`.
  """
  preferredContentType: Shopify_ImageContentType
}

"""
A parameter to upload an image.

Deprecated in favor of
[StagedUploadParameter](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadParameter),
which is used in
[StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget)
and returned by the
[stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
"""
type Shopify_ImageUploadParameter {
  """The parameter name."""
  name: String!
  """The parameter value."""
  value: String!
}

"""The incoming line item."""
input Shopify_IncomingRequestLineItemInput {
  """The ID of the rejected line item."""
  fulfillmentOrderLineItemId: ID!
  """The rejection message of the line item."""
  message: String
}

"""Return type for `inventoryActivate` mutation."""
type Shopify_InventoryActivatePayload {
  """The inventory level that was activated."""
  inventoryLevel: Shopify_InventoryLevel
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Specifies the items and their adjustments."""
input Shopify_InventoryAdjustItemInput {
  """ID of the inventory item to adjust."""
  inventoryItemId: ID!
  """
  The change applied to the `available` quantity of the item at the location.
  """
  availableDelta: Int!
}

"""Represents a group of adjustments made as part of the same operation."""
type Shopify_InventoryAdjustmentGroup implements Shopify_Node {
  """The app that triggered the inventory event, if one exists."""
  app: Shopify_App
  """
  The set of inventory quantity changes that occurred in the inventory event.
  """
  changes(
    """The IDs of the inventory items to filter changes by."""
    inventoryItemIds: [ID!]
    """The IDs of the locations to filter changes by."""
    locationIds: [ID!]
    """The names of the requested inventory quantities."""
    quantityNames: [String!]
  ): [Shopify_InventoryChange!]!
  """The date and time the inventory adjustment group was created."""
  createdAt: DateTime!
  """A globally-unique identifier."""
  id: ID!
  """The reason for the group of adjustments."""
  reason: String!
  """
  The reference document URI for the changes. Denotes what is causing the change.
  """
  referenceDocumentUri: String
  """The staff member associated with the inventory event."""
  staffMember: Shopify_StaffMember
}

"""The information required to adjust inventory quantities."""
input Shopify_InventoryAdjustQuantitiesInput {
  """The reason for the quantity changes."""
  reason: String!
  """The quantity name to be adjusted."""
  name: String!
  """
  The reference document URI for the changes. Used to denote what is causing the change.
  """
  referenceDocumentUri: String
  """The quantity changes of items at locations to be made."""
  changes: [Shopify_InventoryChangeInput!]!
}

"""Return type for `inventoryAdjustQuantities` mutation."""
type Shopify_InventoryAdjustQuantitiesPayload {
  """The group of changes made by the operation."""
  inventoryAdjustmentGroup: Shopify_InventoryAdjustmentGroup
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_InventoryAdjustQuantitiesUserError!]!
}

"""
An error that occurs during the execution of `InventoryAdjustQuantities`.
"""
type Shopify_InventoryAdjustQuantitiesUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_InventoryAdjustQuantitiesUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `InventoryAdjustQuantitiesUserError`.
"""
enum Shopify_InventoryAdjustQuantitiesUserErrorCode {
  """
  Internal (gid://shopify/) ledger documents are not allowed to be adjusted via API.
  """
  INTERNAL_LEDGER_DOCUMENT
  """A ledger document URI is not allowed when adjusting available."""
  INVALID_AVAILABLE_DOCUMENT
  """The specified inventory item could not be found."""
  INVALID_INVENTORY_ITEM
  """The specified ledger document is invalid."""
  INVALID_LEDGER_DOCUMENT
  """The specified location could not be found."""
  INVALID_LOCATION
  """A ledger document URI is required except when adjusting available."""
  INVALID_QUANTITY_DOCUMENT
  """The specified quantity name is invalid."""
  INVALID_QUANTITY_NAME
  """The quantity can't be lower than -1,000,000,000."""
  INVALID_QUANTITY_TOO_LOW
  """The quantity can't be higher than 1,000,000,000."""
  INVALID_QUANTITY_TOO_HIGH
  """The specified reason is invalid."""
  INVALID_REASON
  """The specified reference document is invalid."""
  INVALID_REFERENCE_DOCUMENT
  """The quantities couldn't be adjusted. Try again."""
  ADJUST_QUANTITIES_FAILED
  """
  All changes must have the same ledger document URI or, in the case of adjusting available, no ledger document URI.
  """
  MAX_ONE_LEDGER_DOCUMENT
}

"""Specifies the fields required to adjust the inventory quantity."""
input Shopify_InventoryAdjustQuantityInput {
  """ID of the inventory level to adjust."""
  inventoryLevelId: ID!
  """
  The change applied to the `available` quantity of the item at the location.
  """
  availableDelta: Int!
}

"""Return type for `inventoryAdjustQuantity` mutation."""
type Shopify_InventoryAdjustQuantityPayload {
  """
  Represents the updated inventory quantity of an inventory item at a specific location.
  """
  inventoryLevel: Shopify_InventoryLevel
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `inventoryBulkAdjustQuantityAtLocation` mutation."""
type Shopify_InventoryBulkAdjustQuantityAtLocationPayload {
  """
  Represents the updated inventory quantities of an inventory item at the location.
  """
  inventoryLevels: [Shopify_InventoryLevel!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
Specifies whether the inventory item should be activated or not at the specified location.
"""
input Shopify_InventoryBulkToggleActivationInput {
  """The ID of the location to modify the inventory item's stocked status."""
  locationId: ID!
  """
  Whether the inventory item can be stocked at the specified location. To
  deactivate, set the value to false which removes an inventory item's
  quantities from that location, and turns off inventory at that location.
  """
  activate: Boolean!
}

"""Return type for `inventoryBulkToggleActivation` mutation."""
type Shopify_InventoryBulkToggleActivationPayload {
  """The inventory item that was updated."""
  inventoryItem: Shopify_InventoryItem
  """The activated inventory levels."""
  inventoryLevels: [Shopify_InventoryLevel!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_InventoryBulkToggleActivationUserError!]!
}

"""
An error that occurred while setting the activation status of an inventory item.
"""
type Shopify_InventoryBulkToggleActivationUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_InventoryBulkToggleActivationUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `InventoryBulkToggleActivationUserError`.
"""
enum Shopify_InventoryBulkToggleActivationUserErrorCode {
  """An error occurred while setting the activation status."""
  GENERIC_ERROR
  """
  Cannot unstock an inventory item from the only location at which it is stocked.
  """
  CANNOT_DEACTIVATE_FROM_ONLY_LOCATION
  """
  Cannot unstock this inventory item from this location because it has committed and incoming quantities.
  """
  COMMITTED_AND_INCOMING_INVENTORY_AT_LOCATION
  """
  Cannot unstock this inventory item from this location because it has incoming quantities.
  """
  INCOMING_INVENTORY_AT_LOCATION
  """
  Cannot unstock this inventory item from this location because it has committed quantities.
  """
  COMMITTED_INVENTORY_AT_LOCATION
  """Failed to unstock this inventory item from this location."""
  FAILED_TO_UNSTOCK_FROM_LOCATION
  """
  Cannot stock this inventory item at this location because it is managed by a third-party fulfillment service.
  """
  INVENTORY_MANAGED_BY_3RD_PARTY
  """
  Cannot stock this inventory item at this location because it is managed by Shopify.
  """
  INVENTORY_MANAGED_BY_SHOPIFY
  """Failed to stock this inventory item at this location."""
  FAILED_TO_STOCK_AT_LOCATION
  """
  Cannot stock this inventory item at this location because the variant is missing a SKU.
  """
  MISSING_SKU
  """The location was not found."""
  LOCATION_NOT_FOUND
  """The inventory item was not found."""
  INVENTORY_ITEM_NOT_FOUND
}

"""
Represents a change in an inventory quantity of an inventory item at a location.
"""
type Shopify_InventoryChange {
  """The amount by which the inventory quantity was changed."""
  delta: Int!
  """The inventory item associated with this inventory change."""
  item: Shopify_InventoryItem
  """
  The ledger document URI for the change. Denotes who the change is applied to.
  """
  ledgerDocumentUri: String
  """The location associated with this inventory change."""
  location: Shopify_Location
  """The name of the inventory quantity that was changed."""
  name: String!
  """The quantity of named inventory after the change."""
  quantityAfterChange: Int
}

"""Represents the change to be made to an inventory item at a location."""
input Shopify_InventoryChangeInput {
  """The amount by which the inventory quantity will be changed."""
  delta: Int!
  """Specifies the inventory item to which the change will be applied."""
  inventoryItemId: ID!
  """Specifies the location at which the change will be applied."""
  locationId: ID!
  """
  The ledger document URI to which the quantity change is being applied. Not
  allowed for 'available' and required for other quantity names.
  """
  ledgerDocumentUri: String
}

"""Return type for `inventoryDeactivate` mutation."""
type Shopify_InventoryDeactivatePayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
Represents the goods available to be shipped to a customer.
It holds essential information about the goods, including SKU and whether it is tracked.
"""
type Shopify_InventoryItem implements Shopify_LegacyInteroperability & Shopify_Node {
  """The ISO 3166-1 alpha-2 country code of where the item originated from."""
  countryCodeOfOrigin: CountryCode
  """A list of country specific harmonized system codes."""
  countryHarmonizedSystemCodes(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CountryHarmonizedSystemCodeConnection!
  """The date and time when the inventory item was created."""
  createdAt: DateTime!
  """The number of inventory items that share the same SKU with this item."""
  duplicateSkuCount: Int!
  """The harmonized system code of the item."""
  harmonizedSystemCode: String
  """A globally-unique identifier."""
  id: ID!
  """The URL that points to the inventory history for the item."""
  inventoryHistoryUrl: URL
  """The inventory item's quantities at the specified location."""
  inventoryLevel(
    """ID of the location for which the inventory level is requested."""
    locationId: ID!
  ): Shopify_InventoryLevel
  """
  A list of the inventory item's quantities for each location that the inventory item can be stocked at.
  """
  inventoryLevels(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """
    Supported filter parameters:
     - `created_at`
     - `inventory_group_id`
     - `inventory_item_id`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_InventoryLevelConnection!
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: Shopify_UnsignedInt64!
  """The number of locations where this inventory item is stocked."""
  locationsCount: Int!
  """
  The ISO 3166-2 alpha-2 province code of where the item originated from.
  """
  provinceCodeOfOrigin: String
  """Whether the inventory item requires shipping."""
  requiresShipping: Boolean!
  """Inventory item SKU."""
  sku: String
  """Whether inventory levels are tracked for the item."""
  tracked: Boolean!
  """
  Whether the value of the `tracked` field for the inventory item can be changed.
  """
  trackedEditable: Shopify_EditableProperty!
  """
  Unit cost associated with the inventory item. Note: the user must have "View
  product costs" permission granted in order to access this field once product
  granular permissions are enabled.
  """
  unitCost: Shopify_MoneyV2
  """The date and time when the inventory item was updated."""
  updatedAt: DateTime!
  """The variant that owns this inventory item."""
  variant: Shopify_ProductVariant!
}

"""An auto-generated type for paginating through multiple InventoryItems."""
type Shopify_InventoryItemConnection {
  """A list of edges."""
  edges: [Shopify_InventoryItemEdge!]!
  """A list of the nodes contained in InventoryItemEdge."""
  nodes: [Shopify_InventoryItem!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one InventoryItem and a cursor during pagination.
"""
type Shopify_InventoryItemEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of InventoryItemEdge."""
  node: Shopify_InventoryItem!
}

"""Specifies the input fields for an inventory item."""
input Shopify_InventoryItemInput {
  """
  Unit cost associated with the inventory item, the currency is the shop's default currency.
  """
  cost: Shopify_Decimal
  """Whether the inventory item is tracked."""
  tracked: Boolean
}

"""Inventory item."""
input Shopify_InventoryItemUpdateInput {
  """
  Unit cost associated with the inventory item, the currency is the shop's default currency.
  """
  cost: Shopify_Decimal
  """
  Whether the inventory item is tracked. The value must be true to adjust the item's inventory levels.
  """
  tracked: Boolean
  """The ISO 3166-1 alpha-2 country code of where the item originated from."""
  countryCodeOfOrigin: CountryCode
  """
  The ISO 3166-2 alpha-2 province/state code of where the item originated from.
  """
  provinceCodeOfOrigin: String
  """
  The harmonized system code of the inventory item. This must be a number between 6 and 13 digits.
  """
  harmonizedSystemCode: String
  """List of country-specific harmonized system codes."""
  countryHarmonizedSystemCodes: [Shopify_CountryHarmonizedSystemCodeInput!]
}

"""Return type for `inventoryItemUpdate` mutation."""
type Shopify_InventoryItemUpdatePayload {
  """The inventory item that was updated."""
  inventoryItem: Shopify_InventoryItem
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
The quantities of an inventory item that are related to a specific location.
"""
type Shopify_InventoryLevel implements Shopify_Node {
  """
  The quantity of inventory items that are available at the inventory level's associated location.
  """
  available: Int!
  """
  Whether the inventory items associated with the inventory level can be deactivated.
  """
  canDeactivate: Boolean!
  """The date and time when the inventory level was created."""
  createdAt: DateTime!
  """
  Describes either the impact of deactivating the inventory level, or why the inventory level can't be deactivated.
  """
  deactivationAlert: String
  """
  Describes, in HTML with embedded URLs, either the impact of deactivating the
  inventory level or why the inventory level can't be deactivated.
  """
  deactivationAlertHtml: Shopify_FormattedString
  """A globally-unique identifier."""
  id: ID!
  """
  The quantity of inventory items that are going to the inventory level's associated location.
  """
  incoming: Int!
  """Inventory item associated with the inventory level."""
  item: Shopify_InventoryItem!
  """The location associated with the inventory level."""
  location: Shopify_Location!
  """Quantities for the requested names."""
  quantities(
    """The names of the requested inventory quantities."""
    names: [String!]!
  ): [Shopify_InventoryQuantity!]!
  """The date and time when the inventory level was updated."""
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple InventoryLevels.
"""
type Shopify_InventoryLevelConnection {
  """A list of edges."""
  edges: [Shopify_InventoryLevelEdge!]!
  """A list of the nodes contained in InventoryLevelEdge."""
  nodes: [Shopify_InventoryLevel!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one InventoryLevel and a cursor during pagination.
"""
type Shopify_InventoryLevelEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of InventoryLevelEdge."""
  node: Shopify_InventoryLevel!
}

"""Specifies the input fields for an inventory level."""
input Shopify_InventoryLevelInput {
  """The available quantity of an inventory item at a location."""
  availableQuantity: Int!
  """The ID of a location."""
  locationId: ID!
}

"""The information required to move inventory quantities."""
input Shopify_InventoryMoveQuantitiesInput {
  """The reason for the quantity changes."""
  reason: String!
  """
  The reference document URI for the changes. Used to denote what is causing the change.
  """
  referenceDocumentUri: String!
  """The quantity changes of items at locations to be made."""
  changes: [Shopify_InventoryMoveQuantityChange!]!
}

"""Return type for `inventoryMoveQuantities` mutation."""
type Shopify_InventoryMoveQuantitiesPayload {
  """The group of changes made by the operation."""
  inventoryAdjustmentGroup: Shopify_InventoryAdjustmentGroup
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_InventoryMoveQuantitiesUserError!]!
}

"""
An error that occurs during the execution of `InventoryMoveQuantities`.
"""
type Shopify_InventoryMoveQuantitiesUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_InventoryMoveQuantitiesUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `InventoryMoveQuantitiesUserError`.
"""
enum Shopify_InventoryMoveQuantitiesUserErrorCode {
  """
  Internal (gid://shopify/) ledger documents are not allowed to be adjusted via API.
  """
  INTERNAL_LEDGER_DOCUMENT
  """A ledger document URI is not allowed when adjusting available."""
  INVALID_AVAILABLE_DOCUMENT
  """The specified inventory item could not be found."""
  INVALID_INVENTORY_ITEM
  """The specified ledger document is invalid."""
  INVALID_LEDGER_DOCUMENT
  """The specified location could not be found."""
  INVALID_LOCATION
  """A ledger document URI is required except when adjusting available."""
  INVALID_QUANTITY_DOCUMENT
  """The specified quantity name is invalid."""
  INVALID_QUANTITY_NAME
  """The quantity can't be negative."""
  INVALID_QUANTITY_NEGATIVE
  """The quantity can't be higher than 1,000,000,000."""
  INVALID_QUANTITY_TOO_HIGH
  """The specified reason is invalid."""
  INVALID_REASON
  """The specified reference document is invalid."""
  INVALID_REFERENCE_DOCUMENT
  """The quantities couldn't be moved. Try again."""
  MOVE_QUANTITIES_FAILED
  """The quantities can't be moved between different locations."""
  DIFFERENT_LOCATIONS
  """The quantity names for each change can't be the same."""
  SAME_QUANTITY_NAME
  """
  Only a maximum of 2 ledger document URIs across all changes is allowed.
  """
  MAXIMUM_LEDGER_DOCUMENT_URIS
}

"""
Represents the change to be made to an inventory item at a location.
The change can either involve the same quantity name between different locations,
or involve different quantity names between the same location.
"""
input Shopify_InventoryMoveQuantityChange {
  """Specifies the inventory item to which the change will be applied."""
  inventoryItemId: ID!
  """The amount by which the inventory quantity will be changed."""
  quantity: Int!
  """
  The location, quantity name, and ledger document from where the move will be made.
  """
  from: Shopify_InventoryMoveQuantityTerminalInput!
  """
  The location, quantity name, and ledger document to where the move will be made.
  """
  to: Shopify_InventoryMoveQuantityTerminalInput!
}

"""Represents the change to be made to an inventory item at a location."""
input Shopify_InventoryMoveQuantityTerminalInput {
  """Specifies the location at which the change will be applied."""
  locationId: ID!
  """The quantity name to be moved."""
  name: String!
  """
  The ledger document URI for the quantity move. Not allowed for 'available' and required for other quantity names.
  """
  ledgerDocumentUri: String
}

"""General inventory properties for the shop."""
type Shopify_InventoryProperties {
  """All the quantity names."""
  quantityNames: [Shopify_InventoryQuantityName!]!
}

"""
Represents a quantity of an inventory item at a specific location, for a specific name.
"""
type Shopify_InventoryQuantity {
  """The name that identifies the inventory quantity."""
  name: String!
  """The quantity for the quantity name."""
  quantity: Int!
  """When the quantity was last updated."""
  updatedAt: DateTime
}

"""Details about an individual quantity name."""
type Shopify_InventoryQuantityName {
  """List of quantity names that this quantity name belongs to."""
  belongsTo: [String!]!
  """List of quantity names that comprise this quantity name."""
  comprises: [String!]!
  """The i18n-friendly display name of the quantity."""
  displayName: String
  """Whether the quantity name has been used by the merchant."""
  isInUse: Boolean!
  """The quantity name as used by the API."""
  name: String!
}

"""The information required to set inventory on hand quantities."""
input Shopify_InventorySetOnHandQuantitiesInput {
  """The reason for the quantity changes."""
  reason: String!
  """
  The reference document URI for the changes. Used to denote what is causing the change.
  """
  referenceDocumentUri: String
  """The value to which the on hand quantity will be set."""
  setQuantities: [Shopify_InventorySetQuantityInput!]!
}

"""Return type for `inventorySetOnHandQuantities` mutation."""
type Shopify_InventorySetOnHandQuantitiesPayload {
  """The group of changes made by the operation."""
  inventoryAdjustmentGroup: Shopify_InventoryAdjustmentGroup
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_InventorySetOnHandQuantitiesUserError!]!
}

"""
An error that occurs during the execution of `InventorySetOnHandQuantities`.
"""
type Shopify_InventorySetOnHandQuantitiesUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_InventorySetOnHandQuantitiesUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `InventorySetOnHandQuantitiesUserError`.
"""
enum Shopify_InventorySetOnHandQuantitiesUserErrorCode {
  """The specified inventory item could not be found."""
  INVALID_INVENTORY_ITEM
  """The specified location could not be found."""
  INVALID_LOCATION
  """The quantity can't be negative."""
  INVALID_QUANTITY_NEGATIVE
  """The quantity can't be higher than 1,000,000,000."""
  INVALID_QUANTITY_TOO_HIGH
  """The specified reason is invalid."""
  INVALID_REASON
  """The specified reference document is invalid."""
  INVALID_REFERENCE_DOCUMENT
  """The on-hand quantities couldn't be set. Try again."""
  SET_ON_HAND_QUANTITIES_FAILED
}

"""Represents the quantity to be set for an inventory item at a location."""
input Shopify_InventorySetQuantityInput {
  """Specifies the inventory item to which the quantity will be set."""
  inventoryItemId: ID!
  """Specifies the location at which the quantity will be set."""
  locationId: ID!
  """The quantity to which the inventory quantity will be set."""
  quantity: Int!
}

"""
A job corresponds to some long running task that the client should poll for status.
"""
type Shopify_Job {
  """This indicates if the job is still queued or has been run."""
  done: Boolean!
  """
  A globally-unique identifier that's returned when running an asynchronous mutation.
  """
  id: ID!
  """
  This field will only resolve once the job is done. Can be used to ask for object(s) that have been changed by the job.
  """
  query: Shopify_QueryRoot
}

"""
The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start.
"""
type Shopify_QueryRoot {
  """Returns an abandonment by ID."""
  abandonment(
    """The ID of the Abandonment to return."""
    id: ID!
  ): Shopify_Abandonment
  """Returns an Abandonment by the Abandoned Checkout ID."""
  abandonmentByAbandonedCheckoutId(
    """The ID of the Abandoned Checkout ID to query by."""
    abandonedCheckoutId: ID!
  ): Shopify_Abandonment
  """Lookup an App by ID or return the currently authenticated App."""
  app(
    """The ID to lookup the App by."""
    id: ID
  ): Shopify_App
  """
  Fetches app by handle.
  Returns null if the app doesn't exist.
  """
  appByHandle(
    """Handle of the App."""
    handle: String!
  ): Shopify_App
  """
  Fetches an app by its client ID.
  Returns null if the app doesn't exist.
  """
  appByKey(
    """Client ID of the app."""
    apiKey: String!
  ): Shopify_App
  """An app discount type."""
  appDiscountType(
    """The ID for the function providing the app discount type."""
    functionId: String!
  ): Shopify_AppDiscountType
  """A list of app discount types installed by apps."""
  appDiscountTypes: [Shopify_AppDiscountType!]!
  """
  Lookup an AppInstallation by ID or return the AppInstallation for the currently authenticated App.
  """
  appInstallation(
    """ID used to lookup AppInstallation."""
    id: ID
  ): Shopify_AppInstallation
  """List of app installations."""
  appInstallations(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_AppInstallationSortKeys = INSTALLED_AT
    """The category of app installations to fetch."""
    category: Shopify_AppInstallationCategory
    """The privacy level of app installations to fetch."""
    privacy: Shopify_AppInstallationPrivacy = PUBLIC
  ): Shopify_AppInstallationConnection!
  """Returns an automatic discount resource by ID."""
  automaticDiscount(
    """The ID of the DiscountAutomatic to return."""
    id: ID!
  ): Shopify_DiscountAutomatic @deprecated(reason: "Use `automaticDiscountNode` instead.")
  """Returns an automatic discount resource by ID."""
  automaticDiscountNode(
    """The ID of the DiscountAutomaticNode to return."""
    id: ID!
  ): Shopify_DiscountAutomaticNode
  """List of automatic discounts."""
  automaticDiscountNodes(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_AutomaticDiscountSortKeys = CREATED_AT
    """
    Supported filter parameters:
     - `status`
     - `type`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_DiscountAutomaticNodeConnection!
  """List of the shop's automatic discount saved searches."""
  automaticDiscountSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection!
  """List of automatic discounts."""
  automaticDiscounts(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_AutomaticDiscountSortKeys = CREATED_AT
    """
    Supported filter parameters:
     - `status`
     - `type`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_DiscountAutomaticConnection! @deprecated(reason: "Use `automaticDiscountNodes` instead.")
  """
  Returns a list of activated carrier services and associated shop locations that support them.
  """
  availableCarrierServices: [Shopify_DeliveryCarrierServiceAndLocations!]!
  """A list of available locales."""
  availableLocales: [Locale!]!
  """Returns a `DeliveryCarrierService` object by ID."""
  carrierService(
    """The ID of the DeliveryCarrierService to return."""
    id: ID!
  ): Shopify_DeliveryCarrierService
  """Lookup a channel by ID."""
  channel(
    """The ID of the Channel to return."""
    id: ID!
  ): Shopify_Channel @deprecated(reason: "Use `publication` instead.")
  """List of the active sales channels."""
  channels(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ChannelConnection! @deprecated(reason: "Use `publications` instead.")
  """A checkout profile on a shop."""
  checkoutProfile(
    """The ID of the checkout profile."""
    id: ID!
  ): Shopify_CheckoutProfile
  """List of checkout profiles on a shop."""
  checkoutProfiles(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_CheckoutProfileSortKeys = UPDATED_AT
    """
    Supported filter parameters:
     - `is_published`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_CheckoutProfileConnection!
  """Returns a code discount resource by ID."""
  codeDiscountNode(
    """The ID of the DiscountCodeNode to return."""
    id: ID!
  ): Shopify_DiscountCodeNode
  """Returns a code discount identified by its discount code."""
  codeDiscountNodeByCode(
    """The case-insensitive code of the `DiscountCodeNode` to return."""
    code: String!
  ): Shopify_DiscountCodeNode
  """
  List of code discounts. Special fields for query params:
   * status: active, expired, scheduled
   * discount_type: bogo, fixed_amount, free_shipping, percentage.
  """
  codeDiscountNodes(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_CodeDiscountSortKeys = CREATED_AT
    """
    Supported filter parameters:
     - `combines_with`
     - `created_at`
     - `discount_type`
     - `ends_at`
     - `starts_at`
     - `status`
     - `times_used`
     - `title`
     - `type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_DiscountCodeNodeConnection!
  """List of the shop's code discount saved searches."""
  codeDiscountSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection!
  """Returns a Collection resource by ID."""
  collection(
    """The ID of the Collection to return."""
    id: ID!
  ): Shopify_Collection
  """Return a collection by its handle."""
  collectionByHandle(
    """The handle of the collection."""
    handle: String!
  ): Shopify_Collection
  """Lists all rules that can be used to create smart collections."""
  collectionRulesConditions: [Shopify_CollectionRuleConditions!]!
  """Returns a list of the shop's collection saved searches."""
  collectionSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection!
  """Returns a list of collections."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_CollectionSortKeys = ID
    """
    Supported filter parameters:
     - `collection_type`
     - `publishable_status`
     - `published_status`
     - `title`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_CollectionConnection!
  """Returns the list of companies in the shop."""
  companies(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_CompanySortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `external_id`
     - `name`
     - `since_date`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_CompanyConnection!
  """Returns a `Company` object by ID."""
  company(
    """The ID of the Company to return."""
    id: ID!
  ): Shopify_Company
  """Returns a `CompanyContact` object by ID."""
  companyContact(
    """The ID of the CompanyContact to return."""
    id: ID!
  ): Shopify_CompanyContact
  """Returns a `CompanyContactRole` object by ID."""
  companyContactRole(
    """The ID of the CompanyContactRole to return."""
    id: ID!
  ): Shopify_CompanyContactRole
  """The number of companies for a shop."""
  companyCount: Int!
  """Returns a `CompanyLocation` object by ID."""
  companyLocation(
    """The ID of the CompanyLocation to return."""
    id: ID!
  ): Shopify_CompanyLocation
  """Returns the list of company locations in the shop."""
  companyLocations(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_CompanyLocationSortKeys = ID
    """
    Supported filter parameters:
     - `company_id`
     - `created_at`
     - `external_id`
     - `ids`
     - `name`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_CompanyLocationConnection!
  """Return the AppInstallation for the currently authenticated App."""
  currentAppInstallation: Shopify_AppInstallation!
  """
  Returns the current app's most recent BulkOperation. Apps can run one bulk
  query and one bulk mutation operation at a time, by shop.
  """
  currentBulkOperation(
    """The current bulk operation's type."""
    type: Shopify_BulkOperationType = QUERY
  ): Shopify_BulkOperation
  """Returns a Customer resource by ID."""
  customer(
    """The ID of the Customer to return."""
    id: ID!
  ): Shopify_Customer
  """Returns a CustomerPaymentMethod resource by its ID."""
  customerPaymentMethod(
    """The ID of the CustomerPaymentMethod to return."""
    id: ID!
    """Whether to show the customer's revoked payment method."""
    showRevoked: Boolean = false
  ): Shopify_CustomerPaymentMethod
  """
  The list of members, such as customers, that's associated with an individual segment.
  """
  customerSegmentMembers(
    """The ID of the segment."""
    segmentId: ID
    """The query that's used to filter the members."""
    query: String
    """The ID of the segment members query."""
    queryId: ID
    """
    The timezone that's used to interpret relative date arguments. The timezone
    defaults to UTC if the timezone isn't provided.
    """
    timezone: String
    """
    Reverse the order of the list. The sorting behaviour defaults to ascending order.
    """
    reverse: Boolean = false
    """Sort the list by a given key."""
    sortKey: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
  ): Shopify_CustomerSegmentMemberConnection!
  """Returns a segment members query resource by ID."""
  customerSegmentMembersQuery(
    """The ID of the CustomerSegmentMembersQuery to return."""
    id: ID!
  ): Shopify_CustomerSegmentMembersQuery
  """Whether a member, which is a customer, belongs to a segment."""
  customerSegmentMembership(
    """The segments to evaluate for the given customer."""
    segmentIds: [ID!]!
    """The ID of the customer that has the membership."""
    customerId: ID!
  ): Shopify_SegmentMembershipResponse!
  """List of customers."""
  customers(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_CustomerSortKeys = ID
    """
    Supported filter parameters:
     - `accepts_marketing`
     - `country`
     - `customer_date`
     - `email`
     - `last_abandoned_order_date`
     - `order_date`
     - `orders_count`
     - `phone`
     - `state`
     - `tag`
     - `tag_not`
     - `total_spent`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_CustomerConnection!
  """The paginated list of deletion events."""
  deletionEvents(
    """List of subject types to filter by."""
    subjectTypes: [Shopify_DeletionEventSubjectType!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_DeletionEventSortKeys = ID
    """
    Supported filter parameters:
     - `occurred_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_DeletionEventConnection!
  """Returns a Delivery Profile resource by ID."""
  deliveryProfile(
    """The ID of the DeliveryProfile to return."""
    id: ID!
  ): Shopify_DeliveryProfile
  """Returns a list of saved delivery profiles."""
  deliveryProfiles(
    """
    If `true`, returns only delivery profiles that were created by the merchant.
    """
    merchantOwnedOnly: Boolean
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_DeliveryProfileConnection!
  """Returns the shop-wide shipping settings."""
  deliverySettings: Shopify_DeliverySetting
  """The total number of discount codes for the shop."""
  discountCodeCount(
    """
    Supported filter parameters:
     * times_used.
    """
    query: String
  ): Int!
  """Returns a discount resource by ID."""
  discountNode(
    """The ID of the DiscountNode to return."""
    id: ID!
  ): Shopify_DiscountNode
  """List of discounts."""
  discountNodes(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_DiscountSortKeys = CREATED_AT
    """
    Supported filter parameters:
     - `combines_with`
       - Acceptable Values:
         - `PRODUCT_DISCOUNTS`
         - `ORDER_DISCOUNTS`
         - `SHIPPING_DISCOUNTS`
     - `discount_class`
       - Acceptable Values:
         - `PRODUCT`
         - `ORDER`
         - `SHIPPING`
     - `discount_type`
     - `method`
     - `starts_at`
     - `status`
     - `times_used`
     - `title`
     - `type`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_DiscountNodeConnection!
  """Returns a bulk code creation resource by ID."""
  discountRedeemCodeBulkCreation(
    """The ID of the DiscountRedeemCodeBulkCreation to return."""
    id: ID!
  ): Shopify_DiscountRedeemCodeBulkCreation
  """List of the shop's redeemed discount code saved searches."""
  discountRedeemCodeSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_DiscountCodeSortKeys = ID
    """
    Supported filter parameters:
     - `times_used`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_SavedSearchConnection!
  """Returns dispute details based on ID."""
  dispute(
    """The ID of the ShopifyPaymentsDispute to return."""
    id: ID!
  ): Shopify_ShopifyPaymentsDispute
  """Returns dispute evidence details based on ID."""
  disputeEvidence(
    """The ID of the ShopifyPaymentsDisputeEvidence to return."""
    id: ID!
  ): Shopify_ShopifyPaymentsDisputeEvidence
  """Lookup a Domain by ID."""
  domain(
    """The ID of the Domain to return."""
    id: ID!
  ): Shopify_Domain
  """Returns a DraftOrder resource by ID."""
  draftOrder(
    """The ID of the DraftOrder to return."""
    id: ID!
  ): Shopify_DraftOrder
  """List of the shop's draft order saved searches."""
  draftOrderSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection!
  """Returns a DraftOrderTag resource by ID."""
  draftOrderTag(
    """The ID of the DraftOrderTag to return."""
    id: ID!
  ): Shopify_DraftOrderTag
  """List of saved draft orders."""
  draftOrders(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_DraftOrderSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `customer_id`
     - `source`
     - `status`
     - `tag`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_DraftOrderConnection!
  """A list of the shop's file saved searches."""
  fileSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection!
  """Returns a paginated list of files that have been uploaded to Shopify."""
  files(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_FileSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `filename`
     - `media_type`
     - `original_upload_size`
     - `status`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_FileConnection!
  """Returns a Fulfillment resource by ID."""
  fulfillment(
    """The ID of the Fulfillment to return."""
    id: ID!
  ): Shopify_Fulfillment
  """Returns a Fulfillment order resource by ID."""
  fulfillmentOrder(
    """The ID of the FulfillmentOrder to return."""
    id: ID!
  ): Shopify_FulfillmentOrder
  """
  The paginated list of merchant-managed and third-party fulfillment orders.
  """
  fulfillmentOrders(
    """Whether to include closed fulfillment orders."""
    includeClosed: Boolean = false
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_FulfillmentOrderSortKeys = ID
    """
    Supported filter parameters:
     - `assigned_location_id`
     - `status`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_FulfillmentOrderConnection!
  """Returns a FulfillmentService resource by ID."""
  fulfillmentService(
    """The ID of the FulfillmentService to return."""
    id: ID!
  ): Shopify_FulfillmentService
  """Returns a gift card resource by ID."""
  giftCard(
    """The ID of the GiftCard to return."""
    id: ID!
  ): Shopify_GiftCard
  """Returns a list of gift cards."""
  giftCards(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_GiftCardSortKeys = ID
    """
    Supported filter parameters:
     - `balance_status`
     - `created_at`
     - `expires_on`
     - `initial_value`
     - `source`
     - `status`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_GiftCardConnection!
  """The total number of gift cards issued for the shop."""
  giftCardsCount(
    """Whether to count enabled or disabled or all gift cards."""
    enabled: Boolean
  ): Shopify_UnsignedInt64!
  """Returns an `InventoryItem` object by ID."""
  inventoryItem(
    """The ID of the InventoryItem to return."""
    id: ID!
  ): Shopify_InventoryItem
  """Returns a list of inventory items."""
  inventoryItems(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """
    Supported filter parameters:
     - `created_at`
     - `id`
     - `sku`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_InventoryItemConnection!
  """Returns an `InventoryLevel` object by ID."""
  inventoryLevel(
    """The ID of the InventoryLevel to return."""
    id: ID!
  ): Shopify_InventoryLevel
  """General inventory properties for the shop."""
  inventoryProperties: Shopify_InventoryProperties!
  """
  Returns a Job resource by ID. Used to check the status of internal jobs and any applicable changes.
  """
  job(
    """ID of the job to query."""
    id: ID!
  ): Shopify_Job
  """Returns an inventory Location resource by ID."""
  location(
    """
    The ID of the location to return. If no ID is provided, the primary location of the Shop is returned.
    """
    id: ID
  ): Shopify_Location
  """Returns a list of active inventory locations."""
  locations(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_LocationSortKeys = NAME
    """
    Supported filter parameters:
     - `active`
     - `address1`
     - `address2`
     - `city`
     - `country`
     - `legacy`
     - `name`
     - `province`
     - `zip`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """If true, also include the legacy locations of fulfillment services."""
    includeLegacy: Boolean = false
    """If true, also include the locations that are deactivated."""
    includeInactive: Boolean = false
  ): Shopify_LocationConnection!
  """
  Returns a list of all origin locations available for a delivery profile.
  """
  locationsAvailableForDeliveryProfiles: [Shopify_Location!] @deprecated(reason: "Use `locationsAvailableForDeliveryProfilesConnection` instead.")
  """
  Returns a list of all origin locations available for a delivery profile.
  """
  locationsAvailableForDeliveryProfilesConnection(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_LocationConnection!
  """Returns a list of fulfillment orders that are on hold."""
  manualHoldsFulfillmentOrders(
    """
    The query conditions used to filter fulfillment orders. Only fulfillment
    orders corresponding to orders matching the query will be counted.
    Supported filter parameters:
     - `order_financial_status`
     - `order_risk_level`
     - `shipping_address_coordinates_validated`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_FulfillmentOrderConnection!
  """Returns a market resource by ID."""
  market(
    """The ID of the Market to return."""
    id: ID!
  ): Shopify_Market
  """
  Returns the applicable market for a customer based on where they are in the world.
  """
  marketByGeography(
    """The code for the country where the customer is."""
    countryCode: CountryCode!
  ): Shopify_Market
  """A resource that can have localized values for different markets."""
  marketLocalizableResource(
    """Find a market localizable resource by ID."""
    resourceId: ID!
  ): Shopify_MarketLocalizableResource
  """Resources that can have localized values for different markets."""
  marketLocalizableResources(
    """Return only resources of a type."""
    resourceType: Shopify_MarketLocalizableResourceType!
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MarketLocalizableResourceConnection!
  """Resources that can have localized values for different markets."""
  marketLocalizableResourcesByIds(
    """Return only resources for given IDs."""
    resourceIds: [ID!]!
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MarketLocalizableResourceConnection!
  """A list of marketing activities associated with the marketing app."""
  marketingActivities(
    """The list of marketing activity IDs to filter by."""
    marketingActivityIds: [ID!] = []
    """
    The list of remote IDs associated with marketing activities to filter by.
    """
    remoteIds: [String!] = []
    """The UTM parameters associated with marketing activities to filter by."""
    utm: Shopify_UTMInput
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_MarketingActivitySortKeys = CREATED_AT
    """
    Supported filter parameters:
     - `app_id`
     - `app_name`
     - `created_at`
     - `marketing_campaign_id`
     - `scheduled_to_end_at`
     - `scheduled_to_start_at`
     - `tactic`
     - `title`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_MarketingActivityConnection!
  """Returns a MarketingActivity resource by ID."""
  marketingActivity(
    """The ID of the MarketingActivity to return."""
    id: ID!
  ): Shopify_MarketingActivity
  """Returns a MarketingEvent resource by ID."""
  marketingEvent(
    """The ID of the MarketingEvent to return."""
    id: ID!
  ): Shopify_MarketingEvent
  """A list of marketing events associated with the marketing app."""
  marketingEvents(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_MarketingEventSortKeys = ID
    """
    Supported filter parameters:
     - `app_id`
     - `description`
     - `started_at`
     - `type`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MarketingEventConnection!
  """The markets configured for the shop."""
  markets(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MarketConnection!
  """Returns a metafield by ID."""
  metafield(
    """The ID of the Metafield to return."""
    id: ID!
  ): Shopify_Metafield
  """Returns a metafield definition by ID."""
  metafieldDefinition(
    """The ID of the MetafieldDefinition to return."""
    id: ID!
  ): Shopify_MetafieldDefinition
  """
  Each metafield definition has a type, which defines the type of information that it can store.
  This type is enforced across every instance of the resource that owns the metafield definition.
  
  Refer to the [list of supported metafield types](https://shopify.dev/apps/metafields/types).
  """
  metafieldDefinitionTypes: [Shopify_MetafieldDefinitionType!]!
  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definition by key."""
    key: String
    """Filter metafield definition by namespace."""
    namespace: String
    """Filter the metafield definition by the specific owner type."""
    ownerType: Shopify_MetafieldOwnerType!
    """Filter the metafield definition by the pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!
  """List of the `MetafieldStorefrontVisibility` records."""
  metafieldStorefrontVisibilities(
    """Filter the visible metafields by namespace."""
    namespace: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldStorefrontVisibilityConnection!
  """
  Returns a `MetafieldStorefrontVisibility` record by ID. A `MetafieldStorefrontVisibility` record lists the
  metafields to make visible in the Storefront API.
  """
  metafieldStorefrontVisibility(
    """The ID of the MetafieldStorefrontVisibility to return."""
    id: ID!
  ): Shopify_MetafieldStorefrontVisibility
  """Retrieves a metaobject by ID."""
  metaobject(
    """The ID of the metaobject to return."""
    id: ID!
  ): Shopify_Metaobject
  """Retrieves a metaobject by handle."""
  metaobjectByHandle(
    """The identifier of the metaobject to return."""
    handle: Shopify_MetaobjectHandleInput!
  ): Shopify_Metaobject
  """Retrieves a metaobject definition by ID."""
  metaobjectDefinition(
    """The ID of the metaobject to return."""
    id: ID!
  ): Shopify_MetaobjectDefinition
  """Finds a metaobject definition by type."""
  metaobjectDefinitionByType(
    """The type of the metaobject definition to return."""
    type: String!
  ): Shopify_MetaobjectDefinition
  """All metaobject definitions."""
  metaobjectDefinitions(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetaobjectDefinitionConnection!
  """All metaobjects for the shop."""
  metaobjects(
    """The type of the metaobjects to query."""
    type: String!
    """
    The key of a field to sort with. Supports "id", "type", "updated_at", and "display_name".
    """
    sortKey: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """
    Supported filter parameters:
     - `display_name`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetaobjectConnection!
  """
  Returns a specific node (any object that implements the
  [Node](https://shopify.dev/api/admin-graphql/latest/interfaces/Node)
  interface) by ID, in accordance with the
  [Relay specification](https://relay.dev/docs/guides/graphql-server-specification/#object-identification).
  This field is commonly used for refetching an object.
  """
  node(
    """The ID of the Node to return."""
    id: ID!
  ): Shopify_Node
  """
  Returns the list of nodes (any objects that implement the
  [Node](https://shopify.dev/api/admin-graphql/latest/interfaces/Node)
  interface) with the given IDs, in accordance with the
  [Relay specification](https://relay.dev/docs/guides/graphql-server-specification/#object-identification).
  """
  nodes(
    """The IDs of the Nodes to return."""
    ids: [ID!]!
  ): [Shopify_Node]!
  """Returns an Order resource by ID."""
  order(
    """The ID of the Order to return."""
    id: ID!
  ): Shopify_Order
  """
  Returns a payment status by payment reference ID. Used to check the status of a deferred payment.
  """
  orderPaymentStatus(
    """Unique identifier returned by orderCreatePayment."""
    paymentReferenceId: String!
    """ID of the order for which the payment was initiated."""
    orderId: ID!
  ): Shopify_OrderPaymentStatus
  """List of the shop's order saved searches."""
  orderSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection!
  """Returns a list of orders placed."""
  orders(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_OrderSortKeys = PROCESSED_AT
    """
    Supported filter parameters:
     - `cart_token`
     - `channel`
     - `channel_id`
     - `chargeback_status`
     - `checkout_token`
     - `created_at`
     - `credit_card_last4`
     - `customer_id`
     - `delivery_method`
     - `discount_code`
     - `earliest_fulfill_by`
     - `email`
     - `financial_status`
     - `fraud_protection_level`
     - `fulfillment_location_id`
     - `fulfillment_status`
     - `gateway`
     - `location_id`
     - `name`
     - `payment_id`
     - `payment_provider_id`
     - `processed_at`
     - `reference_location_id`
     - `return_status`
     - `risk_level`
     - `sales_channel`
     - `sku`
     - `source_identifier`
     - `source_name`
     - `status`
     - `tag`
     - `tag_not`
     - `test`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_OrderConnection!
  """The list of payment terms templates eligible for all shops and users."""
  paymentTermsTemplates(
    """The payment terms type to filter the payment terms templates list."""
    paymentTermsType: Shopify_PaymentTermsType
  ): [Shopify_PaymentTermsTemplate!]!
  """Returns a price list resource by ID."""
  priceList(
    """The ID of the `PriceList` to return."""
    id: ID!
  ): Shopify_PriceList
  """All price lists for a shop."""
  priceLists(
    """The context that the price list applies to."""
    matchRule: Shopify_PriceListContext
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_PriceListSortKeys = ID
  ): Shopify_PriceListConnection!
  """
  Returns a code price rule resource by ID.
  
  We recommend using the [`codeDiscountNode`
  query](https://shopify.dev/api/admin-graphql/latest/queries/codeDiscountNode)
  instead, which will replace this query in the future.
  
  More information can be found on the [Manage existing discounts](https://shopify.dev/apps/discounts/existing) page.
  """
  priceRule(
    """The ID of the PriceRule to return."""
    id: ID!
  ): Shopify_PriceRule
  """List of the shop's price rule saved searches."""
  priceRuleSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection!
  """
  Returns a list of code price rule resources that have at least one associated discount code.
  
  We recommend using the [`codeDiscountNodes`
  query](https://shopify.dev/api/admin-graphql/latest/queries/codeDiscountNodes)
  instead, which will replace this query in the future.
  
  More information can be found on the [Manage existing discounts](https://shopify.dev/apps/discounts/existing) page.
  """
  priceRules(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_PriceRuleSortKeys = ID
    """
    Supported filter parameters:
     - `combines_with`
     - `created_at`
     - `discount_type`
     - `ends_at`
     - `starts_at`
     - `status`
     - `times_used`
     - `title`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_PriceRuleConnection!
  """The primary market of the shop."""
  primaryMarket: Shopify_Market!
  """
  Returns a private metafield by ID.
  Private metafields are accessible only by the application that created them.
  """
  privateMetafield(
    """The ID of the PrivateMetafield to return."""
    id: ID!
  ): Shopify_PrivateMetafield
  """Returns a list of private metafields associated to a resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String
    """
    Retrieve the private metafields of a certain resource, specified by the resource ID.
    """
    owner: ID!
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
  """Returns a Product resource by ID."""
  product(
    """The ID of the Product to return."""
    id: ID!
  ): Shopify_Product
  """Return a product by its handle."""
  productByHandle(
    """
    A unique string that identifies the product. Handles are automatically
    generated based on the product's title, and are always lowercase. Whitespace
    and special characters are replaced with a hyphen: `-`. If there are
    multiple consecutive whitespace or special characters, then they're replaced
    with a single hyphen. Whitespace or special characters at the beginning are
    removed. If a duplicate product title is used, then the handle is
    auto-incremented by one. For example, if you had two products called
    `Potion`, then their handles would be `potion` and `potion-1`. After a
    product has been created, changing the product title doesn't update the handle.
    """
    handle: String!
  ): Shopify_Product
  """
  Returns the product resource feedback for the currently authenticated app.
  """
  productResourceFeedback(
    """The product associated with the resource feedback."""
    id: ID!
  ): Shopify_ProductResourceFeedback
  """Returns a list of the shop's product saved searches."""
  productSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection!
  """Returns a ProductVariant resource by ID."""
  productVariant(
    """The ID of the ProductVariant to return."""
    id: ID!
  ): Shopify_ProductVariant
  """List of the product variants."""
  productVariants(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductVariantSortKeys = ID
    """
    Supported filter parameters:
     - `available_quantity`
     - `barcode`
     - `collection`
     - `committed_quantity`
     - `delivery_profile_id`
     - `exclude_composite`
     - `gift_card`
     - `incoming_quantity`
     - `inventory_quantity`
     - `location_id`
     - `managed`
     - `managed_by`
     - `on_hand_quantity`
     - `option1`
     - `option2`
     - `option3`
     - `product_id`
     - `product_status`
     - `product_type`
     - `publishable_status`
     - `published_status`
     - `reserved_quantity`
     - `sku`
     - `tag`
     - `tag_not`
     - `taxable`
     - `title`
     - `updated_at`
     - `vendor`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_ProductVariantConnection!
  """List of products."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductSortKeys = ID
    """
    Supported filter parameters:
     - `barcode`
     - `created_at`
     - `delivery_profile_id`
     - `error_feedback`
     - `gift_card`
     - `has_only_composites`
     - `has_only_default_variant`
     - `has_variant_with_components`
     - `id`
     - `inventory_total`
     - `is_price_reduced`
     - `out_of_stock_somewhere`
     - `price`
     - `product_type`
     - `publishable_status`
     - `published_status`
     - `sku`
     - `status`
     - `tag`
     - `tag_not`
     - `title`
     - `updated_at`
     - `vendor`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_ProductConnection!
  """
  The list of publicly-accessible Admin API versions, including supported
  versions, the release candidate, and unstable versions.
  """
  publicApiVersions: [Shopify_ApiVersion!]!
  """Lookup a publication by ID."""
  publication(
    """The ID of the Publication to return."""
    id: ID!
  ): Shopify_Publication
  """List of publications."""
  publications(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PublicationConnection!
  """Returns a Refund resource by ID."""
  refund(
    """The ID of the Refund to return."""
    id: ID!
  ): Shopify_Refund
  """Returns a Return resource by ID."""
  return(
    """The ID of the Return to return."""
    id: ID!
  ): Shopify_Return
  """Lookup a returnable fulfillment by ID."""
  returnableFulfillment(
    """The ID of the ReturnableFulfillment to return."""
    id: ID!
  ): Shopify_ReturnableFulfillment
  """List of returnable fulfillments."""
  returnableFulfillments(
    """Order ID that will scope all returnable fulfillments."""
    orderId: ID!
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ReturnableFulfillmentConnection!
  """Lookup a reverse delivery by ID."""
  reverseDelivery(
    """The ID of the ReverseDelivery to return."""
    id: ID!
  ): Shopify_ReverseDelivery
  """Lookup a reverse fulfillment order by ID."""
  reverseFulfillmentOrder(
    """The ID of the reverse fulfillment order to return."""
    id: ID!
  ): Shopify_ReverseFulfillmentOrder
  """
  <div class="note"><h4>Theme app extensions</h4>
    <p>Your app might not pass App Store review if it uses script tags instead of
  theme app extensions. All new apps, and apps that integrate with Online Store
  2.0 themes, should use theme app extensions, such as app blocks or app embed
  blocks. Script tags are an alternative you can use with only vintage themes.
  <a href="/apps/online-store#what-integration-method-should-i-use"
  target="_blank">Learn more</a>.</p></div>
  
  
  Lookup a script tag resource by ID.
  """
  scriptTag(
    """The ID of the ScriptTag to return."""
    id: ID!
  ): Shopify_ScriptTag
  """
  <div class="note"><h4>Theme app extensions</h4>
    <p>Your app might not pass App Store review if it uses script tags instead of
  theme app extensions. All new apps, and apps that integrate with Online Store
  2.0 themes, should use theme app extensions, such as app blocks or app embed
  blocks. Script tags are an alternative you can use with only vintage themes.
  <a href="/apps/online-store#what-integration-method-should-i-use"
  target="_blank">Learn more</a>.</p></div>
  
  
  A list of script tags.
  """
  scriptTags(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """The source URL of the script tag to filter by."""
    src: URL
  ): Shopify_ScriptTagConnection!
  """The Customer Segment."""
  segment(
    """Find a segment by ID."""
    id: ID!
  ): Shopify_Segment
  """The number of segments for a shop."""
  segmentCount: Int!
  """
  A list of filter suggestions associated with a segment. A segment is a group
  of members (commonly customers) that meet specific criteria.
  """
  segmentFilterSuggestions(
    """Returns the elements of a list by keyword or term."""
    search: String!
    """Returns up to the first `n` elements from the list."""
    first: Int!
    """Returns the elements that come after the specified cursor."""
    after: String
  ): Shopify_SegmentFilterConnection!
  """A list of filters."""
  segmentFilters(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
  ): Shopify_SegmentFilterConnection!
  """A list of a shop's segment migrations."""
  segmentMigrations(
    """Search a segment migration by its saved search ID."""
    savedSearchId: ID
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
  ): Shopify_SegmentMigrationConnection!
  """
  The list of suggested values that's associated with an individual segment.A
  segment is a group of members, such as customers, that meet specific criteria.
  """
  segmentValueSuggestions(
    """Returns the elements of a list by keyword or term."""
    search: String!
    """Returns the elements of a list by filter handle."""
    filterQueryName: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
  ): Shopify_SegmentValueConnection!
  """A list of a shop's segments."""
  segments(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_SegmentSortKeys = CREATION_DATE
    """
    Supported filter parameters:
     - `name`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_SegmentConnection!
  """Returns a Selling Plan Group resource by ID."""
  sellingPlanGroup(
    """The ID of the SellingPlanGroup to return."""
    id: ID!
  ): Shopify_SellingPlanGroup
  """List Selling Plan Groups."""
  sellingPlanGroups(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_SellingPlanGroupSortKeys = ID
    """
    Supported filter parameters:
     - `app_id`
       - Acceptable Values:
         - `CURRENT`
         - `ALL`
         - `App ID number`
       - Default Value: `CURRENT`
     - `category`
       - Acceptable Values:
         - `SUBSCRIPTION`
         - `PRE_ORDER`
         - `TRY_BEFORE_YOU_BUY`
         - `OTHER`
     - `created_at`
     - `delivery_frequency`
     - `name`
     - `percentage_off`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_SellingPlanGroupConnection!
  """
  Returns the Shop resource corresponding to the access token used in the request. The Shop resource contains
  business and store management settings for the shop.
  """
  shop: Shopify_Shop!
  """A list of locales available on a shop."""
  shopLocales(
    """Return only published locales."""
    published: Boolean = false
  ): [Shopify_ShopLocale!]!
  """Shopify Payments account information, including balances and payouts."""
  shopifyPaymentsAccount: Shopify_ShopifyPaymentsAccount
  """
  Returns the results of a ShopifyQL query. Refer to the [ShopifyQL
  documentation](https://shopify.dev/api/shopifyql) for more information.
  """
  shopifyqlQuery(
    """A ShopifyQL query."""
    query: String!
  ): Shopify_ShopifyqlResponse
  """The StaffMember resource, by ID."""
  staffMember(
    """
    The ID of the staff member to return. If no ID is provided, then the staff member making the query (if any) is returned.
    """
    id: ID
  ): Shopify_StaffMember
  """
  Standard metafield definitions are intended for specific, common use cases.
  Their namespace and keys reflect these use cases and are reserved.
  
  Refer to all available [`Standard Metafield Definition Templates`](https://shopify.dev/api/admin-graphql/latest/objects/StandardMetafieldDefinitionTemplate).
  """
  standardMetafieldDefinitionTemplates(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_StandardMetafieldDefinitionTemplateConnection!
  """Returns a SubscriptionBillingAttempt by ID."""
  subscriptionBillingAttempt(
    """The ID of the SubscriptionBillingAttempt to return."""
    id: ID!
  ): Shopify_SubscriptionBillingAttempt
  """
  Returns a subscription billing cycle found either by cycle index or date.
  """
  subscriptionBillingCycle(
    """Input object used to select and use billing cycles."""
    billingCycleInput: Shopify_SubscriptionBillingCycleInput!
  ): Shopify_SubscriptionBillingCycle
  """Returns subscription billing cycles for a contract ID."""
  subscriptionBillingCycles(
    """The ID of the subscription contract to retrieve billing cycles for."""
    contractId: ID!
    """Select subscription billing cycles within a date range."""
    billingCyclesDateRangeSelector: Shopify_SubscriptionBillingCyclesDateRangeSelector
    """Select subscription billing cycles within an index range."""
    billingCyclesIndexRangeSelector: Shopify_SubscriptionBillingCyclesIndexRangeSelector
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_SubscriptionBillingCyclesSortKeys = CYCLE_INDEX
  ): Shopify_SubscriptionBillingCycleConnection!
  """Returns a Subscription Contract resource by ID."""
  subscriptionContract(
    """The ID of the Subscription Contract to return."""
    id: ID!
  ): Shopify_SubscriptionContract
  """List Subscription Contracts."""
  subscriptionContracts(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionContractConnection!
  """Returns a Subscription Draft resource by ID."""
  subscriptionDraft(
    """The ID of the Subscription Draft to return."""
    id: ID!
  ): Shopify_SubscriptionDraft
  """Returns a list of TenderTransactions associated with the shop."""
  tenderTransactions(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """
    Supported filter parameters:
     - `point_of_sale_device_id`
     - `processed_at`
     - `test`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_TenderTransactionConnection!
  """A resource that can have localized values for different languages."""
  translatableResource(
    """Find a translatable resource by ID."""
    resourceId: ID!
  ): Shopify_TranslatableResource
  """Resources that can have localized values for different languages."""
  translatableResources(
    """Return only resources of a type."""
    resourceType: Shopify_TranslatableResourceType!
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_TranslatableResourceConnection!
  """Resources that can have localized values for different languages."""
  translatableResourcesByIds(
    """Return only resources for given IDs."""
    resourceIds: [ID!]!
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_TranslatableResourceConnection!
  """Returns a redirect resource by ID."""
  urlRedirect(
    """The ID of the UrlRedirect to return."""
    id: ID!
  ): Shopify_UrlRedirect
  """Returns a redirect import resource by ID."""
  urlRedirectImport(
    """The ID of the UrlRedirectImport to return."""
    id: ID!
  ): Shopify_UrlRedirectImport
  """A list of the shop's URL redirect saved searches."""
  urlRedirectSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection!
  """A list of redirects for a shop."""
  urlRedirects(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_UrlRedirectSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `path`
     - `target`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_UrlRedirectConnection!
  """The web pixel configured by the app."""
  webPixel(
    """Returns a web pixel by ID."""
    id: ID!
  ): Shopify_WebPixel
  """Returns a webhook subscription by ID."""
  webhookSubscription(
    """The ID of the WebhookSubscription to return."""
    id: ID!
  ): Shopify_WebhookSubscription
  """Returns a list of webhook subscriptions."""
  webhookSubscriptions(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_WebhookSubscriptionSortKeys = CREATED_AT
    """
    Supported filter parameters:
     - `created_at`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """Callback URL to filter by."""
    callbackUrl: URL
    """Response format to filter by."""
    format: Shopify_WebhookSubscriptionFormat
    """List of webhook subscription topics to filter by."""
    topics: [Shopify_WebhookSubscriptionTopic!]
  ): Shopify_WebhookSubscriptionConnection!
}

"""
A job corresponds to some long running task that the client should poll for status.
"""
interface Shopify_JobResult {
  """This indicates if the job is still queued or has been run."""
  done: Boolean!
  """
  A globally-unique identifier that's returned when running an asynchronous mutation.
  """
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
Interoperability metadata for types that directly correspond to a REST Admin API resource.
For example, on the Product type, LegacyInteroperability returns metadata for
the corresponding [Product
object](https://shopify.dev/api/admin-graphql/latest/objects/product) in the
REST Admin API.
"""
interface Shopify_LegacyInteroperability {
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: Shopify_UnsignedInt64!
}

"""Units of measurement for length."""
enum Shopify_LengthUnit {
  """1000 millimeters equals 1 meter."""
  MILLIMETERS
  """100 centimeters equals 1 meter."""
  CENTIMETERS
  """Metric system unit of length."""
  METERS
  """12 inches equals 1 foot."""
  INCHES
  """Imperial system unit of length."""
  FEET
  """1 yard equals 3 feet."""
  YARDS
}

"""
The total number of pending orders on a shop if less then a maximum, or that maximum.
The atMax field indicates when this maximum has been reached.
"""
type Shopify_LimitedPendingOrderCount {
  """This is set when the number of pending orders has reached the maximum."""
  atMax: Boolean!
  """
  The number of pendings orders on the shop.
  Limited to a maximum of 10000.
  """
  count: Int!
}

"""
Represents individual products and quantities purchased in the associated order.
"""
type Shopify_LineItem implements Shopify_Node {
  """Whether the line item can be restocked."""
  canRestock: Boolean! @deprecated(reason: "Use `restockable` instead.")
  """The subscription contract associated with this line item."""
  contract: Shopify_SubscriptionContract
  """The line item's quantity, minus the removed quantity."""
  currentQuantity: Int!
  """
  A list of attributes that represent custom features or special requests.
  """
  customAttributes: [Shopify_Attribute!]!
  """
  The discounts that have been allocated onto the line item by discount applications, not including order edits and refunds.
  """
  discountAllocations: [Shopify_DiscountAllocation!]!
  """The total line price after discounts are applied, in shop currency."""
  discountedTotal: Shopify_Money! @deprecated(reason: "Use `discountedTotalSet` instead.")
  """
  The total line price after discounts are applied, in shop and presentment currencies.
  """
  discountedTotalSet: Shopify_MoneyBag!
  """
  The approximate split price of a line item unit, in shop currency. This value
  doesn't include discounts applied to the entire order.
  """
  discountedUnitPrice: Shopify_Money! @deprecated(reason: "Use `discountedUnitPriceSet` instead.")
  """
  The approximate split price of a line item unit, in shop and presentment
  currencies. This value doesn't include discounts applied to the entire order.
  """
  discountedUnitPriceSet: Shopify_MoneyBag!
  """The duties associated with the line item."""
  duties: [Shopify_Duty!]!
  """The total number of units to fulfill."""
  fulfillableQuantity: Int! @deprecated(reason: "Use [FulfillmentOrderLineItem#remainingQuantity](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderLineItem#field-fulfillmentorderlineitem-remainingquantity) instead.")
  """
  The fulfillment service that stocks the product variant belonging to a line item.
  
  This is a third-party fulfillment service in the following scenarios:
  
  **Scenario 1**
  - The product variant is stocked by a single fulfillment service.
  - The [FulfillmentService](/api/admin-graphql/latest/objects/FulfillmentService)
  is a third-party fulfillment service. Third-party fulfillment services don't
  have a handle with the value `manual`.
  
  **Scenario 2**
  - Multiple fulfillment services stock the product variant.
  - The last time that the line item was unfulfilled, it was awaiting
  fulfillment by a third-party fulfillment service. Third-party fulfillment
  services don't have a handle with the value `manual`.
  
  If none of the above conditions are met, then the fulfillment service has the `manual` handle.
  """
  fulfillmentService: Shopify_FulfillmentService @deprecated(reason: "\nThe [relationship between a product variant and a fulfillment service was changed in the `2022-07` API version](/changelog/fulfillment-service-sku-sharing). A [ProductVariant](/api/admin-graphql/latest/objects/ProductVariant) can be stocked by multiple fulfillment services. As a result, we recommend that you use the [inventoryItem field](/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-inventoryitem) if you need to determine where a product variant is stocked.\n\nIf you need to determine whether a product is a gift card, then you should continue to use this field until an alternative is available.\n\nAltering the locations which stock a product variant won't change the value of this field for existing orders.\n\nLearn about [managing inventory quantities and states](/apps/fulfillment/inventory-management-apps/quantities-states).\n")
  """
  The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
  'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
  """
  fulfillmentStatus: String! @deprecated(reason: "Use [FulfillmentOrderLineItem#remainingQuantity](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrderLineItem#field-fulfillmentorderlineitem-remainingquantity) instead")
  """A globally-unique identifier."""
  id: ID!
  """The image associated to the line item's variant."""
  image: Shopify_Image
  """Whether the line item can be edited or not."""
  merchantEditable: Boolean!
  """
  The title of the product, optionally appended with the title of the variant (if applicable).
  """
  name: String!
  """
  The total number of units that can't be fulfilled.
          For example, if items have been refunded, or the item is not something that can be fulfilled,
          like a tip.Please see the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder)
  object for more fulfillment details.
  """
  nonFulfillableQuantity: Int!
  """
  The total price without discounts applied, in shop currency.
  This value is based on the unit price of the variant x quantity.
  """
  originalTotal: Shopify_Money! @deprecated(reason: "Use `originalTotalSet` instead.")
  """
  The total price in shop and presentment currencies, without discounts applied.
  This value is based on the unit price of the variant x quantity.
  """
  originalTotalSet: Shopify_MoneyBag!
  """The variant unit price without discounts applied, in shop currency."""
  originalUnitPrice: Shopify_Money! @deprecated(reason: "Use `originalUnitPriceSet` instead.")
  """
  The variant unit price without discounts applied, in shop and presentment currencies.
  """
  originalUnitPriceSet: Shopify_MoneyBag!
  """The Product object associated with this line item's variant."""
  product: Shopify_Product
  """The number of variant units ordered."""
  quantity: Int!
  """The line item's quantity, minus the removed quantity."""
  refundableQuantity: Int!
  """Whether physical shipping is required for the variant."""
  requiresShipping: Boolean!
  """Whether the line item can be restocked."""
  restockable: Boolean!
  """The selling plan details associated with the line item."""
  sellingPlan: Shopify_LineItemSellingPlan
  """The variant SKU number."""
  sku: String
  """Staff attributed to the initial sale of the line item."""
  staffMember: Shopify_StaffMember
  """The taxes charged for this line item."""
  taxLines(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_TaxLine!]!
  """Whether the variant is taxable."""
  taxable: Boolean!
  """The title of the product at time of order creation."""
  title: String!
  """
  The total amount of the discount allocated to the line item in the shop currency.
  """
  totalDiscount: Shopify_Money! @deprecated(reason: "Use `totalDiscountSet` instead.")
  """
  The total amount of the discount that's allocated to the line item, in the
  shop and presentment currencies. This field must be explicitly set using draft
  orders, Shopify scripts, or the API.
  """
  totalDiscountSet: Shopify_MoneyBag!
  """The total discounted value of unfulfilled units, in shop currency."""
  unfulfilledDiscountedTotal: Shopify_Money! @deprecated(reason: "Use `unfulfilledDiscountedTotalSet` instead.")
  """
  The total discounted value of unfulfilled units, in shop and presentment currencies.
  """
  unfulfilledDiscountedTotalSet: Shopify_MoneyBag!
  """
  The total price, without any discounts applied. This value is based on the
  unit price of the variant x quantity of all unfulfilled units, in shop currency.
  """
  unfulfilledOriginalTotal: Shopify_Money! @deprecated(reason: "Use `unfulfilledOriginalTotalSet` instead.")
  """
  The total price, without any discounts applied. This value is based on the
  unit price of the variant x quantity of all unfulfilled units, in shop and
  presentment currencies.
  """
  unfulfilledOriginalTotalSet: Shopify_MoneyBag!
  """The number of units not yet fulfilled."""
  unfulfilledQuantity: Int!
  """The Variant object associated with this line item."""
  variant: Shopify_ProductVariant
  """The title of the variant at time of order creation."""
  variantTitle: String
  """The name of the vendor who made the variant."""
  vendor: String
}

"""An auto-generated type for paginating through multiple LineItems."""
type Shopify_LineItemConnection {
  """A list of edges."""
  edges: [Shopify_LineItemEdge!]!
  """A list of the nodes contained in LineItemEdge."""
  nodes: [Shopify_LineItem!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one LineItem and a cursor during pagination.
"""
type Shopify_LineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of LineItemEdge."""
  node: Shopify_LineItem!
}

"""Represents a single line item on an order."""
type Shopify_LineItemMutable implements Shopify_Node {
  """Whether the line item can be restocked."""
  canRestock: Boolean! @deprecated(reason: "Use `restockable` instead.")
  """
  A list of attributes that represent custom features or special requests.
  """
  customAttributes: [Shopify_Attribute!]!
  """
  The discounts that have been allocated onto the line item by discount applications.
  """
  discountAllocations: [Shopify_DiscountAllocation!]!
  """The total line price after discounts are applied, in shop currency."""
  discountedTotal: Shopify_Money! @deprecated(reason: "Use `discountedTotalSet` instead.")
  """
  The total line price after discounts are applied, in shop and presentment currencies.
  """
  discountedTotalSet: Shopify_MoneyBag!
  """
  The approximate split price of a line item unit, in shop currency. This value
  doesn't include discounts applied to the entire order.
  """
  discountedUnitPrice: Shopify_Money! @deprecated(reason: "Use `discountedUnitPriceSet` instead.")
  """
  The approximate split price of a line item unit, in shop and presentment
  currencies. This value doesn't include discounts applied to the entire order.
  """
  discountedUnitPriceSet: Shopify_MoneyBag!
  """The total number of units to fulfill."""
  fulfillableQuantity: Int!
  """
  The service provider that fulfills the line item.
  
  Deleted fulfillment services will return null.
  """
  fulfillmentService: Shopify_FulfillmentService
  """
  The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
  'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.
  """
  fulfillmentStatus: String!
  """A globally-unique identifier."""
  id: ID!
  """The image associated to the line item's variant."""
  image: Shopify_Image
  """Whether the line item can be edited or not."""
  merchantEditable: Boolean!
  """The name of the product."""
  name: String!
  """
  The total number of units that can't be fulfilled. For example, if items have
  been refunded, or the item is not something that can be fulfilled, like a tip.
  """
  nonFulfillableQuantity: Int!
  """
  The total price without any discounts applied, in shop currency. ""This value
  is based on the unit price of the variant x quantity.
  """
  originalTotal: Shopify_Money! @deprecated(reason: "Use `originalTotalSet` instead.")
  """
  The total price in shop and presentment currencies, without discounts applied.
  This value is based on the unit price of the variant x quantity.
  """
  originalTotalSet: Shopify_MoneyBag!
  """The variant unit price without discounts applied, in shop currency."""
  originalUnitPrice: Shopify_Money! @deprecated(reason: "Use `originalUnitPriceSet` instead.")
  """
  The variant unit price without discounts applied, in shop and presentment currencies.
  """
  originalUnitPriceSet: Shopify_MoneyBag!
  """The Product object associated with this line item's variant."""
  product: Shopify_Product
  """The number of variant units ordered."""
  quantity: Int!
  """The line item's quantity, minus the removed quantity."""
  refundableQuantity: Int!
  """Whether physical shipping is required for the variant."""
  requiresShipping: Boolean!
  """Whether the line item can be restocked."""
  restockable: Boolean!
  """The variant SKU number."""
  sku: String
  """Staff attributed to the initial sale of the line item."""
  staffMember: Shopify_StaffMember
  """The TaxLine object connected to this line item."""
  taxLines(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_TaxLine!]!
  """Whether the variant is taxable."""
  taxable: Boolean!
  """The title of the product."""
  title: String!
  """
  The total amount of the discount allocated to the line item in the shop
  currency. This field must be explicitly set using draft orders, Shopify
  scripts, or the API. Instead of using this field, Shopify recommends using
  `discountAllocations`, which provides the same information.
  """
  totalDiscount: Shopify_Money! @deprecated(reason: "Use `totalDiscountSet` instead.")
  """
  The total amount of the discount allocated to the line item in the presentment
  currency. This field must be explicitly set using draft orders, Shopify
  scripts, or the API. Instead of using this field, Shopify recommends using
  `discountAllocations`, which provides the same information.
  """
  totalDiscountSet: Shopify_MoneyBag!
  """The total discounted value of unfulfilled units, in shop currency."""
  unfulfilledDiscountedTotal: Shopify_Money! @deprecated(reason: "Use `unfulfilledDiscountedTotalSet` instead.")
  """
  The total discounted value of unfulfilled units, in shop and presentment currencies.
  """
  unfulfilledDiscountedTotalSet: Shopify_MoneyBag!
  """
  The total price without any discounts applied. This value is based on the unit
  price of the variant x quantity of all unfulfilled units, in shop currency.
  """
  unfulfilledOriginalTotal: Shopify_Money! @deprecated(reason: "Use `unfulfilledOriginalTotalSet` instead.")
  """
  The total price without any discounts applied. This value is based on the unit
  price of the variant x quantity of all unfulfilled units, in shop and
  presentment currencies.
  """
  unfulfilledOriginalTotalSet: Shopify_MoneyBag!
  """The number of units not yet fulfilled."""
  unfulfilledQuantity: Int!
  """The Variant object associated with this line item."""
  variant: Shopify_ProductVariant
  """The name of the variant."""
  variantTitle: String
  """The name of the vendor who made the variant."""
  vendor: String
}

"""
An auto-generated type for paginating through multiple LineItemMutables.
"""
type Shopify_LineItemMutableConnection {
  """A list of edges."""
  edges: [Shopify_LineItemMutableEdge!]!
  """A list of the nodes contained in LineItemMutableEdge."""
  nodes: [Shopify_LineItemMutable!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one LineItemMutable and a cursor during pagination.
"""
type Shopify_LineItemMutableEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of LineItemMutableEdge."""
  node: Shopify_LineItemMutable!
}

"""Represents the selling plan for a line item."""
type Shopify_LineItemSellingPlan {
  """The name of the selling plan for display purposes."""
  name: String!
  """The ID of the selling plan associated with the line item."""
  sellingPlanId: ID
}

"""A link to direct users to."""
type Shopify_Link implements Shopify_HasPublishedTranslations {
  """A context-sensitive label for the link."""
  label: String!
  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Shopify_PublishedTranslation!]!
  """The URL that the link visits."""
  url: URL!
}

"""A locale."""
type Locale {
  """Locale ISO code."""
  isoCode: String!
  """Human-readable locale name."""
  name: String!
}

"""
Represents the value captured by a localization extension. Localization
extensions are additional fields required by certain countries on international
orders. For example, some countries require additional fields for customs
information or tax identification numbers.
"""
type Shopify_LocalizationExtension {
  """Country ISO 3166-1 alpha-2 code."""
  countryCode: CountryCode!
  """The localized extension keys that are allowed."""
  key: Shopify_LocalizationExtensionKey!
  """The purpose of this localization extension."""
  purpose: Shopify_LocalizationExtensionPurpose!
  """The localized extension title."""
  title: String!
  """The value of the field."""
  value: String!
}

"""
An auto-generated type for paginating through multiple LocalizationExtensions.
"""
type Shopify_LocalizationExtensionConnection {
  """A list of edges."""
  edges: [Shopify_LocalizationExtensionEdge!]!
  """A list of the nodes contained in LocalizationExtensionEdge."""
  nodes: [Shopify_LocalizationExtension!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one LocalizationExtension and a cursor during pagination.
"""
type Shopify_LocalizationExtensionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of LocalizationExtensionEdge."""
  node: Shopify_LocalizationExtension!
}

"""Specifies the input fields for a LocalizationExtensionInput."""
input Shopify_LocalizationExtensionInput {
  """The key for the localization extension."""
  key: Shopify_LocalizationExtensionKey!
  """The localization extension value."""
  value: String!
}

"""The key of a localization extension."""
enum Shopify_LocalizationExtensionKey {
  """Extension key 'tax_credential_br' for country BR."""
  TAX_CREDENTIAL_BR
  """Extension key 'shipping_credential_br' for country BR."""
  SHIPPING_CREDENTIAL_BR
  """Extension key 'shipping_credential_cn' for country CN."""
  SHIPPING_CREDENTIAL_CN
  """Extension key 'tax_credential_it' for country IT."""
  TAX_CREDENTIAL_IT
  """Extension key 'tax_email_it' for country IT."""
  TAX_EMAIL_IT
  """Extension key 'shipping_credential_kr' for country KR."""
  SHIPPING_CREDENTIAL_KR
}

"""The purpose of a localization extension."""
enum Shopify_LocalizationExtensionPurpose {
  """
  Extensions that are used for shipping purposes, for example, customs clearance.
  """
  SHIPPING
  """Extensions that are used for taxes purposes, for example, invoicing."""
  TAX
}

"""Represents the location where the physical good resides."""
type Shopify_Location implements Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_LegacyInteroperability & Shopify_Node {
  """Whether this location can be reactivated."""
  activatable: Boolean!
  """The address of this location."""
  address: Shopify_LocationAddress!
  """Whether the location address has been verified."""
  addressVerified: Boolean!
  """Whether this location can be deactivated."""
  deactivatable: Boolean!
  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601))
  that the location was deactivated at. For example, 3:30 pm on September 7,
  2019 in the time zone of UTC (Universal Time Coordinated) is represented as
  `"2019-09-07T15:50:00Z`".
  """
  deactivatedAt: String
  """Whether this location can be deleted."""
  deletable: Boolean!
  """Name of the service provider that fulfills from this location."""
  fulfillmentService: Shopify_FulfillmentService
  """Whether this location can fulfill online orders."""
  fulfillsOnlineOrders: Boolean!
  """Whether this location has active inventory."""
  hasActiveInventory: Boolean!
  """Whether this location has orders that need to be fulfilled."""
  hasUnfulfilledOrders: Boolean!
  """A globally-unique identifier."""
  id: ID!
  """The quantities of an inventory item at this location."""
  inventoryLevel(
    """The ID of the inventory item to obtain the inventory level for."""
    inventoryItemId: ID!
  ): Shopify_InventoryLevel
  """
  A list of the quantities of the inventory items that can be stocked at this location.
  """
  inventoryLevels(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """
    Supported filter parameters:
     - `created_at`
     - `inventory_group_id`
     - `inventory_item_id`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_InventoryLevelConnection!
  """Whether the location is active."""
  isActive: Boolean!
  """Whether the location is your primary location for shipping inventory."""
  isPrimary: Boolean! @deprecated(reason: "The concept of a primary location is deprecated, shipsInventory can be used to get a fallback location")
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: Shopify_UnsignedInt64!
  """Local pickup settings for the location."""
  localPickupSettingsV2: Shopify_DeliveryLocalPickupSettings
  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String
    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield
  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String
    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!
  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String
    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!
  """The name of the location."""
  name: String!
  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!
    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield
  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
  """
  Whether this location is used for calculating shipping rates. In multi-origin shipping mode, this flag is ignored.
  """
  shipsInventory: Boolean!
  """List of suggested addresses for this location (empty if none)."""
  suggestedAddresses: [Shopify_LocationSuggestedAddress!]!
}

"""Return type for `locationActivate` mutation."""
type Shopify_LocationActivatePayload {
  """The location that was activated."""
  location: Shopify_Location
  """The list of errors that occurred from executing the mutation."""
  locationActivateUserErrors: [Shopify_LocationActivateUserError!]!
}

"""An error that occurs while activating a location."""
type Shopify_LocationActivateUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_LocationActivateUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `LocationActivateUserError`.
"""
enum Shopify_LocationActivateUserErrorCode {
  """An error occurred while activating the location."""
  GENERIC_ERROR
  """Shop has reached its location limit."""
  LOCATION_LIMIT
  """
  This location currently cannot be activated as inventory, pending orders or
  transfers are being relocated from this location.
  """
  HAS_ONGOING_RELOCATION
  """Location not found."""
  LOCATION_NOT_FOUND
  """There is already an active location with this name."""
  HAS_NON_UNIQUE_NAME
}

"""
The input fields to use to specify the address while adding a location.
"""
input Shopify_LocationAddAddressInput {
  """The first line of the address."""
  address1: String
  """The second line of the address."""
  address2: String
  """The name of the city, district, village, or town."""
  city: String
  """The phone number of the location."""
  phone: String
  """The ZIP code or postal code of the address."""
  zip: String
  """The two-letter code of country for the address."""
  countryCode: CountryCode!
  """
  The code for the region of the address, such as the state, province, or district.
  For example CA for California, United States.
  """
  provinceCode: String
}

"""The input fields to use to add a location."""
input Shopify_LocationAddInput {
  """The name of the location."""
  name: String!
  """The address of the location."""
  address: Shopify_LocationAddAddressInput!
  """Whether inventory at this location is available for sale online."""
  fulfillsOnlineOrders: Boolean = true
}

"""Return type for `locationAdd` mutation."""
type Shopify_LocationAddPayload {
  """The location that was added."""
  location: Shopify_Location
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_LocationAddUserError!]!
}

"""Represents the address of a location."""
type Shopify_LocationAddress {
  """The first line of the address for the location."""
  address1: String
  """The second line of the address for the location."""
  address2: String
  """The city of the location."""
  city: String
  """The country of the location."""
  country: String
  """The country code of the location."""
  countryCode: String
  """A formatted version of the address for the location."""
  formatted: [String!]!
  """The latitude coordinates of the location."""
  latitude: Float
  """The longitude coordinates of the location."""
  longitude: Float
  """The phone number of the location."""
  phone: String
  """The province of the location."""
  province: String
  """
  The code for the province, state, or district of the address of the location.
  """
  provinceCode: String
  """The ZIP code of the location."""
  zip: String
}

"""An error that occurs while adding a location."""
type Shopify_LocationAddUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_LocationAddUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""Possible error codes that can be returned by `LocationAddUserError`."""
enum Shopify_LocationAddUserErrorCode {
  """The input value is invalid."""
  INVALID
  """The input value is too long."""
  TOO_LONG
  """The input value is already taken."""
  TAKEN
  """The input value is blank."""
  BLANK
  """The ZIP code is not a valid US ZIP code."""
  INVALID_US_ZIPCODE
  """An error occurred while adding the location."""
  GENERIC_ERROR
}

"""An auto-generated type for paginating through multiple Locations."""
type Shopify_LocationConnection {
  """A list of edges."""
  edges: [Shopify_LocationEdge!]!
  """A list of the nodes contained in LocationEdge."""
  nodes: [Shopify_Location!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `locationDeactivate` mutation."""
type Shopify_LocationDeactivatePayload {
  """The location that was deactivated."""
  location: Shopify_Location
  """The list of errors that occurred from executing the mutation."""
  locationDeactivateUserErrors: [Shopify_LocationDeactivateUserError!]!
}

"""
The possible errors that can be returned when executing the `locationDeactivate` mutation.
"""
type Shopify_LocationDeactivateUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_LocationDeactivateUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `LocationDeactivateUserError`.
"""
enum Shopify_LocationDeactivateUserErrorCode {
  """Location not found."""
  LOCATION_NOT_FOUND
  """
  Location either has a fulfillment serivice or is the only location with a shipping address.
  """
  PERMANENTLY_BLOCKED_FROM_DEACTIVATION_ERROR
  """
  Location has incoming inventory. The location can be deactivated after the inventory has been received.
  """
  TEMPORARILY_BLOCKED_FROM_DEACTIVATION_ERROR
  """
  Location needs to be removed from Shopify POS for Retail subscription in Point of Sale channel.
  """
  HAS_ACTIVE_RETAIL_SUBSCRIPTIONS
  """Destination location is the same as the location to be deactivated."""
  DESTINATION_LOCATION_IS_THE_SAME_LOCATION
  """Destination location is not found or inactive."""
  DESTINATION_LOCATION_NOT_FOUND_OR_INACTIVE
  """
  Location could not be deactivated without specifying where to relocate inventory at the location.
  """
  HAS_ACTIVE_INVENTORY_ERROR
  """Location could not be deactivated because it has pending orders."""
  HAS_FULFILLMENT_ORDERS_ERROR
  """Location could not be deactivated because it has open transfers."""
  HAS_OPEN_TRANSFERS_ERROR
  """
  Location could not be deactivated because it has open Shopify Fulfillment Network transfers.
  """
  HAS_INCOMING_MOVEMENTS_ERROR
  """Location could not be deactivated because it has open purchase orders."""
  HAS_OPEN_PURCHASE_ORDERS_ERROR
  """Failed to relocate active inventories to the destination location."""
  FAILED_TO_RELOCATE_ACTIVE_INVENTORIES
  """Failed to relocate open transfers to the destination location."""
  FAILED_TO_RELOCATE_OPEN_TRANSFERS
  """Failed to relocate open purchase orders to the destination location."""
  FAILED_TO_RELOCATE_OPEN_PURCHASE_ORDERS
  """Failed to relocate incoming movements to the destination location."""
  FAILED_TO_RELOCATE_INCOMING_MOVEMENTS
  """At least one location must fulfill online orders."""
  CANNOT_DISABLE_ONLINE_ORDER_FULFILLMENT
}

"""Return type for `locationDelete` mutation."""
type Shopify_LocationDeletePayload {
  """The ID of the location that was deleted."""
  deletedLocationId: ID
  """The list of errors that occurred from executing the mutation."""
  locationDeleteUserErrors: [Shopify_LocationDeleteUserError!]!
}

"""An error that occurs while deleting a location."""
type Shopify_LocationDeleteUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_LocationDeleteUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `LocationDeleteUserError`.
"""
enum Shopify_LocationDeleteUserErrorCode {
  """Location not found."""
  LOCATION_NOT_FOUND
  """The location cannot be deleted while it is active."""
  LOCATION_IS_ACTIVE
  """An error occurred while deleting the location."""
  GENERIC_ERROR
  """The location cannot be deleted while it has inventory."""
  LOCATION_HAS_INVENTORY
  """The location cannot be deleted while it has pending orders."""
  LOCATION_HAS_PENDING_ORDERS
  """
  The location cannot be deleted while it has any active Retail subscriptions in the Point of Sale channel.
  """
  LOCATION_HAS_ACTIVE_RETAIL_SUBSCRIPTION
}

"""
An auto-generated type which holds one Location and a cursor during pagination.
"""
type Shopify_LocationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of LocationEdge."""
  node: Shopify_Location!
}

"""The input fields to use to edit the address of a location."""
input Shopify_LocationEditAddressInput {
  """The first line of the address."""
  address1: String
  """The second line of the address."""
  address2: String
  """The name of the city, district, village, or town."""
  city: String
  """The phone number of the location."""
  phone: String
  """The ZIP code or postal code of the location."""
  zip: String
  """The two-letter code of country for the address."""
  countryCode: CountryCode
  """
  The code for the region of the address, such as the state, province, or district.
  For example CA for California, United States.
  """
  provinceCode: String
}

"""The input fields to use to edit a location."""
input Shopify_LocationEditInput {
  """The name of the location."""
  name: String
  """The address of the location."""
  address: Shopify_LocationEditAddressInput
  """Whether inventory at this location is available for sale online."""
  fulfillsOnlineOrders: Boolean
}

"""Return type for `locationEdit` mutation."""
type Shopify_LocationEditPayload {
  """The location that was edited."""
  location: Shopify_Location
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_LocationEditUserError!]!
}

"""An error that occurs while editing a location."""
type Shopify_LocationEditUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_LocationEditUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""Possible error codes that can be returned by `LocationEditUserError`."""
enum Shopify_LocationEditUserErrorCode {
  """The input value is too long."""
  TOO_LONG
  """The input value is blank."""
  BLANK
  """The record with the ID used as the input value couldn't be found."""
  NOT_FOUND
  """The input value is invalid."""
  INVALID
  """The input value is already taken."""
  TAKEN
  """The ZIP code is not a valid US ZIP code."""
  INVALID_US_ZIPCODE
  """An error occurred while editing the location."""
  GENERIC_ERROR
  """At least one location must fulfill online orders."""
  CANNOT_DISABLE_ONLINE_ORDER_FULFILLMENT
}

"""Return type for `locationLocalPickupDisable` mutation."""
type Shopify_LocationLocalPickupDisablePayload {
  """The ID of the location for which local pickup was disabled."""
  locationId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DeliveryLocationLocalPickupSettingsError!]!
}

"""Return type for `locationLocalPickupEnable` mutation."""
type Shopify_LocationLocalPickupEnablePayload {
  """The local pickup settings that were enabled."""
  localPickupSettings: Shopify_DeliveryLocalPickupSettings
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_DeliveryLocationLocalPickupSettingsError!]!
}

"""The set of valid sort keys for the Location query."""
enum Shopify_LocationSortKeys {
  """Sort by the `name` value."""
  NAME
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""Represents a suggested address for a location."""
type Shopify_LocationSuggestedAddress {
  """The first line of the suggested address."""
  address1: String
  """The second line of the suggested address."""
  address2: String
  """The city of the suggested address."""
  city: String
  """The country of the suggested address."""
  country: String
  """The country code of the suggested address."""
  countryCode: CountryCode
  """A formatted version of the suggested address."""
  formatted: [String!]!
  """The province of the suggested address."""
  province: String
  """
  The code for the province, state, or district of the suggested address.
  """
  provinceCode: String
  """The ZIP code of the suggested address."""
  zip: String
}

"""
Represents a customer mailing address.

For example, a customer's default address and an order's billing address are both mailling addresses.
"""
type Shopify_MailingAddress implements Shopify_Node {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String
  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String
  """The name of the city, district, village, or town."""
  city: String
  """The name of the customer's company or organization."""
  company: String
  """Whether the address coordinates are valid."""
  coordinatesValidated: Boolean!
  """The name of the country."""
  country: String
  """
  The two-letter code for the country of the address.
  
  For example, US.
  """
  countryCode: String @deprecated(reason: "Use `countryCodeV2` instead.")
  """
  The two-letter code for the country of the address.
  
  For example, US.
  """
  countryCodeV2: CountryCode
  """The first name of the customer."""
  firstName: String
  """
  A formatted version of the address, customized by the provided arguments.
  """
  formatted(
    """Whether to include the customer's name in the formatted address."""
    withName: Boolean = false
    """Whether to include the customer's company in the formatted address."""
    withCompany: Boolean = true
  ): [String!]!
  """A comma-separated list of the values for city, province, and country."""
  formattedArea: String
  """A globally-unique identifier."""
  id: ID!
  """The last name of the customer."""
  lastName: String
  """The latitude coordinate of the customer address."""
  latitude: Float
  """The longitude coordinate of the customer address."""
  longitude: Float
  """The full name of the customer, based on firstName and lastName."""
  name: String
  """
  A unique phone number for the customer.
  
  Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String
  """The region of the address, such as the province, state, or district."""
  province: String
  """
  The two-letter code for the region.
  
  For example, ON.
  """
  provinceCode: String
  """The zip or postal code of the address."""
  zip: String
}

"""The fields used to create or update a mailing address."""
input Shopify_MailingAddressInput {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String
  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String
  """The name of the city, district, village, or town."""
  city: String
  """The name of the customer's company or organization."""
  company: String
  """The two-letter code for the country of the address."""
  countryCode: CountryCode
  """The first name of the customer."""
  firstName: String
  """The last name of the customer."""
  lastName: String
  """
  A unique phone number for the customer.
  
  Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String
  """
  The code for the region of the address, such as the province, state, or district.
  For example QC for Quebec, Canada.
  """
  provinceCode: String
  """The zip or postal code of the address."""
  zip: String
}

"""
Manual discount applications capture the intentions of a discount that was manually created for an order.

Discount applications don't represent the actual final amount discounted on a
line (line item or shipping line). The actual amount discounted on a line is
represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
"""
type Shopify_ManualDiscountApplication implements Shopify_DiscountApplication {
  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: Shopify_DiscountApplicationAllocationMethod!
  """The description of the discount application."""
  description: String
  """
  An ordered index that can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.
  """
  index: Int!
  """How the discount amount is distributed on the discounted lines."""
  targetSelection: Shopify_DiscountApplicationTargetSelection!
  """Whether the discount is applied on line items or shipping lines."""
  targetType: Shopify_DiscountApplicationTargetType!
  """The title of the discount application."""
  title: String!
  """The value of the discount application."""
  value: Shopify_PricingValue!
}

"""
A market is a group of one or more regions that you want to target for international sales.
By creating a market, you can configure a distinct, localized shopping experience for
customers from a specific area of the world. For example, you can
[change currency](https://shopify.dev/api/admin-graphql/current/mutations/marketCurrencySettingsUpdate),
[configure international pricing](https://shopify.dev/apps/internationalization/product-price-lists),
or [add market-specific domains or subfolders](https://shopify.dev/api/admin-graphql/current/objects/MarketWebPresence).
"""
type Shopify_Market implements Shopify_Node {
  """The market’s currency settings."""
  currencySettings: Shopify_MarketCurrencySettings!
  """
  Whether the market is enabled to receive visitors and sales. **Note**: Regions in inactive
  markets cannot be selected on the storefront or in checkout.
  """
  enabled: Boolean!
  """A globally-unique identifier."""
  id: ID!
  """The name of the market. Not shown to customers."""
  name: String!
  """
  The market’s price list, which specifies a percentage-based price adjustment as well as
  fixed price overrides for specific variants.
  """
  priceList: Shopify_PriceList
  """Whether the market is the shop’s primary market."""
  primary: Boolean!
  """The regions that comprise the market."""
  regions(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MarketRegionConnection!
  """
  The market’s web presence, which defines its SEO strategy. This can be a different domain,
  subdomain, or subfolders of the primary domain. Each web presence comprises one or more
  language variants. If a market doesn't have its own web presence, then the market is accessible on the
  shop’s primary domain using [country
  selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).
  """
  webPresence: Shopify_MarketWebPresence
}

"""An auto-generated type for paginating through multiple Markets."""
type Shopify_MarketConnection {
  """A list of edges."""
  edges: [Shopify_MarketEdge!]!
  """A list of the nodes contained in MarketEdge."""
  nodes: [Shopify_Market!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""The input fields required to create a market."""
input Shopify_MarketCreateInput {
  """The name of the market. Not shown to customers."""
  name: String!
  """
  Whether the market is enabled to receive visitors and sales. If  a Boolean 
  isn't provided, then the
  market is enabled by default if all included regions have shipping rates, and disabled if
  any regions don't have shipping rates.
  
  **Note**: Regions in inactive markets can't be selected on the storefront or in checkout.
  """
  enabled: Boolean
  """
  The regions to be included in the market. Each region can only be included in one market at
  a time.
  """
  regions: [Shopify_MarketRegionCreateInput!]!
}

"""Return type for `marketCreate` mutation."""
type Shopify_MarketCreatePayload {
  """The market object."""
  market: Shopify_Market
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MarketUserError!]!
}

"""A market's currency settings."""
type Shopify_MarketCurrencySettings {
  """
  The currency which this market's prices are defined in, and the
  currency which its customers must use if local currencies are disabled.
  """
  baseCurrency: Shopify_CurrencySetting!
  """
  Whether or not local currencies are enabled. If enabled, then prices will
  be converted to give each customer the best experience based on their
  region. If disabled, then all customers in this market will see prices
  in the market's base currency.
  """
  localCurrencies: Boolean!
}

"""The input fields used to update the currency settings of a market."""
input Shopify_MarketCurrencySettingsUpdateInput {
  """
  The currency which this market’s prices are defined in, and the
  currency which its customers must use if local currencies are disabled.
  """
  baseCurrency: Shopify_CurrencyCode
  """
  Whether or not local currencies are enabled. If enabled, then prices will
  be converted to give each customer the best experience based on their
  region. If disabled, then all customers in this market will see prices
  in the market's base currency.
  """
  localCurrencies: Boolean
}

"""Return type for `marketCurrencySettingsUpdate` mutation."""
type Shopify_MarketCurrencySettingsUpdatePayload {
  """The market object."""
  market: Shopify_Market
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MarketCurrencySettingsUserError!]!
}

"""Error codes for failed market multi-currency operations."""
type Shopify_MarketCurrencySettingsUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_MarketCurrencySettingsUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `MarketCurrencySettingsUserError`.
"""
enum Shopify_MarketCurrencySettingsUserErrorCode {
  """The specified market wasn't found."""
  MARKET_NOT_FOUND
  """
  The currency settings of the given market cannot be changed because the market manager has exclusive control of pricing.
  """
  MANAGED_MARKET
  """
  The shop's payment gateway does not support enabling more than one currency.
  """
  MULTIPLE_CURRENCIES_NOT_SUPPORTED
  """Can't enable or disable local currencies on a single country market."""
  NO_LOCAL_CURRENCIES_ON_SINGLE_COUNTRY_MARKET
  """The specified currency is not supported."""
  UNSUPPORTED_CURRENCY
  """The primary market must use the shop currency."""
  PRIMARY_MARKET_USES_SHOP_CURRENCY
}

"""Return type for `marketDelete` mutation."""
type Shopify_MarketDeletePayload {
  """The ID of the deleted market."""
  deletedId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MarketUserError!]!
}

"""
An auto-generated type which holds one Market and a cursor during pagination.
"""
type Shopify_MarketEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of MarketEdge."""
  node: Shopify_Market!
}

"""
The marketing activity resource represents marketing that a
        merchant created through an app.
"""
type Shopify_MarketingActivity implements Shopify_Node {
  """
  The URL of the marketing activity listing page in the marketing section.
  """
  activityListUrl: URL
  """The amount spent on the marketing activity."""
  adSpend: Shopify_MoneyV2
  """The app which created this marketing activity."""
  app: Shopify_App!
  """The errors generated when an app publishes the marketing activity."""
  appErrors: Shopify_MarketingActivityExtensionAppErrors
  """The allocated budget for the marketing activity."""
  budget: Shopify_MarketingBudget
  """The date and time when the marketing activity was created."""
  createdAt: DateTime!
  """The completed content in the marketing activity creation form."""
  formData: String
  """A globally-unique identifier."""
  id: ID!
  """
  Whether the marketing activity is in the main workflow version of
            the marketing automation.
  """
  inMainWorkflowVersion: Boolean!
  """The available marketing channels for a marketing activity."""
  marketingChannel: Shopify_MarketingChannel!
  """Associated marketing event of this marketing activity."""
  marketingEvent: Shopify_MarketingEvent
  """
  A contextual description of the marketing activity based on the platform and tactic used.
  """
  sourceAndMedium: String!
  """The current state of the marketing activity."""
  status: Shopify_MarketingActivityStatus!
  """The severity of the marketing activity's status."""
  statusBadgeType: Shopify_MarketingActivityStatusBadgeType @deprecated(reason: "Use `statusBadgeTypeV2` instead.")
  """The severity of the marketing activity's status."""
  statusBadgeTypeV2: Shopify_BadgeType
  """The rendered status of the marketing activity."""
  statusLabel: String!
  """
  The [date and time](
            https://help.shopify.com/https://en.wikipedia.org/wiki/ISO_8601
            ) when the activity's status last changed.
  """
  statusTransitionedAt: DateTime
  """The method of marketing used for this marketing activity."""
  tactic: Shopify_MarketingTactic!
  """The status to which the marketing activity is currently transitioning."""
  targetStatus: Shopify_MarketingActivityStatus
  """
  The marketing activity's title, which is rendered on the marketing listing page.
  """
  title: String!
  """The date and time when the marketing activity was updated."""
  updatedAt: DateTime!
  """
  The set of [Urchin Tracking Module](
            https://help.shopify.com/https://en.wikipedia.org/wiki/UTM_parameters
            ) used in the URL for tracking this marketing activity.
  """
  utmParameters: Shopify_UTMParameters
}

"""This type combines budget amount and its marketing budget type."""
input Shopify_MarketingActivityBudgetInput {
  """Budget type for marketing activity."""
  budgetType: Shopify_MarketingBudgetBudgetType
  """Amount of budget for the marketing activity."""
  total: Shopify_MoneyInput
}

"""
An auto-generated type for paginating through multiple MarketingActivities.
"""
type Shopify_MarketingActivityConnection {
  """A list of edges."""
  edges: [Shopify_MarketingActivityEdge!]!
  """A list of the nodes contained in MarketingActivityEdge."""
  nodes: [Shopify_MarketingActivity!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
The input fields for creating an externally-managed marketing activity.
"""
input Shopify_MarketingActivityCreateExternalInput {
  """The title of the marketing activity."""
  title: String!
  """
  The
  [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
  that are associated with a related marketing campaign. `UTMInput` is required for all
  marketing tactics except for the Storefront app marketing tactic.
  """
  utm: Shopify_UTMInput!
  """The budget for this marketing activity."""
  budget: Shopify_MarketingActivityBudgetInput
  """The amount spent on the marketing activity."""
  adSpend: Shopify_MoneyInput
  """The ID of an activity that's hosted outside of Shopify."""
  remoteId: String
  """URL for viewing and/or managing the activity outside of Shopify."""
  remoteUrl: URL!
  """The URL for a preview image that's used for the marketing activity."""
  remotePreviewImageUrl: URL
  """
  Specifies the settings for the marketing platform and the ad format.
  The marketing tactic determines which default fields are included
  in the marketing activity.
  """
  tactic: Shopify_MarketingTactic!
  """The channel of your marketing event."""
  channel: Shopify_MarketingChannel!
  """The referring domain."""
  referringDomain: String
  """When the activity is scheduled to start."""
  scheduledStart: DateTime
  """When the activity is scheduled to end."""
  scheduledEnd: DateTime
  """When the activity started."""
  start: DateTime
  """When the activity ended."""
  end: DateTime
}

"""Return type for `marketingActivityCreateExternal` mutation."""
type Shopify_MarketingActivityCreateExternalPayload {
  """The external marketing activity that was created."""
  marketingActivity: Shopify_MarketingActivity
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MarketingActivityUserError!]!
}

"""Specifies the input fields required to create a marketing activity."""
input Shopify_MarketingActivityCreateInput {
  """The title of the marketing activity."""
  marketingActivityTitle: String
  """The form data in JSON serialized as a string."""
  formData: String
  """The ID of the marketing activity extension."""
  marketingActivityExtensionId: ID!
  """Encoded context containing marketing campaign id."""
  context: String
  """
  Specifies the
  [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
  that are associated with a related marketing campaign. UTMInput is required for all Marketing
  tactics except Storefront App.
  """
  utm: Shopify_UTMInput
  """The current state of the marketing activity."""
  status: Shopify_MarketingActivityStatus!
  """The budget for this marketing activity."""
  budget: Shopify_MarketingActivityBudgetInput
}

"""Return type for `marketingActivityCreate` mutation."""
type Shopify_MarketingActivityCreatePayload {
  """The created marketing activity."""
  marketingActivity: Shopify_MarketingActivity
  """The path to return back to shopify admin from embedded editor."""
  redirectPath: String
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An auto-generated type which holds one MarketingActivity and a cursor during pagination.
"""
type Shopify_MarketingActivityEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of MarketingActivityEdge."""
  node: Shopify_MarketingActivity!
}

"""
The error code resulted from the marketing activity extension integration.
"""
enum Shopify_MarketingActivityExtensionAppErrorCode {
  """The shop/user must be onboarded to use the app."""
  NOT_ONBOARDED_ERROR
  """The app has returned validation errors."""
  VALIDATION_ERROR
  """The app is either not responding or returning unexpected data."""
  API_ERROR
  """The app has returned an error when invoking the platform."""
  PLATFORM_ERROR
  """The app needs to be installed."""
  INSTALL_REQUIRED_ERROR
}

"""
Represents errors returned from apps when using the marketing activity extension.
"""
type Shopify_MarketingActivityExtensionAppErrors {
  """The app error type."""
  code: Shopify_MarketingActivityExtensionAppErrorCode!
  """The list of errors returned by the app."""
  userErrors: [Shopify_UserError!]!
}

"""The set of valid sort keys for the MarketingActivity query."""
enum Shopify_MarketingActivitySortKeys {
  """Sort by the `title` value."""
  TITLE
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
Status helps to identify if this marketing activity has been completed, queued, failed etc.
"""
enum Shopify_MarketingActivityStatus {
  """This marketing activity is currently running."""
  ACTIVE
  """This marketing activity is permanently unavailable."""
  DELETED
  """
  This marketing activity was deleted and it was triggered from outside of Shopify.
  """
  DELETED_EXTERNALLY
  """This marketing activity is disconnected and no longer editable."""
  DISCONNECTED
  """This marketing activity has been edited, but it is not yet created."""
  DRAFT
  """This marketing activity is unable to run."""
  FAILED
  """This marketing activity has completed running."""
  INACTIVE
  """This marketing activity is currently not running."""
  PAUSED
  """
  This marketing activity is pending creation on the app's marketing platform.
  """
  PENDING
  """This marketing activity is scheduled to run."""
  SCHEDULED
  """The marketing activity's status is unknown."""
  UNDEFINED
}

"""StatusBadgeType helps to identify the color of the status badge."""
enum Shopify_MarketingActivityStatusBadgeType {
  """This status badge has type default."""
  DEFAULT
  """This status badge has type success."""
  SUCCESS
  """This status badge has type attention."""
  ATTENTION
  """This status badge has type warning."""
  WARNING
  """This status badge has type info."""
  INFO
}

"""
The input fields required to update an externally managed marketing activity.
"""
input Shopify_MarketingActivityUpdateExternalInput {
  """The title of the marketing activity."""
  title: String
  """
  Specifies the
  [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
  that are associated with a related marketing campaign. UTMInput is required for all marketing
  tactics except the storefront app.
  """
  utm: Shopify_UTMInput
  """The budget for the marketing activity."""
  budget: Shopify_MarketingActivityBudgetInput
  """The amount spent on the marketing activity."""
  adSpend: Shopify_MoneyInput
  """The URL for managing the activity outside of Shopify."""
  remoteUrl: URL
  """The preview image URL for the marketing activity."""
  remotePreviewImageUrl: URL
  """
  The settings for the marketing platform and ad format.
  The selection of the marketing tactic also determines which default fields are included
  in the marketing activity.
  """
  tactic: Shopify_MarketingTactic
  """The channel that your marketing event will use."""
  channel: Shopify_MarketingChannel
  """The referring domain."""
  referringDomain: String
  """The date and time when the activity is scheduled to start."""
  scheduledStart: DateTime
  """The date and time when the activity is scheduled to end."""
  scheduledEnd: DateTime
  """The date and time when the activity started."""
  start: DateTime
  """The date and time when the activity ended."""
  end: DateTime
}

"""Return type for `marketingActivityUpdateExternal` mutation."""
type Shopify_MarketingActivityUpdateExternalPayload {
  """The updated marketing activity."""
  marketingActivity: Shopify_MarketingActivity
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MarketingActivityUserError!]!
}

"""Specifies the input fields required to update a marketing activity."""
input Shopify_MarketingActivityUpdateInput {
  """The ID of the marketing activity."""
  id: ID!
  """
  The ID of the recommendation that the marketing activity was created from, if one exists.
  """
  marketingRecommendationId: ID
  """The title of the marketing activity."""
  title: String
  """The budget for the marketing activity."""
  budget: Shopify_MarketingActivityBudgetInput
  """
  The current state of the marketing activity. Learn more about
  [marketing activities statuses](/api/marketing-activities/statuses).
  """
  status: Shopify_MarketingActivityStatus
  """
  The target state that the marketing activity is transitioning to. Learn more
  about [marketing activities statuses](/api/marketing-activities/statuses).
  """
  targetStatus: Shopify_MarketingActivityStatus
  """
  The form data of the marketing activity. This is only used if the marketing activity is
                integrated with the external editor.
  """
  formData: String
  """
  Specifies the
  [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
  that are associated with a related marketing campaign. UTMInput is required for all Marketing
  tactics except Storefront App. The utm field can only be set once and never modified.
  """
  utm: Shopify_UTMInput
  """
  A list of the item IDs that were marketed in this marketing activity. Valid types for these items are:
  * `Product`
  * `Shop`
  """
  marketedResources: [ID!]
  """
  The error messages that were generated when the app was trying to complete the activity.
  Learn more about the
  [JSON format expected for error messages](/api/marketing-activities/statuses#failed-status).
  """
  errors: JSON
}

"""Return type for `marketingActivityUpdate` mutation."""
type Shopify_MarketingActivityUpdatePayload {
  """The updated marketing activity."""
  marketingActivity: Shopify_MarketingActivity
  """The redirect path from the embedded editor to the Shopify admin."""
  redirectPath: String
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An error that occurs during the execution of a Shopify Marketing mutation.
"""
type Shopify_MarketingActivityUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_MarketingActivityUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `MarketingActivityUserError`.
"""
enum Shopify_MarketingActivityUserErrorCode {
  """The input value is invalid."""
  INVALID
  """The input value is already taken."""
  TAKEN
}

"""This type combines budget amount and its marketing budget type."""
type Shopify_MarketingBudget {
  """The budget type for a marketing activity."""
  budgetType: Shopify_MarketingBudgetBudgetType!
  """The amount of budget for marketing activity."""
  total: Shopify_MoneyV2!
}

"""The budget type for a marketing activity."""
enum Shopify_MarketingBudgetBudgetType {
  """A daily budget."""
  DAILY
  """A budget for the lifetime of a marketing activity."""
  LIFETIME
}

"""
The available marketing channels for a marketing activity or event. A marketing
channel is broad category of marketing, used for reporting aggregation.
"""
enum Shopify_MarketingChannel {
  """Paid search."""
  SEARCH
  """Displayed ads."""
  DISPLAY
  """Social media."""
  SOCIAL
  """Email."""
  EMAIL
  """Referral links."""
  REFERRAL
}

"""
Marketing engagement represents customer activity taken on a marketing event.
"""
type Shopify_MarketingEngagement {
  """
  The total ad spend for the day, if the marketing event is a paid ad with a daily spend.
  """
  adSpend: Shopify_MoneyV2
  """The total number of clicks on the marketing event for the day."""
  clicksCount: Int
  """The total number of comments for the day."""
  commentsCount: Int
  """The total number of complaints for the day."""
  complaintsCount: Int
  """The total number of fails for the day."""
  failsCount: Int
  """The total number of favorites for the day."""
  favoritesCount: Int
  """The date time at which the data was fetched."""
  fetchedAt: DateTime
  """The total number of impressions for the day."""
  impressionsCount: Int
  """
  Whether the engagements are reported as lifetime values rather than daily totals.
  """
  isCumulative: Boolean
  """The marketing activity related to this engagement."""
  marketingActivity: Shopify_MarketingActivity!
  """The date that these engagements occurred on."""
  occurredOn: Date!
  """The total number of sends for the day."""
  sendsCount: Int
  """The total number of shares for the day."""
  sharesCount: Int
  """The total number of unique clicks for the day."""
  uniqueClicksCount: Int
  """The total number of unique views for the day."""
  uniqueViewsCount: Int
  """The total number of unsubscribes for the day."""
  unsubscribesCount: Int
  """
  The UTC Offset that the app is using to determine which date to allocate spend to.
  """
  utcOffset: UtcOffset
  """The total number of views for the day."""
  viewsCount: Int
}

"""Return type for `marketingEngagementCreate` mutation."""
type Shopify_MarketingEngagementCreatePayload {
  """The marketing engagement that was created."""
  marketingEngagement: Shopify_MarketingEngagement
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
This object represents marketing engagement input fields for a marketing engagement.
"""
input Shopify_MarketingEngagementInput {
  """The date that these engagements occurred on."""
  occurredOn: Date!
  """The total number of impressions for the day."""
  impressionsCount: Int
  """The total number of views for the day."""
  viewsCount: Int
  """The total number of clicks on the marketing event for the day."""
  clicksCount: Int
  """The total number of shares for the day."""
  sharesCount: Int
  """The total number of favorites for the day."""
  favoritesCount: Int
  """The total number of comments for the day."""
  commentsCount: Int
  """The total number of unsubscribes for the day."""
  unsubscribesCount: Int
  """The total number of complaints for the day."""
  complaintsCount: Int
  """The total number of fails for the day."""
  failsCount: Int
  """The total number of sends for the day."""
  sendsCount: Int
  """The total number of unique views for the day."""
  uniqueViewsCount: Int
  """The total number of unique clicks for the day."""
  uniqueClicksCount: Int
  """
  The total ad spend for the day, if the marketing event is a paid ad with a daily spend.
  """
  adSpend: Shopify_MoneyInput
  """
  Whether the engagements are reported as lifetime values rather than daily totals.
  """
  isCumulative: Boolean
  """
  The UTC Offset that the app is using to determine which date to allocate spend to.
  """
  utcOffset: UtcOffset
  """The date time at which the data was fetched."""
  fetchedAt: DateTime
}

"""Represents actions that market a merchant's store or products."""
type Shopify_MarketingEvent implements Shopify_LegacyInteroperability & Shopify_Node {
  """The app that the marketing event is attributed to."""
  app: Shopify_App!
  """The marketing channel used by the marketing event."""
  channel: Shopify_MarketingChannel
  """A human-readable description of the marketing event."""
  description: String
  """The date and time when the marketing event ended."""
  endedAt: DateTime
  """A globally-unique identifier."""
  id: ID!
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: Shopify_UnsignedInt64!
  """The URL where the marketing event can be managed."""
  manageUrl: URL
  """The URL where the marketing event can be previewed."""
  previewUrl: URL
  """An optional ID that helps Shopify validate engagement data."""
  remoteId: String
  """The date and time when the marketing event is scheduled to end."""
  scheduledToEndAt: DateTime
  """
  Where the `MarketingEvent` occurred and what kind of content was used.
  Because `utmSource` and `utmMedium` are often used interchangeably, this is
  based on a combination of `marketingChannel`, `referringDomain`, and `type` to
  provide a consistent representation for any given piece of marketing
  regardless of the app that created it.
  """
  sourceAndMedium: String!
  """The date and time when the marketing event started."""
  startedAt: DateTime!
  """The display text for the marketing event type."""
  targetTypeDisplayText: String! @deprecated(reason: "Use `sourceAndMedium` instead.")
  """The marketing event type."""
  type: Shopify_MarketingTactic!
  """The name of the marketing campaign."""
  utmCampaign: String
  """
  The medium that the marketing campaign is using. Example values: `cpc`, `banner`.
  """
  utmMedium: String
  """
  The referrer of the marketing event. Example values: `google`, `newsletter`.
  """
  utmSource: String
}

"""
An auto-generated type for paginating through multiple MarketingEvents.
"""
type Shopify_MarketingEventConnection {
  """A list of edges."""
  edges: [Shopify_MarketingEventEdge!]!
  """A list of the nodes contained in MarketingEventEdge."""
  nodes: [Shopify_MarketingEvent!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one MarketingEvent and a cursor during pagination.
"""
type Shopify_MarketingEventEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of MarketingEventEdge."""
  node: Shopify_MarketingEvent!
}

"""The set of valid sort keys for the MarketingEvent query."""
enum Shopify_MarketingEventSortKeys {
  """Sort by the `started_at` value."""
  STARTED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""The available types of marketing event."""
enum Shopify_MarketingTactic {
  """An abandoned cart recovery email."""
  ABANDONED_CART
  """An ad, such as a Facebook ad."""
  AD
  """An affiliate link."""
  AFFILIATE
  """A link."""
  LINK
  """A loyalty program."""
  LOYALTY
  """A messaging app, such as Facebook Messenger."""
  MESSAGE
  """A newsletter."""
  NEWSLETTER
  """A notification in the Shopify admin."""
  NOTIFICATION
  """A blog post."""
  POST
  """A retargeting ad."""
  RETARGETING
  """A transactional email."""
  TRANSACTIONAL
  """Search engine optimization."""
  SEO
  """A direct visit to the online store."""
  DIRECT
  """A popup on the online store."""
  STOREFRONT_APP
  """A display ad."""
  DISPLAY @deprecated(reason: "`DISPLAY` is deprecated. Use `AD` instead.")
  """Paid search."""
  SEARCH @deprecated(reason: "`SEARCH` is deprecated. Use `AD` instead.")
  """A follow-up email."""
  FOLLOW_UP @deprecated(reason: "'FOLLOW_UP' is deprecated. Use 'TRANSACTIONAL' instead.")
  """A promotional receipt."""
  RECEIPT @deprecated(reason: "'RECEIPT' is deprecated. Use 'TRANSACTIONAL' instead.")
}

"""The market localizable content of a resource's field."""
type Shopify_MarketLocalizableContent {
  """The hash digest representation of the content value."""
  digest: String
  """The resource field that's being localized."""
  key: String!
  """The content value."""
  value: String
}

"""A resource that has market localizable fields."""
type Shopify_MarketLocalizableResource {
  """The market localizable content."""
  marketLocalizableContent: [Shopify_MarketLocalizableContent!]!
  """Market localizations for the market localizable content."""
  marketLocalizations(
    """Filters market localizations by market ID."""
    marketId: ID!
  ): [Shopify_MarketLocalization!]!
  """The GID of the resource."""
  resourceId: ID!
}

"""
An auto-generated type for paginating through multiple MarketLocalizableResources.
"""
type Shopify_MarketLocalizableResourceConnection {
  """A list of edges."""
  edges: [Shopify_MarketLocalizableResourceEdge!]!
  """A list of the nodes contained in MarketLocalizableResourceEdge."""
  nodes: [Shopify_MarketLocalizableResource!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one MarketLocalizableResource and a cursor during pagination.
"""
type Shopify_MarketLocalizableResourceEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of MarketLocalizableResourceEdge."""
  node: Shopify_MarketLocalizableResource!
}

"""The type of resources that are market localizable."""
enum Shopify_MarketLocalizableResourceType {
  """A metafield. Market localizable fields: `value`."""
  METAFIELD
}

"""
The market localization of a field within a resource, which is determined by the market ID.
"""
type Shopify_MarketLocalization {
  """
  A reference to the value being localized on the resource that this market localization belongs to.
  """
  key: String!
  """The market that the localization is specific to."""
  market: Shopify_Market!
  """
  Whether the original content has changed since this market localization was updated.
  """
  outdated: Boolean!
  """The date and time when the market localization was updated."""
  updatedAt: DateTime
  """The value of the market localization."""
  value: String
}

"""
The fields and values to use when creating or updating a market localization.
"""
input Shopify_MarketLocalizationRegisterInput {
  """The ID of the market that the localization is specific to."""
  marketId: ID!
  """
  A reference to the value being localized on the resource that this market localization belongs to.
  """
  key: String!
  """The value of the market localization."""
  value: String!
  """A hash digest representation of the content being localized."""
  marketLocalizableContentDigest: String!
}

"""Return type for `marketLocalizationsRegister` mutation."""
type Shopify_MarketLocalizationsRegisterPayload {
  """The market localizations that were created or updated."""
  marketLocalizations: [Shopify_MarketLocalization!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_TranslationUserError!]!
}

"""Return type for `marketLocalizationsRemove` mutation."""
type Shopify_MarketLocalizationsRemovePayload {
  """The market localizations that were deleted."""
  marketLocalizations: [Shopify_MarketLocalization!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_TranslationUserError!]!
}

"""A geographic region which comprises a market."""
interface Shopify_MarketRegion {
  """A globally-unique identifier."""
  id: ID!
  """The name of the region."""
  name: String!
}

"""An auto-generated type for paginating through multiple MarketRegions."""
type Shopify_MarketRegionConnection {
  """A list of edges."""
  edges: [Shopify_MarketRegionEdge!]!
  """A list of the nodes contained in MarketRegionEdge."""
  nodes: [Shopify_MarketRegion!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""A country which comprises a market."""
type Shopify_MarketRegionCountry implements Shopify_MarketRegion & Shopify_Node {
  """The ISO code identifying the country."""
  code: CountryCode!
  """A globally-unique identifier."""
  id: ID!
  """The name of the region."""
  name: String!
}

"""
Defines input options for creating a market region. Exactly one option is required.
"""
input Shopify_MarketRegionCreateInput {
  """A country code for the region."""
  countryCode: CountryCode!
}

"""Return type for `marketRegionDelete` mutation."""
type Shopify_MarketRegionDeletePayload {
  """The ID of the deleted market region."""
  deletedId: ID
  """The parent market object of the deleted region."""
  market: Shopify_Market
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MarketUserError!]!
}

"""
An auto-generated type which holds one MarketRegion and a cursor during pagination.
"""
type Shopify_MarketRegionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of MarketRegionEdge."""
  node: Shopify_MarketRegion!
}

"""Return type for `marketRegionsCreate` mutation."""
type Shopify_MarketRegionsCreatePayload {
  """The market object."""
  market: Shopify_Market
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MarketUserError!]!
}

"""The input fields used to update a market."""
input Shopify_MarketUpdateInput {
  """The name of the market. Not shown to customers."""
  name: String
  """
  Whether the market is enabled to receive visitors and sales. **Note**: Regions in
  inactive markets cannot be selected on the storefront or in checkout.
  """
  enabled: Boolean
}

"""Return type for `marketUpdate` mutation."""
type Shopify_MarketUpdatePayload {
  """The market object."""
  market: Shopify_Market
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MarketUserError!]!
}

"""Defines errors encountered while managing a Market."""
type Shopify_MarketUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_MarketUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""Possible error codes that can be returned by `MarketUserError`."""
enum Shopify_MarketUserErrorCode {
  """The input value is invalid."""
  INVALID
  """The input value is already taken."""
  TAKEN
  """The input value is too long."""
  TOO_LONG
  """The input value is too short."""
  TOO_SHORT
  """The input value is blank."""
  BLANK
  """The market wasn't found."""
  MARKET_NOT_FOUND
  """The market region wasn't found."""
  REGION_NOT_FOUND
  """The market web presence wasn't found."""
  WEB_PRESENCE_NOT_FOUND
  """Can't add regions to the primary market."""
  CANNOT_ADD_REGIONS_TO_PRIMARY_MARKET
  """Can't delete the only region in a market."""
  CANNOT_DELETE_ONLY_REGION
  """Exactly one input option is required."""
  REQUIRES_EXACTLY_ONE_OPTION
  """Can't delete the primary market."""
  CANNOT_DELETE_PRIMARY_MARKET
  """Domain was not found."""
  DOMAIN_NOT_FOUND
  """The subfolder suffix must contain only letters."""
  SUBFOLDER_SUFFIX_MUST_CONTAIN_ONLY_LETTERS
  """No languages selected."""
  NO_LANGUAGES
  """Duplicates found in languages."""
  DUPLICATE_LANGUAGES
  """Cannot add region-specific language."""
  REGION_SPECIFIC_LANGUAGE
  """
  Can't create subfolders if the primary domain is a country code top-level domain (ccTLDs).
  """
  SUBFOLDER_NOT_ALLOWED_FOR_CCTLD_DOMAINS
  """Can't pass both `subfolderSuffix` and `domainId`."""
  CANNOT_HAVE_SUBFOLDER_AND_DOMAIN
  """Can't add the web presence to the primary market."""
  CANNOT_ADD_WEB_PRESENCE_TO_PRIMARY_MARKET
  """One of `subfolderSuffix` or `domainId` is required."""
  REQUIRES_DOMAIN_OR_SUBFOLDER
  """The primary market must use the primary domain."""
  PRIMARY_MARKET_MUST_USE_PRIMARY_DOMAIN
  """Can't delete the primary market's web presence."""
  CANNOT_DELETE_PRIMARY_MARKET_WEB_PRESENCE
  """Can't have more than 50 markets."""
  SHOP_REACHED_MARKETS_LIMIT
  """Can't disable the primary market."""
  CANNOT_DISABLE_PRIMARY_MARKET
  """The language isn't published to the store."""
  UNPUBLISHED_LANGUAGE
  """The language isn't enabled on the store."""
  DISABLED_LANGUAGE
  """Can't set default locale to null."""
  CANNOT_SET_DEFAULT_LOCALE_TO_NULL
  """Can't add unsupported country or region."""
  UNSUPPORTED_COUNTRY_REGION
  """Can't add customer account domain to a market."""
  CANNOT_ADD_CUSTOMER_DOMAIN
}

"""
The market’s web presence, which defines its SEO strategy. This can be a different domain
(e.g. `example.ca`), subdomain (e.g. `ca.example.com`), or subfolders of the primary
domain (e.g. `example.com/en-ca`). Each web presence comprises one or more language
variants. If a market does not have its own web presence, it is accessible on the shop’s
primary domain via [country
selectors](https://shopify.dev/themes/internationalization/multiple-currencies-languages#the-country-selector).

Note: while the domain/subfolders defined by a market’s web presence are not applicable to
custom storefronts, which must manage their own domains and routing, the languages chosen
here do govern [the languages available on the Storefront
API](https://shopify.dev/custom-storefronts/internationalization/multiple-languages) for the countries in
this market.
"""
type Shopify_MarketWebPresence implements Shopify_Node {
  """
  The ISO codes for the alternate locales. When a domain is used, these locales will be
  available as language-specific subfolders. For example, if English is an
  alternate locale, and `example.ca` is the market’s domain, then
  `example.ca/en` will load in English.
  """
  alternateLocales: [String!]!
  """
  The ISO code for the default locale. When a domain is used, this is the locale that will
  be used when the domain root is accessed. For example, if French is the default locale,
  and `example.ca` is the market’s domian, then `example.ca` will load in French.
  """
  defaultLocale: String!
  """
  The web presence’s domain.
  This field will be null if `subfolderSuffix` isn't null.
  """
  domain: Shopify_Domain
  """A globally-unique identifier."""
  id: ID!
  """The associated market."""
  market: Shopify_Market!
  """The list of root URLs for each of the web presence’s locales."""
  rootUrls: [Shopify_MarketWebPresenceRootUrl!]!
  """
  The market-specific suffix of the subfolders defined by the web presence.
  Example: in `/en-us` the subfolder suffix is `us`. This field will be null if
  `domain` isn't null.
  """
  subfolderSuffix: String
}

"""The input fields used to create a web presence for a market."""
input Shopify_MarketWebPresenceCreateInput {
  """
  The web presence's domain ID. This field must be `null` if the `subfolderSuffix` isn't `null`.
  """
  domainId: ID
  """The default locale for the market’s web presence."""
  defaultLocale: String!
  """The alternate locales for the market’s web presence."""
  alternateLocales: [String!]
  """
  The market-specific suffix of the subfolders defined by the web presence.
  For example: in `/en-us`, the subfolder suffix is `us`.
  Only ASCII characters are allowed. This field must be `null` if the `domainId` isn't `null`.
  """
  subfolderSuffix: String
}

"""Return type for `marketWebPresenceCreate` mutation."""
type Shopify_MarketWebPresenceCreatePayload {
  """The market object."""
  market: Shopify_Market
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MarketUserError!]!
}

"""Return type for `marketWebPresenceDelete` mutation."""
type Shopify_MarketWebPresenceDeletePayload {
  """The ID of the deleted web presence."""
  deletedId: ID
  """The market for which the web presence was deleted."""
  market: Shopify_Market
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MarketUserError!]!
}

"""
The URL for the homepage of the online store in the context of a particular market and a
particular locale.
"""
type Shopify_MarketWebPresenceRootUrl {
  """The locale that the storefront loads in."""
  locale: String!
  """The URL."""
  url: URL!
}

"""The input fields used to update a web presence for a market."""
input Shopify_MarketWebPresenceUpdateInput {
  """
  The web presence's domain ID. This field must be null if `subfolderSuffix` is not null.
  """
  domainId: ID
  """The default locale for the market’s web presence."""
  defaultLocale: String
  """The alternate locales for the market’s web presence."""
  alternateLocales: [String!]
  """
  The market-specific suffix of the subfolders defined by the web presence.
  Example: in `/en-us` the subfolder suffix is `us`.
  Only ASCII characters are allowed. This field must be null if `domainId` is not null.
  """
  subfolderSuffix: String
}

"""Return type for `marketWebPresenceUpdate` mutation."""
type Shopify_MarketWebPresenceUpdatePayload {
  """The market object."""
  market: Shopify_Market
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MarketUserError!]!
}

"""Represents a media interface."""
interface Shopify_Media {
  """A word or phrase to share the nature or contents of a media."""
  alt: String
  """The media content type."""
  mediaContentType: Shopify_MediaContentType!
  """Any errors which have occurred on the media."""
  mediaErrors: [Shopify_MediaError!]!
  """The warnings attached to the media."""
  mediaWarnings: [Shopify_MediaWarning!]!
  """The preview image for the media."""
  preview: Shopify_MediaPreviewImage
  """Current status of the media."""
  status: Shopify_MediaStatus!
}

"""An auto-generated type for paginating through multiple Media."""
type Shopify_MediaConnection {
  """A list of edges."""
  edges: [Shopify_MediaEdge!]!
  """A list of the nodes contained in MediaEdge."""
  nodes: [Shopify_Media!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""The possible content types for a media object."""
enum Shopify_MediaContentType {
  """A Shopify-hosted video."""
  VIDEO
  """An externally hosted video."""
  EXTERNAL_VIDEO
  """A 3d model."""
  MODEL_3D
  """A Shopify-hosted image."""
  IMAGE
}

"""
An auto-generated type which holds one Media and a cursor during pagination.
"""
type Shopify_MediaEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of MediaEdge."""
  node: Shopify_Media!
}

"""
Represents a media error. This typically occurs when there is an issue with the media itself causing it to fail validation.
Check the media before attempting to upload again.
"""
type Shopify_MediaError {
  """Code representing the type of error."""
  code: Shopify_MediaErrorCode!
  """Additional details regarding the error."""
  details: String
  """Translated error message."""
  message: String!
}

"""Error types for media."""
enum Shopify_MediaErrorCode {
  """Media error has occured for unknown reason."""
  UNKNOWN
  """Media could not be processed because the signed URL was invalid."""
  INVALID_SIGNED_URL
  """
  Media could not be processed because the image could not be downloaded.
  """
  IMAGE_DOWNLOAD_FAILURE
  """Media could not be processed because the image could not be processed."""
  IMAGE_PROCESSING_FAILURE
  """
  Media timed out because it is currently being modified by another operation.
  """
  MEDIA_TIMEOUT_ERROR
  """
  Media could not be created because the external video could not be found.
  """
  EXTERNAL_VIDEO_NOT_FOUND
  """
  Media could not be created because the external video is not listed or is private.
  """
  EXTERNAL_VIDEO_UNLISTED
  """
  Media could not be created because the external video has an invalid aspect ratio.
  """
  EXTERNAL_VIDEO_INVALID_ASPECT_RATIO
  """
  Media could not be created because embed permissions are disabled for this video.
  """
  EXTERNAL_VIDEO_EMBED_DISABLED
  """
  Media could not be created because video is either not found or still transcoding.
  """
  EXTERNAL_VIDEO_EMBED_NOT_FOUND_OR_TRANSCODING
  """
  File could not be processed because the source could not be downloaded.
  """
  GENERIC_FILE_DOWNLOAD_FAILURE
  """File could not be created because the size is too large."""
  GENERIC_FILE_INVALID_SIZE
  """Media could not be created because the metadata could not be read."""
  VIDEO_METADATA_READ_ERROR
  """Media could not be created because it has an invalid file type."""
  VIDEO_INVALID_FILETYPE_ERROR
  """
  Media could not be created because it does not meet the minimum width requirement.
  """
  VIDEO_MIN_WIDTH_ERROR
  """
  Media could not be created because it does not meet the maximum width requirement.
  """
  VIDEO_MAX_WIDTH_ERROR
  """
  Media could not be created because it does not meet the minimum height requirement.
  """
  VIDEO_MIN_HEIGHT_ERROR
  """
  Media could not be created because it does not meet the maximum height requirement.
  """
  VIDEO_MAX_HEIGHT_ERROR
  """
  Media could not be created because it does not meet the minimum duration requirement.
  """
  VIDEO_MIN_DURATION_ERROR
  """
  Media could not be created because it does not meet the maximum duration requirement.
  """
  VIDEO_MAX_DURATION_ERROR
  """Video failed validation."""
  VIDEO_VALIDATION_ERROR
  """Model failed validation."""
  MODEL3D_VALIDATION_ERROR
  """
  Media could not be created because the model's thumbnail generation failed.
  """
  MODEL3D_THUMBNAIL_GENERATION_ERROR
  """
  Media could not be created because the model can't be converted to USDZ format.
  """
  MODEL3D_GLB_TO_USDZ_CONVERSION_ERROR
  """Media could not be created because the model file failed processing."""
  MODEL3D_GLB_OUTPUT_CREATION_ERROR
  """Media could not be created because the model file failed processing."""
  MODEL3D_PROCESSING_FAILURE
  """
  Media could not be created because the image is an unsupported file type.
  """
  UNSUPPORTED_IMAGE_FILE_TYPE
  """Media could not be created because the image size is too large."""
  INVALID_IMAGE_FILE_SIZE
  """
  Media could not be created because the image has an invalid aspect ratio.
  """
  INVALID_IMAGE_ASPECT_RATIO
  """
  Media could not be created because the image's resolution exceeds the max limit.
  """
  INVALID_IMAGE_RESOLUTION
  """
  Media could not be created because the cumulative file storage limit would be exceeded.
  """
  FILE_STORAGE_LIMIT_EXCEEDED
}

"""Host for a Media Resource."""
enum Shopify_MediaHost {
  """Host for YouTube embedded videos."""
  YOUTUBE
  """Host for Vimeo embedded videos."""
  VIMEO
}

"""An image hosted on Shopify."""
type Shopify_MediaImage implements Shopify_File & Shopify_Media & Shopify_Node {
  """A word or phrase to share the nature or contents of a media."""
  alt: String
  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
  """
  createdAt: DateTime!
  """Any errors that have occurred on the file."""
  fileErrors: [Shopify_FileError!]!
  """The status of the file."""
  fileStatus: Shopify_FileStatus!
  """A globally-unique identifier."""
  id: ID!
  """The image for the media. Returns `null` until `status` is `READY`."""
  image: Shopify_Image
  """The media content type."""
  mediaContentType: Shopify_MediaContentType!
  """Any errors which have occurred on the media."""
  mediaErrors: [Shopify_MediaError!]!
  """The warnings attached to the media."""
  mediaWarnings: [Shopify_MediaWarning!]!
  """The MIME type of the image."""
  mimeType: String
  """The original source of the image."""
  originalSource: Shopify_MediaImageOriginalSource
  """The preview image for the media."""
  preview: Shopify_MediaPreviewImage
  """Current status of the media."""
  status: Shopify_MediaStatus!
}

"""The original source for an image."""
type Shopify_MediaImageOriginalSource {
  """The size of the original file in bytes."""
  fileSize: Int
}

"""Represents the preview image for a media."""
type Shopify_MediaPreviewImage {
  """
  The preview image for the media. Returns `null` until `status` is `READY`.
  """
  image: Shopify_Image
  """Current status of the preview image."""
  status: Shopify_MediaPreviewImageStatus!
}

"""The possible statuses for a media preview image."""
enum Shopify_MediaPreviewImageStatus {
  """Preview image is uploaded but not yet processed."""
  UPLOADED
  """Preview image is being processed."""
  PROCESSING
  """Preview image is ready to be displayed."""
  READY
  """Preview image processing has failed."""
  FAILED
}

"""The possible statuses for a media object."""
enum Shopify_MediaStatus {
  """Media has been uploaded but not yet processed."""
  UPLOADED
  """Media is being processed."""
  PROCESSING
  """Media is ready to be displayed."""
  READY
  """Media processing has failed."""
  FAILED
}

"""
Represents an error that happens during execution of a Media query or mutation.
"""
type Shopify_MediaUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_MediaUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""Possible error codes that can be returned by `MediaUserError`."""
enum Shopify_MediaUserErrorCode {
  """The input value is invalid."""
  INVALID
  """The input value is blank."""
  BLANK
  """Video validation failed."""
  VIDEO_VALIDATION_ERROR
  """Model validation failed."""
  MODEL3D_VALIDATION_ERROR
  """Video creation throttle was exceeded."""
  VIDEO_THROTTLE_EXCEEDED
  """Model3d creation throttle was exceeded."""
  MODEL3D_THROTTLE_EXCEEDED
  """Exceeded the limit of media per product."""
  PRODUCT_MEDIA_LIMIT_EXCEEDED
  """Exceeded the limit of media per shop."""
  SHOP_MEDIA_LIMIT_EXCEEDED
  """Product does not exist."""
  PRODUCT_DOES_NOT_EXIST
  """Media does not exist."""
  MEDIA_DOES_NOT_EXIST
  """Media does not exist on the given product."""
  MEDIA_DOES_NOT_EXIST_ON_PRODUCT
  """Only one mediaId is allowed per variant-media input pair."""
  TOO_MANY_MEDIA_PER_INPUT_PAIR
  """
  Exceeded the maximum number of 100 variant-media pairs per mutation call.
  """
  MAXIMUM_VARIANT_MEDIA_PAIRS_EXCEEDED
  """Invalid media type."""
  INVALID_MEDIA_TYPE
  """Variant specified in more than one pair."""
  PRODUCT_VARIANT_SPECIFIED_MULTIPLE_TIMES
  """Variant does not exist on the given product."""
  PRODUCT_VARIANT_DOES_NOT_EXIST_ON_PRODUCT
  """Non-ready media are not supported."""
  NON_READY_MEDIA
  """Product variant already has attached media."""
  PRODUCT_VARIANT_ALREADY_HAS_MEDIA
  """The specified media is not attached to the specified variant."""
  MEDIA_IS_NOT_ATTACHED_TO_VARIANT
  """
  Media cannot be modified. It is currently being modified by another operation.
  """
  MEDIA_CANNOT_BE_MODIFIED
}

"""
Represents a media warning. This occurs when there is a non-blocking concern regarding your media.
Consider reviewing your media to ensure it is correct and its parameters are as expected.
"""
type Shopify_MediaWarning {
  """The code representing the type of warning."""
  code: Shopify_MediaWarningCode!
  """Translated warning message."""
  message: String
}

"""Warning types for media."""
enum Shopify_MediaWarningCode {
  """
  3D model physical size might be invalid. The dimensions of your model are very
  small. Consider reviewing your model to ensure they are correct.
  """
  MODEL_SMALL_PHYSICAL_SIZE
  """
  3D model physical size might be invalid. The dimensions of your model are very
  large. Consider reviewing your model to ensure they are correct.
  """
  MODEL_LARGE_PHYSICAL_SIZE
}

"""The class of the discount for combining purposes."""
enum Shopify_MerchandiseDiscountClass {
  """Combined as a product discount."""
  PRODUCT
  """Combined as an order discount."""
  ORDER
}

"""
Merchant approval for accelerated onboarding to channel integration apps.
"""
type Shopify_MerchantApprovalSignals {
  """
  Whether the shop's Shopify Payments account identity is verified. Returns
  `false` if the identity is unverified or if the shop doesn't have a Shopify
  Payments account.
  """
  identityVerified: Boolean!
  """
  Whether Shopify has pre-verified the merchant's business for onboarding to
  channel integration apps. Returns `false` if the shop is not marked for verification.
  """
  verifiedByShopify: Boolean!
}

"""
Metafields enable you to attach additional information to a Shopify resource, such
as a [Product](https://shopify.dev/api/admin-graphql/latest/objects/product) or
a [Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).
For more information about where you can attach metafields refer to [HasMetafields](https://shopify.dev/api/admin/graphql/reference/common-objects/HasMetafields).
Some examples of the data that metafields enable you to store are
specifications, size charts, downloadable documents, release dates, images, or part numbers.
Metafields are identified by an owner resource, namespace, and key. and store a
value along with type information for that value.
"""
type Shopify_Metafield implements Shopify_LegacyInteroperability & Shopify_Node {
  """The date and time when the metafield was created."""
  createdAt: DateTime!
  """
  The optional, associated metafield definition that maps to this metafield's namespace and key pair.
  """
  definition: Shopify_MetafieldDefinition
  """The description of the metafield."""
  description: String
  """A globally-unique identifier."""
  id: ID!
  """The unique identifier for the metafield in its namespace."""
  key: String!
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: Shopify_UnsignedInt64!
  """
  A container for a group of metafields.
  Grouping metafields within a namespace prevents your metafields from
  conflicting with other metafields that have the same key name.
  """
  namespace: String!
  """The resource that the metafield is attached to."""
  owner: Shopify_HasMetafields!
  """The resource that the metafield is attached to."""
  ownerType: Shopify_MetafieldOwnerType!
  """
  Returns a reference object if the metafield definition's type is a resource reference.
  """
  reference: Shopify_MetafieldReference
  """
  A list of reference objects if the metafield's type is a resource reference list.
  """
  references(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
  ): Shopify_MetafieldReferenceConnection
  """
  The type of data that the metafield stores in the `value` field.
  See the list of [supported types](https://shopify.dev/apps/metafields/types).
  """
  type: String!
  """The date and time when the metafield was updated."""
  updatedAt: DateTime!
  """
  The data to store in the metafield. The data is always stored as a string, regardless of the metafield's type.
  """
  value: String!
}

"""The access settings for this metafield definition."""
type Shopify_MetafieldAccess {
  """
  The admin access setting used for the metafields under this definition.
  """
  admin: Shopify_MetafieldAdminAccess
}

"""The access settings for the metafields under the definition."""
input Shopify_MetafieldAccessInput {
  """
  The admin access setting to use for the metafields under this definition.
  """
  admin: Shopify_MetafieldAdminAccess!
}

"""Possible admin access settings for metafields."""
enum Shopify_MetafieldAdminAccess {
  """Owner gets full access. No one else has access rights."""
  PRIVATE
  """
  Owner gets full access. The merchant has read-only access. No one else has access rights.
  """
  MERCHANT_READ
  """
  Owner gets full access. The merchant has read and write access. No one else has access rights.
  """
  MERCHANT_READ_WRITE
}

"""An auto-generated type for paginating through multiple Metafields."""
type Shopify_MetafieldConnection {
  """A list of edges."""
  edges: [Shopify_MetafieldEdge!]!
  """A list of the nodes contained in MetafieldEdge."""
  nodes: [Shopify_Metafield!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
Metafield definitions enable you to define additional validation constraints for metafields, and enable the
merchant to edit metafield values in context.
"""
type Shopify_MetafieldDefinition implements Shopify_Node {
  """The access settings associated with a metafield definition."""
  access: Shopify_MetafieldAccess!
  """The description of a metafield definition."""
  description: String
  """A globally-unique identifier."""
  id: ID!
  """
  The key name used to identify a metafield definition within a namespace.
  """
  key: String!
  """The list of metafields associated with a metafield definition."""
  metafields(
    """Returns the metafields filtered by the validation status."""
    validationStatus: Shopify_MetafieldValidationStatus = ANY
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!
  """The count of metafields under a metafield definition."""
  metafieldsCount(
    """The current validation status."""
    validationStatus: Shopify_MetafieldValidationStatus
  ): Int!
  """The human-readable name for the metafield definition."""
  name: String!
  """
  The namespace of the metafield definition. You can use a namespace to group related metafields.
  """
  namespace: String!
  """
  The resource type that the metafield definition is attached to. For example, `Product` or `Collection`.
  """
  ownerType: Shopify_MetafieldOwnerType!
  """The position of the metafield definition in the pinned list."""
  pinnedPosition: Int
  """
  The standard metafield definition template associated with a metafield definition.
  """
  standardTemplate: Shopify_StandardMetafieldDefinitionTemplate
  """The type of data that the metafield will store."""
  type: Shopify_MetafieldDefinitionType!
  """
  Whether the metafield definition can be used as a collection condition.
  """
  useAsCollectionCondition: Boolean!
  """
  The validation status for the existing metafields within a metafield definition.
  """
  validationStatus: Shopify_MetafieldDefinitionValidationStatus!
  """
  A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
  the metafield. For example, for a metafield with the type `date`, you can set a minimum date validation, so
  that the metafield will only store dates after the specific minimum date.
  """
  validations: [Shopify_MetafieldDefinitionValidation!]!
  """
  Whether metafields for the metafield definition are visible using the Storefront API.
  """
  visibleToStorefrontApi: Boolean!
}

"""
An auto-generated type for paginating through multiple MetafieldDefinitions.
"""
type Shopify_MetafieldDefinitionConnection {
  """A list of edges."""
  edges: [Shopify_MetafieldDefinitionEdge!]!
  """A list of the nodes contained in MetafieldDefinitionEdge."""
  nodes: [Shopify_MetafieldDefinition!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `metafieldDefinitionCreate` mutation."""
type Shopify_MetafieldDefinitionCreatePayload {
  """The metafield definition that was created."""
  createdDefinition: Shopify_MetafieldDefinition
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MetafieldDefinitionCreateUserError!]!
}

"""
An error that occurs during the execution of `MetafieldDefinitionCreate`.
"""
type Shopify_MetafieldDefinitionCreateUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_MetafieldDefinitionCreateUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `MetafieldDefinitionCreateUserError`.
"""
enum Shopify_MetafieldDefinitionCreateUserErrorCode {
  """The input value is invalid."""
  INVALID
  """The input value isn't included in the list."""
  INCLUSION
  """The input value needs to be blank."""
  PRESENT
  """The input value is already taken."""
  TAKEN
  """The input value is too long."""
  TOO_LONG
  """The input value is too short."""
  TOO_SHORT
  """The definition limit per owner type has exceeded."""
  RESOURCE_TYPE_LIMIT_EXCEEDED
  """The maximum limit of definitions per owner type has exceeded."""
  LIMIT_EXCEEDED
  """An invalid option."""
  INVALID_OPTION
  """A duplicate option."""
  DUPLICATE_OPTION
  """
  This namespace and key combination is reserved for standard definitions.
  """
  RESERVED_NAMESPACE_KEY
  """The pinned limit has been reached for the owner type."""
  PINNED_LIMIT_REACHED
  """
  This namespace and key combination is already in use for a set of your metafields.
  """
  UNSTRUCTURED_ALREADY_EXISTS
  """A field contains an invalid character."""
  INVALID_CHARACTER
  """
  The definition type is not eligible to be used as collection condition.
  """
  TYPE_NOT_ALLOWED_FOR_CONDITIONS
  """
  You have reached the maximum allowed definitions for automated collections.
  """
  OWNER_TYPE_LIMIT_EXCEEDED_FOR_AUTOMATED_COLLECTIONS
}

"""Return type for `metafieldDefinitionDelete` mutation."""
type Shopify_MetafieldDefinitionDeletePayload {
  """The id of the deleted metafield definition."""
  deletedDefinitionId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MetafieldDefinitionDeleteUserError!]!
}

"""
An error that occurs during the execution of `MetafieldDefinitionDelete`.
"""
type Shopify_MetafieldDefinitionDeleteUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_MetafieldDefinitionDeleteUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `MetafieldDefinitionDeleteUserError`.
"""
enum Shopify_MetafieldDefinitionDeleteUserErrorCode {
  """The input value needs to be blank."""
  PRESENT
  """Definition not found."""
  NOT_FOUND
  """An internal error occurred."""
  INTERNAL_ERROR
  """
  Deleting a reference type metafield definition requires deletion of its associated metafields.
  """
  REFERENCE_TYPE_DELETION_ERROR
  """Action cannot proceed. Definition is currently in use."""
  METAFIELD_DEFINITION_IN_USE
  """Owner type can't be used in this mutation."""
  DISALLOWED_OWNER_TYPE
}

"""
An auto-generated type which holds one MetafieldDefinition and a cursor during pagination.
"""
type Shopify_MetafieldDefinitionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of MetafieldDefinitionEdge."""
  node: Shopify_MetafieldDefinition!
}

"""
Specifies the input fields that are required to create a metafield definition.
"""
input Shopify_MetafieldDefinitionInput {
  """The namespace to group a metafield definition."""
  namespace: String!
  """
  The key name used to identify a metafield definition within a namespace.
  """
  key: String!
  """The human-readable name for the metafield definition."""
  name: String!
  """The description for the metafield definition."""
  description: String
  """The resource type that the metafield definition is attached to."""
  ownerType: Shopify_MetafieldOwnerType!
  """The type of data that the metafield will store."""
  type: String!
  """
  A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
  the metafield. For example, for a metafield with the type `date`, you can set a minimum date validation, so
  that the metafield will only store dates after the specific minimum date.
  """
  validations: [Shopify_MetafieldDefinitionValidationInput!]
  """
  Whether metafields for the definition are visible using the Storefront API.
  """
  visibleToStorefrontApi: Boolean = false
  """
  Whether the metafield definition can be used as a collection condition.
  """
  useAsCollectionCondition: Boolean = false
  """Whether to pin the metafield definition."""
  pin: Boolean = false
  """The access settings that apply to all metafields under the definition."""
  access: Shopify_MetafieldAccessInput
}

"""Possible metafield definition pinned statuses."""
enum Shopify_MetafieldDefinitionPinnedStatus {
  """All metafield definitions."""
  ANY
  """Only metafield definitions that are pinned."""
  PINNED
  """Only metafield definitions that are not pinned."""
  UNPINNED
}

"""Return type for `metafieldDefinitionPin` mutation."""
type Shopify_MetafieldDefinitionPinPayload {
  """The metafield definition that was pinned."""
  pinnedDefinition: Shopify_MetafieldDefinition
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MetafieldDefinitionPinUserError!]!
}

"""An error that occurs during the execution of `MetafieldDefinitionPin`."""
type Shopify_MetafieldDefinitionPinUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_MetafieldDefinitionPinUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `MetafieldDefinitionPinUserError`.
"""
enum Shopify_MetafieldDefinitionPinUserErrorCode {
  """The metafield definition was not found."""
  NOT_FOUND
  """The pinned limit has been reached for owner type."""
  PINNED_LIMIT_REACHED
  """The metafield definition is already pinned."""
  ALREADY_PINNED
  """An internal error occurred."""
  INTERNAL_ERROR
  """Owner type can't be used in this mutation."""
  DISALLOWED_OWNER_TYPE
}

"""The set of valid sort keys for the MetafieldDefinition query."""
enum Shopify_MetafieldDefinitionSortKeys {
  """Sort by the `id` value."""
  ID
  """Sort by the `name` value."""
  NAME
  """Sort by the `pinned_position` value."""
  PINNED_POSITION
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
The type and name for the optional validation configuration of a metafield.

For example, a supported validation might consist of a `max` name and a `number_integer` type.
This validation can then be used to enforce a maximum character length for a `single_line_text_field` metafield.
"""
type Shopify_MetafieldDefinitionSupportedValidation {
  """The name of the metafield definition validation."""
  name: String!
  """The type of input for the validation."""
  type: String!
}

"""
A metafield definition type provides basic foundation and validation for a metafield.
"""
type Shopify_MetafieldDefinitionType {
  """The category associated with the metafield definition type."""
  category: String!
  """
  The name of the type for the metafield definition.
  See the list of [supported types](https://shopify.dev/apps/metafields/types).
  """
  name: String!
  """The supported validations for a metafield definition type."""
  supportedValidations: [Shopify_MetafieldDefinitionSupportedValidation!]!
  """
  Whether metafields without a definition can be migrated to a definition of this type.
  """
  supportsDefinitionMigrations: Boolean!
  """The value type for a metafield created with this definition type."""
  valueType: Shopify_MetafieldValueType! @deprecated(reason: "`valueType` is deprecated and `name` should be used for type information.")
}

"""Return type for `metafieldDefinitionUnpin` mutation."""
type Shopify_MetafieldDefinitionUnpinPayload {
  """The metafield definition that was unpinned."""
  unpinnedDefinition: Shopify_MetafieldDefinition
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MetafieldDefinitionUnpinUserError!]!
}

"""
An error that occurs during the execution of `MetafieldDefinitionUnpin`.
"""
type Shopify_MetafieldDefinitionUnpinUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_MetafieldDefinitionUnpinUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `MetafieldDefinitionUnpinUserError`.
"""
enum Shopify_MetafieldDefinitionUnpinUserErrorCode {
  """The metafield definition was not found."""
  NOT_FOUND
  """The metafield definition isn't pinned."""
  NOT_PINNED
  """An internal error occurred."""
  INTERNAL_ERROR
  """Owner type can't be used in this mutation."""
  DISALLOWED_OWNER_TYPE
}

"""
Specifies the input fields that are required to update a metafield definition.
"""
input Shopify_MetafieldDefinitionUpdateInput {
  """The namespace to group a metafield definition."""
  namespace: String!
  """
  The key name used to identify a metafield definition within a namespace.
  """
  key: String!
  """The human-readable name for the metafield definition."""
  name: String
  """The description for the metafield definition."""
  description: String
  """The resource type that the metafield definition is attached to."""
  ownerType: Shopify_MetafieldOwnerType!
  """Whether to pin the metafield definition."""
  pin: Boolean
  """
  Whether metafields for the definition are visible using the Storefront API.
  """
  visibleToStorefrontApi: Boolean = false
  """
  Whether the metafield definition can be used as a collection condition.
  """
  useAsCollectionCondition: Boolean = false
  """The access settings that apply to all metafields under the definition."""
  access: Shopify_MetafieldAccessInput
}

"""Return type for `metafieldDefinitionUpdate` mutation."""
type Shopify_MetafieldDefinitionUpdatePayload {
  """The metafield definition that was updated."""
  updatedDefinition: Shopify_MetafieldDefinition
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MetafieldDefinitionUpdateUserError!]!
}

"""
An error that occurs during the execution of `MetafieldDefinitionUpdate`.
"""
type Shopify_MetafieldDefinitionUpdateUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_MetafieldDefinitionUpdateUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `MetafieldDefinitionUpdateUserError`.
"""
enum Shopify_MetafieldDefinitionUpdateUserErrorCode {
  """The input value needs to be blank."""
  PRESENT
  """The input value is too long."""
  TOO_LONG
  """The metafield definition wasn't found."""
  NOT_FOUND
  """An invalid input."""
  INVALID_INPUT
  """The pinned limit has been reached for the owner type."""
  PINNED_LIMIT_REACHED
  """An internal error occurred."""
  INTERNAL_ERROR
  """
  The definition type is not eligible to be used as collection condition.
  """
  TYPE_NOT_ALLOWED_FOR_CONDITIONS
  """Action cannot proceed. Definition is currently in use."""
  METAFIELD_DEFINITION_IN_USE
  """
  You have reached the maximum allowed definitions for automated collections.
  """
  OWNER_TYPE_LIMIT_EXCEEDED_FOR_AUTOMATED_COLLECTIONS
}

"""
A configured metafield definition validation.

For example, for a metafield definition of `number_integer` type, you can set a validation with the name `max`
and a value of `15`. This validation will ensure that the value of the metafield is a number less than or equal to 15.

Refer to the [list of supported validations](https://shopify.dev/api/admin/graphql/reference/common-objects/metafieldDefinitionTypes#examples-Fetch_all_metafield_definition_types).
"""
type Shopify_MetafieldDefinitionValidation {
  """The validation name."""
  name: String!
  """The name for the metafield type of this validation."""
  type: String!
  """The validation value."""
  value: String
}

"""
The name and value for a metafield definition validation.

For example, for a metafield definition of `single_line_text_field` type, you
can set a validation with the name `min` and a value of `10`.
This validation will ensure that the value of the metafield is at least 10 characters.

Refer to the [list of supported validations](https://shopify.dev/api/admin/graphql/reference/common-objects/metafieldDefinitionTypes#examples-Fetch_all_metafield_definition_types).
"""
input Shopify_MetafieldDefinitionValidationInput {
  """The name for the metafield definition validation."""
  name: String!
  """The value for the metafield definition validation."""
  value: String!
}

"""Possible metafield definition validation statuses."""
enum Shopify_MetafieldDefinitionValidationStatus {
  """All of this definition's metafields are valid."""
  ALL_VALID
  """
  Asynchronous validation of this definition's metafields is in progress.
  """
  IN_PROGRESS
  """Some of this definition's metafields are invalid."""
  SOME_INVALID
}

"""Specifies the input fields to delete a metafield."""
input Shopify_MetafieldDeleteInput {
  """The ID of the metafield to delete."""
  id: ID!
}

"""Return type for `metafieldDelete` mutation."""
type Shopify_MetafieldDeletePayload {
  """The ID of the deleted metafield."""
  deletedId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An auto-generated type which holds one Metafield and a cursor during pagination.
"""
type Shopify_MetafieldEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of MetafieldEdge."""
  node: Shopify_Metafield!
}

"""
The input fields to use to create or update a metafield through a mutation on the owning resource.
An alternative way to create or update a metafield is by using the
[metafieldsSet](https://shopify.dev/api/admin-graphql/latest/mutations/metafieldsSet) mutation.
"""
input Shopify_MetafieldInput {
  """The description of the metafield."""
  description: String
  """
  The unique ID of the metafield. You don't include an ID when you create a metafield because the metafield ID
  is created automatically. The ID is required when you update a metafield.
  """
  id: ID
  """
  The namespace for a metafield. The namespace is required when you create a metafield and is optional when you
  update a metafield.
  """
  namespace: String
  """
  The key name of the metafield. Required when creating but optional when updating.
  """
  key: String
  """The value of a metafield."""
  value: String
  """
  The metafield's [type](https://shopify.dev/apps/metafields/types). The metafield type is required
  when you create a metafield and is optional when you update a metafield.
  """
  type: String
}

"""Possible types of a metafield's owner resource."""
enum Shopify_MetafieldOwnerType {
  """The Api Permission metafield owner type."""
  API_PERMISSION
  """The Article metafield owner type."""
  ARTICLE
  """The Blog metafield owner type."""
  BLOG
  """The Collection metafield owner type."""
  COLLECTION
  """The Company metafield owner type."""
  COMPANY
  """The Company Location metafield owner type."""
  COMPANY_LOCATION
  """The Customer metafield owner type."""
  CUSTOMER
  """The Discount metafield owner type."""
  DISCOUNT
  """The Draft Order metafield owner type."""
  DRAFTORDER
  """The Location metafield owner type."""
  LOCATION
  """The Order metafield owner type."""
  ORDER
  """The Page metafield owner type."""
  PAGE
  """The Product metafield owner type."""
  PRODUCT
  """The Product Image metafield owner type."""
  PRODUCTIMAGE
  """The Product Variant metafield owner type."""
  PRODUCTVARIANT
  """The Shop metafield owner type."""
  SHOP
}

"""The resource referenced by the metafield value."""
union Shopify_MetafieldReference = Shopify_Collection | Shopify_GenericFile | Shopify_MediaImage | Shopify_Metaobject | Shopify_OnlineStorePage | Shopify_Product | Shopify_ProductVariant | Shopify_Video

"""
An auto-generated type for paginating through multiple MetafieldReferences.
"""
type Shopify_MetafieldReferenceConnection {
  """A list of edges."""
  edges: [Shopify_MetafieldReferenceEdge!]!
  """A list of the nodes contained in MetafieldReferenceEdge."""
  nodes: [Shopify_MetafieldReference]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one MetafieldReference and a cursor during pagination.
"""
type Shopify_MetafieldReferenceEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of MetafieldReferenceEdge."""
  node: Shopify_MetafieldReference
}

"""
Types of resources that may use metafields to reference other resources.
"""
union Shopify_MetafieldReferencer = Shopify_AppInstallation | Shopify_Collection | Shopify_Customer | Shopify_DiscountAutomaticNode | Shopify_DiscountCodeNode | Shopify_DiscountNode | Shopify_DraftOrder | Shopify_FulfillmentOrder | Shopify_Location | Shopify_Metaobject | Shopify_OnlineStoreArticle | Shopify_OnlineStoreBlog | Shopify_OnlineStorePage | Shopify_Order | Shopify_Product | Shopify_ProductVariant | Shopify_Shop

"""
Defines a relation between two resources via a reference metafield.
The referencer owns the joining field with a given namespace and key,
while the target is referenced by the field.
"""
type Shopify_MetafieldRelation {
  """The key of the field making the reference."""
  key: String!
  """The name of the field making the reference."""
  name: String!
  """
  The namespace of the metafield making the reference, or type of the metaobject.
  """
  namespace: String!
  """The resource making the reference."""
  referencer: Shopify_MetafieldReferencer!
  """The referenced resource."""
  target: Shopify_MetafieldReference!
}

"""
An auto-generated type for paginating through multiple MetafieldRelations.
"""
type Shopify_MetafieldRelationConnection {
  """A list of edges."""
  edges: [Shopify_MetafieldRelationEdge!]!
  """A list of the nodes contained in MetafieldRelationEdge."""
  nodes: [Shopify_MetafieldRelation!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one MetafieldRelation and a cursor during pagination.
"""
type Shopify_MetafieldRelationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of MetafieldRelationEdge."""
  node: Shopify_MetafieldRelation!
}

"""Specifies the input fields for a metafield value to set."""
input Shopify_MetafieldsSetInput {
  """The ID of the owner resource."""
  ownerId: ID!
  """
  A container for a group of metafields.
  Grouping metafields in a namespace prevents your metafields from conflicting
  with other metafields that have the same key name.
  """
  namespace: String!
  """The key name of the metafield."""
  key: String!
  """
  The data to store in the metafield. The data is always stored as a string, regardless of the metafield's type.
  """
  value: String!
  """
  The type of data that the metafield stores.
  The type must be one of the [supported types](https://shopify.dev/apps/metafields/types).
  The type is required when there is no corresponding definition for the given owner, namespace and key.
  """
  type: String
}

"""Return type for `metafieldsSet` mutation."""
type Shopify_MetafieldsSetPayload {
  """The list of metafields that were set."""
  metafields: [Shopify_Metafield!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MetafieldsSetUserError!]!
}

"""An error that occurs during the execution of `MetafieldsSet`."""
type Shopify_MetafieldsSetUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_MetafieldsSetUserErrorCode
  """The index of the array element that's causing the error."""
  elementIndex: Int
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""Possible error codes that can be returned by `MetafieldsSetUserError`."""
enum Shopify_MetafieldsSetUserErrorCode {
  """The input value is blank."""
  BLANK
  """The input value isn't included in the list."""
  INCLUSION
  """
  The input value should be less than or equal to the maximum value allowed.
  """
  LESS_THAN_OR_EQUAL_TO
  """The input value needs to be blank."""
  PRESENT
  """The input value is too short."""
  TOO_SHORT
  """The input value is too long."""
  TOO_LONG
  """The value is invalid for metafield type or for definition options."""
  INVALID_VALUE
  """The type is invalid."""
  INVALID_TYPE
  """
  ApiPermission metafields can only be created or updated by the app owner.
  """
  APP_NOT_AUTHORIZED
}

"""
By default, the Storefront API can't read metafields. To make specific metafields visible in the Storefront API,
you need to create a `MetafieldStorefrontVisibility` record. A `MetafieldStorefrontVisibility` record is a list
of the metafields, defined by the `owner_type`, `namespace`, and `key`, to make visible in the Storefront API.

Learn about [exposing metafields in the Storefront API]
(https://shopify.dev/custom-storefronts/products-collections/metafields)
for more details.
"""
type Shopify_MetafieldStorefrontVisibility implements Shopify_LegacyInteroperability & Shopify_Node {
  """
  The date and time when the metafield was set to visible in the Storefront API.
  """
  createdAt: DateTime!
  """A globally-unique identifier."""
  id: ID!
  """The key of a metafield to make visible in the Storefront API."""
  key: String!
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: Shopify_UnsignedInt64!
  """The namespace of a metafield to make visible in the Storefront API."""
  namespace: String!
  """The owner type of a metafield to make visible in the Storefront API."""
  ownerType: Shopify_MetafieldOwnerType!
  """
  The date and time when the `MetafieldStorefrontVisilibty` record was updated.
  """
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple MetafieldStorefrontVisibilities.
"""
type Shopify_MetafieldStorefrontVisibilityConnection {
  """A list of edges."""
  edges: [Shopify_MetafieldStorefrontVisibilityEdge!]!
  """A list of the nodes contained in MetafieldStorefrontVisibilityEdge."""
  nodes: [Shopify_MetafieldStorefrontVisibility!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `metafieldStorefrontVisibilityCreate` mutation."""
type Shopify_MetafieldStorefrontVisibilityCreatePayload {
  """The `MetafieldStorefrontVisibility` that was created."""
  metafieldStorefrontVisibility: Shopify_MetafieldStorefrontVisibility
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `metafieldStorefrontVisibilityDelete` mutation."""
type Shopify_MetafieldStorefrontVisibilityDeletePayload {
  """The ID of the deleted `MetafieldStorefrontVisibility` record."""
  deletedMetafieldStorefrontVisibilityId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An auto-generated type which holds one MetafieldStorefrontVisibility and a cursor during pagination.
"""
type Shopify_MetafieldStorefrontVisibilityEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of MetafieldStorefrontVisibilityEdge."""
  node: Shopify_MetafieldStorefrontVisibility!
}

"""
Specifies the input fields to create a `MetafieldStorefrontVisibility` record.
"""
input Shopify_MetafieldStorefrontVisibilityInput {
  """The namespace of a metafield to make visible in the Storefront API."""
  namespace: String!
  """The key of a metafield to make visible in the Storefront API."""
  key: String!
  """The owner type of a metafield to make visible in the Storefront API."""
  ownerType: Shopify_MetafieldOwnerType!
}

"""Possible metafield validation statuses."""
enum Shopify_MetafieldValidationStatus {
  """Any validation status (valid or invalid)."""
  ANY
  """Valid (according to definition)."""
  VALID
  """Invalid (according to definition)."""
  INVALID
}

"""
Legacy type information for the stored value.
Replaced by `type`.
"""
enum Shopify_MetafieldValueType {
  """A text field."""
  STRING
  """A whole number."""
  INTEGER
  """A JSON string."""
  JSON_STRING
  """A `true` or `false` value."""
  BOOLEAN
}

"""Provides an object instance represented by a MetaobjectDefinition."""
type Shopify_Metaobject implements Shopify_Node {
  """Metaobject capabilities for this Metaobject."""
  capabilities: Shopify_MetaobjectCapabilityData!
  """The MetaobjectDefinition that models this object type."""
  definition: Shopify_MetaobjectDefinition!
  """The preferred display name field value of the metaobject."""
  displayName: String!
  """
  The field for an object key, or null if the key has no field definition.
  """
  field(
    """The metaobject key to access."""
    key: String!
  ): Shopify_MetaobjectField
  """
  All ordered fields of the metaobject with their definitions and values.
  """
  fields: [Shopify_MetaobjectField!]!
  """The unique handle of the object, useful as a custom ID."""
  handle: String!
  """A globally-unique identifier."""
  id: ID!
  """List of back references metafields that belong to the resource."""
  referencedBy(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldRelationConnection!
  """The staff member who created the metaobject."""
  staffMember: Shopify_StaffMember
  """The type of the metaobject."""
  type: String!
  """When the object was last updated."""
  updatedAt: DateTime!
}

"""Provides metaobject definition's access configuration."""
type Shopify_MetaobjectAccess {
  """
  Access configuration for Admin API surface areas, including the GraphQL Admin API.
  """
  admin: Shopify_MetaobjectAdminAccess!
  """
  Access configuration for Storefront surface areas, including the GraphQL Storefront API and Liquid.
  """
  storefront: Shopify_MetaobjectStorefrontAccess!
}

"""Options for configuring metaobject access controls."""
input Shopify_MetaobjectAccessInput {
  """
  Access configuration for Admin API surface areas, including the GraphQL Admin API.
  """
  admin: Shopify_MetaobjectAdminAccess
  """
  Access configuration for Storefront API surface areas, including the GraphQL Storefront API and Liquid.
  """
  storefront: Shopify_MetaobjectStorefrontAccess
}

"""
Defines how the metaobjects of a definition can be accessed in admin API surface areas.
"""
enum Shopify_MetaobjectAdminAccess {
  """Only the application that owns a metaobject can read and write to it."""
  PRIVATE
  """
  Applications that act on behalf of merchants can read metaobjects.
  Only the owning application can write metaobjects.
  """
  MERCHANT_READ
  """
  The owning application, as well as applications that act on behalf of merchants can read and write metaobjects.
  No other applications can read or write metaobjects.
  """
  MERCHANT_READ_WRITE
  """
  All applications with the `metaobjects` access scope can read metaobjects.
  Only the owning application can write metaobjects.
  """
  PUBLIC_READ
  """
  All applications with the `metaobjects` access scope can read and write metaobjects.
  """
  PUBLIC_READ_WRITE
}

"""Return type for `metaobjectBulkDelete` mutation."""
type Shopify_MetaobjectBulkDeletePayload {
  """The asynchronous job that deletes the metaobjects."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MetaobjectUserError!]!
}

"""
Specifies the condition by which metaobjects are deleted.
Exactly one field of input is required.
"""
input Shopify_MetaobjectBulkDeleteWhereCondition {
  """Deletes all metaobjects with the specified `type`."""
  type: String
  """A list of metaobjects IDs to delete."""
  ids: [ID!]
}

"""Provides the capabilities of a metaobject definition."""
type Shopify_MetaobjectCapabilities {
  """Indicate whether a metaobject definition is publishable."""
  publishable: Shopify_MetaobjectCapabilitiesPublishable!
}

"""The publishable capability of a metaobject definition."""
type Shopify_MetaobjectCapabilitiesPublishable {
  """Indicates if the capability is enabled."""
  enabled: Boolean!
}

"""The input for creating a metaobject capability."""
input Shopify_MetaobjectCapabilityCreateInput {
  """The input for enabling the publishable capability."""
  publishable: Shopify_MetaobjectCapabilityPublishableInput!
}

"""Provides the capabilities of a metaobject."""
type Shopify_MetaobjectCapabilityData {
  """The publishable capability for this metaobject."""
  publishable: Shopify_MetaobjectCapabilityDataPublishable
}

"""Metaobject capabilities."""
input Shopify_MetaobjectCapabilityDataInput {
  """Publishable capability input."""
  publishable: Shopify_MetaobjectCapabilityDataPublishableInput
}

"""The publishable capability for the parent metaobject."""
type Shopify_MetaobjectCapabilityDataPublishable {
  """The visibility status of this metaobject across all channels."""
  status: Shopify_MetaobjectStatus!
}

"""Publishable Capability input to adjust visiblity on channels."""
input Shopify_MetaobjectCapabilityDataPublishableInput {
  """The visibility status of this metaobject across all channels."""
  status: Shopify_MetaobjectStatus!
}

"""Input for enabling and disabling the publishable capability."""
input Shopify_MetaobjectCapabilityPublishableInput {
  """Indicates whether the capability should be enabled or disabled."""
  enabled: Boolean!
}

"""The input for updating a metaobject capability."""
input Shopify_MetaobjectCapabilityUpdateInput {
  """The input for updating the publishable capability."""
  publishable: Shopify_MetaobjectCapabilityPublishableInput!
}

"""An auto-generated type for paginating through multiple Metaobjects."""
type Shopify_MetaobjectConnection {
  """A list of edges."""
  edges: [Shopify_MetaobjectEdge!]!
  """A list of the nodes contained in MetaobjectEdge."""
  nodes: [Shopify_Metaobject!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""The input for creating a metaobject."""
input Shopify_MetaobjectCreateInput {
  """
  The type of the metaobject. Must match an existing metaobject definition type.
  """
  type: String!
  """
  A unique handle for the metaobject. This value is auto-generated when omitted.
  """
  handle: String
  """
  Values for fields. These are mapped by key to fields of the metaobject definition.
  """
  fields: [Shopify_MetaobjectFieldInput!]
  """Capabilities for the metaobject."""
  capabilities: Shopify_MetaobjectCapabilityDataInput
}

"""Return type for `metaobjectCreate` mutation."""
type Shopify_MetaobjectCreatePayload {
  """The created metaobject."""
  metaobject: Shopify_Metaobject
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MetaobjectUserError!]!
}

"""
Provides the definition of a generic object structure composed of metafields.
"""
type Shopify_MetaobjectDefinition implements Shopify_Node {
  """Access configuration for the metaobject definition."""
  access: Shopify_MetaobjectAccess!
  """The capabilities of the metaobject definition."""
  capabilities: Shopify_MetaobjectCapabilities!
  """The administrative description."""
  description: String
  """The key of a field to reference as the display name for each object."""
  displayNameKey: String
  """The fields defined for this object type."""
  fieldDefinitions: [Shopify_MetaobjectFieldDefinition!]!
  """A globally-unique identifier."""
  id: ID!
  """
  A paginated connection to the metaobjects associated with the definition.
  """
  metaobjects(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetaobjectConnection!
  """The count of metaobjects created for the definition."""
  metaobjectsCount: Int!
  """The human-readable name."""
  name: String!
  """
  The type of the object definition. Defines the namespace of associated metafields.
  """
  type: String!
}

"""
An auto-generated type for paginating through multiple MetaobjectDefinitions.
"""
type Shopify_MetaobjectDefinitionConnection {
  """A list of edges."""
  edges: [Shopify_MetaobjectDefinitionEdge!]!
  """A list of the nodes contained in MetaobjectDefinitionEdge."""
  nodes: [Shopify_MetaobjectDefinition!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""The input fields for creating a metaobject definition."""
input Shopify_MetaobjectDefinitionCreateInput {
  """
  A human-readable name for the definition. This can be changed at any time.
  """
  name: String
  """An administrative description of the definition."""
  description: String
  """The type of the metaobject definition. This cannot be changed."""
  type: String!
  """A set of field definitions to create on this metaobject definition."""
  fieldDefinitions: [Shopify_MetaobjectFieldDefinitionCreateInput!]!
  """Access configuration for the metaobjects created with this definition."""
  access: Shopify_MetaobjectAccessInput
  """
  The key of a field to reference as the display name for metaobjects of this type.
  """
  displayNameKey: String
  """The capabilities of the metaobject definition."""
  capabilities: Shopify_MetaobjectCapabilityCreateInput
}

"""Return type for `metaobjectDefinitionCreate` mutation."""
type Shopify_MetaobjectDefinitionCreatePayload {
  """The created metaobject definition."""
  metaobjectDefinition: Shopify_MetaobjectDefinition
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MetaobjectUserError!]!
}

"""Return type for `metaobjectDefinitionDelete` mutation."""
type Shopify_MetaobjectDefinitionDeletePayload {
  """The ID of the deleted metaobjects definition."""
  deletedId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MetaobjectUserError!]!
}

"""
An auto-generated type which holds one MetaobjectDefinition and a cursor during pagination.
"""
type Shopify_MetaobjectDefinitionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of MetaobjectDefinitionEdge."""
  node: Shopify_MetaobjectDefinition!
}

"""The input fields for updating a metaobject definition."""
input Shopify_MetaobjectDefinitionUpdateInput {
  """A human-readable name for the definition."""
  name: String
  """An administrative description of the definition."""
  description: String
  """A set of operations for modifying field definitions."""
  fieldDefinitions: [Shopify_MetaobjectFieldDefinitionOperationInput!]
  """Access configuration for the metaobjects created with this definition."""
  access: Shopify_MetaobjectAccessInput
  """
  The key of a metafield to reference as the display name for objects of this type.
  """
  displayNameKey: String
  """
  Whether the field order should be reset while updating.
  If `true`, then the order is assigned based on submitted fields followed by alphabetized field omissions.
  If `false`, then no changes are made to the existing field order and new fields are appended at the end.
  """
  resetFieldOrder: Boolean = false
  """The capabilities of the metaobject definition."""
  capabilities: Shopify_MetaobjectCapabilityUpdateInput
}

"""Return type for `metaobjectDefinitionUpdate` mutation."""
type Shopify_MetaobjectDefinitionUpdatePayload {
  """The updated metaobject definition."""
  metaobjectDefinition: Shopify_MetaobjectDefinition
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MetaobjectUserError!]!
}

"""Return type for `metaobjectDelete` mutation."""
type Shopify_MetaobjectDeletePayload {
  """The ID of the deleted metaobject."""
  deletedId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MetaobjectUserError!]!
}

"""
An auto-generated type which holds one Metaobject and a cursor during pagination.
"""
type Shopify_MetaobjectEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of MetaobjectEdge."""
  node: Shopify_Metaobject!
}

"""Provides a field definition and the data value assigned to it."""
type Shopify_MetaobjectField {
  """The field definition for this object key."""
  definition: Shopify_MetaobjectFieldDefinition!
  """The object key of this field."""
  key: String!
  """For resource reference fields, provides the referenced object."""
  reference: Shopify_MetafieldReference
  """
  For resource reference list fields, provides the list of referenced objects.
  """
  references(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
  ): Shopify_MetafieldReferenceConnection
  """The type of the field."""
  type: String!
  """
  The assigned field value, always stored as a string regardless of the field type.
  """
  value: String
}

"""
Defines a field for a MetaobjectDefinition with properties
such as the field's data type and validations.
"""
type Shopify_MetaobjectFieldDefinition {
  """The administrative description."""
  description: String
  """
  A key name used to identify the field within the metaobject composition.
  """
  key: String!
  """The human-readable name."""
  name: String!
  """Required status of the field within the metaobject composition."""
  required: Boolean!
  """The type of data that the field stores."""
  type: Shopify_MetafieldDefinitionType!
  """
  A list of [validation options](https://shopify.dev/apps/metafields/definitions/validation) for
  the field. For example, a field with the type `date` can set a minimum date requirement.
  """
  validations: [Shopify_MetafieldDefinitionValidation!]!
}

"""Options for creating a metaobject field definition."""
input Shopify_MetaobjectFieldDefinitionCreateInput {
  """The key of the new field definition. This cannot be changed."""
  key: String!
  """The metafield type applied to values of the field."""
  type: String!
  """A human-readable name for the field. This can be changed at any time."""
  name: String
  """An administrative description of the field."""
  description: String
  """Whether metaobjects require a saved value for the field."""
  required: Boolean = false
  """Custom validations that apply to values assigned to the field."""
  validations: [Shopify_MetafieldDefinitionValidationInput!]
}

"""Options for deleting a metaobject field definition."""
input Shopify_MetaobjectFieldDefinitionDeleteInput {
  """The key of the field definition to delete."""
  key: String!
}

"""
Possible operations for modifying field definitions. Exactly one option is required.
"""
input Shopify_MetaobjectFieldDefinitionOperationInput {
  """Options for creating a metaobject field definition."""
  create: Shopify_MetaobjectFieldDefinitionCreateInput
  """Options for updating a metaobject field definition."""
  update: Shopify_MetaobjectFieldDefinitionUpdateInput
  """Options for deleting a metaobject field definition."""
  delete: Shopify_MetaobjectFieldDefinitionDeleteInput
}

"""Options for updating a metaobject field definition."""
input Shopify_MetaobjectFieldDefinitionUpdateInput {
  """The key of the field definition to update."""
  key: String!
  """A human-readable name for the field."""
  name: String
  """An administrative description of the field."""
  description: String
  """Whether metaobjects require a saved value for the field."""
  required: Boolean
  """Custom validations that apply to values assigned to the field."""
  validations: [Shopify_MetafieldDefinitionValidationInput!]
}

"""A metaobject field value."""
input Shopify_MetaobjectFieldInput {
  """The key of the field."""
  key: String!
  """The value of the field."""
  value: String!
}

"""The input for retrieving a metaobject by handle."""
input Shopify_MetaobjectHandleInput {
  """
  The type of the metaobject. Must match an existing metaobject definition type.
  """
  type: String!
  """The handle of the metaobject to create or update."""
  handle: String!
}

"""Defines visibility status for metaobjects."""
enum Shopify_MetaobjectStatus {
  """The metaobjects is an internal record."""
  DRAFT
  """The metaobjects is active for public use."""
  ACTIVE
}

"""
Defines how the metaobjects of a definition can be accessed in Storefront API
surface areas, including Liquid and the GraphQL Storefront API.
"""
enum Shopify_MetaobjectStorefrontAccess {
  """Metaobjects are not accessible in any Storefront API surface area."""
  NONE
  """
  Metaobjects are accessible in the GraphQL Storefront API by any application
  with the `unauthenticated_read_metaobjects` access scope.
  Metaobjects are accessible in online store Liquid templates.
  """
  PUBLIC_READ
}

"""The input for updating a metaobject."""
input Shopify_MetaobjectUpdateInput {
  """A unique handle for the metaobject."""
  handle: String
  """
  Values for fields. These are mapped by key to fields of the metaobject definition.
  """
  fields: [Shopify_MetaobjectFieldInput!]
  """Capabilities for the metaobject."""
  capabilities: Shopify_MetaobjectCapabilityDataInput
}

"""Return type for `metaobjectUpdate` mutation."""
type Shopify_MetaobjectUpdatePayload {
  """The updated metaobject."""
  metaobject: Shopify_Metaobject
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MetaobjectUserError!]!
}

"""The input for upserting a metaobject."""
input Shopify_MetaobjectUpsertInput {
  """The handle of the metaobject."""
  handle: String
  """
  Values for fields. These are mapped by key to fields of the metaobject definition.
  """
  fields: [Shopify_MetaobjectFieldInput!]
  """Capabilities for the metaobject."""
  capabilities: Shopify_MetaobjectCapabilityDataInput
}

"""Return type for `metaobjectUpsert` mutation."""
type Shopify_MetaobjectUpsertPayload {
  """The created or updated metaobject."""
  metaobject: Shopify_Metaobject
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MetaobjectUserError!]!
}

"""Defines errors encountered while managing metaobject resources."""
type Shopify_MetaobjectUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_MetaobjectUserErrorCode
  """The index of the failing list element in an array."""
  elementIndex: Int
  """The key of the failing object element."""
  elementKey: String
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""Possible error codes that can be returned by `MetaobjectUserError`."""
enum Shopify_MetaobjectUserErrorCode {
  """The input value is invalid."""
  INVALID
  """The input value isn't included in the list."""
  INCLUSION
  """The input value is already taken."""
  TAKEN
  """The input value is too long."""
  TOO_LONG
  """The input value is too short."""
  TOO_SHORT
  """The input value needs to be blank."""
  PRESENT
  """The input value is blank."""
  BLANK
  """The metafield type is invalid."""
  INVALID_TYPE
  """The value is invalid for the metafield type or the definition options."""
  INVALID_VALUE
  """The value for the metafield definition option was invalid."""
  INVALID_OPTION
  """Duplicate inputs were provided for this field key."""
  DUPLICATE_FIELD_INPUT
  """No metaobject definition found for this type."""
  UNDEFINED_OBJECT_TYPE
  """No field definition found for this key."""
  UNDEFINED_OBJECT_FIELD
  """The specified field key is already in use."""
  OBJECT_FIELD_TAKEN
  """Missing required fields were found for this object."""
  OBJECT_FIELD_REQUIRED
  """The requested record couldn't be found."""
  RECORD_NOT_FOUND
  """An unexpected error occurred."""
  INTERNAL_ERROR
  """The maximum number of metaobjects definitions has been exceeded."""
  MAX_DEFINITIONS_EXCEEDED
  """The maximum number of metaobjects per shop has been exceeded."""
  MAX_OBJECTS_EXCEEDED
  """The targeted object cannot be modified."""
  IMMUTABLE
  """Not authorized."""
  NOT_AUTHORIZED
  """The provided name is reserved for system use."""
  RESERVED_NAME
  """The capability you are using is not enabled."""
  CAPABILITY_NOT_ENABLED
}

"""The set of valid sort keys for the MethodDefinition query."""
enum Shopify_MethodDefinitionSortKeys {
  """Sort by the `rate_provider_type` value."""
  RATE_PROVIDER_TYPE
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""Represents a Shopify hosted 3D model."""
type Shopify_Model3d implements Shopify_Media & Shopify_Node {
  """A word or phrase to share the nature or contents of a media."""
  alt: String
  """The 3d model's bounding box information."""
  boundingBox: Shopify_Model3dBoundingBox
  """The 3d model's filename."""
  filename: String!
  """A globally-unique identifier."""
  id: ID!
  """The media content type."""
  mediaContentType: Shopify_MediaContentType!
  """Any errors which have occurred on the media."""
  mediaErrors: [Shopify_MediaError!]!
  """The warnings attached to the media."""
  mediaWarnings: [Shopify_MediaWarning!]!
  """The 3d model's original source."""
  originalSource: Shopify_Model3dSource
  """The preview image for the media."""
  preview: Shopify_MediaPreviewImage
  """The 3d model's sources."""
  sources: [Shopify_Model3dSource!]!
  """Current status of the media."""
  status: Shopify_MediaStatus!
}

"""Bounding box information of a 3d model."""
type Shopify_Model3dBoundingBox {
  """Size in meters of the smallest volume which contains the 3d model."""
  size: Shopify_Vector3!
}

"""
A source for a Shopify-hosted 3d model.

Types of sources include GLB and USDZ formatted 3d models, where the former
is an original 3d model and the latter has been converted from the original.

If the original source is in GLB format and over 15 MBs in size, then both the
original and the USDZ formatted source are optimized to reduce the file size.
"""
type Shopify_Model3dSource {
  """The 3d model source's filesize."""
  filesize: Int!
  """The 3d model source's format."""
  format: String!
  """The 3d model source's MIME type."""
  mimeType: String!
  """The 3d model source's URL."""
  url: String!
}

"""
A monetary value string without a currency symbol or code. Example value: `"100.57"`.
"""
scalar Shopify_Money

"""
A collection of monetary values in their respective currencies. Typically used
in the context of multi-currency pricing and transactions,
when an amount in the shop's currency is converted to the customer's currency of choice (the presentment currency).
"""
type Shopify_MoneyBag {
  """Amount in presentment currency."""
  presentmentMoney: Shopify_MoneyV2!
  """Amount in shop currency."""
  shopMoney: Shopify_MoneyV2!
}

"""Specifies the fields for a monetary value with currency."""
input Shopify_MoneyInput {
  """Decimal money amount."""
  amount: Shopify_Decimal!
  """Currency of the money."""
  currencyCode: Shopify_CurrencyCode!
}

"""A monetary value with currency."""
type Shopify_MoneyV2 {
  """Decimal money amount."""
  amount: Shopify_Decimal!
  """Currency of the money."""
  currencyCode: Shopify_CurrencyCode!
}

"""
A single move of an object to a specific position in a set, using a zero-based index.
"""
input Shopify_MoveInput {
  """The ID of the object to be moved."""
  id: ID!
  """The new position of the object in the set."""
  newPosition: Shopify_UnsignedInt64!
}

"""
A signed upload parameter for uploading an asset to Shopify.

Deprecated in favor of
[StagedUploadParameter](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadParameter),
which is used in
[StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget)
and returned by the
[stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
"""
type Shopify_MutationsStagedUploadTargetGenerateUploadParameter {
  """The upload parameter name."""
  name: String!
  """The upload parameter value."""
  value: String!
}

"""
A default cursor that you can use in queries to paginate your results. Each edge in a connection can
return a cursor, which is a reference to the edge's position in the connection. You can use an edge's cursor as
the starting point to retrieve the nodes before or after it in a connection.

To learn more about using cursor-based pagination, refer to
[Paginating results with GraphQL](https://shopify.dev/api/usage/pagination-graphql).
"""
interface Shopify_Navigable {
  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!
}

"""A navigation item, holding basic link attributes."""
type Shopify_NavigationItem {
  """The unique identifier of the navigation item."""
  id: String!
  """The name of the navigation item."""
  title: String!
  """The URL of the page that the navigation item links to."""
  url: URL!
}

"""
An object with an ID field to support global identification, in accordance with the
[Relay specification](https://relay.dev/graphql/objectidentification.htm#sec-Node-Interface).
This interface is used by the [node](https://shopify.dev/api/admin-graphql/unstable/queries/node)
and [nodes](https://shopify.dev/api/admin-graphql/unstable/queries/nodes) queries.
"""
interface Shopify_Node {
  """A globally-unique identifier."""
  id: ID!
}

"""Represents the dimensions of an object."""
input Shopify_ObjectDimensionsInput {
  """The length in `unit`s."""
  length: Float!
  """The width in `unit`s."""
  width: Float!
  """The height in `unit`s."""
  height: Float!
  """Unit of measurement for `length`, `width`, and `height`."""
  unit: Shopify_LengthUnit!
}

"""
An article in the blogging system. You can query articles from
[the REST API](https://shopify.dev/api/admin-rest/latest/resources/article)
if you need to access more information about an article. Currently, `OnlineStoreArticle` is
only useful to pass an article `id` to the `tagsAdd` mutation. For more information, refer to
the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd) mutation.
"""
type Shopify_OnlineStoreArticle implements Shopify_HasPublishedTranslations & Shopify_Navigable & Shopify_Node {
  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!
  """A globally-unique identifier."""
  id: ID!
  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Shopify_PublishedTranslation!]!
}

"""
Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant
to be used as a type of magazine or newsletter for the shop, with content that changes over time.
"""
type Shopify_OnlineStoreBlog implements Shopify_HasPublishedTranslations & Shopify_Node {
  """A globally-unique identifier."""
  id: ID!
  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Shopify_PublishedTranslation!]!
}

"""A custom page on the Online Store."""
type Shopify_OnlineStorePage implements Shopify_HasPublishedTranslations & Shopify_Navigable & Shopify_Node {
  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!
  """A globally-unique identifier."""
  id: ID!
  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Shopify_PublishedTranslation!]!
}

"""Online Store preview URL of the object."""
interface Shopify_OnlineStorePreviewable {
  """The online store preview URL."""
  onlineStorePreviewUrl: URL
}

"""
An order is a customer's request to purchase one or more products from a shop.
You can retrieve and update orders using the `Order` object.
Learn more about
[editing an existing order with the GraphQL Admin
API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).

Only the last 60 days' worth of orders from a store are accessible from the
`Order` object by default. If you want to access older orders,
then you need to [request access to all
orders](https://shopify.dev/api/usage/access-scopes#orders-permissions). If your app is granted
access, then you can add the `read_all_orders` scope to your app along with `read_orders` or `write_orders`.
[Private apps](https://shopify.dev/apps/auth/basic-http) are not affected by
this change and are automatically granted the scope.

**Caution:** Only use this data if it's required for your app's functionality.
Shopify will restrict [access to
scopes](https://shopify.dev/api/usage/access-scopes) for apps that don't have a
legitimate use for the associated data.
"""
type Shopify_Order implements Shopify_CommentEventSubject & Shopify_HasEvents & Shopify_HasLocalizationExtensions & Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_LegacyInteroperability & Shopify_Node {
  """A list of sales agreements associated with the order."""
  agreements(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """
    Supported filter parameters:
     - `happened_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_SalesAgreementConnection!
  """A list of messages that appear on the order page in the Shopify admin."""
  alerts: [Shopify_ResourceAlert!]!
  """The application that created the order."""
  app: Shopify_OrderApp
  """The billing address of the customer."""
  billingAddress: Shopify_MailingAddress
  """Whether the billing address matches the shipping address."""
  billingAddressMatchesShippingAddress: Boolean!
  """Whether the order can be manually marked as paid."""
  canMarkAsPaid: Boolean!
  """Whether a customer email exists for the order."""
  canNotifyCustomer: Boolean!
  """
  The reason provided when the order was canceled.
  Returns `null` if the order wasn't canceled.
  """
  cancelReason: Shopify_OrderCancelReason
  """
  The date and time when the order was canceled.
  Returns `null` if the order wasn't canceled.
  """
  cancelledAt: DateTime
  """Whether payment for the order can be captured."""
  capturable: Boolean!
  """
  The total order-level discount amount, before returns, in shop currency.
  """
  cartDiscountAmount: Shopify_Money @deprecated(reason: "Use `cartDiscountAmountSet` instead.")
  """
  The total order-level discount amount, before returns, in shop and presentment currencies.
  """
  cartDiscountAmountSet: Shopify_MoneyBag
  """The channel that created the order."""
  channel: Shopify_Channel @deprecated(reason: "Use `publication` instead.")
  """Details about the channel that created the order."""
  channelInformation: Shopify_ChannelInformation
  """The IP address of the API client that created the order."""
  clientIp: String
  """Whether the order is closed."""
  closed: Boolean!
  """
  The date and time when the order was closed.
  Returns `null` if the order is not closed.
  """
  closedAt: DateTime
  """Whether inventory has been reserved for the order."""
  confirmed: Boolean!
  """Date and time when the order was created in Shopify."""
  createdAt: DateTime!
  """The shop currency when the order was placed."""
  currencyCode: Shopify_CurrencyCode!
  """
  The current order-level discount amount after all order updates, in shop and presentment currencies.
  """
  currentCartDiscountAmountSet: Shopify_MoneyBag!
  """
  The sum of the quantities for all line items that contribute to the order's current subtotal price.
  """
  currentSubtotalLineItemsQuantity: Int!
  """
  The sum of the prices for all line items after discounts and returns, in shop and presentment currencies.
  If `taxesIncluded` is `true`, then the subtotal also includes tax.
  """
  currentSubtotalPriceSet: Shopify_MoneyBag!
  """
  A list of all tax lines applied to line items on the order, after returns.
  Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
  """
  currentTaxLines: [Shopify_TaxLine!]!
  """
  The total amount discounted on the order after returns, in shop and presentment currencies.
  This includes both order and line level discounts.
  """
  currentTotalDiscountsSet: Shopify_MoneyBag!
  """
  The total amount of duties after returns, in shop and presentment currencies.
  Returns `null` if duties aren't applicable.
  """
  currentTotalDutiesSet: Shopify_MoneyBag
  """
  The total price of the order, after returns, in shop and presentment currencies.
  This includes taxes and discounts.
  """
  currentTotalPriceSet: Shopify_MoneyBag!
  """
  The sum of the prices of all tax lines applied to line items on the order,
  after returns, in shop and presentment currencies.
  """
  currentTotalTaxSet: Shopify_MoneyBag!
  """The total weight of the order after returns, in grams."""
  currentTotalWeight: Shopify_UnsignedInt64!
  """A list of the custom attributes added to the order."""
  customAttributes: [Shopify_Attribute!]!
  """The customer that placed the order."""
  customer: Shopify_Customer
  """Whether the customer agreed to receive marketing materials."""
  customerAcceptsMarketing: Boolean!
  """
  The customer's visits and interactions with the online store before placing the order.
  """
  customerJourney: Shopify_CustomerJourney @deprecated(reason: "Use `customerJourneySummary` instead.")
  """
  The customer's visits and interactions with the online store before placing the order.
  """
  customerJourneySummary: Shopify_CustomerJourneySummary
  """
  A two-letter or three-letter language code, optionally followed by a region modifier.
  """
  customerLocale: String
  """
  A list of discounts that are applied to the order, not including order edits and refunds.
  """
  discountApplications(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_DiscountApplicationConnection!
  """The discount code used for the order."""
  discountCode: String
  """The discount codes used for the order."""
  discountCodes: [String!]!
  """
  The primary address of the customer.
  Returns `null` if neither the shipping address nor the billing address was provided.
  """
  displayAddress: Shopify_MailingAddress
  """
  The financial status of the order that can be shown to the merchant.
  This field does not capture all the details of an order's financial state. It
  should only be used for display summary purposes.
  """
  displayFinancialStatus: Shopify_OrderDisplayFinancialStatus
  """
  The fulfillment status for the order that can be shown to the merchant.
  This field does not capture all the details of an order's fulfillment state.
  It should only be used for display summary purposes.
  For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
  """
  displayFulfillmentStatus: Shopify_OrderDisplayFulfillmentStatus!
  """A list of the disputes associated with the order."""
  disputes: [Shopify_OrderDisputeSummary!]!
  """Whether the order has had any edits applied."""
  edited: Boolean!
  """The email address associated with the customer."""
  email: String
  """
  Whether taxes on the order are estimated.
  This field returns `false` when taxes on the order are finalized and aren't subject to any changes.
  """
  estimatedTaxes: Boolean!
  """A list of events associated with the order."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_EventSortKeys = ID
    """
    Supported filter parameters:
     - `comments`
     - `created_at`
     - `subject_type`
     - `verb`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_EventConnection!
  """
  Whether there are line items that can be fulfilled.
  This field returns `false` when the order has no fulfillable line items.
  For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
  """
  fulfillable: Boolean!
  """A list of fulfillment orders for the order."""
  fulfillmentOrders(
    """
    Whether fulfillment orders that are hidden from the merchant are included.
    For example, fulfillment orders that were closed after being combined or moved are hidden.
    """
    displayable: Boolean = false
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """
    Supported filter parameters:
     - `assigned_location_id`
     - `status`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_FulfillmentOrderConnection!
  """List of shipments for the order."""
  fulfillments(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_Fulfillment!]!
  """Whether the order has been paid in full."""
  fullyPaid: Boolean!
  """Whether the merchant added a timeline comment to the order."""
  hasTimelineComment: Boolean!
  """A globally-unique identifier."""
  id: ID!
  """
  The URL of the first page of the online store that the customer visited before they submitted the order.
  """
  landingPageDisplayText: String @deprecated(reason: "Use `customerJourneySummary.lastVisit.landingPageHtml` instead")
  """
  The first page of the online store that the customer visited before they submitted the order.
  """
  landingPageUrl: URL @deprecated(reason: "Use `customerJourneySummary.lastVisit.landingPage` instead")
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: Shopify_UnsignedInt64!
  """A list of the order's line items."""
  lineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_LineItemConnection!
  """A list of the order's line items."""
  lineItemsMutable(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_LineItemMutableConnection! @deprecated(reason: "Use `lineItems` instead.")
  """List of localization extensions for the resource."""
  localizationExtensions(
    """The country codes of the extensions."""
    countryCodes: [CountryCode!]
    """The purpose of the extensions."""
    purposes: [Shopify_LocalizationExtensionPurpose!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_LocalizationExtensionConnection!
  """
  The fulfillment location that was assigned when the order was created.
  Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder) object for up-to-date fulfillment location information.
  """
  location: String @deprecated(reason: "Use `physicalLocation` instead.")
  """
  Whether the order can be edited by the merchant. For example, canceled orders can’t be edited.
  """
  merchantEditable: Boolean!
  """
  A list of reasons why the order can't be edited. For example, "Canceled orders can’t be edited".
  """
  merchantEditableErrors: [String!]!
  """The application acting as the Merchant of Record for the order."""
  merchantOfRecordApp: Shopify_OrderApp
  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String
    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield
  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String
    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!
  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String
    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!
  """
  The unique identifier for the order that appears on the order page in the Shopify admin and the order status page.
  For example, "#1001", "EN1001", or "1001-A".
  This value isn't unique across multiple stores.
  """
  name: String!
  """
  The net payment for the order, based on the total amount received minus the total amount refunded, in shop currency.
  """
  netPayment: Shopify_Money! @deprecated(reason: "Use `netPaymentSet` instead.")
  """
  The net payment for the order, based on the total amount received minus the
  total amount refunded, in shop and presentment currencies.
  """
  netPaymentSet: Shopify_MoneyBag!
  """
  A list of line items that can't be fulfilled.
  For example, tips and fully refunded line items can't be fulfilled.
  For a more granular view of the fulfillment status, refer to the [FulfillmentOrder](https://shopify.dev/api/admin-graphql/latest/objects/FulfillmentOrder) object.
  """
  nonFulfillableLineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_LineItemConnection!
  """The contents of the note associated with the order."""
  note: String
  """
  The total amount of duties before returns, in shop and presentment currencies.
  Returns `null` if duties aren't applicable.
  """
  originalTotalDutiesSet: Shopify_MoneyBag
  """
  The total price of the order at the time of order creation, in shop and presentment currencies.
  """
  originalTotalPriceSet: Shopify_MoneyBag!
  """The payment collection details for the order."""
  paymentCollectionDetails: Shopify_OrderPaymentCollectionDetails!
  """
  A list of the names of all payment gateways used for the order.
  For example, "Shopify Payments" and "Cash on Delivery (COD)".
  """
  paymentGatewayNames: [String!]!
  """The payment terms associated with the order."""
  paymentTerms: Shopify_PaymentTerms
  """The phone number associated with the customer."""
  phone: String
  """
  The fulfillment location that was assigned when the order was created.
  Use the [`FulfillmentOrder`](https://shopify.dev/api/admin-graphql/latest/objects/fulfillmentorder) object for up to date fulfillment location information.
  """
  physicalLocation: Shopify_Location
  """The payment `CurrencyCode` of the customer for the order."""
  presentmentCurrencyCode: Shopify_CurrencyCode!
  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!
    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield
  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
  """
  The date and time when the order was processed.
  This date and time might not match the date and time when the order was created.
  """
  processedAt: DateTime!
  """The publication that the order was created from."""
  publication: Shopify_Publication
  """The purchasing entity for the order."""
  purchasingEntity: Shopify_PurchasingEntity
  """
  The marketing referral code from the link that the customer clicked to visit the store.
  Supports the following URL attributes: "ref", "source", or "r".
  For example, if the URL is `{shop}.myshopify.com/products/slide?ref=j2tj1tn2`, then this value is `j2tj1tn2`.
  """
  referralCode: String @deprecated(reason: "Use `customerJourneySummary.lastVisit.referralCode` instead")
  """
  A web domain or short description of the source that sent the customer to your
  online store. For example, "shopify.com" or "email".
  """
  referrerDisplayText: String @deprecated(reason: "Use `customerJourneySummary.lastVisit.referralInfoHtml` instead")
  """
  The URL of the webpage where the customer clicked a link that sent them to your online store.
  """
  referrerUrl: URL @deprecated(reason: "Use `customerJourneySummary.lastVisit.referrerUrl` instead")
  """
  The difference between the suggested and actual refund amount of all refunds
  that have been applied to the order. A positive value indicates a difference
  in the merchant's favor, and a negative value indicates a difference in the
  customer's favor.
  """
  refundDiscrepancySet: Shopify_MoneyBag!
  """Whether the order can be refunded."""
  refundable: Boolean!
  """A list of refunds that have been applied to the order."""
  refunds(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_Refund!]!
  """
  The URL of the source that the order originated from, if found in the domain registry.
  """
  registeredSourceUrl: URL
  """
  Whether the order has shipping lines or at least one line item on the order that requires shipping.
  """
  requiresShipping: Boolean!
  """Whether any line item on the order can be restocked."""
  restockable: Boolean!
  """A list of returns for the order."""
  returns(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """
    Supported filter parameters:
     - `status`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_ReturnConnection!
  """The fraud risk level of the order."""
  riskLevel: Shopify_OrderRiskLevel!
  """A list of risks associated with the order."""
  risks(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_OrderRisk!]!
  """The mailing address of the customer."""
  shippingAddress: Shopify_MailingAddress
  """A summary of all shipping costs on the order."""
  shippingLine: Shopify_ShippingLine
  """A list of the order's shipping lines."""
  shippingLines(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ShippingLineConnection!
  """
  A unique POS or third party order identifier.
  For example, "1234-12-1000" or "111-98567-54". The `receipt_number` field is derived from this value for POS orders.
  """
  sourceIdentifier: String
  """
  The sum of the quantities for all line items that contribute to the order's subtotal price.
  """
  subtotalLineItemsQuantity: Int!
  """
  The sum of the prices for all line items after discounts and before returns, in shop currency.
  If `taxesIncluded` is `true`, then the subtotal also includes tax.
  """
  subtotalPrice: Shopify_Money @deprecated(reason: "Use `subtotalPriceSet` instead.")
  """
  The sum of the prices for all line items after discounts and before returns, in shop and presentment currencies.
  If `taxesIncluded` is `true`, then the subtotal also includes tax.
  """
  subtotalPriceSet: Shopify_MoneyBag
  """A suggested refund for the order."""
  suggestedRefund(
    """
    The amount to refund for shipping. Overrides the `refundShipping` argument.
    Use the `shippingAmountV2` argument for multi-currency orders.
    """
    shippingAmount: Shopify_Money
    """Whether to refund the full shipping amount."""
    refundShipping: Boolean
    """The line items from the order to include in the refund."""
    refundLineItems: [Shopify_RefundLineItemInput!]
    """The duties from the order to include in the refund."""
    refundDuties: [Shopify_RefundDutyInput!]
    """
    Whether the suggested refund should be created from all refundable line items on the order.
    If `true`, the `refundLineItems` argument will be ignored.
    """
    suggestFullRefund: Boolean = false
  ): Shopify_SuggestedRefund
  """
  A comma separated list of tags associated with the order. Updating `tags` overwrites
  any existing tags that were previously added to the order. To add new tags without overwriting
  existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
  mutation.
  """
  tags: [String!]!
  """
  A list of all tax lines applied to line items on the order, before returns.
  Tax line prices represent the total price for all tax lines with the same `rate` and `title`.
  """
  taxLines: [Shopify_TaxLine!]!
  """Whether taxes are included in the subtotal price of the order."""
  taxesIncluded: Boolean!
  """
  Whether the order is a test.
  Test orders are made using the Shopify Bogus Gateway or a payment provider with test mode enabled.
  A test order cannot be converted into a real order and vice versa.
  """
  test: Boolean!
  """
  The authorized amount that is uncaptured or undercaptured, in shop currency.
  This amount isn't adjusted for returns.
  """
  totalCapturable: Shopify_Money! @deprecated(reason: "Use `totalCapturableSet` instead.")
  """
  The authorized amount that is uncaptured or undercaptured, in shop and presentment currencies.
  This amount isn't adjusted for returns.
  """
  totalCapturableSet: Shopify_MoneyBag!
  """
  The total amount discounted on the order before returns, in shop currency.
  This includes both order and line level discounts.
  """
  totalDiscounts: Shopify_Money @deprecated(reason: "Use `totalDiscountsSet` instead.")
  """
  The total amount discounted on the order before returns, in shop and presentment currencies.
  This includes both order and line level discounts.
  """
  totalDiscountsSet: Shopify_MoneyBag
  """
  The total amount not yet transacted for the order, in shop and presentment currencies.
  A positive value indicates a difference in the merchant's favor (payment from
  customer to merchant) and a negative value indicates a difference in the
  customer's favor (refund from merchant to customer).
  """
  totalOutstandingSet: Shopify_MoneyBag!
  """
  The total price of the order, before returns, in shop currency.
  This includes taxes and discounts.
  """
  totalPrice: Shopify_Money! @deprecated(reason: "Use `totalPriceSet` instead.")
  """
  The total price of the order, before returns, in shop and presentment currencies.
  This includes taxes and discounts.
  """
  totalPriceSet: Shopify_MoneyBag!
  """
  The total amount received from the customer before returns, in shop currency.
  """
  totalReceived: Shopify_Money! @deprecated(reason: "Use `totalReceivedSet` instead.")
  """
  The total amount received from the customer before returns, in shop and presentment currencies.
  """
  totalReceivedSet: Shopify_MoneyBag!
  """The total amount that was refunded, in shop currency."""
  totalRefunded: Shopify_Money! @deprecated(reason: "Use `totalRefundedSet` instead.")
  """
  The total amount that was refunded, in shop and presentment currencies.
  """
  totalRefundedSet: Shopify_MoneyBag!
  """
  The total amount of shipping that was refunded, in shop and presentment currencies.
  """
  totalRefundedShippingSet: Shopify_MoneyBag!
  """
  The total shipping amount before discounts and returns, in shop currency.
  """
  totalShippingPrice: Shopify_Money! @deprecated(reason: "Use `totalShippingPriceSet` instead.")
  """
  The total shipping amount before discounts and returns, in shop and presentment currencies.
  """
  totalShippingPriceSet: Shopify_MoneyBag!
  """The total tax amount before returns, in shop currency."""
  totalTax: Shopify_Money @deprecated(reason: "Use `totalTaxSet` instead.")
  """
  The total tax amount before returns, in shop and presentment currencies.
  """
  totalTaxSet: Shopify_MoneyBag
  """The sum of all tip amounts for the order, in shop currency."""
  totalTipReceived: Shopify_MoneyV2! @deprecated(reason: "Use `totalTipReceivedSet` instead.")
  """
  The sum of all tip amounts for the order, in shop and presentment currencies.
  """
  totalTipReceivedSet: Shopify_MoneyBag!
  """The total weight of the order before returns, in grams."""
  totalWeight: Shopify_UnsignedInt64
  """A list of transactions associated with the order."""
  transactions(
    """Truncate the array result to this size."""
    first: Int
    """Filter transactions by whether they are capturable."""
    capturable: Boolean
    """
    Filter transactions by whether they can be resolved manually.
    For example, fully captured or voided transactions aren't manually resolvable.
    """
    manuallyResolvable: Boolean
  ): [Shopify_OrderTransaction!]!
  """Whether no payments have been made for the order."""
  unpaid: Boolean!
  """The date and time when the order was modified last."""
  updatedAt: DateTime!
}

"""
The possible order action types for a
[sales agreement](https://shopify.dev/api/admin-graphql/latest/interfaces/salesagreement).
"""
enum Shopify_OrderActionType {
  """An order with a purchase or charge."""
  ORDER
  """An edit to the order."""
  ORDER_EDIT
  """A refund on the order."""
  REFUND
  """
  An unknown agreement action. Represents new actions that may be added in future versions.
  """
  UNKNOWN
}

"""An agreement associated with an order placement."""
type Shopify_OrderAgreement implements Shopify_SalesAgreement {
  """The application that created the agreement."""
  app: Shopify_App
  """The date and time at which the agreement occured."""
  happenedAt: DateTime!
  """The unique identifier for the agreement."""
  id: ID!
  """The order associated with the agreement."""
  order: Shopify_Order!
  """The reason the agremeent was created."""
  reason: Shopify_OrderActionType!
  """The sales associated with the agreement."""
  sales(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SaleConnection!
  """The staff member associated with the agreement."""
  user: Shopify_StaffMember
}

"""The [application](https://shopify.dev/apps) that created the order."""
type Shopify_OrderApp {
  """The application icon."""
  icon: Shopify_Image!
  """The application ID."""
  id: ID!
  """The name of the application."""
  name: String!
}

"""
Represents the reason that the order is being canceled. Valid values are: customer, fraud, inventory, declined, other.
"""
enum Shopify_OrderCancelReason {
  """The customer wanted to cancel the order."""
  CUSTOMER
  """Payment was declined."""
  DECLINED
  """The order was fraudulent."""
  FRAUD
  """There was insufficient inventory."""
  INVENTORY
  """The order was canceled for an unlisted reason."""
  OTHER
}

"""
Specifies the authorized transaction to capture and the total amount to capture from it.
"""
input Shopify_OrderCaptureInput {
  """The ID of the order to capture."""
  id: ID!
  """The ID of the authorized transaction to capture."""
  parentTransactionId: ID!
  """
  The amount to capture. The capture amount can't be greater than the amount of the authorized transaction.
  """
  amount: Shopify_Money!
  """
  The currency (in ISO format) that is used to capture the order. This must be
  the presentment currency (the currency used by the customer) and is a required
  field for orders where the currency and presentment currency differ.
  """
  currency: Shopify_CurrencyCode
}

"""Return type for `orderCapture` mutation."""
type Shopify_OrderCapturePayload {
  """The created capture transaction."""
  transaction: Shopify_OrderTransaction
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Specifies an open order to close."""
input Shopify_OrderCloseInput {
  """The ID of the order to close."""
  id: ID!
}

"""Return type for `orderClose` mutation."""
type Shopify_OrderClosePayload {
  """The closed order."""
  order: Shopify_Order
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""An auto-generated type for paginating through multiple Orders."""
type Shopify_OrderConnection {
  """A list of edges."""
  edges: [Shopify_OrderEdge!]!
  """A list of the nodes contained in OrderEdge."""
  nodes: [Shopify_Order!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `orderCreateMandatePayment` mutation."""
type Shopify_OrderCreateMandatePaymentPayload {
  """The async job used for charging the payment."""
  job: Shopify_Job
  """The Unique Identifier for the created payment."""
  paymentReferenceId: String
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_OrderCreateMandatePaymentUserError!]!
}

"""
An error that occurs during the execution of `OrderCreateMandatePayment`.
"""
type Shopify_OrderCreateMandatePaymentUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_OrderCreateMandatePaymentUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `OrderCreateMandatePaymentUserError`.
"""
enum Shopify_OrderCreateMandatePaymentUserErrorCode {
  """Errors for mandate payment on order."""
  ORDER_MANDATE_PAYMENT_ERROR_CODE
}

"""Represents the order's current financial status."""
enum Shopify_OrderDisplayFinancialStatus {
  """Displayed as **Pending**."""
  PENDING
  """Displayed as **Authorized**."""
  AUTHORIZED
  """Displayed as **Partially paid**."""
  PARTIALLY_PAID
  """Displayed as **Partially refunded**."""
  PARTIALLY_REFUNDED
  """Displayed as **Voided**."""
  VOIDED
  """Displayed as **Paid**."""
  PAID
  """Displayed as **Refunded**."""
  REFUNDED
  """Displayed as **Expired**."""
  EXPIRED
}

"""
Represents the order's aggregated fulfillment status for display purposes.
"""
enum Shopify_OrderDisplayFulfillmentStatus {
  """
  Displayed as **Unfulfilled**. None of the items in the order have been fulfilled.
  """
  UNFULFILLED
  """
  Displayed as **Partially fulfilled**. Some of the items in the order have been fulfilled.
  """
  PARTIALLY_FULFILLED
  """
  Displayed as **Fulfilled**. All the items in the order have been fulfilled.
  """
  FULFILLED
  """
  Displayed as **Restocked**. All the items in the order have been restocked. Replaced by the "UNFULFILLED" status.
  """
  RESTOCKED
  """
  Displayed as **Pending fulfillment**. A request for fulfillment of some items
  awaits a response from the fulfillment service. Replaced by the "IN_PROGRESS" status.
  """
  PENDING_FULFILLMENT
  """
  Displayed as **Open**. None of the items in the order have been fulfilled. Replaced by "UNFULFILLED" status.
  """
  OPEN
  """
  Displayed as **In progress**. Some of the items in the order have been
  fulfilled, or a request for fulfillment has been sent to the fulfillment service.
  """
  IN_PROGRESS
  """
  Displayed as **On hold**. All of the unfulfilled items in this order are on hold.
  """
  ON_HOLD
  """
  Displayed as **Scheduled**. All of the unfulfilled items in this order are scheduled for fulfillment at later time.
  """
  SCHEDULED
}

"""A summary of the important details for a dispute on an order."""
type Shopify_OrderDisputeSummary implements Shopify_Node {
  """A globally-unique identifier."""
  id: ID!
  """The type that the dispute was initiated as."""
  initiatedAs: Shopify_DisputeType!
  """The current status of the dispute."""
  status: Shopify_DisputeStatus!
}

"""
An auto-generated type which holds one Order and a cursor during pagination.
"""
type Shopify_OrderEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of OrderEdge."""
  node: Shopify_Order!
}

"""Return type for `orderEditAddCustomItem` mutation."""
type Shopify_OrderEditAddCustomItemPayload {
  """
  The custom line item that will be added to the order based on the current edits.
  """
  calculatedLineItem: Shopify_CalculatedLineItem
  """An order with the edits applied but not saved."""
  calculatedOrder: Shopify_CalculatedOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `orderEditAddLineItemDiscount` mutation."""
type Shopify_OrderEditAddLineItemDiscountPayload {
  """The discount applied to a line item during this order edit."""
  addedDiscountStagedChange: Shopify_OrderStagedChangeAddLineItemDiscount
  """The line item with the edits applied but not saved."""
  calculatedLineItem: Shopify_CalculatedLineItem
  """An order with the edits applied but not saved."""
  calculatedOrder: Shopify_CalculatedOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `orderEditAddVariant` mutation."""
type Shopify_OrderEditAddVariantPayload {
  """
  The [calculated line item](https://shopify.dev/api/admin-graphql/latest/objects/calculatedlineitem)
  that's added during this order edit.
  """
  calculatedLineItem: Shopify_CalculatedLineItem
  """
  The [calculated order](https://shopify.dev/api/admin-graphql/latest/objects/calculatedorder)
  with the edits applied but not saved.
  """
  calculatedOrder: Shopify_CalculatedOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""An agreement associated with an edit to the order."""
type Shopify_OrderEditAgreement implements Shopify_SalesAgreement {
  """The application that created the agreement."""
  app: Shopify_App
  """The date and time at which the agreement occured."""
  happenedAt: DateTime!
  """The unique identifier for the agreement."""
  id: ID!
  """The reason the agremeent was created."""
  reason: Shopify_OrderActionType!
  """The sales associated with the agreement."""
  sales(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SaleConnection!
  """The staff member associated with the agreement."""
  user: Shopify_StaffMember
}

"""The input fields used to add a discount during an order edit."""
input Shopify_OrderEditAppliedDiscountInput {
  """The description of the discount."""
  description: String
  """The value of the discount as a fixed amount."""
  fixedValue: Shopify_MoneyInput
  """The value of the discount as a percentage."""
  percentValue: Float
}

"""Return type for `orderEditBegin` mutation."""
type Shopify_OrderEditBeginPayload {
  """The order that will be edited."""
  calculatedOrder: Shopify_CalculatedOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `orderEditCommit` mutation."""
type Shopify_OrderEditCommitPayload {
  """The order with changes applied."""
  order: Shopify_Order
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `orderEditRemoveLineItemDiscount` mutation."""
type Shopify_OrderEditRemoveLineItemDiscountPayload {
  """The calculated line item after removal of the discount."""
  calculatedLineItem: Shopify_CalculatedLineItem
  """An order with the edits applied but not saved."""
  calculatedOrder: Shopify_CalculatedOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `orderEditSetQuantity` mutation."""
type Shopify_OrderEditSetQuantityPayload {
  """The calculated line item with the edits applied but not saved."""
  calculatedLineItem: Shopify_CalculatedLineItem
  """The calculated order with the edits applied but not saved."""
  calculatedOrder: Shopify_CalculatedOrder
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
Specifies the information to be updated on an order when using the orderUpdate mutation.
"""
input Shopify_OrderInput {
  """The ID of the order to update."""
  id: ID!
  """
  A new customer email address for the order. Overwrites the existing email address.
  """
  email: String
  """
  The new contents for the note associated with the order. Overwrites the existing note.
  """
  note: String
  """A new list of tags for the order. Overwrites the existing tags."""
  tags: [String!]
  """
  The new shipping address for the order. Overwrites the existing shipping address.
  """
  shippingAddress: Shopify_MailingAddressInput
  """
  A new list of custom attributes for the order. Overwrites the existing custom attributes.
  """
  customAttributes: [Shopify_AttributeInput!]
  """
  A list of new metafields to add to the existing metafields for the order.
  """
  metafields: [Shopify_MetafieldInput!]
  """
  A list of new [localization extensions](https://shopify.dev/api/admin-graphql/latest/objects/localizationextension)
  to add to the existing list of localization extensions for the order.
  """
  localizationExtensions: [Shopify_LocalizationExtensionInput!]
}

"""Return type for `orderInvoiceSend` mutation."""
type Shopify_OrderInvoiceSendPayload {
  """The order associated with the invoice email."""
  order: Shopify_Order
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_OrderInvoiceSendUserError!]!
}

"""An error that occurs during the execution of `OrderInvoiceSend`."""
type Shopify_OrderInvoiceSendUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_OrderInvoiceSendUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `OrderInvoiceSendUserError`.
"""
enum Shopify_OrderInvoiceSendUserErrorCode {
  """An error occurred while sending the invoice."""
  ORDER_INVOICE_SEND_UNSUCCESSFUL
}

"""Specifies the order to mark as paid."""
input Shopify_OrderMarkAsPaidInput {
  """The ID of the order to mark as paid."""
  id: ID!
}

"""Return type for `orderMarkAsPaid` mutation."""
type Shopify_OrderMarkAsPaidPayload {
  """The order marked as paid."""
  order: Shopify_Order
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Specifies a closed order to open."""
input Shopify_OrderOpenInput {
  """The ID of the order to open."""
  id: ID!
}

"""Return type for `orderOpen` mutation."""
type Shopify_OrderOpenPayload {
  """The opened order."""
  order: Shopify_Order
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
The payment collection details for an order that requires additional payment following an edit to the order.
"""
type Shopify_OrderPaymentCollectionDetails {
  """The URL to use for collecting an additional payment on the order."""
  additionalPaymentCollectionUrl: URL
  """
  The list of vaulted payment methods for the order with their permissions.
  """
  vaultedPaymentMethods: [Shopify_PaymentMandate!]
}

"""The status of a payment for an order."""
type Shopify_OrderPaymentStatus {
  """
  A message describing an error during the asynchronous processing of a payment.
  """
  errorMessage: String
  """
  The ID of the payment, initially returned by an `orderCreateMandatePayment` or `orderCreatePayment` mutation.
  """
  paymentReferenceId: String!
  """The status of the payment."""
  status: Shopify_OrderPaymentStatusResult!
  """
  A translated message describing an error during the asynchronous processing of a payment.
  """
  translatedErrorMessage: String
}

"""The type of a payment status."""
enum Shopify_OrderPaymentStatusResult {
  """The payment succeeded."""
  SUCCESS
  """The payment is authorized."""
  AUTHORIZED
  """The payment is voided."""
  VOIDED
  """The payment is refunded."""
  REFUNDED
  """The payment is captured."""
  CAPTURED
  """The payment is in purchased status."""
  PURCHASED
  """There was an error initiating the payment."""
  ERROR
  """The payment is still being processed."""
  PROCESSING
  """Redirect required."""
  REDIRECT_REQUIRED
  """Payment can be retried."""
  RETRYABLE
  """Status is unknown."""
  UNKNOWN
}

"""Represents a fraud check on an order."""
type Shopify_OrderRisk {
  """
  Whether the risk level is shown in the Shopify admin. If false, then this
  order risk is ignored when Shopify determines the overall risk level for the order.
  """
  display: Boolean!
  """
  The likelihood that an order is fraudulent, based on this order risk.
  
  The level can be set by Shopify risk analysis or by an app.
  """
  level: Shopify_OrderRiskLevel
  """The risk message that's shown to the merchant in the Shopify admin."""
  message: String
}

"""The likelihood that an order is fraudulent."""
enum Shopify_OrderRiskLevel {
  """There is a low level of risk that this order is fraudulent."""
  LOW
  """There is a medium level of risk that this order is fraudulent."""
  MEDIUM
  """There is a high level of risk that this order is fraudulent."""
  HIGH
}

"""The set of valid sort keys for the Order query."""
enum Shopify_OrderSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `customer_name` value."""
  CUSTOMER_NAME
  """Sort orders by their shipping address country and city."""
  DESTINATION
  """Sort by the `financial_status` value."""
  FINANCIAL_STATUS
  """Sort by the `fulfillment_status` value."""
  FULFILLMENT_STATUS
  """Sort by the `order_number` value."""
  ORDER_NUMBER
  """Sort by the `processed_at` value."""
  PROCESSED_AT
  """Sort by the `total_price` value."""
  TOTAL_PRICE
  """Sort by the `updated_at` value."""
  UPDATED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""A change that has been applied to an order."""
union Shopify_OrderStagedChange = Shopify_OrderStagedChangeAddCustomItem | Shopify_OrderStagedChangeAddLineItemDiscount | Shopify_OrderStagedChangeAddShippingLine | Shopify_OrderStagedChangeAddVariant | Shopify_OrderStagedChangeDecrementItem | Shopify_OrderStagedChangeIncrementItem

"""
A change to the order representing the addition of a
custom line item. For example, you might want to add gift wrapping service
as a custom line item.
"""
type Shopify_OrderStagedChangeAddCustomItem {
  """
  The price of an individual item without any discounts applied. This value cannot be negative.
  """
  originalUnitPrice: Shopify_MoneyV2!
  """
  The quantity of the custom item to add to the order. This value must be greater than zero.
  """
  quantity: Int!
  """The title of the custom item."""
  title: String!
}

"""
The discount applied to an item that was added during the current order edit.
"""
type Shopify_OrderStagedChangeAddLineItemDiscount {
  """The description of the discount."""
  description: String!
  """A globally-unique identifier."""
  id: ID!
  """The pricing value of the discount."""
  value: Shopify_PricingValue!
}

"""
A new [shipping line](https://shopify.dev/api/admin-graphql/latest/objects/shippingline)
added as part of an order edit.
"""
type Shopify_OrderStagedChangeAddShippingLine {
  """The phone number at the shipping address."""
  phone: String
  """The shipping line's title that is shown to the buyer."""
  presentmentTitle: String
  """The price that applies to the shipping line."""
  price: Shopify_MoneyV2!
  """The title of the shipping line."""
  title: String
}

"""
A change to the order representing the addition of an existing product variant.
"""
type Shopify_OrderStagedChangeAddVariant {
  """The quantity of the product variant that was added."""
  quantity: Int!
  """The product variant that was added."""
  variant: Shopify_ProductVariant!
}

"""
An auto-generated type for paginating through multiple OrderStagedChanges.
"""
type Shopify_OrderStagedChangeConnection {
  """A list of edges."""
  edges: [Shopify_OrderStagedChangeEdge!]!
  """A list of the nodes contained in OrderStagedChangeEdge."""
  nodes: [Shopify_OrderStagedChange!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""An removal of items from an existing line item on the order."""
type Shopify_OrderStagedChangeDecrementItem {
  """The number of items removed."""
  delta: Int!
  """The original line item."""
  lineItem: Shopify_LineItem!
  """The intention to restock the removed items."""
  restock: Boolean!
}

"""
An auto-generated type which holds one OrderStagedChange and a cursor during pagination.
"""
type Shopify_OrderStagedChangeEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of OrderStagedChangeEdge."""
  node: Shopify_OrderStagedChange!
}

"""An addition of items to an existing line item on the order."""
type Shopify_OrderStagedChangeIncrementItem {
  """The number of items added."""
  delta: Int!
  """The original line item."""
  lineItem: Shopify_LineItem!
}

"""A payment transaction in the context of an order."""
type Shopify_OrderTransaction implements Shopify_Node {
  """The masked account number associated with the payment method."""
  accountNumber: String
  """The amount of money."""
  amount: Shopify_Money! @deprecated(reason: "Use `amountSet` instead.")
  """
  The amount and currency of the transaction in shop and presentment currencies.
  """
  amountSet: Shopify_MoneyBag!
  """The amount and currency of the transaction."""
  amountV2: Shopify_MoneyV2! @deprecated(reason: "Use `amountSet` instead.")
  """Authorization code associated with the transaction."""
  authorizationCode: String
  """
  The time when the authorization expires. This field is available only to
  stores on a Shopify Plus plan and is populated only for Shopify Payments
  authorizations.
  """
  authorizationExpiresAt: DateTime
  """Date and time when the transaction was created."""
  createdAt: DateTime!
  """A standardized error code, independent of the payment provider."""
  errorCode: Shopify_OrderTransactionErrorCode
  """
  The transaction fees charged on the order transaction. Only present for Shopify Payments transactions.
  """
  fees: [Shopify_TransactionFee!]!
  """
  The human-readable payment gateway name used to process the transaction.
  """
  formattedGateway: String
  """The payment gateway used to process the transaction."""
  gateway: String
  """A globally-unique identifier."""
  id: ID!
  """The kind of transaction."""
  kind: Shopify_OrderTransactionKind!
  """Whether the transaction can be manually captured."""
  manuallyCapturable: Boolean!
  """
  Specifies the available amount to refund on the gateway.
  This value is only available for transactions of type `SuggestedRefund`.
  """
  maximumRefundable: Shopify_Money @deprecated(reason: "Use `maximumRefundableV2` instead.")
  """
  Specifies the available amount with currency to refund on the gateway.
  This value is only available for transactions of type `SuggestedRefund`.
  """
  maximumRefundableV2: Shopify_MoneyV2
  """The associated order."""
  order: Shopify_Order
  """
  The associated parent transaction, for example the authorization of a capture.
  """
  parentTransaction: Shopify_OrderTransaction
  """The payment details for the transaction."""
  paymentDetails: Shopify_PaymentDetails
  """The payment icon to display for the transaction."""
  paymentIcon: Shopify_Image
  """The payment ID associated with the transaction."""
  paymentId: String
  """
  The payment method used for the transaction. This value is `null` if the payment method is unknown.
  """
  paymentMethod: Shopify_PaymentMethods @deprecated(reason: "Use `paymentIcon` instead.")
  """Date and time when the transaction was processed."""
  processedAt: DateTime
  """
  The transaction receipt that the payment gateway attaches to the transaction.
  The value of this field depends on which payment gateway processed the transaction.
  """
  receipt: String @deprecated(reason: "Use `receiptJson` instead.")
  """
  The transaction receipt that the payment gateway attaches to the transaction.
  The value of this field depends on which payment gateway processed the transaction.
  """
  receiptJson: JSON
  """The settlement currency."""
  settlementCurrency: Shopify_CurrencyCode
  """
  The rate used when converting the transaction amount to settlement currency.
  """
  settlementCurrencyRate: Shopify_Decimal
  """
  Contains all Shopify Payments information related to an order transaction.
  This field is available only to stores on a Shopify Plus plan.
  """
  shopifyPaymentsSet: Shopify_ShopifyPaymentsTransactionSet
  """The status of this transaction."""
  status: Shopify_OrderTransactionStatus!
  """Whether the transaction is a test transaction."""
  test: Boolean!
  """
  Specifies the available amount to capture on the gateway.
  Only available when an amount is capturable or manually mark as paid.
  """
  totalUnsettled: Shopify_Money @deprecated(reason: "Use `totalUnsettledSet` instead.")
  """
  Specifies the available amount with currency to capture on the gateway in shop and presentment currencies.
  Only available when an amount is capturable or manually mark as paid.
  """
  totalUnsettledSet: Shopify_MoneyBag
  """
  Specifies the available amount with currency to capture on the gateway.
  Only available when an amount is capturable or manually mark as paid.
  """
  totalUnsettledV2: Shopify_MoneyV2 @deprecated(reason: "Use `totalUnsettledSet` instead.")
  """
  Staff member who was logged into the Shopify POS device when the transaction was processed.
  """
  user: Shopify_StaffMember
}

"""
An auto-generated type for paginating through multiple OrderTransactions.
"""
type Shopify_OrderTransactionConnection {
  """A list of edges."""
  edges: [Shopify_OrderTransactionEdge!]!
  """A list of the nodes contained in OrderTransactionEdge."""
  nodes: [Shopify_OrderTransaction!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one OrderTransaction and a cursor during pagination.
"""
type Shopify_OrderTransactionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of OrderTransactionEdge."""
  node: Shopify_OrderTransaction!
}

"""A standardized error code, independent of the payment provider."""
enum Shopify_OrderTransactionErrorCode {
  """The card number is incorrect."""
  INCORRECT_NUMBER
  """The format of the card number is incorrect."""
  INVALID_NUMBER
  """The format of the expiry date is incorrect."""
  INVALID_EXPIRY_DATE
  """The format of the CVC is incorrect."""
  INVALID_CVC
  """The card is expired."""
  EXPIRED_CARD
  """The CVC does not match the card number."""
  INCORRECT_CVC
  """The ZIP or postal code does not match the card number."""
  INCORRECT_ZIP
  """The address does not match the card number."""
  INCORRECT_ADDRESS
  """The entered PIN is incorrect."""
  INCORRECT_PIN
  """The card was declined."""
  CARD_DECLINED
  """There was an error while processing the payment."""
  PROCESSING_ERROR
  """Call the card issuer."""
  CALL_ISSUER
  """
  The card has been reported as lost or stolen, and the card issuer has
  requested that the merchant keep the card and call the number on the back.
  """
  PICK_UP_CARD
  """There is an error in the gateway or merchant configuration."""
  CONFIG_ERROR
  """A real card was used but the gateway was in test mode."""
  TEST_MODE_LIVE_CARD
  """
  The gateway or merchant configuration doesn't support a feature, such as network tokenization.
  """
  UNSUPPORTED_FEATURE
  """There was an unknown error with processing the payment."""
  GENERIC_ERROR
  """The payment method is not available in the customer's country."""
  INVALID_COUNTRY
  """The amount is either too high or too low for the provider."""
  INVALID_AMOUNT
  """The payment method is momentarily unavailable."""
  PAYMENT_METHOD_UNAVAILABLE
  """The payment method was invalid."""
  AMAZON_PAYMENTS_INVALID_PAYMENT_METHOD
  """The maximum amount has been captured."""
  AMAZON_PAYMENTS_MAX_AMOUNT_CHARGED
  """The maximum amount has been refunded."""
  AMAZON_PAYMENTS_MAX_AMOUNT_REFUNDED
  """The maximum of 10 authorizations has been captured for an order."""
  AMAZON_PAYMENTS_MAX_AUTHORIZATIONS_CAPTURED
  """The maximum of 10 refunds has been processed for an order."""
  AMAZON_PAYMENTS_MAX_REFUNDS_PROCESSED
  """The order was canceled, which canceled all open authorizations."""
  AMAZON_PAYMENTS_ORDER_REFERENCE_CANCELED
  """The order was not confirmed within three hours."""
  AMAZON_PAYMENTS_STALE
}

"""Specifies the information needed to create an order transaction."""
input Shopify_OrderTransactionInput {
  """The amount of money for this transaction."""
  amount: Shopify_Money!
  """The payment gateway to use for this transaction."""
  gateway: String!
  """The kind of transaction."""
  kind: Shopify_OrderTransactionKind!
  """The ID of the order associated with the transaction."""
  orderId: ID!
  """
  The ID of the optional parent transaction, for example the authorization of a capture.
  """
  parentId: ID
}

"""The different kinds of order transactions."""
enum Shopify_OrderTransactionKind {
  """An authorization and capture performed together in a single step."""
  SALE
  """A transfer of the money that was reserved by an authorization."""
  CAPTURE
  """
  An amount reserved against the cardholder's funding source.
  Money does not change hands until the authorization is captured.
  """
  AUTHORIZATION
  """A cancelation of an authorization transaction."""
  VOID
  """
  A partial or full return of captured funds to the cardholder.
  A refund can happen only after a capture is processed.
  """
  REFUND
  """
  The money returned to the customer when they've paid too much during a cash transaction.
  """
  CHANGE
  """An authorization for a payment taken with an EMV credit card reader."""
  EMV_AUTHORIZATION
  """A suggested refund transaction that can be used to create a refund."""
  SUGGESTED_REFUND
}

"""The different states that an `OrderTransaction` can have."""
enum Shopify_OrderTransactionStatus {
  """The transaction succeeded."""
  SUCCESS
  """The transaction failed."""
  FAILURE
  """The transaction is pending."""
  PENDING
  """There was an error while processing the transaction."""
  ERROR
  """Awaiting a response."""
  AWAITING_RESPONSE
  """The transaction status is unknown."""
  UNKNOWN
}

"""Return type for `orderUpdate` mutation."""
type Shopify_OrderUpdatePayload {
  """The updated order."""
  order: Shopify_Order
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
Returns information about pagination in a connection, in accordance with the
[Relay specification](https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo).
For more information, please read our [GraphQL Pagination Usage Guide](https://shopify.dev/api/usage/pagination-graphql).
"""
type Shopify_PageInfo {
  """The cursor corresponding to the last node in edges."""
  endCursor: String
  """Whether there are more pages to fetch following the current page."""
  hasNextPage: Boolean!
  """Whether there are any pages prior to the current page."""
  hasPreviousPage: Boolean!
  """The cursor corresponding to the first node in edges."""
  startCursor: String
}

"""A ShopifyQL parsing error."""
type Shopify_ParseError {
  """An error code for the error."""
  code: Shopify_ParseErrorCode!
  """The description of the parsing error."""
  message: String!
  """The start and end range for the error."""
  range: Shopify_ParseErrorRange
}

"""ShopifyQL parsing errors."""
enum Shopify_ParseErrorCode {
  """Syntax not recognized."""
  SYNTAX_NOT_RECOGNIZED
  """Semantically invalid."""
  SEMANTICALLY_INVALID
  """Table not found."""
  TABLE_NOT_FOUND
  """Column not found."""
  COLUMN_NOT_FOUND
  """Value isn't parsable."""
  VALUE_NOT_PARSABLE
  """Date isn't parsable."""
  DATE_NOT_PARSABLE
  """Datetime value isn't parsable."""
  DATE_TIME_NOT_PARSABLE
  """Date interval not found."""
  DATE_INTERVAL_NOT_FOUND
  """Named date not found."""
  NAMED_DATE_NOT_FOUND
  """Sort field not found."""
  SORT_FIELD_NOT_FOUND
  """Limit is invalid."""
  LIMIT_INVALID
  """The type of visualization is invalid. Acceptable types: bar, line."""
  VISUALIZE_CHART_TYPE_NOT_FOUND
  """Function does not have any valid modifiers."""
  FUNCTION_MODIFIER_NOT_FOUND
  """Function is missing required argument(s)."""
  FUNCTION_ARGUMENTS_NOT_FOUND
  """Function has too many arguments."""
  FUNCTION_EXCESS_ARGUMENTS
  """Keyword `FROM` not found."""
  FROM_NOT_FOUND
  """Query is missing `SHOW` or `VISUALIZE`."""
  PRESENTMENT_NOT_FOUND
  """Use the correct syntax for either `SHOW` or `VISUALIZE`."""
  EXCESS_PRESENTMENTS
  """Function has incompatible types."""
  FUNCTION_INCOMPATIBLE_TYPES
  """Visualize has too many projections."""
  VISUALIZE_EXCESS_PROJECTIONS
  """Unknown error."""
  UNKNOWN
  """Invalid arguments for operator."""
  OPERATOR_INCOMPATIBLE_TYPES
  """Function `VISUALIZE` contains a data type which cannot be plotted."""
  VISUALIZE_INCOMPATIBLE_TYPES
  """Function `VISUALIZE` requires `GROUP BY`."""
  VISUALIZE_GROUP_BY_NOT_FOUND
  """
  Function `VISUALIZE` can only use `GROUP BY` or `GROUP BY` with the `ALL` modifier, not both.
  """
  VISUALIZE_GROUP_BY_MIXED_BACKFILL
  """
  Mixing an aggregate expression and a non-aggregate expression is not allowed.
  """
  MIXED_AGGREGATE_AND_NON_AGGREGATE
  """
  An aggregate function received a nested aggregate argument, which is not allowed.
  """
  FUNCTION_NESTED_AGGREGATE
  """
  Time function is incompatible in a `GROUP BY` clause with the `ALL` modifier.
  """
  TIME_FUNCTION_NOT_FOUND
  """Mixing of `IN` list arguments of different data types is not allowed."""
  LIST_MIXED_ARGUMENT_TYPES
  """
  Fuction `GROUP BY` is limited to one field when that field is using the `ALL` modifier.
  """
  EXCESS_GROUP_BY_ALL
  """
  When using `GROUP BY` with the `ALL` modifier, `SINCE` or `DURING` must be defined.
  """
  GROUP_BY_ALL_DATE_RANGE_NOT_FOUND
  """Mixing of `SINCE` and/or `UNTIL` with `DURING` is not allowed."""
  EXCESS_PERIODS
  """Invalid entry."""
  SYNTAX_INVALID_TOKEN
  """Identifier after `SHOW` is not valid in its current position."""
  SYNTAX_NO_VIABLE_ALTERNATIVE
  """Cannot use a `COMPARE TO` clause without a `DURING` clause."""
  COMPARE_TO_WITHOUT_DURING
  """
  Invalid `COMPARE TO` period specified. Make sure it's not the same as the `DURING` clause.
  """
  COMPARE_TO_INVALID_PERIOD
  """The time period for `COMPARE TO` must be the same length as `DURING`."""
  COMPARE_TO_INCOMPATIBLE_PERIOD
  """Function `GROUP BY` has too many projections."""
  GROUP_BY_EXCESS_PROJECTIONS
  """
  When using `COMPARE TO` with a time-based `GROUP BY`, `ALL` must be used.
  """
  UNBACKFILLED_TIME_GROUP_BY_COMPARISON
  """Comparison queries must only contain aggregated fields."""
  COMPARISON_WITH_NON_AGGREGATE_FIELDS
  """Column must include `GROUP BY` arg1."""
  REQUIRED_GROUP_BY_NOT_FOUND
  """Identifier or function out of place."""
  SYNTAX_INPUT_MISMATCH
  """Identifier or function out of place."""
  SYNTAX_UNWANTED_TOKEN
  """Query is incomplete."""
  SYNTAX_MISSING_TOKEN
  """Visualization type not found."""
  VISUALIZE_TYPE_NOT_FOUND
  """Function not found."""
  FUNCTION_NOT_FOUND
  """Function modifier is invalid."""
  FUNCTION_MODIFIER_INVALID
  """Visualize By or Over keywords not found."""
  VISUALIZE_BY_OR_OVER_NOT_FOUND
  """Visualize contains both `By` and `Over` keywords."""
  VISUALIZE_CONTAINS_BY_AND_OVER
  """Binary expression has incompatible types."""
  BINARY_EXPRESSION_INCOMPATIBLE_TYPES
  """Visualize has too many alpha projections."""
  VISUALIZE_EXCESS_PROJECTIONS_ALPHA
}

"""A range of ShopifyQL parsing errors."""
type Shopify_ParseErrorRange {
  """The ending position of the error."""
  end: Shopify_ErrorPosition!
  """The starting position of the error."""
  start: Shopify_ErrorPosition!
}

"""Payment details related to a transaction."""
union Shopify_PaymentDetails = Shopify_CardPaymentDetails

"""All possible instrument outputs for Payment Mandates."""
union Shopify_PaymentInstrument = Shopify_VaultCreditCard | Shopify_VaultPaypalBillingAgreement

"""
A payment instrument and the permission
the owner of the instrument gives to the merchant to debit it.
"""
type Shopify_PaymentMandate implements Shopify_Node {
  """The unique identifier of a payment mandate."""
  id: ID!
  """The outputs details of the payment instrument."""
  paymentInstrument: Shopify_PaymentInstrument!
}

"""Some of the payment methods used in Shopify."""
enum Shopify_PaymentMethods {
  VISA
  MASTERCARD
  DISCOVER
  AMERICAN_EXPRESS
  DINERS_CLUB
  JCB
  """The payment method for UnionPay payment."""
  UNIONPAY
  """The payment method for Elo payment."""
  ELO
  DANKORT
  MAESTRO
  FORBRUGSFORENINGEN
  PAYPAL
  BOGUS
  BITCOIN
  LITECOIN
  DOGECOIN
  """The payment method for Interac payment."""
  INTERAC
  """The payment method for eftpos_au payment."""
  EFTPOS
}

"""Return type for `paymentReminderSend` mutation."""
type Shopify_PaymentReminderSendPayload {
  """Whether the payment reminder email was successfully sent."""
  success: Boolean
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_PaymentReminderSendUserError!]!
}

"""An error that occurs during the execution of `PaymentReminderSend`."""
type Shopify_PaymentReminderSendUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_PaymentReminderSendUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `PaymentReminderSendUserError`.
"""
enum Shopify_PaymentReminderSendUserErrorCode {
  """An error occurred while sending the payment reminder."""
  PAYMENT_REMINDER_SEND_UNSUCCESSFUL
}

"""
Represents the payment schedule for a single payment defined in the payment terms.
"""
type Shopify_PaymentSchedule implements Shopify_Node {
  """Amount owed for this payment schedule."""
  amount: Shopify_MoneyV2!
  """Date and time when the payment schedule is paid or fulfilled."""
  completedAt: DateTime
  """Date and time when the payment schedule is due."""
  dueAt: DateTime
  """A globally-unique identifier."""
  id: ID!
  """Date and time when the invoice is sent."""
  issuedAt: DateTime
  """The payment terms the payment schedule belongs to."""
  paymentTerms: Shopify_PaymentTerms!
}

"""
An auto-generated type for paginating through multiple PaymentSchedules.
"""
type Shopify_PaymentScheduleConnection {
  """A list of edges."""
  edges: [Shopify_PaymentScheduleEdge!]!
  """A list of the nodes contained in PaymentScheduleEdge."""
  nodes: [Shopify_PaymentSchedule!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one PaymentSchedule and a cursor during pagination.
"""
type Shopify_PaymentScheduleEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of PaymentScheduleEdge."""
  node: Shopify_PaymentSchedule!
}

"""The input fields used to create a payment schedule for payment terms."""
input Shopify_PaymentScheduleInput {
  """
  Specifies the date and time that the payment schedule was issued. This field must be provided for net type payment terms.
  """
  issuedAt: DateTime
  """
  Specifies the date and time when the payment schedule is due. This field must be provided for fixed type payment terms.
  """
  dueAt: DateTime
}

"""Settings related to payments."""
type Shopify_PaymentSettings {
  """List of the digital wallets which the shop supports."""
  supportedDigitalWallets: [Shopify_DigitalWallet!]!
}

"""Represents the payment terms for an order or draft order."""
type Shopify_PaymentTerms implements Shopify_Node {
  """The draft order associated with the payment terms."""
  draftOrder: Shopify_DraftOrder
  """
  Duration of payment terms in days based on the payment terms template used to create the payment terms.
  """
  dueInDays: Int
  """A globally-unique identifier."""
  id: ID!
  """The order associated with the payment terms."""
  order: Shopify_Order
  """Whether the payment terms have overdue payment schedules."""
  overdue: Boolean!
  """List of schedules for the payment terms."""
  paymentSchedules(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PaymentScheduleConnection!
  """
  The name of the payment terms template used to create the payment terms.
  """
  paymentTermsName: String!
  """The payment terms template type used to create the payment terms."""
  paymentTermsType: Shopify_PaymentTermsType!
  """
  The payment terms name, translated into the shop admin's preferred language.
  """
  translatedName: String!
}

"""The input fields used to create a payment terms."""
input Shopify_PaymentTermsCreateInput {
  """
  Specifies the payment terms template ID used to generate payment terms.
  """
  paymentTermsTemplateId: ID!
  """Specifies the payment schedules for the payment terms."""
  paymentSchedules: [Shopify_PaymentScheduleInput!]
}

"""Return type for `paymentTermsCreate` mutation."""
type Shopify_PaymentTermsCreatePayload {
  """The created payment terms."""
  paymentTerms: Shopify_PaymentTerms
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_PaymentTermsCreateUserError!]!
}

"""An error that occurs during the execution of `PaymentTermsCreate`."""
type Shopify_PaymentTermsCreateUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_PaymentTermsCreateUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `PaymentTermsCreateUserError`.
"""
enum Shopify_PaymentTermsCreateUserErrorCode {
  """An error occurred while creating payment terms."""
  PAYMENT_TERMS_CREATION_UNSUCCESSFUL
}

"""The input fields used to delete the payment terms."""
input Shopify_PaymentTermsDeleteInput {
  """The ID of the payment terms being deleted."""
  paymentTermsId: ID!
}

"""Return type for `paymentTermsDelete` mutation."""
type Shopify_PaymentTermsDeletePayload {
  """The deleted payment terms id."""
  deletedId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_PaymentTermsDeleteUserError!]!
}

"""An error that occurs during the execution of `PaymentTermsDelete`."""
type Shopify_PaymentTermsDeleteUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_PaymentTermsDeleteUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `PaymentTermsDeleteUserError`.
"""
enum Shopify_PaymentTermsDeleteUserErrorCode {
  """An error occurred while deleting payment terms."""
  PAYMENT_TERMS_DELETE_UNSUCCESSFUL
}

"""The input fields used to create a payment terms."""
input Shopify_PaymentTermsInput {
  """
  Specifies the payment terms template ID used to generate payment terms.
  """
  paymentTermsTemplateId: ID
  """Specifies the payment schedules for the payment terms."""
  paymentSchedules: [Shopify_PaymentScheduleInput!]
}

"""Represents the payment terms template object."""
type Shopify_PaymentTermsTemplate implements Shopify_Node {
  """The description of the payment terms template."""
  description: String!
  """
  The number of days between the issued date and due date if this is the net type of payment terms.
  """
  dueInDays: Int
  """A globally-unique identifier."""
  id: ID!
  """The name of the payment terms template."""
  name: String!
  """The type of the payment terms template."""
  paymentTermsType: Shopify_PaymentTermsType!
  """The translated payment terms template name."""
  translatedName: String!
}

"""The type of a payment terms or a payment terms template."""
enum Shopify_PaymentTermsType {
  """The payment terms or payment terms template is due on receipt."""
  RECEIPT
  """
  The payment terms or payment terms template is a net type. It's due a number of days after issue.
  """
  NET
  """
  The payment terms or payment terms template is a fixed type. It's due on a specified date.
  """
  FIXED
  """The payment terms or payment terms template is due on fulfillment."""
  FULFILLMENT
  """The type of the payment terms or payment terms template is unknown."""
  UNKNOWN
}

"""The input fields used to update the payment terms."""
input Shopify_PaymentTermsUpdateInput {
  """The ID of the payment terms being updated."""
  paymentTermsId: ID!
  """The attributes used to update the payment terms."""
  paymentTermsAttributes: Shopify_PaymentTermsInput!
}

"""Return type for `paymentTermsUpdate` mutation."""
type Shopify_PaymentTermsUpdatePayload {
  """The updated payment terms."""
  paymentTerms: Shopify_PaymentTerms
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_PaymentTermsUpdateUserError!]!
}

"""An error that occurs during the execution of `PaymentTermsUpdate`."""
type Shopify_PaymentTermsUpdateUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_PaymentTermsUpdateUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `PaymentTermsUpdateUserError`.
"""
enum Shopify_PaymentTermsUpdateUserErrorCode {
  """An error occurred while updating payment terms."""
  PAYMENT_TERMS_UPDATE_UNSUCCESSFUL
}

"""Represents a valid PayPal Express subscriptions gateway status."""
enum Shopify_PaypalExpressSubscriptionsGatewayStatus {
  """The status is enabled."""
  ENABLED
  """The status is disabled."""
  DISABLED
  """The status is pending."""
  PENDING
}

"""A PolarisViz data point structure for ShopifyQL query."""
type Shopify_PolarisVizDataPoint {
  """
  The data key. Typically a category, dimension, or other qualitative data.
  """
  key: String!
  """The data value is numeric and quantitative."""
  value: String
}

"""The data series used for PolarisViz visualization."""
type Shopify_PolarisVizDataSeries {
  """An array of data points."""
  data: [Shopify_PolarisVizDataPoint!]!
  """Whether the series represents comparison data."""
  isComparison: Boolean!
  """The name of the series."""
  name: String!
}

"""A PolarisViz response to a ShopifyQL query."""
type Shopify_PolarisVizResponse implements Shopify_ShopifyqlResponse {
  """The PolarisViz visualization of data."""
  data: [Shopify_PolarisVizDataSeries!]!
  """A list of parse errors, if parsing fails."""
  parseErrors: [Shopify_ParseError!]
  """
  The result in a tabular format with schema and row data.
                  It's always present even if query has a `VISUALIZE` keyword.
  """
  tableData: Shopify_TableData
  """The type of visualization. For example, a line chart."""
  vizType: Shopify_VisualizationType!
}

"""
The input fields used to include the line items of a specified fulfillment order
that should be marked as prepared for pickup by a customer.
"""
input Shopify_PreparedFulfillmentOrderLineItemsInput {
  """The ID of the fulfillment order."""
  fulfillmentOrderId: ID!
}

"""
Represents a price list, including information about related prices and eligibility rules.
You can use price lists to specify either fixed prices or adjusted relative prices that
override initial product variant prices. Price lists are applied to customers
using context rules, which determine price list eligibility.

  For more information on price lists, refer to
  [Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
"""
type Shopify_PriceList implements Shopify_Node {
  """
  A set of facts about the customer, used to determine price list eligibility.
  """
  contextRule: Shopify_PriceListContextRule
  """The currency for fixed prices associated with this price list."""
  currency: Shopify_CurrencyCode!
  """A globally-unique identifier."""
  id: ID!
  """
  The unique name of the price list, used as a human-readable identifier.
  """
  name: String!
  """Relative adjustments to other prices."""
  parent: Shopify_PriceListParent
  """A list of prices associated with the price list."""
  prices(
    """
    The origin of this price, either fixed (defined on the price list)
                   or relative (calculated using an adjustment via a price list parent configuration).
    """
    originType: Shopify_PriceListPriceOriginType
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PriceListPriceConnection!
}

"""
The type and value of a price list adjustment.

For more information on price lists, refer to
[Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
"""
type Shopify_PriceListAdjustment {
  """The type of price adjustment, such as percentage increase or decrease."""
  type: Shopify_PriceListAdjustmentType!
  """
  The value of price adjustment, where positive numbers reduce the prices and negative numbers
  increase them.
  """
  value: Float!
}

"""The input fields to set a price list adjustment."""
input Shopify_PriceListAdjustmentInput {
  """The value of the price adjustment as specified by the `type`."""
  value: Float!
  """The type of price adjustment, such as percentage increase or decrease."""
  type: Shopify_PriceListAdjustmentType!
}

"""Represents a percentage price adjustment type."""
enum Shopify_PriceListAdjustmentType {
  """Percentage decrease type. Prices will have a lower value."""
  PERCENTAGE_DECREASE
  """Percentage increase type. Prices will have a higher value."""
  PERCENTAGE_INCREASE
}

"""An auto-generated type for paginating through multiple PriceLists."""
type Shopify_PriceListConnection {
  """A list of edges."""
  edges: [Shopify_PriceListEdge!]!
  """A list of the nodes contained in PriceListEdge."""
  nodes: [Shopify_PriceList!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
The input field used to filter price lists based on context.
For example, you can specify the country code so that the filtered price lists
only apply to customers visiting from a specific country.
"""
input Shopify_PriceListContext {
  """The code of the country that the price list applies to."""
  country: CountryCode
}

"""
Facts about the customer that was used to determine the price list eligibility.
For example, if the `PriceListContextRule` is for a US market, then the price
list will be eligible to all customers in the US.
For more information on price lists, refer to
[Support different pricing models](https://shopify.dev/apps/internationalization/product-price-lists).
"""
type Shopify_PriceListContextRule {
  """
  A list of two letter country codes that determines price list eligibility.
  """
  countries: [CountryCode!]!
  """The associated market."""
  market: Shopify_Market
}

"""
The input fields to set the context that a price list applies to.
For example, the price list might apply to a specific market.
"""
input Shopify_PriceListContextRuleInput {
  """The market that this price list applies to."""
  marketId: ID
}

"""The input fields to create a price list."""
input Shopify_PriceListCreateInput {
  """
  The unique name of the price list, used as a human-readable identifier.
  """
  name: String!
  """
  Three letter currency code for fixed prices associated with this price list.
  """
  currency: Shopify_CurrencyCode!
  """Relative adjustments to other prices."""
  parent: Shopify_PriceListParentCreateInput!
  """
  A set of facts about the customer used to determine price list eligibility.
  """
  contextRule: Shopify_PriceListContextRuleInput
}

"""Return type for `priceListCreate` mutation."""
type Shopify_PriceListCreatePayload {
  """The newly created price list."""
  priceList: Shopify_PriceList
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_PriceListUserError!]!
}

"""Return type for `priceListDelete` mutation."""
type Shopify_PriceListDeletePayload {
  """The ID of the deleted price list."""
  deletedId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_PriceListUserError!]!
}

"""
An auto-generated type which holds one PriceList and a cursor during pagination.
"""
type Shopify_PriceListEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of PriceListEdge."""
  node: Shopify_PriceList!
}

"""Return type for `priceListFixedPricesAdd` mutation."""
type Shopify_PriceListFixedPricesAddPayload {
  """
  The list of fixed prices that were added to or updated in the price list.
  """
  prices: [Shopify_PriceListPrice!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_PriceListPriceUserError!]!
}

"""Return type for `priceListFixedPricesDelete` mutation."""
type Shopify_PriceListFixedPricesDeletePayload {
  """
  A list of product variant IDs whose fixed prices were removed from the price list.
  """
  deletedFixedPriceVariantIds: [ID!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_PriceListPriceUserError!]!
}

"""
Represents relative adjustments from one price list to other prices.
  You can use a `PriceListParent` to specify an adjusted relative price using a percentage-based
  adjustment. Adjusted prices work in conjunction with exchange rules and rounding.

  [Adjustment types](https://shopify.dev/api/admin-graphql/latest/enums/pricelistadjustmenttype)
  support both percentage increases and decreases.
"""
type Shopify_PriceListParent {
  """A price list adjustment."""
  adjustment: Shopify_PriceListAdjustment!
}

"""The input fields to create a price list adjustment."""
input Shopify_PriceListParentCreateInput {
  """The relative adjustments to other prices."""
  adjustment: Shopify_PriceListAdjustmentInput!
}

"""The input fields used to update a price list's adjustment."""
input Shopify_PriceListParentUpdateInput {
  """The relative adjustments to other prices.."""
  adjustment: Shopify_PriceListAdjustmentInput!
}

"""
Represents information about pricing for a product variant
        as defined on a price list, such as the price, compare at price, and
origin type. You can use a PriceListPrice to specify a fixed price for a
specific product variant.
"""
type Shopify_PriceListPrice {
  """The compare-at price of the product variant on this price list."""
  compareAtPrice: Shopify_MoneyV2
  """
  The origin of a price, either fixed (defined on the price list) or relative
  (calculated using a price list adjustment configuration).
  """
  originType: Shopify_PriceListPriceOriginType!
  """The price of the product variant on this price list."""
  price: Shopify_MoneyV2!
  """The product variant associated with this price."""
  variant: Shopify_ProductVariant!
}

"""
An auto-generated type for paginating through multiple PriceListPrices.
"""
type Shopify_PriceListPriceConnection {
  """A list of edges."""
  edges: [Shopify_PriceListPriceEdge!]!
  """A list of the nodes contained in PriceListPriceEdge."""
  nodes: [Shopify_PriceListPrice!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one PriceListPrice and a cursor during pagination.
"""
type Shopify_PriceListPriceEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of PriceListPriceEdge."""
  node: Shopify_PriceListPrice!
}

"""
Provides the fields and values to use when creating or updating a fixed price list price.
"""
input Shopify_PriceListPriceInput {
  """The product variant ID associated with the price list price."""
  variantId: ID!
  """The price of the product variant on this price list."""
  price: Shopify_MoneyInput!
  """The compare-at price of the product variant on this price list."""
  compareAtPrice: Shopify_MoneyInput
}

"""
Represents the origin of a price, either fixed (defined on the price list) or
relative (calculated using a price list adjustment configuration).
"""
enum Shopify_PriceListPriceOriginType {
  """The price is defined on the price list."""
  FIXED
  """The price is relative to the adjustment type and value."""
  RELATIVE
}

"""An error for a failed price list price operation."""
type Shopify_PriceListPriceUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_PriceListPriceUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `PriceListPriceUserError`.
"""
enum Shopify_PriceListPriceUserErrorCode {
  """The input value is blank."""
  BLANK
  """The price list doesn't exist."""
  PRICE_LIST_NOT_FOUND
  """The specified currency doesn't match the price list's currency."""
  PRICE_LIST_CURRENCY_MISMATCH
  """A fixed price for the specified product variant doesn't exist."""
  VARIANT_NOT_FOUND
  """Only fixed prices can be deleted."""
  PRICE_NOT_FIXED
}

"""The set of valid sort keys for the PriceList query."""
enum Shopify_PriceListSortKeys {
  """Sort by the `name` value."""
  NAME
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""The input fields used to update a price list."""
input Shopify_PriceListUpdateInput {
  """
  The unique name of the price list, used as a human-readable identifier.
  """
  name: String
  """
  The three-letter currency code for fixed prices associated with this price list.
  """
  currency: Shopify_CurrencyCode
  """
  A set of facts about the customer used to determine price list eligibility.
  """
  contextRule: Shopify_PriceListContextRuleInput
  """Relative adjustments to other prices."""
  parent: Shopify_PriceListParentUpdateInput
}

"""Return type for `priceListUpdate` mutation."""
type Shopify_PriceListUpdatePayload {
  """The updated price list."""
  priceList: Shopify_PriceList
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_PriceListUserError!]!
}

"""Error codes for failed contextual pricing operations."""
type Shopify_PriceListUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_PriceListUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""Possible error codes that can be returned by `PriceListUserError`."""
enum Shopify_PriceListUserErrorCode {
  """The input value is already taken."""
  TAKEN
  """The specified price list doesn't exist."""
  PRICE_LIST_NOT_FOUND
  """
  Cannot save the price list with context rule because the limit of context rules per shop was reached.
  """
  CONTEXT_RULE_LIMIT_REACHED @deprecated(reason: "The limit is removed.")
  """A price list context rule cannot have more than one country."""
  CONTEXT_RULE_COUNTRIES_LIMIT
  """A price list’s currency must be of the pricing rule’s country."""
  CURRENCY_COUNTRY_MISMATCH
  """A country in a context rule must use a valid currency."""
  COUNTRY_CURRENCY_MISMATCH
  """A price list’s currency must be the market currency."""
  CURRENCY_MARKET_MISMATCH
  """The context rule's market does not use the price list currency."""
  MARKET_CURRENCY_MISMATCH
  """
  The adjustment value must be a positive value and not be greater than 100% for
  `type` `PERCENTAGE_DECREASE` and not be greater than 1000% for `type`
  `PERCENTAGE_INCREASE`.
  """
  INVALID_ADJUSTMENT_VALUE
  """A price list for this country is already taken."""
  CONTEXT_RULE_COUNTRY_TAKEN
  """Only one context rule option may be specified."""
  CONTEXT_RULE_LIMIT_ONE_OPTION
  """The specified market wasn't found."""
  CONTEXT_RULE_MARKET_NOT_FOUND
  """A price list for this market is already taken."""
  CONTEXT_RULE_MARKET_TAKEN
  """
  The price list currency is not supported by the shop's payment gateway.
  """
  CURRENCY_NOT_SUPPORTED
  """Cannot create price list for a primary market."""
  PRICE_LIST_NOT_ALLOWED_FOR_PRIMARY_MARKET
}

"""
Price rules are a set of conditions, including entitlements and prerequisites,
that must be met in order for a discount code to apply.

We recommend using the types and queries detailed at [Manage existing
discounts](https://shopify.dev/apps/discounts/existing) instead. These will
replace the GraphQL `PriceRule` object and REST Admin `PriceRule` and
`DiscountCode` resources.
"""
type Shopify_PriceRule implements Shopify_CommentEventSubject & Shopify_HasEvents & Shopify_LegacyInteroperability & Shopify_Node {
  """
  The maximum number of times that the price rule can be allocated onto an order.
  """
  allocationLimit: Int
  """
  The method by which the price rule's value is allocated to its entitled items.
  """
  allocationMethod: Shopify_PriceRuleAllocationMethod!
  """The application that created the price rule."""
  app: Shopify_App
  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWith!
  """The date and time when the price rule was created."""
  createdAt: DateTime!
  """The customers that can use this price rule."""
  customerSelection: Shopify_PriceRuleCustomerSelection!
  """The class of the discount for combining purposes."""
  discountClass: Shopify_DiscountClass!
  """List of the price rule's discount codes."""
  discountCodes(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_DiscountCodeSortKeys = ID
    """
    Supported filter parameters:
     - `times_used`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_PriceRuleDiscountCodeConnection!
  """How many discount codes associated with the price rule."""
  discountCodesCount: Int!
  """
  The date and time when the price rule ends. For open-ended price rules, use `null`.
  """
  endsAt: DateTime
  """
  Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
  """
  entitlementToPrerequisiteQuantityRatio: Shopify_PriceRuleEntitlementToPrerequisiteQuantityRatio @deprecated(reason: "Use `prerequisiteToEntitlementQuantityRatio` instead.")
  """The paginated list of events associated with the price rule."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_EventSortKeys = ID
    """
    Supported filter parameters:
     - `comments`
     - `created_at`
     - `subject_type`
     - `verb`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_EventConnection!
  """A list of the price rule's features."""
  features: [Shopify_PriceRuleFeature!]!
  """Indicates whether there are any timeline comments on the price rule."""
  hasTimelineComment: Boolean!
  """A globally-unique identifier."""
  id: ID!
  """The items to which the price rule applies."""
  itemEntitlements: Shopify_PriceRuleItemEntitlements!
  """The items required for the price rule to be applicable."""
  itemPrerequisites: Shopify_PriceRuleLineItemPrerequisites!
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: Shopify_UnsignedInt64!
  """Whether the price rule can be applied only once per customer."""
  oncePerCustomer: Boolean!
  """
  The number of the entitled items must fall within this range for the price rule to be applicable.
  """
  prerequisiteQuantityRange: Shopify_PriceRuleQuantityRange
  """
  The shipping cost must fall within this range for the price rule to be applicable.
  """
  prerequisiteShippingPriceRange: Shopify_PriceRuleMoneyRange
  """
  The sum of the entitled items subtotal prices must fall within this range for the price rule to be applicable.
  """
  prerequisiteSubtotalRange: Shopify_PriceRuleMoneyRange
  """
  Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
  """
  prerequisiteToEntitlementQuantityRatio: Shopify_PriceRulePrerequisiteToEntitlementQuantityRatio
  """URLs that can be used to share the discount."""
  shareableUrls: [Shopify_PriceRuleShareableUrl!]!
  """The shipping lines to which the price rule applies."""
  shippingEntitlements: Shopify_PriceRuleShippingLineEntitlements!
  """The date and time when the price rule starts."""
  startsAt: DateTime!
  """The status of the price rule."""
  status: Shopify_PriceRuleStatus!
  """A detailed summary of the price rule."""
  summary: String
  """
  The type of lines (line_item or shipping_line) to which the price rule applies.
  """
  target: Shopify_PriceRuleTarget!
  """The title of the price rule."""
  title: String!
  """The total sales from orders where the price rule was used."""
  totalSales: Shopify_MoneyV2
  """A list of the price rule's features."""
  traits: [Shopify_PriceRuleTrait!]! @deprecated(reason: "Use `features` instead.")
  """
  The number of times that the price rule has been used. This value is updated
  asynchronously and can be different than the actual usage count.
  """
  usageCount: Int!
  """The maximum number of times that the price rule can be used in total."""
  usageLimit: Int
  """A time period during which a price rule is applicable."""
  validityPeriod: Shopify_PriceRuleValidityPeriod!
  """The value of the price rule."""
  value: Shopify_PriceRuleValue! @deprecated(reason: "Use `valueV2` instead.")
  """The value of the price rule."""
  valueV2: Shopify_PricingValue!
}

"""Return type for `priceRuleActivate` mutation."""
type Shopify_PriceRuleActivatePayload {
  """The activated price rule."""
  priceRule: Shopify_PriceRule
  """The list of errors that occurred from executing the mutation."""
  priceRuleUserErrors: [Shopify_PriceRuleUserError!]!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead.")
}

"""
The method by which the price rule's value is allocated to its entitled items.
"""
enum Shopify_PriceRuleAllocationMethod {
  """The value will be applied to each of the entitled items."""
  EACH
  """The value will be applied once across the entitled items."""
  ACROSS
}

"""An auto-generated type for paginating through multiple PriceRules."""
type Shopify_PriceRuleConnection {
  """A list of edges."""
  edges: [Shopify_PriceRuleEdge!]!
  """A list of the nodes contained in PriceRuleEdge."""
  nodes: [Shopify_PriceRule!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `priceRuleCreate` mutation."""
type Shopify_PriceRuleCreatePayload {
  """The newly created price rule."""
  priceRule: Shopify_PriceRule
  """The newly created discount code."""
  priceRuleDiscountCode: Shopify_PriceRuleDiscountCode
  """The list of errors that occurred from executing the mutation."""
  priceRuleUserErrors: [Shopify_PriceRuleUserError!]!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead.")
}

"""A selection of customers for whom the price rule applies."""
type Shopify_PriceRuleCustomerSelection {
  """List of customers to whom the price rule applies."""
  customers(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_CustomerSortKeys = ID
    """
    Supported filter parameters:
     - `accepts_marketing`
     - `country`
     - `customer_date`
     - `email`
     - `last_abandoned_order_date`
     - `order_date`
     - `orders_count`
     - `phone`
     - `state`
     - `tag`
     - `tag_not`
     - `total_spent`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_CustomerConnection!
  """Whether the price rule applies to all customers."""
  forAllCustomers: Boolean!
  """
  A list of customer segments that contain the customers who can use the price rule.
  """
  segments: [Shopify_Segment!]!
}

"""Specifies the input fields to update a price rule customer selection."""
input Shopify_PriceRuleCustomerSelectionInput {
  """Whether the price rule applies to all customers."""
  forAllCustomers: Boolean = false
  """
  List of customer segments that contain the customers to whom the price rule
  applies. No single customer IDs may be present.
  """
  segmentIds: [ID!]
  """
  List of customers to add to the current list of customers to whom the price rule applies. `savedSearchIds` must be empty.
  """
  customerIdsToAdd: [ID!]
  """
  A list of customers to remove from the current list of customers to whom the price rule applies.
  """
  customerIdsToRemove: [ID!]
}

"""Return type for `priceRuleDeactivate` mutation."""
type Shopify_PriceRuleDeactivatePayload {
  """The deactivated price rule."""
  priceRule: Shopify_PriceRule
  """The list of errors that occurred from executing the mutation."""
  priceRuleUserErrors: [Shopify_PriceRuleUserError!]!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead.")
}

"""Return type for `priceRuleDelete` mutation."""
type Shopify_PriceRuleDeletePayload {
  """The id price of the deleted price rule."""
  deletedPriceRuleId: ID
  """The list of errors that occurred from executing the mutation."""
  priceRuleUserErrors: [Shopify_PriceRuleUserError!]!
  """The shop of the deleted price rule."""
  shop: Shopify_Shop!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead.")
}

"""A discount code of a price rule."""
type Shopify_PriceRuleDiscountCode implements Shopify_Node {
  """The application that created the discount code."""
  app: Shopify_App
  """The code to apply the discount."""
  code: String!
  """A globally-unique identifier."""
  id: ID!
  """
  The number of times that the price rule has been used. This value is updated
  asynchronously and can be different than the actual usage count.
  """
  usageCount: Int!
}

"""
An auto-generated type for paginating through multiple PriceRuleDiscountCodes.
"""
type Shopify_PriceRuleDiscountCodeConnection {
  """A list of edges."""
  edges: [Shopify_PriceRuleDiscountCodeEdge!]!
  """A list of the nodes contained in PriceRuleDiscountCodeEdge."""
  nodes: [Shopify_PriceRuleDiscountCode!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `priceRuleDiscountCodeCreate` mutation."""
type Shopify_PriceRuleDiscountCodeCreatePayload {
  """The updated price rule."""
  priceRule: Shopify_PriceRule
  """The newly created discount code."""
  priceRuleDiscountCode: Shopify_PriceRuleDiscountCode
  """The list of errors that occurred from executing the mutation."""
  priceRuleUserErrors: [Shopify_PriceRuleUserError!]!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead.")
}

"""
An auto-generated type which holds one PriceRuleDiscountCode and a cursor during pagination.
"""
type Shopify_PriceRuleDiscountCodeEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of PriceRuleDiscountCodeEdge."""
  node: Shopify_PriceRuleDiscountCode!
}

"""Specifies the input fields to manipulate a discount code."""
input Shopify_PriceRuleDiscountCodeInput {
  """The code to use the discount."""
  code: String
}

"""Return type for `priceRuleDiscountCodeUpdate` mutation."""
type Shopify_PriceRuleDiscountCodeUpdatePayload {
  """The updated price rule."""
  priceRule: Shopify_PriceRule
  """The updated discount code."""
  priceRuleDiscountCode: Shopify_PriceRuleDiscountCode
  """The list of errors that occurred from executing the mutation."""
  priceRuleUserErrors: [Shopify_PriceRuleUserError!]!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead.")
}

"""
An auto-generated type which holds one PriceRule and a cursor during pagination.
"""
type Shopify_PriceRuleEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of PriceRuleEdge."""
  node: Shopify_PriceRule!
}

"""
Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
"""
type Shopify_PriceRuleEntitlementToPrerequisiteQuantityRatio {
  """The quantity of entitled items in the ratio."""
  entitlementQuantity: Int!
  """The quantity of prerequisite items in the ratio."""
  prerequisiteQuantity: Int!
}

"""
Specifies the quantity of prerequisite items required for the price rule to be
applicable, compared to quantity of entitled items.
"""
input Shopify_PriceRuleEntitlementToPrerequisiteQuantityRatioInput {
  """The quantity of entitled items in the ratio."""
  entitlementQuantity: Int
  """The quantity of prerequisite items in the ratio."""
  prerequisiteQuantity: Int
}

"""Possible error codes that could be returned by a price rule mutation."""
enum Shopify_PriceRuleErrorCode {
  """The input value is blank."""
  BLANK
  """The input value should be equal to the value allowed."""
  EQUAL_TO
  """The input value should be greater than the minimum allowed value."""
  GREATER_THAN
  """
  The input value should be greater than or equal to the minimum value allowed.
  """
  GREATER_THAN_OR_EQUAL_TO
  """The input value is invalid."""
  INVALID
  """The input value should be less than the maximum value allowed."""
  LESS_THAN
  """
  The input value should be less than or equal to the maximum value allowed.
  """
  LESS_THAN_OR_EQUAL_TO
  """The input value is already taken."""
  TAKEN
  """The input value is too long."""
  TOO_LONG
  """The input value is too short."""
  TOO_SHORT
  """Unexpected internal error happened."""
  INTERNAL_ERROR
  """Too many arguments provided."""
  TOO_MANY_ARGUMENTS
  """Missing a required argument."""
  MISSING_ARGUMENT
  """Can't exceed the maximum number."""
  EXCEEDED_MAX
  """The allocation limit can only be set on Buy x, get y (BXGY) discounts."""
  PRICE_RULE_ALLOCATION_LIMIT_ON_NON_BOGO
  """The allocation limit must be a non-zero positive number."""
  PRICE_RULE_ALLOCATION_LIMIT_IS_ZERO
  """The number of discount codes in the shop has reached its limit."""
  PRICE_RULE_EXCEEDED_MAX_DISCOUNT_CODE
  """The number of discounts in the shop has reached its limit."""
  SHOP_EXCEEDED_MAX_PRICE_RULES
  """The discount end date must be after the start date."""
  END_DATE_BEFORE_START_DATE
  """The percentage value must be between 0 and -100."""
  PRICE_RULE_PERCENTAGE_VALUE_OUTSIDE_RANGE
  """
  Only one of the minimum subtotal or minimum quantity condition can be defined.
  """
  PREREQUISITE_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT
  """
  The allocation method must be `ACROSS` for the provided target selection.
  """
  ALLOCATION_METHOD_MUST_BE_ACROSS_FOR_GIVEN_TARGET_SELECTION
  """
  The discount must apply on either one-time purchase or subscription items, or both.
  """
  APPLIES_ON_NOTHING
  """
  The recurring cycle limit must be 1 when a discount doesn't apply on subscription items.
  """
  MULTIPLE_RECURRING_CYCLE_LIMIT_FOR_NON_SUBSCRIPTION_ITEMS
  """Invalid BOGO target selection."""
  BOGO_INVALID_TARGET_SELECTION
  """Invalid BOGO target type."""
  BOGO_INVALID_TARGET_TYPE
  """Invalid BOGO value type."""
  BOGO_INVALID_VALUE_TYPE
  """A duplicate discount code exists."""
  DISCOUNT_CODE_DUPLICATE
  """Can't use both prerequisite customers and saved search."""
  BOTH_CUSTOMER_AND_SAVED_SEARCH_PREREQUISITES_SELECTED
  """A duplicate customer saved search exists."""
  CUSTOMER_SAVED_SEARCH_DUPLICATE
  """The customer saved search exceeded the maximum number."""
  CUSTOMER_SAVED_SEARCH_EXCEEDED_MAX
  """Invalid customer saved search."""
  CUSTOMER_SAVED_SEARCH_INVALID
  """The customer prerequisites exceeded the maximum number."""
  CUSTOMER_PREREQUISITES_EXCEEDED_MAX
  """Invalid customer prerequisites selection."""
  CUSTOMER_PREREQUISITES_INVALID_SELECTION
  """A duplicate customer prerequisite ID exists."""
  CUSTOMER_PREREQUISITE_DUPLICATE
  """Customer prerequisites are missing."""
  CUSTOMER_PREREQUISITES_MISSING
  """Can't have both prerequisite customers and prerequisite segments."""
  BOTH_CUSTOMER_AND_SEGMENT_PREREQUISITES_SELECTED
  """Can't have both saved searches and segments prerequisites."""
  BOTH_SAVED_SEARCH_AND_SEGMENT_PREREQUISITES_SELECTED
  """The customer segment prerequisites exceeded the maximum number."""
  CUSTOMER_SEGMENT_EXCEEDED_MAX
  """The customer segment prerequisite ID is invalid."""
  CUSTOMER_SEGMENT_INVALID
  """A duplicate customer segment prerequisite ID exists."""
  CUSTOMER_SEGMENT_PREREQUISITE_DUPLICATE
  """
  Can't use collections as a prequisite in combination with product variants or products.
  """
  CANNOT_PREREQUISITE_COLLECTION_WITH_PRODUCT_OR_VARIANTS
  """Can't add the same collection twice."""
  ITEM_PREREQUISITES_DUPLICATE_COLLECTION
  """Can't add the same product twice."""
  ITEM_PREREQUISITES_DUPLICATE_PRODUCT
  """Can't add the same variant twice."""
  ITEM_PREREQUISITES_DUPLICATE_VARIANT
  """Can't exceed the maximum number of item prerequisites."""
  ITEM_PREREQUISITES_EXCEEDED_MAX
  """Invalid collection."""
  ITEM_PREREQUISITES_INVALID_COLLECTION
  """Invalid type."""
  ITEM_PREREQUISITES_INVALID_TYPE
  """Invalid product."""
  ITEM_PREREQUISITES_INVALID_PRODUCT
  """Invalid variant."""
  ITEM_PREREQUISITES_INVALID_VARIANT
  """
  Item prerequisites must be empty if the prerequisite quantity ratio isn't defined.
  """
  ITEM_PREREQUISITES_MUST_BE_EMPTY
  """
  Item prerequisites must have at least one item prerequisite if the prerequisite quantity ratio is defined.
  """
  ITEM_PREREQUISITES_MISSING
  """
  Can't entitle collections in combination with product variants or products.
  """
  CANNOT_ENTITLE_COLLECTIONS_WITH_PRODUCTS_OR_VARIANTS
  """Can't add the same collection twice."""
  ITEM_ENTITLEMENTS_DUPLICATE_COLLECTION
  """Can't add the same product twice."""
  ITEM_ENTITLEMENTS_DUPLICATE_PRODUCT
  """Can't add the same collection twice."""
  ITEM_ENTITLEMENTS_DUPLICATE_VARIANT
  """Can't exceed the maximum number of collection entitlements."""
  ITEM_ENTITLEMENTS_EXCEEDED_MAX_COLLECTION
  """Can't exceed the maximum number of product entitlements."""
  ITEM_ENTITLEMENTS_EXCEEDED_MAX_PRODUCT
  """Can't exceed the maximum number of variant entitlements."""
  ITEM_ENTITLEMENTS_EXCEEDED_MAX_VARIANT
  """Invalid entitlement type."""
  ITEM_ENTITLEMENT_INVALID_TYPE
  """Invalid collection."""
  ITEM_ENTITLEMENTS_INVALID_COLLECTION
  """Invalid product."""
  ITEM_ENTITLEMENTS_INVALID_PRODUCT
  """Invalid variant."""
  ITEM_ENTITLEMENTS_INVALID_VARIANT
  """Invalid combination of target type and selection."""
  ITEM_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION
  """Entitlements are missing."""
  ITEM_ENTITLEMENTS_MISSING
  """The variant is already entitled through a product."""
  VARIANT_ALREADY_ENTITLED_THROUGH_PRODUCT
  """A duplicate country code exists."""
  SHIPPING_ENTITLEMENTS_DUPLICATE_COUNTRY
  """Can't exceed the maximum number of entitlements."""
  SHIPPING_ENTITLEMENTS_EXCEEDED_MAX
  """The country is unknown."""
  SHIPPING_ENTITLEMENTS_INVALID_COUNTRY
  """Invalid target type or selection."""
  SHIPPING_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION
  """Missing entitlements."""
  SHIPPING_ENTITLEMENTS_MISSING
  """Unsupported destination type."""
  SHIPPING_ENTITLEMENTS_UNSUPPORTED_DESTINATION_TYPE
  """
  The target type is invalid when defining a prerequisite shipping price range.
  """
  INVALID_TARGET_TYPE_PREREQUISITE_SHIPPING_PRICE_RANGE
  """The `combinesWith` settings are invalid for the discount class."""
  INVALID_COMBINES_WITH_FOR_DISCOUNT_CLASS
  """The discountClass is invalid for the price rule."""
  INVALID_DISCOUNT_CLASS_FOR_PRICE_RULE
}

"""The list of features that can be supported by a price rule."""
enum Shopify_PriceRuleFeature {
  """The price rule supports Buy X, Get Y (BXGY) discounts."""
  BUY_ONE_GET_ONE
  """
  The price rule supports Buy X, Get Y (BXGY) discounts that specify a custom allocation limit.
  """
  BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT
  """The price rule supports bulk discounts."""
  BULK
  """The price rule targets specific customers."""
  SPECIFIC_CUSTOMERS
  """The price rule supports discounts that require a quantity."""
  QUANTITY_DISCOUNTS
}

"""The value of a fixed amount price rule."""
type Shopify_PriceRuleFixedAmountValue {
  """The monetary value of the price rule."""
  amount: Shopify_Money!
}

"""Specifies the input fields to manipulate a price rule."""
input Shopify_PriceRuleInput {
  """Determines which discount classes the discount can combine with."""
  combinesWith: Shopify_DiscountCombinesWithInput
  """PriceRuleValidityPeriod for the price rule."""
  validityPeriod: Shopify_PriceRuleValidityPeriodInput
  """Whether the price rule can be applied only once per customer."""
  oncePerCustomer: Boolean = false
  """The customers that can use this price rule."""
  customerSelection: Shopify_PriceRuleCustomerSelectionInput
  """The maximum number of times that the price rule can be used in total."""
  usageLimit: Int
  """Title of the price rule."""
  title: String
  """
  The maximum number of times that the price rule can be allocated onto an order.
  """
  allocationLimit: Int
  """
  The method by which the price rule's value is allocated to its entitled items.
  """
  allocationMethod: Shopify_PriceRuleAllocationMethod
  """The value of the price rule."""
  value: Shopify_PriceRuleValueInput
  """
  The type of lines (line_item or shipping_line) to which the price rule applies.
  """
  target: Shopify_PriceRuleTarget
  """
  The sum of the entitled items subtotal prices must fall within this range for the price rule to be applicable.
  """
  prerequisiteSubtotalRange: Shopify_PriceRuleMoneyRangeInput
  """
  The number of the entitled items must fall within this range for the price rule to be applicable.
  """
  prerequisiteQuantityRange: Shopify_PriceRuleQuantityRangeInput
  """
  The shipping cost must fall within this range for the price rule to be applicable.
  """
  prerequisiteShippingPriceRange: Shopify_PriceRuleMoneyRangeInput
  """The items to which the price rule applies."""
  itemEntitlements: Shopify_PriceRuleItemEntitlementsInput
  """The items required for the price rule to be applicable."""
  itemPrerequisites: Shopify_PriceRuleItemPrerequisitesInput
  """The shipping lines to which the price rule applies."""
  shippingEntitlements: Shopify_PriceRuleShippingEntitlementsInput
  """
  Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
  """
  prerequisiteToEntitlementQuantityRatio: Shopify_PriceRulePrerequisiteToEntitlementQuantityRatioInput
}

"""
The items to which this price rule applies. This may be multiple products,
product variants, collections or combinations of the aforementioned.
"""
type Shopify_PriceRuleItemEntitlements {
  """The collections to which the price rule applies."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CollectionConnection!
  """The product variants to which the price rule applies."""
  productVariants(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductVariantConnection!
  """The products to which the price rule applies."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductConnection!
  """Whether the price rule applies to all line items."""
  targetAllLineItems: Boolean!
}

"""
Specifies the input fields to update a price rule line item entitlement.
"""
input Shopify_PriceRuleItemEntitlementsInput {
  """Whether the price rule applies to all items."""
  targetAllLineItems: Boolean = false
  """The products to which the price rule applies."""
  productIds: [ID!]
  """The product variants to which the price rule applies."""
  productVariantIds: [ID!]
  """The collections to which the price rule applies."""
  collectionIds: [ID!]
}

"""
Specifies the input fields to update a price rule's item prerequisites.
"""
input Shopify_PriceRuleItemPrerequisitesInput {
  """The products needed for the price rule to be applied."""
  productIds: [ID!]
  """The product variants needed for the price rule to be applied."""
  productVariantIds: [ID!]
  """The collections needed for the price rule to be applied."""
  collectionIds: [ID!]
}

"""
Single or multiple line item products, product variants or collections required
for the price rule to be applicable, can also be provided in combination.
"""
type Shopify_PriceRuleLineItemPrerequisites {
  """The collections required for the price rule to be applicable."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CollectionConnection!
  """The product variants required for the price rule to be applicable."""
  productVariants(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductVariantConnection!
  """The products required for the price rule to be applicable."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductConnection!
}

"""A money range within which the price rule is applicable."""
type Shopify_PriceRuleMoneyRange {
  """The lower bound of the money range."""
  greaterThan: Shopify_Money
  """The lower bound or equal of the money range."""
  greaterThanOrEqualTo: Shopify_Money
  """The upper bound of the money range."""
  lessThan: Shopify_Money
  """The upper bound or equal of the money range."""
  lessThanOrEqualTo: Shopify_Money
}

"""
Specifies the input fields to update the money range within which the price rule is applicable.
"""
input Shopify_PriceRuleMoneyRangeInput {
  """The upper bound of the money range."""
  lessThan: Shopify_Money
  """The upper or equal bound of the money range."""
  lessThanOrEqualTo: Shopify_Money
  """The lower bound of the money range."""
  greaterThan: Shopify_Money
  """The lower or equal bound of the money range."""
  greaterThanOrEqualTo: Shopify_Money
}

"""The value of a percent price rule."""
type Shopify_PriceRulePercentValue {
  """The percent value of the price rule."""
  percentage: Float!
}

"""
Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
"""
type Shopify_PriceRulePrerequisiteToEntitlementQuantityRatio {
  """The quantity of entitled items in the ratio."""
  entitlementQuantity: Int!
  """The quantity of prerequisite items in the ratio."""
  prerequisiteQuantity: Int!
}

"""
Specifies the quantity of prerequisite items required for the price rule to be
applicable, compared to quantity of entitled items.
"""
input Shopify_PriceRulePrerequisiteToEntitlementQuantityRatioInput {
  """The quantity of entitled items in the ratio."""
  entitlementQuantity: Int
  """The quantity of prerequisite items in the ratio."""
  prerequisiteQuantity: Int
}

"""A quantity range within which the price rule is applicable."""
type Shopify_PriceRuleQuantityRange {
  """The lower bound of the quantity range."""
  greaterThan: Int
  """The lower bound or equal of the quantity range."""
  greaterThanOrEqualTo: Int
  """The upper bound of the quantity range."""
  lessThan: Int
  """The upper bound or equal of the quantity range."""
  lessThanOrEqualTo: Int
}

"""
Specifies the input fields to update the quantity range within which the price rule is applicable.
"""
input Shopify_PriceRuleQuantityRangeInput {
  """The upper bound of the quantity range."""
  lessThan: Int
  """The upper or equal bound of the quantity range."""
  lessThanOrEqualTo: Int
  """The lower bound of the quantity range."""
  greaterThan: Int
  """The lower or equal bound of the quantity range."""
  greaterThanOrEqualTo: Int
}

"""Shareable URL for the discount code associated with the price rule."""
type Shopify_PriceRuleShareableUrl {
  """
  The image URL of the item (product or collection) to which the discount applies.
  """
  targetItemImage: Shopify_Image
  """The type of page that's associated with the URL."""
  targetType: Shopify_PriceRuleShareableUrlTargetType!
  """The title of the page that's associated with the URL."""
  title: String!
  """The URL for the discount code."""
  url: URL!
}

"""The type of page where a shareable price rule URL lands."""
enum Shopify_PriceRuleShareableUrlTargetType {
  """The URL lands on a home page."""
  HOME
  """The URL lands on a product page."""
  PRODUCT
  """The URL lands on a collection page."""
  COLLECTION
}

"""
Specifies the input fields to update a price rule shipping entitlement.
"""
input Shopify_PriceRuleShippingEntitlementsInput {
  """Whether the price rule applies to all shipping lines."""
  targetAllShippingLines: Boolean = false
  """The codes for the countries to which the price rule applies to."""
  countryCodes: [CountryCode!]
  """
  Whether the price rule is applicable to countries that have not been defined in the shop's shipping zones.
  """
  includeRestOfWorld: Boolean = false
}

"""The shipping lines to which the price rule applies to."""
type Shopify_PriceRuleShippingLineEntitlements {
  """The codes for the countries to which the price rule applies to."""
  countryCodes: [CountryCode!]!
  """
  Whether the price rule is applicable to countries that have not been defined in the shop's shipping zones.
  """
  includeRestOfWorld: Boolean!
  """Whether the price rule applies to all shipping lines."""
  targetAllShippingLines: Boolean!
}

"""The set of valid sort keys for the PriceRule query."""
enum Shopify_PriceRuleSortKeys {
  """Sort by the `starts_at` value."""
  STARTS_AT
  """Sort by the `ends_at` value."""
  ENDS_AT
  """Sort by the `title` value."""
  TITLE
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `updated_at` value."""
  UPDATED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""The status of the price rule."""
enum Shopify_PriceRuleStatus {
  """The price rule is active."""
  ACTIVE
  """The price rule is expired."""
  EXPIRED
  """The price rule is scheduled."""
  SCHEDULED
}

"""
The type of lines (line_item or shipping_line) to which the price rule applies.
"""
enum Shopify_PriceRuleTarget {
  """The price rule applies to line items."""
  LINE_ITEM
  """The price rule applies to shipping lines."""
  SHIPPING_LINE
}

"""The list of features that can be supported by a price rule."""
enum Shopify_PriceRuleTrait {
  """The price rule supports Buy X, Get Y (BXGY) discounts."""
  BUY_ONE_GET_ONE
  """
  The price rule supports Buy X, Get Y (BXGY) discounts that specify a custom allocation limit.
  """
  BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT
  """The price rule supports bulk discounts."""
  BULK
  """The price rule targets specific customers."""
  SPECIFIC_CUSTOMERS
  """The price rule supports discounts that require a quantity."""
  QUANTITY_DISCOUNTS
}

"""Return type for `priceRuleUpdate` mutation."""
type Shopify_PriceRuleUpdatePayload {
  """The updated price rule."""
  priceRule: Shopify_PriceRule
  """The updated discount code."""
  priceRuleDiscountCode: Shopify_PriceRuleDiscountCode
  """The list of errors that occurred from executing the mutation."""
  priceRuleUserErrors: [Shopify_PriceRuleUserError!]!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead.")
}

"""
Represents an error that happens during execution of a price rule mutation.
"""
type Shopify_PriceRuleUserError implements Shopify_DisplayableError {
  """Error code to uniquely identify the error."""
  code: Shopify_PriceRuleErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""A time period during which a price rule is applicable."""
type Shopify_PriceRuleValidityPeriod {
  """The time after which the price rule becomes invalid."""
  end: DateTime
  """The time after which the price rule is valid."""
  start: DateTime!
}

"""
Specifies the input fields to update the validity period of a price rule.
"""
input Shopify_PriceRuleValidityPeriodInput {
  """The time after which the price rule is valid."""
  start: DateTime!
  """The time after which the price rule becomes invalid."""
  end: DateTime
}

"""
The type of the price rule value. The price rule value might be a percentage value, or a fixed amount.
"""
union Shopify_PriceRuleValue = Shopify_PriceRuleFixedAmountValue | Shopify_PriceRulePercentValue

"""Specifies the input fields to update a price rule."""
input Shopify_PriceRuleValueInput {
  """The percentage value of the price rule."""
  percentageValue: Float
  """The fixed amount value of the price rule."""
  fixedAmountValue: Shopify_Money
}

"""
One type of value given to a customer when a discount is applied to an order.
The application of a discount with this value gives the customer the specified percentage off a specified item.
"""
type Shopify_PricingPercentageValue {
  """
  The percentage value of the object. This is a number between -100 (free) and 0 (no discount).
  """
  percentage: Float!
}

"""
The type of value given to a customer when a discount is applied to an order.
For example, the application of the discount might give the customer a
percentage off a specified item. Alternatively, the application of the discount
might give the customer a monetary value in a given currency off an order.
"""
union Shopify_PricingValue = Shopify_MoneyV2 | Shopify_PricingPercentageValue

"""
Private metafields represent custom metadata that is attached to a resource.
Private metafields are accessible only by the application that created them and only from the GraphQL Admin API.

An application can create a maximum of 10 private metafields per shop resource.
"""
type Shopify_PrivateMetafield implements Shopify_Node {
  """The date and time when the private metafield was created."""
  createdAt: DateTime!
  """The id of the private metafield."""
  id: ID!
  """The key name of the private metafield."""
  key: String!
  """The namespace of the private metafield."""
  namespace: String!
  """The date and time when the private metafield was updated."""
  updatedAt: DateTime!
  """The value of a private metafield."""
  value: String!
  """Represents the private metafield value type."""
  valueType: Shopify_PrivateMetafieldValueType!
}

"""
An auto-generated type for paginating through multiple PrivateMetafields.
"""
type Shopify_PrivateMetafieldConnection {
  """A list of edges."""
  edges: [Shopify_PrivateMetafieldEdge!]!
  """A list of the nodes contained in PrivateMetafieldEdge."""
  nodes: [Shopify_PrivateMetafield!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""The input fields for the private metafield to delete."""
input Shopify_PrivateMetafieldDeleteInput {
  """
  The ID of the resource that owns the metafield. If the field is blank, then the `Shop` resource owns the metafield.
  """
  owner: ID
  """The namespace of the private metafield."""
  namespace: String!
  """The key of the private metafield."""
  key: String!
}

"""Return type for `privateMetafieldDelete` mutation."""
type Shopify_PrivateMetafieldDeletePayload {
  """The ID of private metafield that was deleted."""
  deletedPrivateMetafieldId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An auto-generated type which holds one PrivateMetafield and a cursor during pagination.
"""
type Shopify_PrivateMetafieldEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of PrivateMetafieldEdge."""
  node: Shopify_PrivateMetafield!
}

"""The input fields for a private metafield."""
input Shopify_PrivateMetafieldInput {
  """
  The resource that owns the metafield. If the field is blank, then the `Shop` resource owns the metafield.
  """
  owner: ID
  """The namespace of the private metafield."""
  namespace: String!
  """The key of the private metafield."""
  key: String!
  """
  The `value` and `valueType` of the private metafield, wrapped in a `ValueInput` object.
  """
  valueInput: Shopify_PrivateMetafieldValueInput!
}

"""Return type for `privateMetafieldUpsert` mutation."""
type Shopify_PrivateMetafieldUpsertPayload {
  """The private metafield that was created or updated."""
  privateMetafield: Shopify_PrivateMetafield
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
The value input contains the value and value type of the private metafield.
"""
input Shopify_PrivateMetafieldValueInput {
  """The value of a private metafield."""
  value: String!
  """Represents the private metafield value type."""
  valueType: Shopify_PrivateMetafieldValueType!
}

"""Supported private metafield value types."""
enum Shopify_PrivateMetafieldValueType {
  """A string metafield."""
  STRING
  """An integer metafield."""
  INTEGER
  """A JSON string metafield."""
  JSON_STRING
}

"""
The Product resource lets you manage products in a merchant’s store. You can use [ProductVariants](https://shopify.dev/api/admin-graphql/latest/objects/productvariant)
to create or update different versions of the same product. You can also add or update
product [Media](https://shopify.dev/api/admin-graphql/latest/interfaces/media).
Products can be organized by grouping them into a
[Collection](https://shopify.dev/api/admin-graphql/latest/objects/collection).
"""
type Shopify_Product implements Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_HasPublishedTranslations & Shopify_LegacyInteroperability & Shopify_Navigable & Shopify_Node & Shopify_OnlineStorePreviewable & Shopify_Publishable {
  """
  The number of publications a resource is published to without feedback errors.
  """
  availablePublicationCount: Int!
  """The description of the product, complete with HTML formatting."""
  bodyHtml: String @deprecated(reason: "Use `descriptionHtml` instead.")
  """A list of the collections that include the product."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_CollectionSortKeys = ID
    """
    Supported filter parameters:
     - `collection_type`
     - `publishable_status`
     - `published_status`
     - `title`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_CollectionConnection!
  """The pricing that applies for a customer in a given context."""
  contextualPricing(
    """The context used to generate contextual pricing for the variant."""
    context: Shopify_ContextualPricingContext!
  ): Shopify_ProductContextualPricing!
  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was created.
  """
  createdAt: DateTime!
  """The custom product type specified by the merchant."""
  customProductType: String @deprecated(reason: "Deprecated in API version 2022-10. Use `productType` instead.")
  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!
  """
  A stripped description of the product, single line with HTML tags removed.
  """
  description(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String!
  """The description of the product, complete with HTML formatting."""
  descriptionHtml: Shopify_HTML!
  """
  Stripped description of the product, single line with HTML tags removed.
  Truncated to 60 characters.
  """
  descriptionPlainSummary: String! @deprecated(reason: "Use `description` instead.")
  """The featured image for the product."""
  featuredImage: Shopify_Image
  """The featured media for the product."""
  featuredMedia: Shopify_Media
  """
  Information about the product that's provided through resource feedback.
  """
  feedback: Shopify_ResourceFeedback
  """The theme template used when viewing the gift card in a store."""
  giftCardTemplateSuffix: String
  """A unique human-friendly string of the product's title."""
  handle: String!
  """
  Whether the product has only a single variant with the default option and value.
  """
  hasOnlyDefaultVariant: Boolean!
  """Whether the product has out of stock variants."""
  hasOutOfStockVariants: Boolean!
  """A globally-unique identifier."""
  id: ID!
  """The images associated with the product."""
  images(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductImageSortKeys = POSITION
  ): Shopify_ImageConnection!
  """Whether the product is in a given collection."""
  inCollection(
    """The ID of the collection to check."""
    id: ID!
  ): Boolean!
  """Whether the product is a gift card."""
  isGiftCard: Boolean!
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: Shopify_UnsignedInt64!
  """
  The media associated with the product. This can include images, 3D models, or videos.
  """
  media(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductMediaSortKeys = POSITION
  ): Shopify_MediaConnection!
  """Total count of media belonging to a product."""
  mediaCount: Int!
  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String
    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield
  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String
    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!
  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String
    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!
  """The online store preview URL."""
  onlineStorePreviewUrl: URL
  """
  The online store URL for the product.
  A value of `null` indicates that the product is not published to the Online Store sales channel.
  """
  onlineStoreUrl: URL
  """
  A list of product options. The limit is specified by Shop.resourceLimits.maxProductOptions.
  """
  options(
    """Truncate the array result to this size."""
    first: Int
  ): [Shopify_ProductOption!]!
  """The price range of the product."""
  priceRange: Shopify_ProductPriceRange! @deprecated(reason: "Deprecated in API version 2020-10. Use `priceRangeV2` instead.")
  """The price range of the product with prices formatted as decimals."""
  priceRangeV2: Shopify_ProductPriceRangeV2!
  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!
    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield
  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
  """The product category specified by the merchant."""
  productCategory: Shopify_ProductCategory
  """A list of the channels where the product is published."""
  productPublications(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductPublicationConnection! @deprecated(reason: "Use `resourcePublications` instead.")
  """The product type specified by the merchant."""
  productType: String!
  """The number of publications a resource is published on."""
  publicationCount(
    """
    Include only the resource's publications that are published. If false, then
    return all the resource's publications including future publications.
    """
    onlyPublished: Boolean = true
  ): Int!
  """A list of the channels where the product is published."""
  publications(
    """
    Return only the publications that are published. If false, then return all publications.
    """
    onlyPublished: Boolean = true
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductPublicationConnection! @deprecated(reason: "Use `resourcePublications` instead.")
  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601))
  when the product was published to the Online Store.
  """
  publishedAt: DateTime
  """Check to see whether the resource is published to a given channel."""
  publishedOnChannel(
    """The ID of the channel to check."""
    channelId: ID!
  ): Boolean! @deprecated(reason: "Use `publishedOnPublication` instead.")
  """
  Check to see whether the resource is published to the calling app's channel.
  """
  publishedOnCurrentChannel: Boolean! @deprecated(reason: "Use `publishedOnCurrentPublication` instead.")
  """
  Check to see whether the resource is published to the calling app's publication.
  """
  publishedOnCurrentPublication: Boolean!
  """Check to see whether the resource is published to a given publication."""
  publishedOnPublication(
    """The ID of the publication to check."""
    publicationId: ID!
  ): Boolean!
  """
  Whether the product can only be purchased with a selling plan (subscription).
  Products that are sold on subscription (`requiresSellingPlan: true`) can be
  updated only for online stores. If you update a product to be subscription
  only, then the product is unpublished from all channels except the online store.
  """
  requiresSellingPlan: Boolean!
  """
  The resource that is either published or staged to be published to the calling
  app's publication. Requires the `read_product_listings` scope.
  """
  resourcePublicationOnCurrentPublication: Shopify_ResourcePublicationV2
  """The list of resources that are published to a publication."""
  resourcePublications(
    """
    Whether to return only the resources that are currently published. If false,
    then also returns the resources that are scheduled to be published.
    """
    onlyPublished: Boolean = true
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ResourcePublicationConnection!
  """
  The list of resources that are either published or staged to be published to a publication.
  """
  resourcePublicationsV2(
    """
    Whether to return only the resources that are currently published. If false,
    then also returns the resources that are scheduled or staged to be published.
    """
    onlyPublished: Boolean = true
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ResourcePublicationV2Connection!
  """Count of selling plan groups associated with the product."""
  sellingPlanGroupCount: Int!
  """
  A list of all selling plan groups defined in the current shop associated with
  the product either directly or through any of its variants.
  """
  sellingPlanGroups(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SellingPlanGroupConnection!
  """SEO information of the product."""
  seo: Shopify_SEO!
  """The standardized product type in the Shopify product taxonomy."""
  standardizedProductType: Shopify_StandardizedProductType @deprecated(reason: "Deprecated in API version 2022-10. Use `productCategory` instead.")
  """The product status. This controls visibility across all channels."""
  status: Shopify_ProductStatus!
  """
  The Storefront GraphQL API ID of the `Product`.
  
  As of the `2022-04` version release, the Storefront GraphQL API will no longer
  return Base64 encoded IDs to match the behavior of the Admin GraphQL API.
  Therefore, you can safely use the `id` field's value instead.
  """
  storefrontId: Shopify_StorefrontID! @deprecated(reason: "Use `id` instead.")
  """
  A comma separated list of tags associated with the product. Updating `tags` overwrites
  any existing tags that were previously added to the product. To add new tags without overwriting
  existing tags, use the [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsadd)
  mutation.
  """
  tags: [String!]!
  """The theme template used when viewing the product in a store."""
  templateSuffix: String
  """The title of the product."""
  title: String!
  """The quantity of inventory in stock."""
  totalInventory: Int!
  """The number of variants that are associated with the product."""
  totalVariants: Int!
  """Whether inventory tracking has been enabled for the product."""
  tracksInventory: Boolean!
  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Shopify_PublishedTranslation!]!
  """The list of channels that the resource is not published to."""
  unpublishedChannels(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ChannelConnection! @deprecated(reason: "Use `unpublishedPublications` instead.")
  """The list of publications that the resource is not published to."""
  unpublishedPublications(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PublicationConnection!
  """
  The date and time when the product was last modified.
  A product's `updatedAt` value can change for different reasons. For example, if an order
  is placed for a product that has inventory tracking set up, then the inventory adjustment
  is counted as an update.
  """
  updatedAt: DateTime!
  """A list of variants associated with the product."""
  variants(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductVariantSortKeys = POSITION
  ): Shopify_ProductVariantConnection!
  """The name of the product's vendor."""
  vendor: String!
}

"""Specifies product images to append."""
input Shopify_ProductAppendImagesInput {
  """The ID of the product."""
  id: ID!
  """A list of images to be appended to the product."""
  images: [Shopify_ImageInput!]!
}

"""Return type for `productAppendImages` mutation."""
type Shopify_ProductAppendImagesPayload {
  """List of new images appended to the product."""
  newImages: [Shopify_Image!]
  """The product object."""
  product: Shopify_Product
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
The details of a specific product category within the [Shopify product
taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt).
"""
type Shopify_ProductCategory {
  """The product taxonomy node associated with the product category."""
  productTaxonomyNode: Shopify_ProductTaxonomyNode
}

"""
The input fields to use when adding a product category to a product. The
[Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt)
contains the full list of available values.
"""
input Shopify_ProductCategoryInput {
  """
  The ID of the node in the Shopify taxonomy that represents the product category.
  """
  productTaxonomyNodeId: ID!
}

"""Return type for `productChangeStatus` mutation."""
type Shopify_ProductChangeStatusPayload {
  """The product object."""
  product: Shopify_Product
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ProductChangeStatusUserError!]!
}

"""An error that occurs during the execution of `ProductChangeStatus`."""
type Shopify_ProductChangeStatusUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_ProductChangeStatusUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `ProductChangeStatusUserError`.
"""
enum Shopify_ProductChangeStatusUserErrorCode {
  """Product could not be found."""
  PRODUCT_NOT_FOUND
}

"""The set of valid sort keys for the ProductCollection query."""
enum Shopify_ProductCollectionSortKeys {
  """Sort by the `title` value."""
  TITLE
  """Sort by the `price` value."""
  PRICE
  """Sort by the `best-selling` value."""
  BEST_SELLING
  """Sort by the `created` value."""
  CREATED
  """Sort by the `id` value."""
  ID
  """Sort by the `manual` value."""
  MANUAL
  """Sort by the `collection-default` value."""
  COLLECTION_DEFAULT
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""An auto-generated type for paginating through multiple Products."""
type Shopify_ProductConnection {
  """A list of edges."""
  edges: [Shopify_ProductEdge!]!
  """A list of the nodes contained in ProductEdge."""
  nodes: [Shopify_Product!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
The price of a product in a specific country.
Prices vary between countries.
"""
type Shopify_ProductContextualPricing {
  """
  The pricing of the variant with the highest price in the given context.
  """
  maxVariantPricing: Shopify_ProductVariantContextualPricing
  """The pricing of the variant with the lowest price in the given context."""
  minVariantPricing: Shopify_ProductVariantContextualPricing
  """The price range of the product with prices formatted as decimals."""
  priceRange: Shopify_ProductPriceRangeV2!
}

"""Return type for `productCreateMedia` mutation."""
type Shopify_ProductCreateMediaPayload {
  """The newly created media."""
  media: [Shopify_Media!]
  """The list of errors that occurred from executing the mutation."""
  mediaUserErrors: [Shopify_MediaUserError!]!
  """The product associated with the media."""
  product: Shopify_Product
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]! @deprecated(reason: "Use `mediaUserErrors` instead.")
}

"""Return type for `productCreate` mutation."""
type Shopify_ProductCreatePayload {
  """The product object."""
  product: Shopify_Product
  """The shop associated with the product."""
  shop: Shopify_Shop!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `productDeleteAsync` mutation."""
type Shopify_ProductDeleteAsyncPayload {
  """The ID of the product that was requested to be deleted."""
  deleteProductId: ID
  """
  The background job that will delete the product and its associated variants and media.
  """
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ProductDeleteUserError!]!
}

"""Return type for `productDeleteImages` mutation."""
type Shopify_ProductDeleteImagesPayload {
  """The array of image IDs to delete."""
  deletedImageIds: [ID!]!
  """The product object."""
  product: Shopify_Product
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Specifies the product to delete."""
input Shopify_ProductDeleteInput {
  """The ID of the product."""
  id: ID!
}

"""Return type for `productDeleteMedia` mutation."""
type Shopify_ProductDeleteMediaPayload {
  """List of media IDs which were deleted."""
  deletedMediaIds: [ID!]
  """List of product image IDs which were deleted."""
  deletedProductImageIds: [ID!]
  """The list of errors that occurred from executing the mutation."""
  mediaUserErrors: [Shopify_MediaUserError!]!
  """The product associated with the deleted media."""
  product: Shopify_Product
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]! @deprecated(reason: "Use `mediaUserErrors` instead.")
}

"""Return type for `productDelete` mutation."""
type Shopify_ProductDeletePayload {
  """The ID of the deleted product."""
  deletedProductId: ID
  """The shop associated with the product."""
  shop: Shopify_Shop!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An error that occurred while setting the activation status of an inventory item.
"""
type Shopify_ProductDeleteUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_ProductDeleteUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""Possible error codes that can be returned by `ProductDeleteUserError`."""
enum Shopify_ProductDeleteUserErrorCode {
  """Product does not exist."""
  PRODUCT_DOES_NOT_EXIST
  """Something went wrong, please try again."""
  GENERIC_ERROR
}

"""Specifies the inputs for the product async duplicate mutation."""
input Shopify_ProductDuplicateAsyncInput {
  """The ID of the product to be duplicated."""
  productId: ID!
  """The new title of the product."""
  newTitle: String!
  """
  The new status of the product. If no value is provided the status will be inherited from the original product.
  """
  newStatus: Shopify_ProductStatus
  """Specifies whether or not to duplicate images."""
  includeImages: Boolean = false
}

"""Return type for `productDuplicateAsync` mutation."""
type Shopify_ProductDuplicateAsyncPayload {
  """The duplicated product id."""
  duplicatedProductId: ID
  """The asynchronous job for duplicating the products."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ProductDuplicateUserError!]!
}

"""Return type for `productDuplicate` mutation."""
type Shopify_ProductDuplicatePayload {
  """The asynchronous job that duplicates the product images."""
  imageJob: Shopify_Job
  """The duplicated product."""
  newProduct: Shopify_Product
  """The user's shop."""
  shop: Shopify_Shop!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""An error that occurred while duplicating the product."""
type Shopify_ProductDuplicateUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_ProductDuplicateUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `ProductDuplicateUserError`.
"""
enum Shopify_ProductDuplicateUserErrorCode {
  """The product does not exist."""
  PRODUCT_DOES_NOT_EXIST
  """Cannot duplicate a product which has no variants."""
  EMPTY_VARIANT
  """The title cannot be empty."""
  EMPTY_TITLE
  """Something went wrong, please try again."""
  GENERIC_ERROR
  """Something went wrong when saving the product, please try again."""
  FAILED_TO_SAVE
}

"""
An auto-generated type which holds one Product and a cursor during pagination.
"""
type Shopify_ProductEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of ProductEdge."""
  node: Shopify_Product!
}

"""The set of valid sort keys for the ProductImage query."""
enum Shopify_ProductImageSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `position` value."""
  POSITION
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""Return type for `productImageUpdate` mutation."""
type Shopify_ProductImageUpdatePayload {
  """The image that has been updated."""
  image: Shopify_Image
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Specifies the input fields required to create a product."""
input Shopify_ProductInput {
  """The description of the product, complete with HTML formatting."""
  descriptionHtml: String
  """
  A unique, human-friendly string for the product.
  Automatically generated from the product's title unless otherwise specified.
  """
  handle: String
  """
  Whether a redirect is required after a new handle has been provided.
  If true, then the old handle is redirected to the new one automatically.
  """
  redirectNewHandle: Boolean = false
  """The SEO information associated with the product."""
  seo: Shopify_SEOInput
  """The product type specified by the merchant."""
  productType: String
  """The standardized product type in the Shopify product taxonomy."""
  standardizedProductType: Shopify_StandardizedProductTypeInput
  """The product category in the Shopify product taxonomy."""
  productCategory: Shopify_ProductCategoryInput
  """The custom product type specified by the merchant."""
  customProductType: String
  """A comma separated list of tags that have been added to the product."""
  tags: [String!]
  """The theme template used when viewing the product in a store."""
  templateSuffix: String
  """Whether the product is a gift card."""
  giftCard: Boolean
  """The theme template used when viewing the gift card in a store."""
  giftCardTemplateSuffix: String
  """The title of the product."""
  title: String
  """The name of the product's vendor."""
  vendor: String
  """The IDs of the collections that this product will be added to."""
  collectionsToJoin: [ID!]
  """
  The IDs of collections that will no longer include the existing product.
  """
  collectionsToLeave: [ID!]
  """
  Specifies the product to update in productUpdate or creates a new product if absent in productCreate.
  """
  id: ID
  """The images to associate with the product."""
  images: [Shopify_ImageInput!]
  """The metafields to associate with this product."""
  metafields: [Shopify_MetafieldInput!]
  """The private metafields to associate with this product."""
  privateMetafields: [Shopify_PrivateMetafieldInput!]
  """List of custom product options (maximum of 3 per product)."""
  options: [String!]
  """A list of variants associated with the product."""
  variants: [Shopify_ProductVariantInput!]
  """The status of the product."""
  status: Shopify_ProductStatus
  """
  Whether the product can only be purchased with a selling plan (subscription).
  Products that are sold exclusively on subscription can only be created on
  online stores. If set to `true` on an already existing product, then the
  product will be marked unavailable on channels that don't support subscriptions.
  """
  requiresSellingPlan: Boolean
}

"""Return type for `productJoinSellingPlanGroups` mutation."""
type Shopify_ProductJoinSellingPlanGroupsPayload {
  """The product object."""
  product: Shopify_Product
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SellingPlanGroupUserError!]!
}

"""Return type for `productLeaveSellingPlanGroups` mutation."""
type Shopify_ProductLeaveSellingPlanGroupsPayload {
  """The product object."""
  product: Shopify_Product
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SellingPlanGroupUserError!]!
}

"""The set of valid sort keys for the ProductMedia query."""
enum Shopify_ProductMediaSortKeys {
  """Sort by the `position` value."""
  POSITION
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
The product property names. For example, "Size", "Color", and "Material".
Variants are selected based on permutations of these options.
The limit for each product property name is 255 characters.
"""
type Shopify_ProductOption implements Shopify_HasPublishedTranslations & Shopify_Node {
  """A globally-unique identifier."""
  id: ID!
  """The product option’s name."""
  name: String!
  """The product option's position."""
  position: Int!
  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Shopify_PublishedTranslation!]!
  """The corresponding value to the product option name."""
  values: [String!]!
}

"""The price range of the product."""
type Shopify_ProductPriceRange {
  """The highest variant's price."""
  maxVariantPrice: Shopify_MoneyV2!
  """The lowest variant's price."""
  minVariantPrice: Shopify_MoneyV2!
}

"""The price range of the product."""
type Shopify_ProductPriceRangeV2 {
  """The highest variant's price."""
  maxVariantPrice: Shopify_MoneyV2!
  """The lowest variant's price."""
  minVariantPrice: Shopify_MoneyV2!
}

"""Represents the channels where a product is published."""
type Shopify_ProductPublication {
  """The channel where the product was or is published."""
  channel: Shopify_Channel!
  """Whether the publication is published or not."""
  isPublished: Boolean!
  """The product that was or is going to be published on the channel."""
  product: Shopify_Product!
  """
  The date that the product was or is going to be published on the channel.
  """
  publishDate: DateTime
}

"""
An auto-generated type for paginating through multiple ProductPublications.
"""
type Shopify_ProductPublicationConnection {
  """A list of edges."""
  edges: [Shopify_ProductPublicationEdge!]!
  """A list of the nodes contained in ProductPublicationEdge."""
  nodes: [Shopify_ProductPublication!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ProductPublication and a cursor during pagination.
"""
type Shopify_ProductPublicationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of ProductPublicationEdge."""
  node: Shopify_ProductPublication!
}

"""Specifies a publication to which a product will be published."""
input Shopify_ProductPublicationInput {
  """ID of the publication."""
  publicationId: ID
  """The date and time that the product was (or will be) published."""
  publishDate: DateTime
}

"""Specifies a product to publish and the channels to publish it to."""
input Shopify_ProductPublishInput {
  """The product to create or update publications for."""
  id: ID!
  """The publication that the product is published to."""
  productPublications: [Shopify_ProductPublicationInput!]!
}

"""Return type for `productPublish` mutation."""
type Shopify_ProductPublishPayload {
  """The product that has been published."""
  product: Shopify_Product
  """The channels where the product is published."""
  productPublications: [Shopify_ProductPublication!] @deprecated(reason: "Use Product.publications instead.")
  """The user's shop."""
  shop: Shopify_Shop!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `productReorderImages` mutation."""
type Shopify_ProductReorderImagesPayload {
  """The asynchronous job which reorders the images."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `productReorderMedia` mutation."""
type Shopify_ProductReorderMediaPayload {
  """The asynchronous job which reorders the media."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  mediaUserErrors: [Shopify_MediaUserError!]!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]! @deprecated(reason: "Use `mediaUserErrors` instead.")
}

"""
Reports the status of product for a Sales Channel or Storefront API.
This might include why a product is not available in a Sales Channel
and how a merchant might fix this.
"""
type Shopify_ProductResourceFeedback {
  """
  The time when the feedback was generated. Used to help determine whether
  incoming feedback is outdated compared to existing feedback.
  """
  feedbackGeneratedAt: DateTime!
  """The feedback messages presented to the merchant."""
  messages: [String!]!
  """The ID of the product associated with the feedback."""
  productId: ID!
  """The timestamp of the product associated with the feedback."""
  productUpdatedAt: DateTime!
  """
  Conveys the state of the feedback and whether it requires merchant action or not.
  """
  state: Shopify_ResourceFeedbackState!
}

"""The input fields used to create a product feedback."""
input Shopify_ProductResourceFeedbackInput {
  """The ID of the product that the feedback was created on."""
  productId: ID!
  """Whether the merchant needs to take action on the product."""
  state: Shopify_ResourceFeedbackState!
  """
  The date and time when the payload is constructed.
  Used to help determine whether incoming feedback is outdated compared to
  feedback already received, and if it should be ignored upon arrival.
  """
  feedbackGeneratedAt: DateTime!
  """The timestamp of the product associated with the feedback."""
  productUpdatedAt: DateTime!
  """
  A concise set of copy strings to be displayed to merchants. Used to guide
  merchants in resolving problems that your app encounters when trying to make
  use of their products.
  You can specify up to four messages. Each message is limited to 100 characters.
  """
  messages: [String!]
}

"""A sale associated with a product."""
type Shopify_ProductSale implements Shopify_Sale {
  """The type of order action that the sale represents."""
  actionType: Shopify_SaleActionType!
  """The unique identifier for the sale."""
  id: ID!
  """The line item for the associated sale."""
  lineItem: Shopify_LineItem!
  """The line type assocated with the sale."""
  lineType: Shopify_SaleLineType!
  """The number of units either ordered or intended to be returned."""
  quantity: Int
  """All individual taxes associated with the sale."""
  taxes: [Shopify_SaleTax!]!
  """The total sale amount after taxes and discounts."""
  totalAmount: Shopify_MoneyBag!
  """The total discounts allocated to the sale after taxes."""
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag!
  """The total discounts allocated to the sale before taxes."""
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag!
  """The total amount of taxes for the sale."""
  totalTaxAmount: Shopify_MoneyBag!
}

"""The set of valid sort keys for the Product query."""
enum Shopify_ProductSortKeys {
  """Sort by the `title` value."""
  TITLE
  """Sort by the `product_type` value."""
  PRODUCT_TYPE
  """Sort by the `vendor` value."""
  VENDOR
  """Sort by the `inventory_total` value."""
  INVENTORY_TOTAL
  """Sort by the `updated_at` value."""
  UPDATED_AT
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `published_at` value."""
  PUBLISHED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  Pagination isn't supported when using this sort key.
  """
  RELEVANCE
}

"""The possible product statuses."""
enum Shopify_ProductStatus {
  """
  The product is ready to sell and can be published to sales channels and apps.
  Products with an active status aren't automatically published to sales
  channels, such as the online store, or apps. By default, existing products are set to active.
  """
  ACTIVE
  """
  The product is no longer being sold and isn't available to customers on sales channels and apps.
  """
  ARCHIVED
  """
  The product isn't ready to sell and is unavailable to customers on sales
  channels and apps. By default, duplicated and unarchived products are set to draft.
  """
  DRAFT
}

"""
Represents a [Shopify product taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt) node.
"""
type Shopify_ProductTaxonomyNode implements Shopify_Node {
  """
  The full name of the product taxonomy node. For example,  Animals & Pet Supplies > Pet Supplies > Dog Supplies > Dog Beds.
  """
  fullName: String!
  """The ID of the product taxonomy node."""
  id: ID!
  """Whether the node is a leaf node."""
  isLeaf: Boolean!
  """Whether the node is a root node."""
  isRoot: Boolean!
  """The name of the product taxonomy node. For example, Dog Beds."""
  name: String!
}

"""
Specifies a product to unpublish from a channel and the sales channels to unpublish it from.
"""
input Shopify_ProductUnpublishInput {
  """The ID of the product to create or update publications for."""
  id: ID!
  """The channels to unpublish the product from."""
  productPublications: [Shopify_ProductPublicationInput!]!
}

"""Return type for `productUnpublish` mutation."""
type Shopify_ProductUnpublishPayload {
  """The product that has been unpublished."""
  product: Shopify_Product
  """The user's shop."""
  shop: Shopify_Shop!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `productUpdateMedia` mutation."""
type Shopify_ProductUpdateMediaPayload {
  """The updated media object."""
  media: [Shopify_Media!]
  """The list of errors that occurred from executing the mutation."""
  mediaUserErrors: [Shopify_MediaUserError!]!
  """The product on which media was updated."""
  product: Shopify_Product
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]! @deprecated(reason: "Use `mediaUserErrors` instead.")
}

"""Return type for `productUpdate` mutation."""
type Shopify_ProductUpdatePayload {
  """The updated product object."""
  product: Shopify_Product
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Represents a product variant."""
type Shopify_ProductVariant implements Shopify_HasMetafieldDefinitions & Shopify_HasMetafields & Shopify_HasPublishedTranslations & Shopify_LegacyInteroperability & Shopify_Navigable & Shopify_Node {
  """Whether the product variant is available for sale."""
  availableForSale: Boolean!
  """The value of the barcode associated with the product."""
  barcode: String
  """The compare-at price of the variant in the default shop currency."""
  compareAtPrice: Shopify_Money
  """The pricing that applies for a customer in a given context."""
  contextualPricing(
    """The context used to generate contextual pricing for the variant."""
    context: Shopify_ContextualPricingContext!
  ): Shopify_ProductVariantContextualPricing!
  """The date and time when the variant was created."""
  createdAt: DateTime!
  """
  A default cursor that returns the single next record, sorted ascending by ID.
  """
  defaultCursor: String!
  """The delivery profile for the variant."""
  deliveryProfile: Shopify_DeliveryProfile
  """
  Display name of the variant, based on product's title + variant's title.
  """
  displayName: String!
  """
  The fulfillment service that stocks a product variant.
  
  This is a third-party fulfillment service if the following conditions are met:
  - The product variant is stocked by a single fulfillment service.
  - The [FulfillmentService](/api/admin-graphql/latest/objects/FulfillmentService)
  is a third-party fulfillment service. Third-party fulfillment services don't
  have a handle with the value `manual`.
  - The fulfillment service has not [opted into SKU sharing](/api/admin-graphql/latest/objects/FulfillmentService#field-fulfillmentservice-permitsskusharing).
  
  If the conditions aren't met, then the fulfillment service has the `manual` handle.
  """
  fulfillmentService: Shopify_FulfillmentService @deprecated(reason: "\nThe [relationship between a product variant and a fulfillment service was changed in the `2022-07` API version](/changelog/fulfillment-service-sku-sharing). A [ProductVariant](/api/admin-graphql/latest/objects/ProductVariant) can be stocked by multiple fulfillment services. As a result, we recommend that you use the [inventoryItem field](/api/admin-graphql/latest/objects/ProductVariant#field-productvariant-inventoryitem) if you need to determine where a product variant is stocked.\n\nIf you need to determine whether a product is a gift card, then you should continue to use this field until an alternative is available.\n\nLearn more about [managing inventory quantities and states](/apps/fulfillment/inventory-management-apps/quantities-states).\n")
  """
  Whether changes to the fulfillment service for the product variant are allowed.
  """
  fulfillmentServiceEditable: Shopify_EditableProperty!
  """The Harmonized System Code (or HS Tariff Code) for the variant."""
  harmonizedSystemCode: String @deprecated(reason: "Use `InventoryItem.harmonizedSystemCode` instead.")
  """A globally-unique identifier."""
  id: ID!
  """The featured image for the variant."""
  image: Shopify_Image
  """The inventory item, which is used to query for inventory information."""
  inventoryItem: Shopify_InventoryItem!
  """
  The fulfillment service that tracks the number of items in stock for the product variant.
  """
  inventoryManagement: Shopify_ProductVariantInventoryManagement! @deprecated(reason: "Use tracked attribute on `inventoryItem` instead.")
  """
  Whether customers are allowed to place an order for the product variant when it's out of stock.
  """
  inventoryPolicy: Shopify_ProductVariantInventoryPolicy!
  """The total sellable quantity of the variant."""
  inventoryQuantity: Int
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: Shopify_UnsignedInt64!
  """The media associated with the product variant."""
  media(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MediaConnection!
  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String
    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield
  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definitions by namespace."""
    namespace: String
    """Filter by the definition's pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!
  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String
    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!
  """
  The order of the product variant in the list of product variants. The first position in the list is 1.
  """
  position: Int!
  """
  List of prices and compare-at prices in the presentment currencies for this shop.
  """
  presentmentPrices(
    """The presentment currencies prices should return in."""
    presentmentCurrencies: [Shopify_CurrencyCode!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductVariantPricePairConnection! @deprecated(reason: "Use `contextualPricing` instead.")
  """The price of the product variant in the default shop currency."""
  price: Shopify_Money!
  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!
    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield
  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
  """The product that this variant belongs to."""
  product: Shopify_Product!
  """
  Whether a customer needs to provide a shipping address when placing an order for the product variant.
  """
  requiresShipping: Boolean! @deprecated(reason: "Use `InventoryItem.requiresShipping` instead.")
  """List of product options applied to the variant."""
  selectedOptions: [Shopify_SelectedOption!]!
  """
  The total sellable quantity of the variant for online channels.
  This doesn't represent the total available inventory or capture
  [limitations based on customer location](https://help.shopify.com/manual/markets/inventory_and_fulfillment).
  """
  sellableOnlineQuantity: Int!
  """Count of selling plan groups associated with the product variant."""
  sellingPlanGroupCount: Int!
  """
  A list of all selling plan groups defined in the current shop associated with the product variant.
  """
  sellingPlanGroups(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SellingPlanGroupConnection!
  """
  An identifier for the product variant in the shop. Required in order to connect to a fulfillment service.
  """
  sku: String
  """
  The Storefront GraphQL API ID of the `ProductVariant`.
  
  As of the `2022-04` version release, the Storefront GraphQL API will no longer
  return Base64 encoded IDs to match the behavior of the Admin GraphQL API.
  Therefore, you can safely use the `id` field's value instead.
  """
  storefrontId: Shopify_StorefrontID! @deprecated(reason: "Use `id` instead.")
  """The tax code for the product variant."""
  taxCode: String
  """Whether a tax is charged when the product variant is sold."""
  taxable: Boolean!
  """The title of the product variant."""
  title: String!
  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Shopify_PublishedTranslation!]!
  """
  The date and time (ISO 8601 format) when the product variant was last modified.
  """
  updatedAt: DateTime!
  """
  The weight of the product variant in the unit system specified with weight_unit.
  """
  weight: Float
  """
  The unit of measurement that applies to the product variant's weight. If you
  don't specify a value for weight_unit, then the shop's default unit of
  measurement is applied. Valid values: `g`, `kg`, `oz`, `lb`.
  """
  weightUnit: Shopify_WeightUnit!
}

"""
Specifies the input fields required to append media to a single variant.
"""
input Shopify_ProductVariantAppendMediaInput {
  """Specifies the variant to which media will be appended."""
  variantId: ID!
  """Specifies the media to append to the variant."""
  mediaIds: [ID!]!
}

"""Return type for `productVariantAppendMedia` mutation."""
type Shopify_ProductVariantAppendMediaPayload {
  """The product associated with the variants and media."""
  product: Shopify_Product
  """The product variants that were updated."""
  productVariants: [Shopify_ProductVariant!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MediaUserError!]!
}

"""
An auto-generated type for paginating through multiple ProductVariants.
"""
type Shopify_ProductVariantConnection {
  """A list of edges."""
  edges: [Shopify_ProductVariantEdge!]!
  """A list of the nodes contained in ProductVariantEdge."""
  nodes: [Shopify_ProductVariant!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
The price of a product variant in a specific country.
Prices vary between countries.
"""
type Shopify_ProductVariantContextualPricing {
  """The final compare-at price after all adjustments are applied."""
  compareAtPrice: Shopify_MoneyV2
  """The final price after all adjustments are applied."""
  price: Shopify_MoneyV2!
}

"""Return type for `productVariantCreate` mutation."""
type Shopify_ProductVariantCreatePayload {
  """The product associated with the variant."""
  product: Shopify_Product
  """The successfully created variant."""
  productVariant: Shopify_ProductVariant
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `productVariantDelete` mutation."""
type Shopify_ProductVariantDeletePayload {
  """The ID of the deleted product variant."""
  deletedProductVariantId: ID
  """The product associated with the deleted product variant."""
  product: Shopify_Product
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
Specifies the input fields required to detach media from a single variant.
"""
input Shopify_ProductVariantDetachMediaInput {
  """Specifies the variant from which media will be detached."""
  variantId: ID!
  """Specifies the media to detach from the variant."""
  mediaIds: [ID!]!
}

"""Return type for `productVariantDetachMedia` mutation."""
type Shopify_ProductVariantDetachMediaPayload {
  """The product associated with the variants and media."""
  product: Shopify_Product
  """The product variants that were updated."""
  productVariants: [Shopify_ProductVariant!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MediaUserError!]!
}

"""
An auto-generated type which holds one ProductVariant and a cursor during pagination.
"""
type Shopify_ProductVariantEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of ProductVariantEdge."""
  node: Shopify_ProductVariant!
}

"""Specifies a product variant to create or update."""
input Shopify_ProductVariantInput {
  """The value of the barcode associated with the product."""
  barcode: String
  """The compare-at price of the variant."""
  compareAtPrice: Shopify_Money
  """The Harmonized System code (or HS Tariff code) for the variant."""
  harmonizedSystemCode: String
  """
  Specifies the product variant to update or create a new variant if absent.
  """
  id: ID
  """The ID of the image that's associated with the variant."""
  imageId: ID
  """
  The URL of an image to associate with the variant.  This field can only be
  used through mutations that create product images and must match one of the
  URLs being created on the product.
  """
  imageSrc: String
  """
  The URL of the media to associate with the variant. This field can only be
  used in mutations that create media images and must match one of the URLs
  being created on the product. This field only accepts one value.
  """
  mediaSrc: [String!]
  """
  Whether customers are allowed to place an order for the product variant when it's out of stock.
  """
  inventoryPolicy: Shopify_ProductVariantInventoryPolicy
  """
  The inventory quantities at each location where the variant is stocked. Used
  as input only to the `productVariantCreate` mutation.
  """
  inventoryQuantities: [Shopify_InventoryLevelInput!]
  """The inventory item associated with the variant. Used for unit cost."""
  inventoryItem: Shopify_InventoryItemInput
  """Additional customizable information about the product variant."""
  metafields: [Shopify_MetafieldInput!]
  """The private metafields associated with the product."""
  privateMetafields: [Shopify_PrivateMetafieldInput!]
  """
  The custom properties that a shop owner uses to define product variants.
  """
  options: [String!]
  """
  The order of the product variant in the list of product variants. The first position in the list is 1.
  """
  position: Int
  """The price of the variant."""
  price: Shopify_Money
  """
  The product to create the variant for. Used as input only to the `productVariantCreate` mutation.
  """
  productId: ID
  """Whether the variant requires shipping."""
  requiresShipping: Boolean
  """The SKU for the variant."""
  sku: String
  """Whether the variant is taxable."""
  taxable: Boolean
  """The tax code associated with the variant."""
  taxCode: String
  """The weight of the variant."""
  weight: Float
  """The unit of weight that's used to measure the variant."""
  weightUnit: Shopify_WeightUnit
}

"""
The valid values for the method of inventory tracking for a product variant.
"""
enum Shopify_ProductVariantInventoryManagement {
  """
  This product variant's inventory is tracked by Shopify. In the unstable API
  version, this product variant's inventory could also be tracked by both
  Shopify and a third-party fulfillment service.
  """
  SHOPIFY
  """This product variant's inventory is not tracked."""
  NOT_MANAGED
  """
  This product variant's inventory is tracked by a third-party fulfillment service.
  """
  FULFILLMENT_SERVICE
}

"""
The valid values for the inventory policy of a product variant once it is out of stock.
"""
enum Shopify_ProductVariantInventoryPolicy {
  """Customers can't buy this product variant after it's out of stock."""
  DENY
  """Customers can buy this product variant after it's out of stock."""
  CONTINUE
}

"""Return type for `productVariantJoinSellingPlanGroups` mutation."""
type Shopify_ProductVariantJoinSellingPlanGroupsPayload {
  """The product variant object."""
  productVariant: Shopify_ProductVariant
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SellingPlanGroupUserError!]!
}

"""Return type for `productVariantLeaveSellingPlanGroups` mutation."""
type Shopify_ProductVariantLeaveSellingPlanGroupsPayload {
  """The product variant object."""
  productVariant: Shopify_ProductVariant
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SellingPlanGroupUserError!]!
}

"""Represents a product variant position."""
input Shopify_ProductVariantPositionInput {
  """Specifies the ID of the product variant to update."""
  id: ID!
  """
  The order of the product variant in the list of product variants. The first position in the list is 1.
  """
  position: Int!
}

"""The compare-at price and price of a variant sharing a currency."""
type Shopify_ProductVariantPricePair {
  """The compare-at price of the variant with associated currency."""
  compareAtPrice: Shopify_MoneyV2
  """The price of the variant with associated currency."""
  price: Shopify_MoneyV2!
}

"""
An auto-generated type for paginating through multiple ProductVariantPricePairs.
"""
type Shopify_ProductVariantPricePairConnection {
  """A list of edges."""
  edges: [Shopify_ProductVariantPricePairEdge!]!
  """A list of the nodes contained in ProductVariantPricePairEdge."""
  nodes: [Shopify_ProductVariantPricePair!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ProductVariantPricePair and a cursor during pagination.
"""
type Shopify_ProductVariantPricePairEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of ProductVariantPricePairEdge."""
  node: Shopify_ProductVariantPricePair!
}

"""Return type for `productVariantsBulkCreate` mutation."""
type Shopify_ProductVariantsBulkCreatePayload {
  """The updated product object."""
  product: Shopify_Product
  """The newly created variants."""
  productVariants: [Shopify_ProductVariant!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ProductVariantsBulkCreateUserError!]!
}

"""Error codes for failed product variant bulk create mutations."""
type Shopify_ProductVariantsBulkCreateUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_ProductVariantsBulkCreateUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `ProductVariantsBulkCreateUserError`.
"""
enum Shopify_ProductVariantsBulkCreateUserErrorCode {
  """Product does not exist."""
  PRODUCT_DOES_NOT_EXIST
  """On create, this key cannot be used."""
  NO_KEY_ON_CREATE
  """Variant already exists."""
  VARIANT_ALREADY_EXISTS
  """Variant price must be greater than or equal to zero."""
  GREATER_THAN_OR_EQUAL_TO
  """Variant options are not enough."""
  NEED_TO_ADD_OPTION_VALUES
  """Variant options are more than the product options."""
  OPTION_VALUES_FOR_NUMBER_OF_UNKNOWN_OPTIONS
  """Inventory locations cannot exceed the allowed resource limit or 10."""
  TOO_MANY_INVENTORY_LOCATIONS
  """You reached the limit of available SKUs in your current plan."""
  SUBSCRIPTION_VIOLATION
  """Variant options already exist. Please change the variant option(s)."""
  VARIANT_ALREADY_EXISTS_CHANGE_OPTION_VALUE
  """Quantity could not be set. The location was not found."""
  TRACKED_VARIANT_LOCATION_NOT_FOUND
  """Input must be for this product."""
  MUST_BE_FOR_THIS_PRODUCT
  """Input is not defined for this shop."""
  NOT_DEFINED_FOR_SHOP
  """Invalid input detected."""
  INVALID
  """Price cannot take a negative value."""
  NEGATIVE_PRICE_VALUE
}

"""Return type for `productVariantsBulkDelete` mutation."""
type Shopify_ProductVariantsBulkDeletePayload {
  """The updated product object."""
  product: Shopify_Product
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ProductVariantsBulkDeleteUserError!]!
}

"""Error codes for failed bulk variant delete mutations."""
type Shopify_ProductVariantsBulkDeleteUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_ProductVariantsBulkDeleteUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `ProductVariantsBulkDeleteUserError`.
"""
enum Shopify_ProductVariantsBulkDeleteUserErrorCode {
  """Product does not exist."""
  PRODUCT_DOES_NOT_EXIST
  """Cannot delete default variant."""
  CANNOT_DELETE_LAST_VARIANT
  """The variant does not exist."""
  AT_LEAST_ONE_VARIANT_DOES_NOT_BELONG_TO_THE_PRODUCT
}

"""
Specifies a product variant to create as part of a variant bulk mutation.
"""
input Shopify_ProductVariantsBulkInput {
  """The value of the barcode associated with the product variant."""
  barcode: String
  """The compare-at price of the variant."""
  compareAtPrice: Shopify_Money
  """The Harmonized System code (or HS Tariff code) for the variant."""
  harmonizedSystemCode: String
  """Specifies the product variant to update or delete."""
  id: ID
  """The ID of the image that's associated with the variant."""
  imageId: ID
  """
  The URL of an image to associate with the variant.  This field can only be
  used through mutations that create product images and must match one of the
  URLs being created on the product.
  """
  imageSrc: String
  """The URL of the media to associate with the variant."""
  mediaSrc: [String!]
  """
  Whether customers are allowed to place an order for the variant when it's out of stock.
  """
  inventoryPolicy: Shopify_ProductVariantInventoryPolicy
  """
  The inventory quantities at each location where the variant is stocked. The number of elements
  in the array of inventory quantities cannot exceed 10 and the amount specified
  for the plan. Used as input only to the `productVariantCreate` mutation.
  """
  inventoryQuantities: [Shopify_InventoryLevelInput!]
  """The inventory item associated with the variant, used for unit cost."""
  inventoryItem: Shopify_InventoryItemInput
  """The additional customizable information about the product variant."""
  metafields: [Shopify_MetafieldInput!]
  """The private metafields associated with the product."""
  privateMetafields: [Shopify_PrivateMetafieldInput!]
  """
  The custom properties that a shop owner uses to define product variants.
  """
  options: [String!]
  """The price of the variant."""
  price: Shopify_Money
  """Whether the variant requires shipping."""
  requiresShipping: Boolean
  """The SKU for the variant."""
  sku: String
  """Whether the variant is taxable."""
  taxable: Boolean
  """The tax code associated with the variant."""
  taxCode: String
  """The weight of the variant."""
  weight: Float
  """The unit of weight that's used to measure the variant."""
  weightUnit: Shopify_WeightUnit
}

"""Return type for `productVariantsBulkReorder` mutation."""
type Shopify_ProductVariantsBulkReorderPayload {
  """The updated product."""
  product: Shopify_Product
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ProductVariantsBulkReorderUserError!]!
}

"""Error codes for failed bulk product variants reorder operation."""
type Shopify_ProductVariantsBulkReorderUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_ProductVariantsBulkReorderUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `ProductVariantsBulkReorderUserError`.
"""
enum Shopify_ProductVariantsBulkReorderUserErrorCode {
  """Product does not exist."""
  PRODUCT_DOES_NOT_EXIST
  """Product variant does not exist."""
  MISSING_VARIANT
  """Product variant position cannot be zero or negative number."""
  INVALID_POSITION
  """Product variant IDs must be unique."""
  DUPLICATED_VARIANT_ID
}

"""Return type for `productVariantsBulkUpdate` mutation."""
type Shopify_ProductVariantsBulkUpdatePayload {
  """The updated product object."""
  product: Shopify_Product
  """The updated variants."""
  productVariants: [Shopify_ProductVariant!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ProductVariantsBulkUpdateUserError!]!
}

"""Error codes for failed variant bulk update mutations."""
type Shopify_ProductVariantsBulkUpdateUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_ProductVariantsBulkUpdateUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `ProductVariantsBulkUpdateUserError`.
"""
enum Shopify_ProductVariantsBulkUpdateUserErrorCode {
  """Product does not exist."""
  PRODUCT_DOES_NOT_EXIST
  """Product variant is missing ID attribute."""
  PRODUCT_VARIANT_ID_MISSING
  """Product variant does not exist."""
  PRODUCT_VARIANT_DOES_NOT_EXIST
  """Inventory quantities cannot be updated with variants API."""
  NO_INVENTORY_QUANTITIES_ON_VARIANTS_UPDATE
  """The variant already exists."""
  VARIANT_ALREADY_EXISTS
  """The price of the variant must be greater than or equal to zero."""
  GREATER_THAN_OR_EQUAL_TO
  """Variant options are not enough."""
  NEED_TO_ADD_OPTION_VALUES
  """Variant options are more than the product options."""
  OPTION_VALUES_FOR_NUMBER_OF_UNKNOWN_OPTIONS
  """You reached the limit of available SKUs in your current plan."""
  SUBSCRIPTION_VIOLATION
  """Inventory quantities cannot be provided during update."""
  NO_INVENTORY_QUANTITES_DURING_UPDATE
  """Price cannot take a negative value."""
  NEGATIVE_PRICE_VALUE
}

"""The set of valid sort keys for the ProductVariant query."""
enum Shopify_ProductVariantSortKeys {
  """Sort by the `title` value."""
  TITLE
  """Sort by the `name` value."""
  NAME
  """Sort by the `sku` value."""
  SKU
  """Sort by the `inventory_quantity` value."""
  INVENTORY_QUANTITY
  """Sort by the `inventory_management` value."""
  INVENTORY_MANAGEMENT
  """Sort by the `inventory_levels.available` value."""
  INVENTORY_LEVELS_AVAILABLE
  """Sort by the `inventory_policy` value."""
  INVENTORY_POLICY
  """Sort by the `full_title` value."""
  FULL_TITLE
  """Sort by the `popular` value."""
  POPULAR
  """Sort by the `position` value."""
  POSITION
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""Return type for `productVariantUpdate` mutation."""
type Shopify_ProductVariantUpdatePayload {
  """The product associated with the variant."""
  product: Shopify_Product
  """The updated variant."""
  productVariant: Shopify_ProductVariant
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""The set of valid sort keys for the ProfileItem query."""
enum Shopify_ProfileItemSortKeys {
  """Sort by the `title` value."""
  TITLE
  """Sort by the `product_type` value."""
  PRODUCT_TYPE
  """Sort by the `vendor` value."""
  VENDOR
  """Sort by the `inventory_total` value."""
  INVENTORY_TOTAL
  """Sort by the `updated_at` value."""
  UPDATED_AT
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `published_at` value."""
  PUBLISHED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
A publication is a group of products and collections that is published to an app.
"""
type Shopify_Publication implements Shopify_Node {
  """The app associated with the publication."""
  app: Shopify_App!
  """
  The collection publications for the list of collections published to the publication.
  """
  collectionPublicationsV3(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ResourcePublicationConnection!
  """The list of collections published to the publication."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CollectionConnection!
  """Whether the collection is available to the publication."""
  hasCollection(
    """Collection ID to check."""
    id: ID!
  ): Boolean!
  """A globally-unique identifier."""
  id: ID!
  """Name of the publication."""
  name: String!
  """
  The product publications for the list of products published to the publication.
  """
  productPublicationsV3(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ResourcePublicationConnection!
  """The list of products published to the publication."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductConnection!
  """Whether the publication supports future publishing."""
  supportsFuturePublishing: Boolean!
}

"""An auto-generated type for paginating through multiple Publications."""
type Shopify_PublicationConnection {
  """A list of edges."""
  edges: [Shopify_PublicationEdge!]!
  """A list of the nodes contained in PublicationEdge."""
  nodes: [Shopify_Publication!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Publication and a cursor during pagination.
"""
type Shopify_PublicationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of PublicationEdge."""
  node: Shopify_Publication!
}

"""Specifies the input fields required to publish a resource."""
input Shopify_PublicationInput {
  """ID of the publication."""
  publicationId: ID
  """
  The date and time that the resource was published. Setting this to a date in
  the future will schedule the resource to be published. Only online store
  channels support future publishing. This field has no effect if you include it
  in the `publishableUnpublish` mutation.
  """
  publishDate: DateTime
}

"""
Represents a resource that can be published to a channel.
A publishable resource can be either a Product or Collection.
"""
interface Shopify_Publishable {
  """
  The number of publications a resource is published to without feedback errors.
  """
  availablePublicationCount: Int!
  """The number of publications a resource is published on."""
  publicationCount(
    """
    Include only the resource's publications that are published. If false, then
    return all the resource's publications including future publications.
    """
    onlyPublished: Boolean = true
  ): Int!
  """Check to see whether the resource is published to a given channel."""
  publishedOnChannel(
    """The ID of the channel to check."""
    channelId: ID!
  ): Boolean! @deprecated(reason: "Use `publishedOnPublication` instead.")
  """
  Check to see whether the resource is published to the calling app's channel.
  """
  publishedOnCurrentChannel: Boolean! @deprecated(reason: "Use `publishedOnCurrentPublication` instead.")
  """
  Check to see whether the resource is published to the calling app's publication.
  """
  publishedOnCurrentPublication: Boolean!
  """Check to see whether the resource is published to a given publication."""
  publishedOnPublication(
    """The ID of the publication to check."""
    publicationId: ID!
  ): Boolean!
  """The list of resources that are published to a publication."""
  resourcePublications(
    """
    Whether to return only the resources that are currently published. If false,
    then also returns the resources that are scheduled to be published.
    """
    onlyPublished: Boolean = true
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ResourcePublicationConnection!
  """
  The list of resources that are either published or staged to be published to a publication.
  """
  resourcePublicationsV2(
    """
    Whether to return only the resources that are currently published. If false,
    then also returns the resources that are scheduled or staged to be published.
    """
    onlyPublished: Boolean = true
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ResourcePublicationV2Connection!
  """The list of channels that the resource is not published to."""
  unpublishedChannels(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ChannelConnection! @deprecated(reason: "Use `unpublishedPublications` instead.")
  """The list of publications that the resource is not published to."""
  unpublishedPublications(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PublicationConnection!
}

"""Return type for `publishablePublish` mutation."""
type Shopify_PublishablePublishPayload {
  """Resource that has been published."""
  publishable: Shopify_Publishable
  """The user's shop."""
  shop: Shopify_Shop!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `publishablePublishToCurrentChannel` mutation."""
type Shopify_PublishablePublishToCurrentChannelPayload {
  """Resource that has been published."""
  publishable: Shopify_Publishable
  """The user's shop."""
  shop: Shopify_Shop!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `publishableUnpublish` mutation."""
type Shopify_PublishableUnpublishPayload {
  """Resource that has been unpublished."""
  publishable: Shopify_Publishable
  """The user's shop."""
  shop: Shopify_Shop!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `publishableUnpublishToCurrentChannel` mutation."""
type Shopify_PublishableUnpublishToCurrentChannelPayload {
  """Resource that has been unpublished."""
  publishable: Shopify_Publishable
  """The user's shop."""
  shop: Shopify_Shop!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Published translation of a field of a resource."""
type Shopify_PublishedTranslation {
  """The resource field that is being translated."""
  key: String!
  """The locale of this translation."""
  locale: String!
  """
  The ID of the market that the translation is specific to. Null value means the translation is available in any market.
  """
  marketId: ID
  """The translation value."""
  value: String
}

"""Return type for `pubSubWebhookSubscriptionCreate` mutation."""
type Shopify_PubSubWebhookSubscriptionCreatePayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_PubSubWebhookSubscriptionCreateUserError!]!
  """The webhook subscription that was created."""
  webhookSubscription: Shopify_WebhookSubscription
}

"""
An error that occurs during the execution of `PubSubWebhookSubscriptionCreate`.
"""
type Shopify_PubSubWebhookSubscriptionCreateUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_PubSubWebhookSubscriptionCreateUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `PubSubWebhookSubscriptionCreateUserError`.
"""
enum Shopify_PubSubWebhookSubscriptionCreateUserErrorCode {
  """Invalid parameters provided."""
  INVALID_PARAMETERS
}

"""Specifies the input fields for a PubSub webhook subscription."""
input Shopify_PubSubWebhookSubscriptionInput {
  """The Pub/Sub project ID."""
  pubSubProject: String!
  """The Pub/Sub topic ID."""
  pubSubTopic: String!
  """The format in which the webhook subscription should send the data."""
  format: Shopify_WebhookSubscriptionFormat
  """The list of fields to be included in the webhook subscription."""
  includeFields: [String!]
  """
  The list of namespaces for any metafields that should be included in the webhook subscription.
  """
  metafieldNamespaces: [String!]
}

"""Return type for `pubSubWebhookSubscriptionUpdate` mutation."""
type Shopify_PubSubWebhookSubscriptionUpdatePayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_PubSubWebhookSubscriptionUpdateUserError!]!
  """The webhook subscription that was updated."""
  webhookSubscription: Shopify_WebhookSubscription
}

"""
An error that occurs during the execution of `PubSubWebhookSubscriptionUpdate`.
"""
type Shopify_PubSubWebhookSubscriptionUpdateUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_PubSubWebhookSubscriptionUpdateUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `PubSubWebhookSubscriptionUpdateUserError`.
"""
enum Shopify_PubSubWebhookSubscriptionUpdateUserErrorCode {
  """Invalid parameters provided."""
  INVALID_PARAMETERS
}

"""
Represents information about the purchasing company for the order or draft order.
"""
type Shopify_PurchasingCompany {
  """The company associated to the order or draft order."""
  company: Shopify_Company!
  """The company contact associated to the order or draft order."""
  contact: Shopify_CompanyContact
  """The company location associated to the order or draft order."""
  location: Shopify_CompanyLocation!
}

"""
Represents a purchasing company, which is a combination of company, company contact, and company location.
"""
input Shopify_PurchasingCompanyInput {
  """ID of the company."""
  companyId: ID!
  """ID of the company contact."""
  companyContactId: ID!
  """ID of the company location."""
  companyLocationId: ID!
}

"""
Represents information about the purchasing entity for the order or draft order.
"""
union Shopify_PurchasingEntity = Shopify_Customer | Shopify_PurchasingCompany

"""
Represents a purchasing entity. Can either be a customer or a purchasing company.
"""
input Shopify_PurchasingEntityInput {
  """Represents a customer. Null if there is a purchasing company."""
  customerId: ID
  """Represents a purchasing company. Null if there is a customer."""
  purchasingCompany: Shopify_PurchasingCompanyInput
}

"""
The record of the line items and transactions that were refunded to a customer,
along with restocking instructions for refunded line items.
"""
type Shopify_Refund implements Shopify_LegacyInteroperability & Shopify_Node {
  """The date and time when the refund was created."""
  createdAt: DateTime
  """A list of the refunded duties as part of this refund."""
  duties: [Shopify_RefundDuty!]
  """A globally-unique identifier."""
  id: ID!
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: Shopify_UnsignedInt64!
  """The optional note associated with the refund."""
  note: String
  """The order associated with the refund."""
  order: Shopify_Order!
  """The `RefundLineItem` resources attached to the refund."""
  refundLineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_RefundLineItemConnection!
  """The return associated with the refund."""
  return: Shopify_Return
  """The staff member who created the refund."""
  staffMember: Shopify_StaffMember
  """The total amount across all transactions for the refund."""
  totalRefunded: Shopify_MoneyV2! @deprecated(reason: "Use `totalRefundedSet` instead.")
  """
  The total amount across all transactions for the refund, in shop and presentment currencies.
  """
  totalRefundedSet: Shopify_MoneyBag!
  """The transactions associated with the refund."""
  transactions(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_OrderTransactionConnection!
  """The date and time when the refund was updated."""
  updatedAt: DateTime!
}

"""
An agreement between the merchant and customer to refund all or a portion of the order.
"""
type Shopify_RefundAgreement implements Shopify_SalesAgreement {
  """The application that created the agreement."""
  app: Shopify_App
  """The date and time at which the agreement occured."""
  happenedAt: DateTime!
  """The unique identifier for the agreement."""
  id: ID!
  """The reason the agremeent was created."""
  reason: Shopify_OrderActionType!
  """The refund associated with the agreement."""
  refund: Shopify_Refund!
  """The sales associated with the agreement."""
  sales(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SaleConnection!
  """The staff member associated with the agreement."""
  user: Shopify_StaffMember
}

"""An auto-generated type for paginating through multiple Refunds."""
type Shopify_RefundConnection {
  """A list of edges."""
  edges: [Shopify_RefundEdge!]!
  """A list of the nodes contained in RefundEdge."""
  nodes: [Shopify_Refund!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `refundCreate` mutation."""
type Shopify_RefundCreatePayload {
  """The order associated with the created refund."""
  order: Shopify_Order
  """The created refund."""
  refund: Shopify_Refund
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Represents a refunded duty."""
type Shopify_RefundDuty {
  """The amount of a refunded duty in shop and presentment currencies."""
  amountSet: Shopify_MoneyBag!
  """The duty associated with this refunded duty."""
  originalDuty: Shopify_Duty
}

"""The fields required to reimburse duties on a refund."""
input Shopify_RefundDutyInput {
  """The ID of the duty in the refund."""
  dutyId: ID!
  """The type of refund for this duty."""
  refundType: Shopify_RefundDutyRefundType
}

"""The type of refund to perform for a particular refund duty."""
enum Shopify_RefundDutyRefundType {
  """
  The duty is proportionally refunded based on the quantity of the refunded line item.
  """
  PROPORTIONAL
  """The duty is fully refunded."""
  FULL
}

"""
An auto-generated type which holds one Refund and a cursor during pagination.
"""
type Shopify_RefundEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of RefundEdge."""
  node: Shopify_Refund!
}

"""The input fields to create a refund."""
input Shopify_RefundInput {
  """
  The currency that is used to refund the order. This must be the presentment
  currency, which is the currency used by the customer. This is a required field
  for orders where the currency and presentment currency differ.
  """
  currency: Shopify_CurrencyCode
  """The ID of the order that is being refunded."""
  orderId: ID!
  """An optional note that is attached to the refund."""
  note: String
  """Whether to send a refund notification to the customer."""
  notify: Boolean
  """The input fields that are required to reimburse shipping costs."""
  shipping: Shopify_ShippingRefundInput
  """A list of line items to refund."""
  refundLineItems: [Shopify_RefundLineItemInput!]
  """A list of duties to refund."""
  refundDuties: [Shopify_RefundDutyInput!]
  """A list of transactions involved in the refund."""
  transactions: [Shopify_OrderTransactionInput!]
}

"""A line item that's included in a refund."""
type Shopify_RefundLineItem {
  """The `LineItem` resource associated to the refunded line item."""
  lineItem: Shopify_LineItem!
  """The inventory restock location."""
  location: Shopify_Location
  """The price of a refunded line item."""
  price: Shopify_Money! @deprecated(reason: "Use `priceSet` instead.")
  """The price of a refunded line item in shop and presentment currencies."""
  priceSet: Shopify_MoneyBag!
  """The quantity of a refunded line item."""
  quantity: Int!
  """The type of restock for the refunded line item."""
  restockType: Shopify_RefundLineItemRestockType!
  """
  Whether the refunded line item was restocked. Not applicable in the context of a SuggestedRefund.
  """
  restocked: Boolean!
  """The subtotal price of a refunded line item."""
  subtotal: Shopify_Money! @deprecated(reason: "Use `subtotalSet` instead.")
  """
  The subtotal price of a refunded line item in shop and presentment currencies.
  """
  subtotalSet: Shopify_MoneyBag!
  """The total tax charged on a refunded line item."""
  totalTax: Shopify_Money! @deprecated(reason: "Use `totalTaxSet` instead.")
  """
  The total tax charged on a refunded line item in shop and presentment currencies.
  """
  totalTaxSet: Shopify_MoneyBag!
}

"""
An auto-generated type for paginating through multiple RefundLineItems.
"""
type Shopify_RefundLineItemConnection {
  """A list of edges."""
  edges: [Shopify_RefundLineItemEdge!]!
  """A list of the nodes contained in RefundLineItemEdge."""
  nodes: [Shopify_RefundLineItem!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one RefundLineItem and a cursor during pagination.
"""
type Shopify_RefundLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of RefundLineItemEdge."""
  node: Shopify_RefundLineItem!
}

"""The fields required to reimburse line items on a refund."""
input Shopify_RefundLineItemInput {
  """The ID of the line item in the refund."""
  lineItemId: ID!
  """The quantity of the associated line item to be refunded."""
  quantity: Int!
  """The type of restock for this line item."""
  restockType: Shopify_RefundLineItemRestockType
  """
  The intended location for restocking. If the `restockType` is set to `NO_RESTOCK`, then this value is empty.`
  """
  locationId: ID
}

"""The type of restock performed for a particular refund line item."""
enum Shopify_RefundLineItemRestockType {
  """
  The refund line item was returned. Use this when restocking line items that were fulfilled.
  """
  RETURN
  """
  The refund line item was canceled. Use this when restocking unfulfilled line items.
  """
  CANCEL
  """
  Deprecated. The refund line item was restocked, without specifically
  beingidentified as a return or cancelation. This value is not accepted when
  creating new refunds.
  """
  LEGACY_RESTOCK
  """Refund line item was not restocked."""
  NO_RESTOCK
}

"""The input fields for the shipping cost to refund."""
input Shopify_RefundShippingInput {
  """
  The input fields required to refund shipping cost, in the presentment currency of the order.
  This overrides the `fullRefund` argument.
  """
  shippingRefundAmount: Shopify_MoneyInput
  """Whether to refund the full shipping amount."""
  fullRefund: Boolean = false
}

"""Input for a remote Authorize.net customer payment profile."""
input Shopify_RemoteAuthorizeNetCustomerPaymentProfileInput {
  """The customerProfileId value from the Authorize.net API."""
  customerProfileId: String!
  """The customerPaymentProfileId value from the Authorize.net API."""
  customerPaymentProfileId: String
}

"""The input fields for a remote Braintree customer payment profile."""
input Shopify_RemoteBraintreePaymentMethodInput {
  """The `customer_id` value from the Braintree API."""
  customerId: String!
  """The `payment_method_token` value from the Braintree API."""
  paymentMethodToken: String
}

"""Input for a remote stripe payment method."""
input Shopify_RemoteStripePaymentMethodInput {
  """The customer_id value from the Stripe API."""
  customerId: String!
  """The payment_method_id value from the Stripe API."""
  paymentMethodId: String
}

"""
An alert message that appears in the Shopify admin about a problem with a store
resource, with 1 or more actions to take. For example, you could use an alert to
indicate that you're not charging taxes on some product variants.
They can optionally have a specific icon and be dismissed by merchants.
"""
type Shopify_ResourceAlert {
  """
  Buttons in the alert that link to related information.
  For example, _Edit variants_.
  """
  actions: [Shopify_ResourceAlertAction!]!
  """
  The secondary text in the alert that includes further information or instructions about how to solve a problem.
  """
  content: Shopify_HTML!
  """
  Unique identifier that appears when an alert is manually closed by the merchant.
  Most alerts cannot be manually closed.
  """
  dismissibleHandle: String
  """An icon that is optionally displayed with the alert."""
  icon: Shopify_ResourceAlertIcon
  """Indication of how important the alert is."""
  severity: Shopify_ResourceAlertSeverity!
  """
  The primary text in the alert that includes information or describes the problem.
  """
  title: String!
}

"""An action associated to a resource alert, such as editing variants."""
type Shopify_ResourceAlertAction {
  """Whether the action appears as a button or as a link."""
  primary: Boolean!
  """Resource for the action to show."""
  show: String
  """The text for the button in the alert. For example, _Edit variants_."""
  title: String!
  """The target URL that the button links to."""
  url: URL!
}

"""The available icons for resource alerts."""
enum Shopify_ResourceAlertIcon {
  """A checkmark inside a circle."""
  CHECKMARK_CIRCLE
  """A lowercase `i` inside a circle."""
  INFORMATION_CIRCLE
}

"""The possible severity levels for a resource alert."""
enum Shopify_ResourceAlertSeverity {
  """Indicates a neutral alert. For example, an accepted dispute."""
  DEFAULT
  """Indicates an informative alert. For example, an escalated dispute."""
  INFO
  """Indicates an informative alert. For example, a new dispute."""
  WARNING
  """Indicates a success alert. For example, a winning a dispute."""
  SUCCESS
  """Indicates a critical alert. For example, a blocked app."""
  CRITICAL
  ERROR @deprecated(reason: "`ERROR` severity is being deprecated in favour of `WARNING` or `CRITICAL` instead.")
}

"""
Represents feedback from apps about a resource, and the steps required to set up the apps on the shop.
"""
type Shopify_ResourceFeedback {
  """
  Feedback from an app about the steps a merchant needs to take to set up the app on their store.
  """
  appFeedback: [Shopify_AppFeedback!]! @deprecated(reason: "Use `details` instead.")
  """List of AppFeedback detailing issues regarding a resource."""
  details: [Shopify_AppFeedback!]!
  """Summary of resource feedback pertaining to the resource."""
  summary: String!
}

"""The input fields for a resource feedback object."""
input Shopify_ResourceFeedbackCreateInput {
  """
  The date and time when the feedback was generated. Used to help determine whether
  incoming feedback is outdated compared to existing feedback.
  """
  feedbackGeneratedAt: DateTime!
  """
  If the feedback state is `requires_action`, then you can send a string message
  that communicates the action to be taken by the merchant.
  The string must be a single message up to 100 characters long and must end with a period.
  You need to adhere to the message formatting rules or your requests will fail:
  - `[Explanation of the problem]. [Suggested action].`
  
  **Examples:**
  - `[Your app name]` is not connected. Connect your account to use this sales channel. `[Learn more]`
  - `[Your app name]` is not configured. Agree to the terms and conditions to use this app. `[Learn more]`
  Both `Your app name` and `Learn more` (a button which directs merchants to
  your app) are automatically populated in the Shopify admin.
  """
  messages: [String!]
  """The state of the feedback and whether it requires merchant action."""
  state: Shopify_ResourceFeedbackState!
}

"""The state of the resource feedback."""
enum Shopify_ResourceFeedbackState {
  """No action required from merchant."""
  ACCEPTED
  """The merchant needs to resolve an issue with the resource."""
  REQUIRES_ACTION
}

"""A resource limit represents the limits that the resource has."""
type Shopify_ResourceLimit {
  """Whether the resource is available."""
  available: Boolean!
  """Quantity available. If null the quantity available is unlimited."""
  quantityAvailable: Int
  """Quantity limit of the resource. If null the quantity is unlimited."""
  quantityLimit: Int
  """
  Quantity used of the resource. If null the quantity used cannot be retrieved.
  """
  quantityUsed: Int
}

"""
A resource publication represents information about the publication of a resource.
An instance of `ResourcePublication`, unlike `ResourcePublicationV2`, can be neither published or scheduled to be published.

See [ResourcePublicationV2](/api/admin-graphql/latest/objects/ResourcePublicationV2) for more context.
"""
type Shopify_ResourcePublication {
  """The channel the resource publication is published to."""
  channel: Shopify_Channel! @deprecated(reason: "Use `publication` instead.")
  """
  Whether the resource publication is published. Also returns true if the resource publication is scheduled to be published.
  If false, then the resource publication is neither published nor scheduled to be published.
  """
  isPublished: Boolean!
  """The publication the resource publication is published to."""
  publication: Shopify_Publication!
  """
  The date that the resource publication was or is going to be published to the publication.
  If the product isn't published, then this field returns an epoch timestamp.
  """
  publishDate: DateTime!
  """The resource published to the publication."""
  publishable: Shopify_Publishable!
}

"""
An auto-generated type for paginating through multiple ResourcePublications.
"""
type Shopify_ResourcePublicationConnection {
  """A list of edges."""
  edges: [Shopify_ResourcePublicationEdge!]!
  """A list of the nodes contained in ResourcePublicationEdge."""
  nodes: [Shopify_ResourcePublication!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ResourcePublication and a cursor during pagination.
"""
type Shopify_ResourcePublicationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of ResourcePublicationEdge."""
  node: Shopify_ResourcePublication!
}

"""
A resource publication represents information about the publication of a resource.
Unlike `ResourcePublication`, an instance of `ResourcePublicationV2` can't be
unpublished. It must either be published or scheduled to be published.

See [ResourcePublication](/api/admin-graphql/latest/objects/ResourcePublication) for more context.
"""
type Shopify_ResourcePublicationV2 {
  """
  Whether the resource publication is published. If true, then the resource publication is published to the publication.
  If false, then the resource publication is staged to be published to the publication.
  """
  isPublished: Boolean!
  """The publication the resource publication is published to."""
  publication: Shopify_Publication!
  """
  The date that the resource publication was or is going to be published to the publication.
  """
  publishDate: DateTime
  """The resource published to the publication."""
  publishable: Shopify_Publishable!
}

"""
An auto-generated type for paginating through multiple ResourcePublicationV2s.
"""
type Shopify_ResourcePublicationV2Connection {
  """A list of edges."""
  edges: [Shopify_ResourcePublicationV2Edge!]!
  """A list of the nodes contained in ResourcePublicationV2Edge."""
  nodes: [Shopify_ResourcePublicationV2!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ResourcePublicationV2 and a cursor during pagination.
"""
type Shopify_ResourcePublicationV2Edge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of ResourcePublicationV2Edge."""
  node: Shopify_ResourcePublicationV2!
}

"""Represents a return."""
type Shopify_Return implements Shopify_Node {
  """Additional information about the declined return."""
  decline: Shopify_ReturnDecline
  """A globally-unique identifier."""
  id: ID!
  """The name of the return."""
  name: String!
  """The order that the return belongs to."""
  order: Shopify_Order!
  """The list of refunds associated with the return."""
  refunds(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_RefundConnection!
  """The return line items attached to the return."""
  returnLineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ReturnLineItemConnection!
  """The list of reverse fulfillment orders for the return."""
  reverseFulfillmentOrders(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ReverseFulfillmentOrderConnection!
  """The status of the return."""
  status: Shopify_ReturnStatus!
  """A suggested refund for the return."""
  suggestedRefund(
    """The line items from the return to include in the refund."""
    returnRefundLineItems: [Shopify_ReturnRefundLineItemInput!]!
    """
    The shipping amount from the associated order to include in the refund.
    """
    refundShipping: Shopify_RefundShippingInput
    """The duties from to associated order to include in the refund."""
    refundDuties: [Shopify_RefundDutyInput!]
  ): Shopify_SuggestedReturnRefund
  """The sum of all line item quantities for the return."""
  totalQuantity: Int!
}

"""
A returnable fulfillment, which is an order that has been delivered
and is eligible to be returned to the merchant.
"""
type Shopify_ReturnableFulfillment implements Shopify_Node {
  """The fulfillment that the returnable fulfillment refers to."""
  fulfillment: Shopify_Fulfillment!
  """The unique identifier of the Returnable Fulfillment."""
  id: ID!
  """The list of returnable fulfillment line items."""
  returnableFulfillmentLineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ReturnableFulfillmentLineItemConnection!
}

"""
An auto-generated type for paginating through multiple ReturnableFulfillments.
"""
type Shopify_ReturnableFulfillmentConnection {
  """A list of edges."""
  edges: [Shopify_ReturnableFulfillmentEdge!]!
  """A list of the nodes contained in ReturnableFulfillmentEdge."""
  nodes: [Shopify_ReturnableFulfillment!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ReturnableFulfillment and a cursor during pagination.
"""
type Shopify_ReturnableFulfillmentEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of ReturnableFulfillmentEdge."""
  node: Shopify_ReturnableFulfillment!
}

"""A returnable fulfillment line item."""
type Shopify_ReturnableFulfillmentLineItem {
  """The fulfillment line item that can be returned."""
  fulfillmentLineItem: Shopify_FulfillmentLineItem!
  """The quantity available to be returned."""
  quantity: Int!
}

"""
An auto-generated type for paginating through multiple ReturnableFulfillmentLineItems.
"""
type Shopify_ReturnableFulfillmentLineItemConnection {
  """A list of edges."""
  edges: [Shopify_ReturnableFulfillmentLineItemEdge!]!
  """A list of the nodes contained in ReturnableFulfillmentLineItemEdge."""
  nodes: [Shopify_ReturnableFulfillmentLineItem!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ReturnableFulfillmentLineItem and a cursor during pagination.
"""
type Shopify_ReturnableFulfillmentLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of ReturnableFulfillmentLineItemEdge."""
  node: Shopify_ReturnableFulfillmentLineItem!
}

"""The input fields for approving a customer's return request."""
input Shopify_ReturnApproveRequestInput {
  """The ID of the return that's being approved."""
  id: ID!
}

"""Return type for `returnApproveRequest` mutation."""
type Shopify_ReturnApproveRequestPayload {
  """The approved return."""
  return: Shopify_Return
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ReturnUserError!]!
}

"""Return type for `returnCancel` mutation."""
type Shopify_ReturnCancelPayload {
  """The canceled return."""
  return: Shopify_Return
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ReturnUserError!]!
}

"""Return type for `returnClose` mutation."""
type Shopify_ReturnClosePayload {
  """The closed return."""
  return: Shopify_Return
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ReturnUserError!]!
}

"""An auto-generated type for paginating through multiple Returns."""
type Shopify_ReturnConnection {
  """A list of edges."""
  edges: [Shopify_ReturnEdge!]!
  """A list of the nodes contained in ReturnEdge."""
  nodes: [Shopify_Return!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `returnCreate` mutation."""
type Shopify_ReturnCreatePayload {
  """The created return."""
  return: Shopify_Return
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ReturnUserError!]!
}

"""
Additional information about why a merchant declined the customer's return request.
"""
type Shopify_ReturnDecline {
  """
  The notification message sent to the customer about their declined return request.
  Maximum length: 500 characters.
  """
  note: String
  """The reason the customer's return request was declined."""
  reason: Shopify_ReturnDeclineReason!
}

"""The reason why the merchant declined a customer's return request."""
enum Shopify_ReturnDeclineReason {
  """The return period has ended."""
  RETURN_PERIOD_ENDED
  """The return contains final sale items."""
  FINAL_SALE
  """The return is declined for another reason."""
  OTHER
}

"""The input fields for declining a customer's return request."""
input Shopify_ReturnDeclineRequestInput {
  """The ID of the return that's being declined."""
  id: ID!
  """The reason why the merchant declined the customer's return request."""
  declineReason: Shopify_ReturnDeclineReason!
}

"""Return type for `returnDeclineRequest` mutation."""
type Shopify_ReturnDeclineRequestPayload {
  """The declined return."""
  return: Shopify_Return
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ReturnUserError!]!
}

"""
An auto-generated type which holds one Return and a cursor during pagination.
"""
type Shopify_ReturnEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of ReturnEdge."""
  node: Shopify_Return!
}

"""Possible error codes that can be returned by `ReturnUserError`."""
enum Shopify_ReturnErrorCode {
  """Unexpected internal error happened."""
  INTERNAL_ERROR
  """Too many arguments provided."""
  TOO_MANY_ARGUMENTS
  """The input value is blank."""
  BLANK
  """The input value should be equal to the value allowed."""
  EQUAL_TO
  """The input value should be greater than the minimum allowed value."""
  GREATER_THAN
  """
  The input value should be greater than or equal to the minimum value allowed.
  """
  GREATER_THAN_OR_EQUAL_TO
  """The input value isn't included in the list."""
  INCLUSION
  """The input value is invalid."""
  INVALID
  """The input value should be less than the maximum value allowed."""
  LESS_THAN
  """
  The input value should be less than or equal to the maximum value allowed.
  """
  LESS_THAN_OR_EQUAL_TO
  """The input value is not a number."""
  NOT_A_NUMBER
  """The input value needs to be blank."""
  PRESENT
  """The input value is already taken."""
  TAKEN
  """The input value is too big."""
  TOO_BIG
  """The input value is too long."""
  TOO_LONG
  """The input value is too short."""
  TOO_SHORT
  """The input value is the wrong length."""
  WRONG_LENGTH
  """A resource was not in the correct state for the operation to succeed."""
  INVALID_STATE
  """A required feature is not enabled."""
  FEATURE_NOT_ENABLED
  """A requested notification could not be sent."""
  NOTIFICATION_FAILED
  """The requested resource already exists."""
  ALREADY_EXISTS
  """A requested item could not be found."""
  NOT_FOUND
  """A requested resource could not be created."""
  CREATION_FAILED
  """A requested item is not editable."""
  NOT_EDITABLE
}

"""The input fields for a return."""
input Shopify_ReturnInput {
  """The ID of the order to be returned."""
  orderId: ID!
  """The return line items list to be handled."""
  returnLineItems: [Shopify_ReturnLineItemInput!]!
  """
  When `true` the customer will receive a notification if there is an `Order.email` present.
  """
  notifyCustomer: Boolean = false
  """
  The UTC date and time when the return was first solicited by the customer.
  """
  requestedAt: DateTime
}

"""A return line item."""
type Shopify_ReturnLineItem implements Shopify_Node {
  """
  A note from the customer that describes the item to be returned. Maximum length: 300 characters.
  """
  customerNote: String
  """The fulfillment line item from which items are returned."""
  fulfillmentLineItem: Shopify_FulfillmentLineItem!
  """A globally-unique identifier."""
  id: ID!
  """The quantity being returned."""
  quantity: Int!
  """The quantity that can be refunded."""
  refundableQuantity: Int!
  """The quantity that was refunded."""
  refundedQuantity: Int!
  """The reason for returning the item."""
  returnReason: Shopify_ReturnReason!
  """
  Additional information about the reason for the return. Maximum length: 255 characters.
  """
  returnReasonNote: String!
  """The total weight of the item."""
  totalWeight: Shopify_Weight
  """
  The total line price after all discounts on the line item, including both line
  item level discounts and code-based line item discounts, are applied.
  """
  withCodeDiscountedTotalPriceSet: Shopify_MoneyBag!
}

"""
An auto-generated type for paginating through multiple ReturnLineItems.
"""
type Shopify_ReturnLineItemConnection {
  """A list of edges."""
  edges: [Shopify_ReturnLineItemEdge!]!
  """A list of the nodes contained in ReturnLineItemEdge."""
  nodes: [Shopify_ReturnLineItem!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ReturnLineItem and a cursor during pagination.
"""
type Shopify_ReturnLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of ReturnLineItemEdge."""
  node: Shopify_ReturnLineItem!
}

"""The input fields for a return line item."""
input Shopify_ReturnLineItemInput {
  """
  The ID of the fulfillment line item to be returned.
  Specifically, this field expects a `FulfillmentLineItem.id`.
  """
  fulfillmentLineItemId: ID!
  """The quantity of the item to be returned."""
  quantity: Int!
  """The reason for the item to be returned."""
  returnReason: Shopify_ReturnReason!
  """
  A note about the reason that the item is being returned.
  A note can be provided only if the return reason is `OTHER`.
  Maximum length: 255 characters.
  """
  returnReasonNote: String = ""
}

"""The reason for returning the return line item."""
enum Shopify_ReturnReason {
  """The item is returned because the size was too small."""
  SIZE_TOO_SMALL
  """The item is returned because the size was too large."""
  SIZE_TOO_LARGE
  """The item is returned because the customer changed their mind."""
  UNWANTED
  """The item is returned because it was not as described."""
  NOT_AS_DESCRIBED
  """The item is returned because the customer received the wrong one."""
  WRONG_ITEM
  """The item is returned because it is damaged or defective."""
  DEFECTIVE
  """The item is returned because the buyer did not like the style."""
  STYLE
  """The item is returned because the buyer did not like the color."""
  COLOR
  """
  The item is returned for another reason. For this value, a return reason note is also provided.
  """
  OTHER
  """The item is returned because of an unknown reason."""
  UNKNOWN
}

"""The input fields to refund a return."""
input Shopify_ReturnRefundInput {
  """The ID of the return."""
  returnId: ID!
  """A list of return line items to refund."""
  returnRefundLineItems: [Shopify_ReturnRefundLineItemInput!]!
  """The shipping amount to refund."""
  refundShipping: Shopify_RefundShippingInput
  """A list of duties to refund."""
  refundDuties: [Shopify_RefundDutyInput!]
  """A list of transactions involved in refunding the return."""
  orderTransactions: [Shopify_ReturnRefundOrderTransactionInput!] = []
  """Whether to send a refund notification to the customer."""
  notifyCustomer: Boolean = false
}

"""The input fields for a return refund line item."""
input Shopify_ReturnRefundLineItemInput {
  """The ID of the return line item to be refunded."""
  returnLineItemId: ID!
  """The quantity of the return line item to be refunded."""
  quantity: Int!
}

"""The input fields to create order transactions when refunding a return."""
input Shopify_ReturnRefundOrderTransactionInput {
  """
  The amount of money for the transaction in the presentment currency of the order.
  """
  transactionAmount: Shopify_MoneyInput!
  """
  The ID of the parent order transaction. The transaction must be of kind `CAPTURE` or a `SALE`.
  """
  parentId: ID!
}

"""Return type for `returnRefund` mutation."""
type Shopify_ReturnRefundPayload {
  """The created refund."""
  refund: Shopify_Refund
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ReturnUserError!]!
}

"""Return type for `returnReopen` mutation."""
type Shopify_ReturnReopenPayload {
  """The reopened return."""
  return: Shopify_Return
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ReturnUserError!]!
}

"""The input fields for requesting a return."""
input Shopify_ReturnRequestInput {
  """The ID of the order that's being returned."""
  orderId: ID!
  """The line items that are being handled in the return."""
  returnLineItems: [Shopify_ReturnRequestLineItemInput!]!
}

"""The input fields for a return line item."""
input Shopify_ReturnRequestLineItemInput {
  """
  The ID of the fulfillment line item to be returned.
  Specifically, this field expects a `FulfillmentLineItem.id`.
  """
  fulfillmentLineItemId: ID!
  """The quantity of the item that's being returned."""
  quantity: Int!
  """The reason why the line item is being returned."""
  returnReason: Shopify_ReturnReason!
  """
  A note from the customer that describes the item to be returned.
  For example, the note can communicate issues with the item to the merchant.
  Maximum length: 300 characters.
  """
  customerNote: String
}

"""Return type for `returnRequest` mutation."""
type Shopify_ReturnRequestPayload {
  """The requested return."""
  return: Shopify_Return
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ReturnUserError!]!
}

"""The status of a return."""
enum Shopify_ReturnStatus {
  """The return has been canceled."""
  CANCELED
  """The return has been completed."""
  CLOSED
  """The return is in progress."""
  OPEN
  """The return was requested."""
  REQUESTED
  """The return was declined."""
  DECLINED
}

"""An error that occurs during the execution of a return mutation."""
type Shopify_ReturnUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_ReturnErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
A reverse delivery is a post-fulfillment object that represents a buyer sending a package to a merchant.
For example, a buyer requests a return, and a merchant sends the buyer a shipping label.
The reverse delivery contains the context of the items sent back, how they're being sent back
(for example, a shipping label), and the current state of the delivery (tracking information).
"""
type Shopify_ReverseDelivery implements Shopify_Node {
  """The deliverable associated with the reverse delivery."""
  deliverable: Shopify_ReverseDeliveryDeliverable
  """The ID of the reverse delivery."""
  id: ID!
  """The reverse delivery line items attached to the reverse delivery."""
  reverseDeliveryLineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ReverseDeliveryLineItemConnection!
  """The `ReverseFulfillmentOrder` associated with the reverse delivery."""
  reverseFulfillmentOrder: Shopify_ReverseFulfillmentOrder!
}

"""
An auto-generated type for paginating through multiple ReverseDeliveries.
"""
type Shopify_ReverseDeliveryConnection {
  """A list of edges."""
  edges: [Shopify_ReverseDeliveryEdge!]!
  """A list of the nodes contained in ReverseDeliveryEdge."""
  nodes: [Shopify_ReverseDelivery!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `reverseDeliveryCreateWithShipping` mutation."""
type Shopify_ReverseDeliveryCreateWithShippingPayload {
  """The created reverse delivery."""
  reverseDelivery: Shopify_ReverseDelivery
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ReturnUserError!]!
}

"""The delivery method and artifacts associated with a reverse delivery."""
union Shopify_ReverseDeliveryDeliverable = Shopify_ReverseDeliveryShippingDeliverable

"""The input fields to dispose a reverse delivery line item."""
input Shopify_ReverseDeliveryDisposeInput {
  """The ID of the reverse delivery line item."""
  reverseDeliveryLineItemId: ID!
  """The quantity of the reverse delivery line item to dispose."""
  quantity: Int!
  """The final arrangement for the reverse delivery line item."""
  dispositionType: Shopify_ReverseFulfillmentOrderDispositionType!
  """
  The ID of the location where the reverse delivery line item is to be disposed. This is required
            when the disposition type is RESTOCKED.
  """
  locationId: ID
}

"""Return type for `reverseDeliveryDispose` mutation."""
type Shopify_ReverseDeliveryDisposePayload {
  """The disposed reverse delivery line items."""
  reverseDeliveryLineItems: [Shopify_ReverseDeliveryLineItem!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ReturnUserError!]!
}

"""
An auto-generated type which holds one ReverseDelivery and a cursor during pagination.
"""
type Shopify_ReverseDeliveryEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of ReverseDeliveryEdge."""
  node: Shopify_ReverseDelivery!
}

"""The input fields for a reverse label."""
input Shopify_ReverseDeliveryLabelInput {
  """
  The URL of the label file. If a label file was uploaded to be attached to the
  delivery, then provide the temporary staged URL.
  """
  fileUrl: URL!
}

"""The return label file information for a reverse delivery."""
type Shopify_ReverseDeliveryLabelV2 {
  """The date and time when the reverse delivery label was created."""
  createdAt: DateTime!
  """A public link that can be used to download the label image."""
  publicFileUrl: URL
  """The date and time when the reverse delivery label was updated."""
  updatedAt: DateTime!
}

"""The details about a reverse delivery line item."""
type Shopify_ReverseDeliveryLineItem implements Shopify_Node {
  """The dispositions of the item."""
  dispositions: [Shopify_ReverseFulfillmentOrderDisposition!]!
  """A globally-unique identifier."""
  id: ID!
  """The expected number of units."""
  quantity: Int!
  """The corresponding reverse fulfillment order line item."""
  reverseFulfillmentOrderLineItem: Shopify_ReverseFulfillmentOrderLineItem!
}

"""
An auto-generated type for paginating through multiple ReverseDeliveryLineItems.
"""
type Shopify_ReverseDeliveryLineItemConnection {
  """A list of edges."""
  edges: [Shopify_ReverseDeliveryLineItemEdge!]!
  """A list of the nodes contained in ReverseDeliveryLineItemEdge."""
  nodes: [Shopify_ReverseDeliveryLineItem!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ReverseDeliveryLineItem and a cursor during pagination.
"""
type Shopify_ReverseDeliveryLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of ReverseDeliveryLineItemEdge."""
  node: Shopify_ReverseDeliveryLineItem!
}

"""The input fields for a reverse delivery line item."""
input Shopify_ReverseDeliveryLineItemInput {
  """The ID of the related reverse fulfillment order line item."""
  reverseFulfillmentOrderLineItemId: ID!
  """The quantity of the item to be included in the delivery."""
  quantity: Int!
}

"""
A reverse shipping deliverable that may include a label and tracking information.
"""
type Shopify_ReverseDeliveryShippingDeliverable {
  """The return label attached to the reverse delivery."""
  label: Shopify_ReverseDeliveryLabelV2
  """The information to track the reverse delivery."""
  tracking: Shopify_ReverseDeliveryTrackingV2
}

"""Return type for `reverseDeliveryShippingUpdate` mutation."""
type Shopify_ReverseDeliveryShippingUpdatePayload {
  """The updated reverse delivery."""
  reverseDelivery: Shopify_ReverseDelivery
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ReturnUserError!]!
}

"""The input fields for tracking information about a return delivery."""
input Shopify_ReverseDeliveryTrackingInput {
  """The tracking number for the label."""
  number: String
  """
  The tracking URL for the carrier. If the carrier isn't supported by Shopify,
  then provide the tracking URL of the delivery.
  """
  url: URL
}

"""Represents the information used to track a reverse delivery."""
type Shopify_ReverseDeliveryTrackingV2 {
  """The provider of the tracking information, in a human-readable format."""
  carrierName: String
  """The identifier used by the courier to identify the shipment."""
  number: String
  """The URL to track a shipment."""
  url: URL
}

"""
A group of one or more items in a return that will be processed at a fulfillment service.
There can be more than one reverse fulfillment order for a return at a given location.
"""
type Shopify_ReverseFulfillmentOrder implements Shopify_Node {
  """A globally-unique identifier."""
  id: ID!
  """
  The list of reverse fulfillment order line items for the reverse fulfillment order.
  """
  lineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ReverseFulfillmentOrderLineItemConnection!
  """The order associated with the reverse fulfillment order."""
  order: Shopify_Order!
  """The list of reverse deliveries for the reverse fulfillment order."""
  reverseDeliveries(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ReverseDeliveryConnection!
  """The status of the reverse fulfillment order."""
  status: Shopify_ReverseFulfillmentOrderStatus!
  """
  The current confirmation for the reverse fulfillment order from a third-party logistics service. 
  If no third-party service is involved, then this value is `nil`.
  """
  thirdPartyConfirmation: Shopify_ReverseFulfillmentOrderThirdPartyConfirmation
}

"""
An auto-generated type for paginating through multiple ReverseFulfillmentOrders.
"""
type Shopify_ReverseFulfillmentOrderConnection {
  """A list of edges."""
  edges: [Shopify_ReverseFulfillmentOrderEdge!]!
  """A list of the nodes contained in ReverseFulfillmentOrderEdge."""
  nodes: [Shopify_ReverseFulfillmentOrder!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""The input fields to dispose a reverse fulfillment order line item."""
input Shopify_ReverseFulfillmentOrderDisposeInput {
  """The ID of the reverse fulfillment order line item."""
  reverseFulfillmentOrderLineItemId: ID!
  """The quantity of the reverse fulfillment order line item to dispose."""
  quantity: Int!
  """
  The ID of the location where the reverse fulfillment order line item is to be disposed.
          This is required when the disposition type is RESTOCKED.
  """
  locationId: ID
  """The final arrangement for the reverse fulfillment order line item."""
  dispositionType: Shopify_ReverseFulfillmentOrderDispositionType!
}

"""Return type for `reverseFulfillmentOrderDispose` mutation."""
type Shopify_ReverseFulfillmentOrderDisposePayload {
  """The disposed reverse fulfillment order line items."""
  reverseFulfillmentOrderLineItems: [Shopify_ReverseFulfillmentOrderLineItem!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ReturnUserError!]!
}

"""The details of the arrangement of an item."""
type Shopify_ReverseFulfillmentOrderDisposition implements Shopify_Node {
  """A globally-unique identifier."""
  id: ID!
  """The location where the disposition occurred."""
  location: Shopify_Location
  """The number of disposed units."""
  quantity: Int!
  """The final arrangement of an item."""
  type: Shopify_ReverseFulfillmentOrderDispositionType!
}

"""The final arrangement of an item from a reverse fulfillment order."""
enum Shopify_ReverseFulfillmentOrderDispositionType {
  """An item that was restocked."""
  RESTOCKED
  """
  An item that requires further processing before being restocked or discarded.
  """
  PROCESSING_REQUIRED
  """An item that wasn't restocked."""
  NOT_RESTOCKED
  """An item that was expected but absent."""
  MISSING
}

"""
An auto-generated type which holds one ReverseFulfillmentOrder and a cursor during pagination.
"""
type Shopify_ReverseFulfillmentOrderEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of ReverseFulfillmentOrderEdge."""
  node: Shopify_ReverseFulfillmentOrder!
}

"""The details about a reverse fulfillment order line item."""
type Shopify_ReverseFulfillmentOrderLineItem implements Shopify_Node {
  """The dispositions of the item."""
  dispositions: [Shopify_ReverseFulfillmentOrderDisposition!]!
  """
  The corresponding fulfillment line item for a reverse fulfillment order line item.
  """
  fulfillmentLineItem: Shopify_FulfillmentLineItem!
  """A globally-unique identifier."""
  id: ID!
  """The total number of units to be processed."""
  totalQuantity: Int!
}

"""
An auto-generated type for paginating through multiple ReverseFulfillmentOrderLineItems.
"""
type Shopify_ReverseFulfillmentOrderLineItemConnection {
  """A list of edges."""
  edges: [Shopify_ReverseFulfillmentOrderLineItemEdge!]!
  """A list of the nodes contained in ReverseFulfillmentOrderLineItemEdge."""
  nodes: [Shopify_ReverseFulfillmentOrderLineItem!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ReverseFulfillmentOrderLineItem and a cursor during pagination.
"""
type Shopify_ReverseFulfillmentOrderLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of ReverseFulfillmentOrderLineItemEdge."""
  node: Shopify_ReverseFulfillmentOrderLineItem!
}

"""The status of a reverse fulfillment order."""
enum Shopify_ReverseFulfillmentOrderStatus {
  """The reverse fulfillment order has been canceled."""
  CANCELED
  """The reverse fulfillment order has been completed."""
  CLOSED
  """The reverse fulfillment order is in progress."""
  OPEN
}

"""The third-party confirmation of a reverse fulfillment order."""
type Shopify_ReverseFulfillmentOrderThirdPartyConfirmation {
  """The status of the reverse fulfillment order third-party confirmation."""
  status: Shopify_ReverseFulfillmentOrderThirdPartyConfirmationStatus!
}

"""The status of a reverse fulfillment order third-party confirmation."""
enum Shopify_ReverseFulfillmentOrderThirdPartyConfirmationStatus {
  """The reverse fulfillment order was accepted by the fulfillment service."""
  ACCEPTED
  """
  The reverse fulfillment order cancelation was accepted by the fulfillment service.
  """
  CANCEL_ACCEPTED
  """
  The reverse fulfillment order cancelation was rejected by the fulfillment service.
  """
  CANCEL_REJECTED
  """
  The reverse fulfillment order is awaiting acceptance by the fulfillment service.
  """
  PENDING_ACCEPTANCE
  """
  The reverse fulfillment order is awaiting cancelation by the fulfillment service.
  """
  PENDING_CANCELATION
  """The reverse fulfillment order was rejected by the fulfillment service."""
  REJECTED
}

"""
An individual sale record associated with a sales agreement. Every money value
in an order's sales data is represented in the currency's smallest unit. When
amounts are divided across multiple line items, such as taxes or order
discounts, the amounts might not divide evenly across all of the line items on
the order. To address this, the remaining currency units that couldn't be
divided evenly are allocated one at a time, starting with the first line item,
until they are all accounted for. In aggregate, the values sum up correctly. In
isolation, one line item might have a different tax or discount amount than
another line item of the same price, before taxes and discounts. This is because
the amount could not be divided evenly across the items. The allocation of
currency units across line items is immutable. After they are allocated,
currency units are never reallocated or redistributed among the line items.
"""
interface Shopify_Sale {
  """The type of order action that the sale represents."""
  actionType: Shopify_SaleActionType!
  """The unique identifier for the sale."""
  id: ID!
  """The line type assocated with the sale."""
  lineType: Shopify_SaleLineType!
  """The number of units either ordered or intended to be returned."""
  quantity: Int
  """All individual taxes associated with the sale."""
  taxes: [Shopify_SaleTax!]!
  """The total sale amount after taxes and discounts."""
  totalAmount: Shopify_MoneyBag!
  """The total discounts allocated to the sale after taxes."""
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag!
  """The total discounts allocated to the sale before taxes."""
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag!
  """The total amount of taxes for the sale."""
  totalTaxAmount: Shopify_MoneyBag!
}

"""The possible order action types for a sale."""
enum Shopify_SaleActionType {
  """A purchase or charge."""
  ORDER
  """A removal or return."""
  RETURN
  """A change to the price, taxes, or discounts for a prior purchase."""
  UPDATE
  """
  An unknown order action. Represents new actions that may be added in future versions.
  """
  UNKNOWN
}

"""An auto-generated type for paginating through multiple Sales."""
type Shopify_SaleConnection {
  """A list of edges."""
  edges: [Shopify_SaleEdge!]!
  """A list of the nodes contained in SaleEdge."""
  nodes: [Shopify_Sale!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one Sale and a cursor during pagination.
"""
type Shopify_SaleEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of SaleEdge."""
  node: Shopify_Sale!
}

"""
The possible line types for a sale record. One of the possible order line types
for a sale is an adjustment. Sales adjustments occur when a refund is issued for
a line item that is either more or less than the total value of the line item.
Examples are restocking fees and goodwill payments. When this happens, Shopify
produces a sales agreement with sale records for each line item that is returned
or refunded and an additional sale record for the adjustment (for example, a
restocking fee). The sales records for the returned or refunded items represent
the reversal of the original line item sale value. The additional adjustment
sale record represents the difference between the original total value of all
line items that were refunded, and the actual amount refunded.
"""
enum Shopify_SaleLineType {
  """A product purchased, returned or exchanged."""
  PRODUCT
  """A tip added by the customer."""
  TIP
  """A gift card."""
  GIFT_CARD
  """A shipping cost."""
  SHIPPING
  """A duty charge."""
  DUTY
  """
  An unknown sale line. Represents new types that may be added in future versions.
  """
  UNKNOWN
  """A sale adjustment."""
  ADJUSTMENT
}

"""
A contract between a merchant and a customer to do business. Shopify creates a
sales agreement whenever an order is placed, edited, or refunded. A sales
agreement has one or more sales records, which provide itemized details about
the initial agreement or subsequent changes made to the order. For example, when
a customer places an order, Shopify creates the order, generates a sales
agreement, and records a sale for each line item purchased in the order. A sale
record is specific to a type of order line. Order lines can represent different
things such as a purchased product, a tip added by a customer, shipping costs
collected at checkout, and more.
"""
interface Shopify_SalesAgreement {
  """The application that created the agreement."""
  app: Shopify_App
  """The date and time at which the agreement occured."""
  happenedAt: DateTime!
  """The unique identifier for the agreement."""
  id: ID!
  """The reason the agremeent was created."""
  reason: Shopify_OrderActionType!
  """The sales associated with the agreement."""
  sales(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SaleConnection!
  """The staff member associated with the agreement."""
  user: Shopify_StaffMember
}

"""
An auto-generated type for paginating through multiple SalesAgreements.
"""
type Shopify_SalesAgreementConnection {
  """A list of edges."""
  edges: [Shopify_SalesAgreementEdge!]!
  """A list of the nodes contained in SalesAgreementEdge."""
  nodes: [Shopify_SalesAgreement!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SalesAgreement and a cursor during pagination.
"""
type Shopify_SalesAgreementEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of SalesAgreementEdge."""
  node: Shopify_SalesAgreement!
}

"""The tax allocated to a sale from a single tax line."""
type Shopify_SaleTax {
  """
  The portion of the total tax amount on the related sale that comes from the associated tax line.
  """
  amount: Shopify_MoneyBag!
  """The unique identifier for the sale tax."""
  id: ID!
  """The tax line associated with the sale."""
  taxLine: Shopify_TaxLine!
}

"""
A saved search is a representation of a search query saved in the admin.
"""
type Shopify_SavedSearch implements Shopify_LegacyInteroperability & Shopify_Node {
  """The filters of a saved search."""
  filters: [Shopify_SearchFilter!]!
  """A globally-unique identifier."""
  id: ID!
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: Shopify_UnsignedInt64!
  """The name of a saved search."""
  name: String!
  """
  The query string of a saved search. This includes search terms and filters.
  """
  query: String!
  """The type of resource this saved search is searching in."""
  resourceType: Shopify_SearchResultType!
  """The search terms of a saved search."""
  searchTerms: String!
}

"""An auto-generated type for paginating through multiple SavedSearches."""
type Shopify_SavedSearchConnection {
  """A list of edges."""
  edges: [Shopify_SavedSearchEdge!]!
  """A list of the nodes contained in SavedSearchEdge."""
  nodes: [Shopify_SavedSearch!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Specifies the fields required to create a saved search."""
input Shopify_SavedSearchCreateInput {
  """The type of resource this saved search is searching in."""
  resourceType: Shopify_SearchResultType!
  """A descriptive name of the saved search."""
  name: String!
  """
  The query string of a saved search. This includes search terms and filters.
  """
  query: String!
}

"""Return type for `savedSearchCreate` mutation."""
type Shopify_SavedSearchCreatePayload {
  """The saved search that was created."""
  savedSearch: Shopify_SavedSearch
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Specifies the fields to delete a saved search."""
input Shopify_SavedSearchDeleteInput {
  """ID of the saved search to delete."""
  id: ID!
}

"""Return type for `savedSearchDelete` mutation."""
type Shopify_SavedSearchDeletePayload {
  """The id of the saved search that was deleted."""
  deletedSavedSearchId: ID
  """The shop of the saved search that was deleted."""
  shop: Shopify_Shop!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An auto-generated type which holds one SavedSearch and a cursor during pagination.
"""
type Shopify_SavedSearchEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of SavedSearchEdge."""
  node: Shopify_SavedSearch!
}

"""Specifies the fields required to update a saved search."""
input Shopify_SavedSearchUpdateInput {
  """ID of the saved search to update."""
  id: ID!
  """A descriptive name of the saved search."""
  name: String
  """
  The query string of a saved search. This included search terms and filters.
  """
  query: String
}

"""Return type for `savedSearchUpdate` mutation."""
type Shopify_SavedSearchUpdatePayload {
  """The saved search that was updated."""
  savedSearch: Shopify_SavedSearch
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
Script discount applications capture the intentions of a discount that
was created by a Shopify Script for an order's line item or shipping line.

Discount applications don't represent the actual final amount discounted on a
line (line item or shipping line). The actual amount discounted on a line is
represented by the [DiscountAllocation](https://shopify.dev/api/admin-graphql/latest/objects/discountallocation) object.
"""
type Shopify_ScriptDiscountApplication implements Shopify_DiscountApplication {
  """
  The method by which the discount's value is applied to its entitled items.
  """
  allocationMethod: Shopify_DiscountApplicationAllocationMethod!
  """The description of the application as defined by the Script."""
  description: String! @deprecated(reason: "Use `title` instead.")
  """
  An ordered index that can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.
  """
  index: Int!
  """How the discount amount is distributed on the discounted lines."""
  targetSelection: Shopify_DiscountApplicationTargetSelection!
  """Whether the discount is applied on line items or shipping lines."""
  targetType: Shopify_DiscountApplicationTargetType!
  """The title of the application as defined by the Script."""
  title: String!
  """The value of the discount application."""
  value: Shopify_PricingValue!
}

"""
<div class="note"><h4>Theme app extensions</h4>
  <p>Your app might not pass App Store review if it uses script tags instead of
theme app extensions. All new apps, and apps that integrate with Online Store
2.0 themes, should use theme app extensions, such as app blocks or app embed
blocks. Script tags are an alternative you can use with only vintage themes. <a
href="/apps/online-store#what-integration-method-should-i-use"
target="_blank">Learn more</a>.</p></div>


A script tag represents remote JavaScript code that is loaded into the pages of
a shop's storefront or the order status page of checkout.
"""
type Shopify_ScriptTag implements Shopify_LegacyInteroperability & Shopify_Node {
  """
  Whether the Shopify CDN can cache and serve the script tag.
  If `true`, then the script will be cached and served by the CDN.
  The cache expires 15 minutes after the script tag is successfully returned.
  If `false`, then the script will be served as is.
  """
  cache: Boolean!
  """The date and time when the script tag was created."""
  createdAt: DateTime!
  """
  The page or pages on the online store that the script should be included.
  """
  displayScope: Shopify_ScriptTagDisplayScope!
  """A globally-unique identifier."""
  id: ID!
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: Shopify_UnsignedInt64!
  """The URL to the remote script."""
  src: URL!
  """The date and time when the script tag was last updated."""
  updatedAt: DateTime!
}

"""An auto-generated type for paginating through multiple ScriptTags."""
type Shopify_ScriptTagConnection {
  """A list of edges."""
  edges: [Shopify_ScriptTagEdge!]!
  """A list of the nodes contained in ScriptTagEdge."""
  nodes: [Shopify_ScriptTag!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `scriptTagCreate` mutation."""
type Shopify_ScriptTagCreatePayload {
  """The script tag that was created."""
  scriptTag: Shopify_ScriptTag
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `scriptTagDelete` mutation."""
type Shopify_ScriptTagDeletePayload {
  """The ID of the deleted script tag."""
  deletedScriptTagId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
The page or pages on the online store where the script should be included.
"""
enum Shopify_ScriptTagDisplayScope {
  """
  Include the script on both the web storefront and the order status page.
  """
  ALL
  """Include the script only on the order status page."""
  ORDER_STATUS
  """Include the script only on the web storefront."""
  ONLINE_STORE
}

"""
An auto-generated type which holds one ScriptTag and a cursor during pagination.
"""
type Shopify_ScriptTagEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of ScriptTagEdge."""
  node: Shopify_ScriptTag!
}

"""
The input fields for a script tag. This input object is used when creating or updating
a script tag to specify its URL, where it should be included, and how it will be cached.
"""
input Shopify_ScriptTagInput {
  """
  The URL of the remote script. For example: `https://example.com/path/to/script.js`.
  """
  src: URL
  """
  The page or pages on the online store where the script should be included.
  """
  displayScope: Shopify_ScriptTagDisplayScope
  """
  Whether the Shopify CDN can cache and serve the script tag.
  If `true`, then the script will be cached and served by the CDN.
  The cache expires 15 minutes after the script tag is successfully returned.
  If `false`, then the script is served as is.
  The default value is `false`.
  """
  cache: Boolean = false
}

"""Return type for `scriptTagUpdate` mutation."""
type Shopify_ScriptTagUpdatePayload {
  """The script tag that was updated."""
  scriptTag: Shopify_ScriptTag
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""A filter in a search query represented by a key value pair."""
type Shopify_SearchFilter {
  """The key of the search filter."""
  key: String!
  """The value of the search filter."""
  value: String!
}

"""
A list of search filters along with their specific options in value and label pair for filtering.
"""
type Shopify_SearchFilterOptions {
  """A list of options that can be use to filter product availability."""
  productAvailability: [Shopify_FilterOption!]!
}

"""Represents an individual result returned from a search."""
type Shopify_SearchResult {
  """Returns the search result description text."""
  description: String
  """Returns the Image resource presented to accompany a search result."""
  image: Shopify_Image
  """Returns the ID of the resource returned in the search result."""
  reference: Shopify_Node!
  """Returns the resource title."""
  title: String!
  """Returns the absolute URL to the resource in the search result."""
  url: URL!
}

"""The connection type for SearchResult."""
type Shopify_SearchResultConnection {
  """A list of edges."""
  edges: [Shopify_SearchResultEdge!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
  """Information to aid in pagination."""
  resultsAfterCount: Int! @deprecated(reason: "The provided information is not accurate.")
}

"""
An auto-generated type which holds one SearchResult and a cursor during pagination.
"""
type Shopify_SearchResultEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of SearchResultEdge."""
  node: Shopify_SearchResult!
}

"""Specifies the type of resources to be returned from a search."""
enum Shopify_SearchResultType {
  CUSTOMER
  DRAFT_ORDER
  PRODUCT
  COLLECTION
  """A file."""
  FILE
  ONLINE_STORE_PAGE
  ONLINE_STORE_BLOG
  ONLINE_STORE_ARTICLE
  """A URL redirect."""
  URL_REDIRECT
  PRICE_RULE
  """A code discount redeem code."""
  DISCOUNT_REDEEM_CODE
  ORDER
}

"""A dynamic collection of customers based on specific criteria."""
type Shopify_Segment implements Shopify_Node {
  """The date and time when the segment was added to the store."""
  creationDate: DateTime!
  """A globally-unique identifier."""
  id: ID!
  """The date and time when the segment was last updated."""
  lastEditDate: DateTime!
  """The name of the segment."""
  name: String!
  """
  A precise definition of the segment. The definition is composed of a combination of conditions on facts about customers.
  """
  query: String!
}

"""
A filter that takes a value that's associated with an object. For example, the
`tags` field is associated with the
[`Customer`](/api/admin-graphql/latest/objects/Customer) object.
"""
type Shopify_SegmentAssociationFilter implements Shopify_SegmentFilter {
  """The localized name of the filter."""
  localizedName: String!
  """Whether a file can have multiple values for a single customer."""
  multiValue: Boolean!
  """The query name of the filter."""
  queryName: String!
  """A list of values for an association segment filter."""
  values(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
  ): Shopify_SegmentAssociationFilterValueConnection!
}

"""The values for an association segment filter."""
type Shopify_SegmentAssociationFilterValue {
  """The localized name of the value."""
  localizedName: String!
  """The query name of the value."""
  queryName: String!
}

"""
An auto-generated type for paginating through multiple SegmentAssociationFilterValues.
"""
type Shopify_SegmentAssociationFilterValueConnection {
  """A list of edges."""
  edges: [Shopify_SegmentAssociationFilterValueEdge!]!
  """A list of the nodes contained in SegmentAssociationFilterValueEdge."""
  nodes: [Shopify_SegmentAssociationFilterValue!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SegmentAssociationFilterValue and a cursor during pagination.
"""
type Shopify_SegmentAssociationFilterValueEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of SegmentAssociationFilterValueEdge."""
  node: Shopify_SegmentAssociationFilterValue!
}

"""The statistics of a given attribute."""
type Shopify_SegmentAttributeStatistics {
  """The average of a given attribute."""
  average: Float!
  """The sum of a given attribute."""
  sum: Float!
}

"""A filter with a Boolean value that's been added to a segment query."""
type Shopify_SegmentBooleanFilter implements Shopify_SegmentFilter {
  """The localized name of the filter."""
  localizedName: String!
  """Whether a file can have multiple values for a single customer."""
  multiValue: Boolean!
  """The query name of the filter."""
  queryName: String!
}

"""An auto-generated type for paginating through multiple Segments."""
type Shopify_SegmentConnection {
  """A list of edges."""
  edges: [Shopify_SegmentEdge!]!
  """A list of the nodes contained in SegmentEdge."""
  nodes: [Shopify_Segment!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `segmentCreate` mutation."""
type Shopify_SegmentCreatePayload {
  """The newly created segment."""
  segment: Shopify_Segment
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""A filter with a date value that's been added to a segment query."""
type Shopify_SegmentDateFilter implements Shopify_SegmentFilter {
  """The localized name of the filter."""
  localizedName: String!
  """Whether a file can have multiple values for a single customer."""
  multiValue: Boolean!
  """The query name of the filter."""
  queryName: String!
}

"""Return type for `segmentDelete` mutation."""
type Shopify_SegmentDeletePayload {
  """ID of the deleted segment."""
  deletedSegmentId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An auto-generated type which holds one Segment and a cursor during pagination.
"""
type Shopify_SegmentEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of SegmentEdge."""
  node: Shopify_Segment!
}

"""
A filter with a set of possible values that's been added to a segment query.
"""
type Shopify_SegmentEnumFilter implements Shopify_SegmentFilter {
  """The localized name of the filter."""
  localizedName: String!
  """Whether a file can have multiple values for a single customer."""
  multiValue: Boolean!
  """The query name of the filter."""
  queryName: String!
  """A list of values for an enum segment filter."""
  values(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
  ): Shopify_SegmentEnumFilterValueConnection!
}

"""The values for an enum segment filter."""
type Shopify_SegmentEnumFilterValue {
  """The localized name of the value."""
  localizedName: String!
  """The query name of the value."""
  queryName: String!
}

"""
An auto-generated type for paginating through multiple SegmentEnumFilterValues.
"""
type Shopify_SegmentEnumFilterValueConnection {
  """A list of edges."""
  edges: [Shopify_SegmentEnumFilterValueEdge!]!
  """A list of the nodes contained in SegmentEnumFilterValueEdge."""
  nodes: [Shopify_SegmentEnumFilterValue!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SegmentEnumFilterValue and a cursor during pagination.
"""
type Shopify_SegmentEnumFilterValueEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of SegmentEnumFilterValueEdge."""
  node: Shopify_SegmentEnumFilterValue!
}

"""
A filter that's used to segment customers based on the date that an event
occured. For example, the `product_bought` event filter allows you to segment
customers based on what products they've bought.
"""
type Shopify_SegmentEventFilter implements Shopify_SegmentFilter {
  """The localized name of the filter."""
  localizedName: String!
  """Whether a file can have multiple values for a single customer."""
  multiValue: Boolean!
  """The parameters for an event segment filter."""
  parameters: [Shopify_SegmentEventFilterParameter!]!
  """The query name of the filter."""
  queryName: String!
  """The return value type for an event segment filter."""
  returnValueType: String!
  """A list of values for an event segment filter."""
  values(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
  ): Shopify_SegmentEventFilterValueConnection!
}

"""The parameters for an event segment filter."""
type Shopify_SegmentEventFilterParameter {
  """The localized description of the parameter."""
  localizedDescription: String!
  """The localized name of the parameter."""
  localizedName: String!
  """Whether the parameter is optional."""
  optional: Boolean!
  """The type of the parameter."""
  parameterType: String!
  """The query name of the parameter."""
  queryName: String!
}

"""The values for an event segment filter."""
type Shopify_SegmentEventFilterValue {
  """The localized name of the value."""
  localizedName: String!
  """The query name of the value."""
  queryName: String!
}

"""
An auto-generated type for paginating through multiple SegmentEventFilterValues.
"""
type Shopify_SegmentEventFilterValueConnection {
  """A list of edges."""
  edges: [Shopify_SegmentEventFilterValueEdge!]!
  """A list of the nodes contained in SegmentEventFilterValueEdge."""
  nodes: [Shopify_SegmentEventFilterValue!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SegmentEventFilterValue and a cursor during pagination.
"""
type Shopify_SegmentEventFilterValueEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of SegmentEventFilterValueEdge."""
  node: Shopify_SegmentEventFilterValue!
}

"""The filters used in segment queries associated with a shop."""
interface Shopify_SegmentFilter {
  """The localized name of the filter."""
  localizedName: String!
  """Whether a file can have multiple values for a single customer."""
  multiValue: Boolean!
  """The query name of the filter."""
  queryName: String!
}

"""An auto-generated type for paginating through multiple SegmentFilters."""
type Shopify_SegmentFilterConnection {
  """A list of edges."""
  edges: [Shopify_SegmentFilterEdge!]!
  """A list of the nodes contained in SegmentFilterEdge."""
  nodes: [Shopify_SegmentFilter!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SegmentFilter and a cursor during pagination.
"""
type Shopify_SegmentFilterEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of SegmentFilterEdge."""
  node: Shopify_SegmentFilter!
}

"""
A filter with a double-precision, floating-point value that's been added to a segment query.
"""
type Shopify_SegmentFloatFilter implements Shopify_SegmentFilter {
  """The localized name of the filter."""
  localizedName: String!
  """Whether a file can have multiple values for a single customer."""
  multiValue: Boolean!
  """The query name of the filter."""
  queryName: String!
}

"""A filter with an integer that's been added to a segment query."""
type Shopify_SegmentIntegerFilter implements Shopify_SegmentFilter {
  """The localized name of the filter."""
  localizedName: String!
  """Whether a file can have multiple values for a single customer."""
  multiValue: Boolean!
  """The query name of the filter."""
  queryName: String!
}

"""The response type for the `segmentMembership` object."""
type Shopify_SegmentMembership {
  """
  A Boolean that indicates whether or not the customer in the query is a member
  of the segment, which is identified using the `segmentId`.
  """
  isMember: Boolean!
  """A `segmentId` that is used for testing membership."""
  segmentId: ID!
}

"""
A list of maps that contain `segmentId` IDs and `isMember` Booleans. The maps represent segment memberships.
"""
type Shopify_SegmentMembershipResponse {
  """The membership status for the given list of segments."""
  memberships: [Shopify_SegmentMembership!]!
}

"""
A segment and its corresponding saved search. 
For example, you can use `SegmentMigration` to retrieve the segment ID that corresponds to a saved search ID.
"""
type Shopify_SegmentMigration {
  """A globally-unique identifier."""
  id: ID!
  """The ID of the saved search."""
  savedSearchId: ID!
  """The ID of the segment."""
  segmentId: ID
}

"""
An auto-generated type for paginating through multiple SegmentMigrations.
"""
type Shopify_SegmentMigrationConnection {
  """A list of edges."""
  edges: [Shopify_SegmentMigrationEdge!]!
  """A list of the nodes contained in SegmentMigrationEdge."""
  nodes: [Shopify_SegmentMigration!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SegmentMigration and a cursor during pagination.
"""
type Shopify_SegmentMigrationEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of SegmentMigrationEdge."""
  node: Shopify_SegmentMigration!
}

"""The set of valid sort keys for the Segment query."""
enum Shopify_SegmentSortKeys {
  """Sort by the `creation_date` value."""
  CREATION_DATE
  """Sort by the `last_edit_date` value."""
  LAST_EDIT_DATE
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""The statistics of a given segment."""
type Shopify_SegmentStatistics {
  """The statistics of a given attribute."""
  attributeStatistics(
    """The attribute that statistics are retrieved for."""
    attributeName: String!
  ): Shopify_SegmentAttributeStatistics!
  """The total number of members in a given segment."""
  totalCount: Int!
}

"""A filter with a string that's been added to a segment query."""
type Shopify_SegmentStringFilter implements Shopify_SegmentFilter {
  """The localized name of the filter."""
  localizedName: String!
  """Whether a file can have multiple values for a single customer."""
  multiValue: Boolean!
  """The query name of the filter."""
  queryName: String!
  """A list of values for a string segment filter."""
  values(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
  ): Shopify_SegmentStringFilterValueConnection!
}

"""The values for a string segment filter."""
type Shopify_SegmentStringFilterValue {
  """The localized name of the value."""
  localizedName: String!
  """The query name of the value."""
  queryName: String!
}

"""
An auto-generated type for paginating through multiple SegmentStringFilterValues.
"""
type Shopify_SegmentStringFilterValueConnection {
  """A list of edges."""
  edges: [Shopify_SegmentStringFilterValueEdge!]!
  """A list of the nodes contained in SegmentStringFilterValueEdge."""
  nodes: [Shopify_SegmentStringFilterValue!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SegmentStringFilterValue and a cursor during pagination.
"""
type Shopify_SegmentStringFilterValueEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of SegmentStringFilterValueEdge."""
  node: Shopify_SegmentStringFilterValue!
}

"""Return type for `segmentUpdate` mutation."""
type Shopify_SegmentUpdatePayload {
  """The updated segment."""
  segment: Shopify_Segment
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
A list of suggested values associated with an individual segment. A
segment is a group of members, such as customers, that meet specific
criteria.
"""
type Shopify_SegmentValue {
  """
  The localized version of the value's name. This name is displayed to the merchant.
  """
  localizedValue: String!
  """The name of the query associated with the suggestion."""
  queryName: String!
}

"""An auto-generated type for paginating through multiple SegmentValues."""
type Shopify_SegmentValueConnection {
  """A list of edges."""
  edges: [Shopify_SegmentValueEdge!]!
  """A list of the nodes contained in SegmentValueEdge."""
  nodes: [Shopify_SegmentValue!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SegmentValue and a cursor during pagination.
"""
type Shopify_SegmentValueEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of SegmentValueEdge."""
  node: Shopify_SegmentValue!
}

"""
Properties used by customers to select a product variant.
Products can have multiple options, like different sizes or colors.
"""
type Shopify_SelectedOption {
  """The product option’s name."""
  name: String!
  """The product option’s value."""
  value: String!
}

"""
Represents how a product can be sold and purchased. Selling plans and associated records (selling plan groups
and policies) are deleted 48 hours after a merchant uninstalls their subscriptions app. We recommend backing
up these records if you need to restore them later.

For more information on selling plans, refer to
[*Creating and managing selling plans*](https://shopify.dev/apps/subscriptions/selling-plans).
"""
type Shopify_SellingPlan implements Shopify_Node {
  """A selling plan policy which describes the recurring billing details."""
  billingPolicy: Shopify_SellingPlanBillingPolicy!
  """The category used to classify the selling plan for reporting purposes."""
  category: Shopify_SellingPlanCategory
  """The date and time when the selling plan was created."""
  createdAt: DateTime!
  """A selling plan policy which describes the delivery details."""
  deliveryPolicy: Shopify_SellingPlanDeliveryPolicy!
  """Buyer facing string which describes the selling plan commitment."""
  description: String
  """A globally-unique identifier."""
  id: ID!
  """When to reserve inventory for a selling plan."""
  inventoryPolicy: Shopify_SellingPlanInventoryPolicy
  """
  A customer-facing description of the selling plan.
  
  If your store supports multiple currencies, then don't include
  country-specific pricing content, such as "Buy monthly, get 10$ CAD off". This
  field won't be converted to reflect different currencies.
  """
  name: String!
  """
  The values of all options available on the selling plan. Selling plans are
  grouped together in Liquid when they are created by the same app, and have the
  same `selling_plan_group.name` and `selling_plan_group.options` values.
  """
  options: [String!]!
  """
  Relative position of the selling plan for display. A lower position will be displayed before a higher position.
  """
  position: Int
  """Selling plan pricing details."""
  pricingPolicies: [Shopify_SellingPlanPricingPolicy!]!
}

"""Represents a selling plan policy anchor."""
type Shopify_SellingPlanAnchor {
  """
  The cutoff day for the anchor.
  
  If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
  the days of the week according to ISO 8601, where 1 is Monday.
  
  If `type` is MONTHDAY, then the value must be between 1-31.
  
  If `type` is YEARDAY, then the value must be `null`.
  """
  cutoffDay: Int
  """
  The day of the anchor.
  
  If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
  the days of the week according to ISO 8601, where 1 is Monday.
  
  If `type` is not WEEKDAY, then the value must be between 1-31.
  """
  day: Int!
  """
  The month of the anchor. If type is different than YEARDAY, then the value must
  be `null` or between 1-12.
  """
  month: Int
  """
  Represents the anchor type, it can be one one of WEEKDAY, MONTHDAY, YEARDAY.
  """
  type: Shopify_SellingPlanAnchorType!
}

"""
Specifies the input fields required to create or update a selling plan anchor.
"""
input Shopify_SellingPlanAnchorInput {
  """Represents the anchor type, must be one of WEEKDAY, MONTHDAY, YEARDAY."""
  type: Shopify_SellingPlanAnchorType
  """
  The day of the anchor.
  
  If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
  the days of the week according to ISO 8601, where 1 is Monday.
  
  If `type` is not WEEKDAY, then the value must be between 1-31.
  """
  day: Int
  """
  The month of the anchor. If type is different than YEARDAY, then the value must
  be `null` or between 1-12.
  """
  month: Int
  """
  The cutoff day of the anchor.
  
  If `type` is WEEKDAY, then the value must be between 1-7. Shopify interprets
  the days of the week according to ISO 8601, where 1 is Monday.
  
  If `type` is MONTHDAY, then the value must be between 1-31.
  
  If `type` is YEARDAY, then the value must be `null`.
  
  This field should only be set if the cutoff field for the delivery policy is `null`.
  """
  cutoffDay: Int
}

"""Represents the anchor type."""
enum Shopify_SellingPlanAnchorType {
  """Which day of the week, between 1-7."""
  WEEKDAY
  """Which day of the month, between 1-31."""
  MONTHDAY
  """
  Which days of the month and year, month between 1-12, and day between 1-31.
  """
  YEARDAY
}

"""
Represents the billing frequency associated to the selling plan (for example, bill every week, or bill every
three months). The selling plan billing policy and associated records (selling plan groups, selling plans, pricing
policies, and delivery policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
We recommend backing up these records if you need to restore them later.
"""
union Shopify_SellingPlanBillingPolicy = Shopify_SellingPlanFixedBillingPolicy | Shopify_SellingPlanRecurringBillingPolicy

"""
The input fields that are required to create or update a billing policy type.
"""
input Shopify_SellingPlanBillingPolicyInput {
  """The fixed billing policy details."""
  fixed: Shopify_SellingPlanFixedBillingPolicyInput
  """The recurring billing policy details."""
  recurring: Shopify_SellingPlanRecurringBillingPolicyInput
}

"""
The category of the selling plan. For the `OTHER` category,
         you must fill out our [request form](https://docs.google.com/forms/d/e/1FAIpQLSeU18Xmw0Q61V8wdH-dfGafFqIBfRchQKUO8WAF3yJTvgyyZQ/viewform),
         where we'll review your request for a new purchase option.
"""
enum Shopify_SellingPlanCategory {
  """The selling plan is for anything not in one of the other categories."""
  OTHER
  """The selling plan is for pre-orders."""
  PRE_ORDER
  """The selling plan is for subscriptions."""
  SUBSCRIPTION
  """The selling plan is for try before you buy purchases."""
  TRY_BEFORE_YOU_BUY
}

"""
The amount charged at checkout when the full amount isn't charged at checkout.
"""
type Shopify_SellingPlanCheckoutCharge {
  """The charge type for the checkout charge."""
  type: Shopify_SellingPlanCheckoutChargeType!
  """The charge value for the checkout charge."""
  value: Shopify_SellingPlanCheckoutChargeValue!
}

"""
The input fields that are required to create or update a checkout charge.
"""
input Shopify_SellingPlanCheckoutChargeInput {
  """The checkout charge type defined by the policy."""
  type: Shopify_SellingPlanCheckoutChargeType
  """The checkout charge value defined by the policy."""
  value: Shopify_SellingPlanCheckoutChargeValueInput
}

"""The percentage value of the price used for checkout charge."""
type Shopify_SellingPlanCheckoutChargePercentageValue {
  """The percentage value of the price used for checkout charge."""
  percentage: Float!
}

"""The checkout charge when the full amount isn't charged at checkout."""
enum Shopify_SellingPlanCheckoutChargeType {
  """The checkout charge is a percentage of the product or variant price."""
  PERCENTAGE
  """The checkout charge is a fixed price amount."""
  PRICE
}

"""The portion of the price to be charged at checkout."""
union Shopify_SellingPlanCheckoutChargeValue = Shopify_MoneyV2 | Shopify_SellingPlanCheckoutChargePercentageValue

"""
The input fields required to create or update an checkout charge value.
"""
input Shopify_SellingPlanCheckoutChargeValueInput {
  """The percentage value."""
  percentage: Float
  """The fixed value for an checkout charge."""
  fixedValue: Shopify_Decimal
}

"""An auto-generated type for paginating through multiple SellingPlans."""
type Shopify_SellingPlanConnection {
  """A list of edges."""
  edges: [Shopify_SellingPlanEdge!]!
  """A list of the nodes contained in SellingPlanEdge."""
  nodes: [Shopify_SellingPlan!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
Represents the delivery frequency associated to the selling plan (for example, deliver every month, or deliver
every other week). The selling plan delivery policy and associated records (selling plan groups, selling plans,
pricing policies, and billing policy) are deleted 48 hours after a merchant uninstalls their subscriptions app.
We recommend backing up these records if you need to restore them later.
"""
union Shopify_SellingPlanDeliveryPolicy = Shopify_SellingPlanFixedDeliveryPolicy | Shopify_SellingPlanRecurringDeliveryPolicy

"""
The input fields that are required to create or update a delivery policy.
"""
input Shopify_SellingPlanDeliveryPolicyInput {
  """The fixed delivery policy details."""
  fixed: Shopify_SellingPlanFixedDeliveryPolicyInput
  """The recurring delivery policy details."""
  recurring: Shopify_SellingPlanRecurringDeliveryPolicyInput
}

"""
An auto-generated type which holds one SellingPlan and a cursor during pagination.
"""
type Shopify_SellingPlanEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of SellingPlanEdge."""
  node: Shopify_SellingPlan!
}

"""The fixed selling plan billing policy."""
type Shopify_SellingPlanFixedBillingPolicy {
  """The checkout charge when the full amount isn't charged at checkout."""
  checkoutCharge: Shopify_SellingPlanCheckoutCharge!
  """The exact time when to capture the full payment."""
  remainingBalanceChargeExactTime: DateTime
  """
  The period after remaining_balance_charge_trigger, before capturing the full payment. Expressed as an ISO8601 duration.
  """
  remainingBalanceChargeTimeAfterCheckout: String
  """When to capture payment for amount due."""
  remainingBalanceChargeTrigger: Shopify_SellingPlanRemainingBalanceChargeTrigger!
}

"""The input fields required to create or update a fixed billing policy."""
input Shopify_SellingPlanFixedBillingPolicyInput {
  """When to capture the payment for the amount due."""
  remainingBalanceChargeTrigger: Shopify_SellingPlanRemainingBalanceChargeTrigger
  """The date and time to capture the full payment."""
  remainingBalanceChargeExactTime: DateTime
  """
  The period after capturing the payment for the amount due
  (`remainingBalanceChargeTrigger`), and before capturing the full payment.
  Expressed as an ISO8601 duration.
  """
  remainingBalanceChargeTimeAfterCheckout: String
  """The checkout charge policy for the selling plan."""
  checkoutCharge: Shopify_SellingPlanCheckoutChargeInput
}

"""Represents a fixed selling plan delivery policy."""
type Shopify_SellingPlanFixedDeliveryPolicy {
  """
  The specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [Shopify_SellingPlanAnchor!]!
  """A buffer period for orders to be included in next fulfillment anchor."""
  cutoff: Int
  """The date and time when the fulfillment should trigger."""
  fulfillmentExactTime: DateTime
  """
  What triggers the fulfillment. The value must be one of ANCHOR, ASAP, EXACT_TIME, or UNKNOWN.
  """
  fulfillmentTrigger: Shopify_SellingPlanFulfillmentTrigger!
  """
  Whether the delivery policy is merchant or buyer-centric.
  Buyer-centric delivery policies state the time when the buyer will receive the goods.
  Merchant-centric delivery policies state the time when the fulfillment should be started.
  Currently, only merchant-centric delivery policies are supported.
  """
  intent: Shopify_SellingPlanFixedDeliveryPolicyIntent!
  """
  The fulfillment or delivery behavior of the first fulfillment when the order
  is placed before the anchor. The default value for this field is `ASAP`.
  """
  preAnchorBehavior: Shopify_SellingPlanFixedDeliveryPolicyPreAnchorBehavior!
}

"""The input fields required to create or update a fixed billing policy."""
input Shopify_SellingPlanFixedDeliveryPolicyInput {
  """
  The specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [Shopify_SellingPlanAnchorInput!]
  """What triggers the fulfillment."""
  fulfillmentTrigger: Shopify_SellingPlanFulfillmentTrigger
  """The date and time when the fulfillment should trigger."""
  fulfillmentExactTime: DateTime
  """A buffer period for orders to be included in a cycle."""
  cutoff: Int
  """Whether the delivery policy is merchant or buyer-centric."""
  intent: Shopify_SellingPlanFixedDeliveryPolicyIntent
  """The pre-anchor behavior."""
  preAnchorBehavior: Shopify_SellingPlanFixedDeliveryPolicyPreAnchorBehavior
}

"""Possible intentions of a Delivery Policy."""
enum Shopify_SellingPlanFixedDeliveryPolicyIntent {
  """
  A merchant-centric delivery policy. Mark this delivery policy to define when the merchant should start fulfillment.
  """
  FULFILLMENT_BEGIN
}

"""
The fulfillment or delivery behavior of the first fulfillment when the orderis placed before the anchor.
"""
enum Shopify_SellingPlanFixedDeliveryPolicyPreAnchorBehavior {
  """
  Orders placed can be fulfilled / delivered immediately. Orders placed inside a
  cutoff can be fulfilled / delivered at the next anchor.
  """
  ASAP
  """
  Orders placed can be fulfilled / delivered at the next anchor date.
  Orders placed inside a cutoff will skip the next anchor and can be fulfilled /
  delivered at the following anchor.
  """
  NEXT
}

"""Represents a fixed selling plan pricing policy."""
type Shopify_SellingPlanFixedPricingPolicy implements Shopify_SellingPlanPricingPolicyBase {
  """The price adjustment type."""
  adjustmentType: Shopify_SellingPlanPricingPolicyAdjustmentType!
  """The price adjustment value."""
  adjustmentValue: Shopify_SellingPlanPricingPolicyAdjustmentValue!
  """
  The date and time when the fixed selling plan pricing policy was created.
  """
  createdAt: DateTime!
}

"""
Specifies the input fields required to create or update a fixed selling plan pricing policy.
"""
input Shopify_SellingPlanFixedPricingPolicyInput {
  """ID of the pricing policy."""
  id: ID
  """Price adjustment type defined by the policy."""
  adjustmentType: Shopify_SellingPlanPricingPolicyAdjustmentType
  """Price adjustment value defined by the policy."""
  adjustmentValue: Shopify_SellingPlanPricingPolicyValueInput
}

"""Describes what triggers fulfillment."""
enum Shopify_SellingPlanFulfillmentTrigger {
  """Use the anchor values to calculate fulfillment date."""
  ANCHOR
  """As soon as possible."""
  ASAP
  """At an exact time defined by the fulfillment_exact_time field."""
  EXACT_TIME
  """Unknown. Usually to be determined in the future."""
  UNKNOWN
}

"""
Represents a selling method (for example, "Subscribe and save" or "Pre-paid"). Selling plan groups
and associated records (selling plans and policies) are deleted 48 hours after a merchant
uninstalls their subscriptions app. We recommend backing up these records if you need to restore them later.
"""
type Shopify_SellingPlanGroup implements Shopify_Node {
  """The identifier for app, exposed in Liquid and product JSON."""
  appId: String
  """
  Whether the given product is directly associated to the selling plan group.
  """
  appliesToProduct(
    """The ID of the product."""
    productId: ID!
  ): Boolean!
  """
  Whether the given product variant is directly associated to the selling plan group.
  """
  appliesToProductVariant(
    """The ID of the product."""
    productVariantId: ID!
  ): Boolean!
  """
  Whether any of the product variants of the given product are associated to the selling plan group.
  """
  appliesToProductVariants(
    """The ID of the product."""
    productId: ID!
  ): Boolean!
  """The date and time when the selling plan group was created."""
  createdAt: DateTime!
  """The merchant-facing description of the selling plan group."""
  description: String
  """A globally-unique identifier."""
  id: ID!
  """The merchant-facing label of the selling plan group."""
  merchantCode: String!
  """The buyer-facing label of the selling plan group."""
  name: String!
  """
  The values of all options available on the selling plan group. Selling plans
  are grouped together in Liquid when they are created by the same app, and have
  the same `selling_plan_group.name` and `selling_plan_group.options` values.
  """
  options: [String!]!
  """The relative position of the selling plan group for display."""
  position: Int
  """A count of products associated to the selling plan group."""
  productCount: Int!
  """A count of product variants associated to the selling plan group."""
  productVariantCount(
    """The ID of the product to scope the count to."""
    productId: ID
  ): Int!
  """Product variants associated to the selling plan group."""
  productVariants(
    """Filters the product variants by a product ID."""
    productId: ID
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductVariantConnection!
  """Products associated to the selling plan group."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ProductConnection!
  """Selling plans associated to the selling plan group."""
  sellingPlans(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SellingPlanConnection!
  """A summary of the policies associated to the selling plan group."""
  summary: String
}

"""Return type for `sellingPlanGroupAddProducts` mutation."""
type Shopify_SellingPlanGroupAddProductsPayload {
  """The updated selling plan group."""
  sellingPlanGroup: Shopify_SellingPlanGroup
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SellingPlanGroupUserError!]!
}

"""Return type for `sellingPlanGroupAddProductVariants` mutation."""
type Shopify_SellingPlanGroupAddProductVariantsPayload {
  """The updated selling plan group."""
  sellingPlanGroup: Shopify_SellingPlanGroup
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SellingPlanGroupUserError!]!
}

"""
An auto-generated type for paginating through multiple SellingPlanGroups.
"""
type Shopify_SellingPlanGroupConnection {
  """A list of edges."""
  edges: [Shopify_SellingPlanGroupEdge!]!
  """A list of the nodes contained in SellingPlanGroupEdge."""
  nodes: [Shopify_SellingPlanGroup!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `sellingPlanGroupCreate` mutation."""
type Shopify_SellingPlanGroupCreatePayload {
  """The created selling plan group object."""
  sellingPlanGroup: Shopify_SellingPlanGroup
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SellingPlanGroupUserError!]!
}

"""Return type for `sellingPlanGroupDelete` mutation."""
type Shopify_SellingPlanGroupDeletePayload {
  """The id of the deleted selling plan group object."""
  deletedSellingPlanGroupId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SellingPlanGroupUserError!]!
}

"""
An auto-generated type which holds one SellingPlanGroup and a cursor during pagination.
"""
type Shopify_SellingPlanGroupEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of SellingPlanGroupEdge."""
  node: Shopify_SellingPlanGroup!
}

"""
Specifies the input fields required to create or update a selling plan group.
"""
input Shopify_SellingPlanGroupInput {
  """Buyer facing label of the selling plan group."""
  name: String
  """Identifier for app, exposed in Liquid and product JSON."""
  appId: String
  """Merchant facing label of the selling plan group."""
  merchantCode: String
  """Merchant facing description of the selling plan group."""
  description: String
  """List of selling plans to create."""
  sellingPlansToCreate: [Shopify_SellingPlanInput!]
  """List of selling plans to update."""
  sellingPlansToUpdate: [Shopify_SellingPlanInput!]
  """List of selling plans ids to delete."""
  sellingPlansToDelete: [ID!]
  """
  The values of all options available on the selling plan group. Selling plans
  are grouped together in Liquid when they are created by the same app, and have
  the same `selling_plan_group.name` and `selling_plan_group.options` values.
  """
  options: [String!]
  """
  Relative value for display purposes of the selling plan group. A lower position will be displayed before a higher one.
  """
  position: Int
}

"""Return type for `sellingPlanGroupRemoveProducts` mutation."""
type Shopify_SellingPlanGroupRemoveProductsPayload {
  """The removed product ids."""
  removedProductIds: [ID!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SellingPlanGroupUserError!]!
}

"""Return type for `sellingPlanGroupRemoveProductVariants` mutation."""
type Shopify_SellingPlanGroupRemoveProductVariantsPayload {
  """The removed product variant ids."""
  removedProductVariantIds: [ID!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SellingPlanGroupUserError!]!
}

"""Specifies resource association with a Selling Plan Group."""
input Shopify_SellingPlanGroupResourceInput {
  """The IDs of the Variants to add to the Selling Plan Group."""
  productVariantIds: [ID!]
  """The IDs of the Products to add to the Selling Plan Group."""
  productIds: [ID!]
}

"""The set of valid sort keys for the SellingPlanGroup query."""
enum Shopify_SellingPlanGroupSortKeys {
  """Sort by the `name` value."""
  NAME
  """Sort by the `updated_at` value."""
  UPDATED_AT
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""Return type for `sellingPlanGroupUpdate` mutation."""
type Shopify_SellingPlanGroupUpdatePayload {
  """The IDs of the deleted Subscription Plans."""
  deletedSellingPlanIds: [ID!]
  """The updated Selling Plan Group."""
  sellingPlanGroup: Shopify_SellingPlanGroup
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SellingPlanGroupUserError!]!
}

"""Represents a selling plan group custom error."""
type Shopify_SellingPlanGroupUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_SellingPlanGroupUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `SellingPlanGroupUserError`.
"""
enum Shopify_SellingPlanGroupUserErrorCode {
  """The input value is blank."""
  BLANK
  """The input value should be equal to the value allowed."""
  EQUAL_TO
  """The input value should be greater than the minimum allowed value."""
  GREATER_THAN
  """
  The input value should be greater than or equal to the minimum value allowed.
  """
  GREATER_THAN_OR_EQUAL_TO
  """The input value isn't included in the list."""
  INCLUSION
  """The input value is invalid."""
  INVALID
  """The input value should be less than the maximum value allowed."""
  LESS_THAN
  """
  The input value should be less than or equal to the maximum value allowed.
  """
  LESS_THAN_OR_EQUAL_TO
  """The input value is not a number."""
  NOT_A_NUMBER
  """The record with the ID used as the input value couldn't be found."""
  NOT_FOUND
  """The input value needs to be blank."""
  PRESENT
  """The input value is already taken."""
  TAKEN
  """The input value is too big."""
  TOO_BIG
  """The input value is too long."""
  TOO_LONG
  """The input value is too short."""
  TOO_SHORT
  """The input value is the wrong length."""
  WRONG_LENGTH
  """Exceeded the selling plan limit (31)."""
  SELLING_PLAN_COUNT_UPPER_BOUND
  """Must include at least one selling plan."""
  SELLING_PLAN_COUNT_LOWER_BOUND
  """
  Selling plan's billing policy max cycles must be greater than min cycles.
  """
  SELLING_PLAN_MAX_CYCLES_MUST_BE_GREATER_THAN_MIN_CYCLES
  """Selling plan's billing and delivery policies anchors must be equal."""
  SELLING_PLAN_BILLING_AND_DELIVERY_POLICY_ANCHORS_MUST_BE_EQUAL
  """Selling plan's billing cycle must be a multiple of delivery cycle."""
  SELLING_PLAN_BILLING_CYCLE_MUST_BE_A_MULTIPLE_OF_DELIVERY_CYCLE
  """Selling plan's pricing policies must contain one fixed pricing policy."""
  SELLING_PLAN_PRICING_POLICIES_MUST_CONTAIN_A_FIXED_PRICING_POLICY
  """
  Cannot define option2 on this selling plan as there's no label on the parent selling plan group.
  """
  SELLING_PLAN_MISSING_OPTION2_LABEL_ON_PARENT_GROUP
  """
  Cannot define option3 on this selling plan as there's no label on the parent selling plan group.
  """
  SELLING_PLAN_MISSING_OPTION3_LABEL_ON_PARENT_GROUP
  """Selling plan's option2 is required because option2 exists."""
  SELLING_PLAN_OPTION2_REQUIRED_AS_DEFINED_ON_PARENT_GROUP
  """Selling plan's option3 is required because option3 exists."""
  SELLING_PLAN_OPTION3_REQUIRED_AS_DEFINED_ON_PARENT_GROUP
  """Selling plans can't have more than 2 pricing policies."""
  SELLING_PLAN_PRICING_POLICIES_LIMIT
  """The selling plan list provided contains 1 or more invalid IDs."""
  RESOURCE_LIST_CONTAINS_INVALID_IDS
  """Product variant does not exist."""
  PRODUCT_VARIANT_DOES_NOT_EXIST
  """Product does not exist."""
  PRODUCT_DOES_NOT_EXIST
  """Selling plan group does not exist."""
  GROUP_DOES_NOT_EXIST
  """Selling plan group could not be deleted."""
  GROUP_COULD_NOT_BE_DELETED
  """Could not add the resource to the selling plan group."""
  ERROR_ADDING_RESOURCE_TO_GROUP
  """Missing delivery policy."""
  SELLING_PLAN_DELIVERY_POLICY_MISSING
  """Missing billing policy."""
  SELLING_PLAN_BILLING_POLICY_MISSING
  """Selling plan does not exist."""
  PLAN_DOES_NOT_EXIST
  """Selling plan ID must be specified to update."""
  PLAN_ID_MUST_BE_SPECIFIED_TO_UPDATE
  """Only one billing policy type can be defined."""
  ONLY_NEED_ONE_BILLING_POLICY_TYPE
  """Only one delivery policy type can be defined."""
  ONLY_NEED_ONE_DELIVERY_POLICY_TYPE
  """Only one pricing policy type can be defined."""
  ONLY_NEED_ONE_PRICING_POLICY_TYPE
  """Billing and delivery policy types must be the same."""
  BILLING_AND_DELIVERY_POLICY_TYPES_MUST_BE_THE_SAME
  """Only one pricing policy adjustment value type can be defined."""
  ONLY_NEED_ONE_PRICING_POLICY_VALUE
  """Pricing policy's adjustment value and adjustment type must match."""
  PRICING_POLICY_ADJUSTMENT_VALUE_AND_TYPE_MUST_MATCH
  """Cannot have multiple selling plans with the same name."""
  SELLING_PLAN_DUPLICATE_NAME
  """Cannot have multiple selling plans with the same options."""
  SELLING_PLAN_DUPLICATE_OPTIONS
  """A fixed selling plan can have at most one pricing policy."""
  SELLING_PLAN_FIXED_PRICING_POLICIES_LIMIT
  """
  A fixed billing policy's remaining_balance_charge_exact_time can't be blank
  when the remaining_balance_charge_trigger is EXACT_TIME.
  """
  REMAINING_BALANCE_CHARGE_EXACT_TIME_REQUIRED
  """A fixed billing policy's checkout charge value and type must match."""
  CHECKOUT_CHARGE_VALUE_AND_TYPE_MUST_MATCH
  """A fixed billing policy's checkout charge can have at most one value."""
  ONLY_NEED_ONE_CHECKOUT_CHARGE_VALUE
  """
  A fixed billing policy's remaining_balance_charge_exact_time must not be
  present when the remaining_balance_charge_trigger isn't EXACT_TIME.
  """
  REMAINING_BALANCE_CHARGE_EXACT_TIME_NOT_ALLOWED
  """
  A fixed billing policy's remaining_balance_charge_time_after_checkout must be
  present and greater than zero when the remaining_balance_charge_trigger is
  TIME_AFTER_CHECKOUT.
  """
  REMAINING_BALANCE_CHARGE_TIME_AFTER_CHECKOUT_MUST_BE_GREATER_THAN_ZERO
  """
  A fixed billing policy's remaining_balance_charge_trigger must be
  NO_REMAINING_BALANCE when the checkout_charge_type is PERCENTAGE and
  checkout_charge_value is 100.
  """
  REMAINING_BALANCE_CHARGE_TRIGGER_ON_FULL_CHECKOUT
  """
  A fixed billing policy's remaining_balance_charge_trigger can't be
  NO_REMAINING_BALANCE when the checkout_charge_type is PERCENTAGE and
  checkout_charge_value is less than 100.
  """
  REMAINING_BALANCE_CHARGE_TRIGGER_NO_REMAINING_BALANCE_ON_PARTIAL_PERCENTAGE_CHECKOUT_CHARGE
  """
  A fixed billing policy's remaining_balance_charge_trigger can't be
  NO_REMAINING_BALANCE when the checkout_charge_type is PRICE.
  """
  REMAINING_BALANCE_CHARGE_TRIGGER_NO_REMAINING_BALANCE_ON_PRICE_CHECKOUT_CHARGE
  """
  A fixed billing policy's fulfillment_exact_time can't be blank when the fulfillment_trigger is EXACT_TIME.
  """
  FULFILLMENT_EXACT_TIME_REQUIRED
  """
  A fixed billing policy's fulfillment_exact_time must not be present when the fulfillment_trigger isn't EXACT_TIME.
  """
  FULFILLMENT_EXACT_TIME_NOT_ALLOWED
  """
  A fixed delivery policy's anchors must not be present when the fulfillment_trigger isn't ANCHOR.
  """
  SELLING_PLAN_ANCHORS_NOT_ALLOWED
  """
  A fixed delivery policy's anchors must be present when the fulfillment_trigger is ANCHOR.
  """
  SELLING_PLAN_ANCHORS_REQUIRED
  """A selling plan can't have both fixed and recurring billing policies."""
  ONLY_ONE_OF_FIXED_OR_RECURRING_BILLING
  """A selling plan can't have both fixed and recurring delivery policies."""
  ONLY_ONE_OF_FIXED_OR_RECURRING_DELIVERY
}

"""Specifies the input fields to create or update a selling plan."""
input Shopify_SellingPlanInput {
  """ID of the selling plan."""
  id: ID
  """Buyer facing string which describes the selling plan content."""
  name: String
  """Buyer facing string which describes the selling plan commitment."""
  description: String
  """Selling plan policy which describes the billing details."""
  billingPolicy: Shopify_SellingPlanBillingPolicyInput
  """A selling plan policy which describes the delivery details."""
  deliveryPolicy: Shopify_SellingPlanDeliveryPolicyInput
  """A selling plan policy which describes the inventory details."""
  inventoryPolicy: Shopify_SellingPlanInventoryPolicyInput
  """
  The pricing policies which describe the pricing details. Each selling plan
  can only contain a maximum of 2 pricing policies.
  """
  pricingPolicies: [Shopify_SellingPlanPricingPolicyInput!]
  """
  The values of all options available on the selling plan. Selling plans are
  grouped together in Liquid when they are created by the same app, and have the
  same `selling_plan_group.name` and `selling_plan_group.options` values.
  """
  options: [String!]
  """
  Relative value for display purposes of this plan. A lower position will be displayed before a higher one.
  """
  position: Int
  """
  The category used to classify this selling plan for reporting purposes.
  """
  category: Shopify_SellingPlanCategory
}

"""Represents valid selling plan interval."""
enum Shopify_SellingPlanInterval {
  """Day interval."""
  DAY
  """Week interval."""
  WEEK
  """Month interval."""
  MONTH
  """Year interval."""
  YEAR
}

"""The selling plan inventory policy."""
type Shopify_SellingPlanInventoryPolicy {
  """When to reserve inventory for the order."""
  reserve: Shopify_SellingPlanReserve!
}

"""The input fields required to create or update an inventory policy."""
input Shopify_SellingPlanInventoryPolicyInput {
  """
  When to reserve inventory for the order. The value must be ON_FULFILLMENT or ON_SALE.
  """
  reserve: Shopify_SellingPlanReserve
}

"""
Represents the type of pricing associated to the selling plan (for example, a $10 or 20% discount that is set
for a limited period or that is fixed for the duration of the subscription). Selling plan pricing policies and
associated records (selling plan groups, selling plans, billing policy, and delivery policy) are deleted 48
hours after a merchant uninstalls their subscriptions app. We recommend backing up these records if you need
to restore them later.
"""
union Shopify_SellingPlanPricingPolicy = Shopify_SellingPlanFixedPricingPolicy | Shopify_SellingPlanRecurringPricingPolicy

"""Represents a selling plan pricing policy adjustment type."""
enum Shopify_SellingPlanPricingPolicyAdjustmentType {
  """Percentage off adjustment."""
  PERCENTAGE
  """Fixed amount off adjustment."""
  FIXED_AMOUNT
  """Price of the policy."""
  PRICE
}

"""Represents a selling plan pricing policy adjustment value type."""
union Shopify_SellingPlanPricingPolicyAdjustmentValue = Shopify_MoneyV2 | Shopify_SellingPlanPricingPolicyPercentageValue

"""Represents selling plan pricing policy common fields."""
interface Shopify_SellingPlanPricingPolicyBase {
  """The price adjustment type."""
  adjustmentType: Shopify_SellingPlanPricingPolicyAdjustmentType!
  """The price adjustment value."""
  adjustmentValue: Shopify_SellingPlanPricingPolicyAdjustmentValue!
}

"""
Specifies the input fields required to create or update a selling plan pricing policy.
"""
input Shopify_SellingPlanPricingPolicyInput {
  """Recurring pricing policy details."""
  recurring: Shopify_SellingPlanRecurringPricingPolicyInput
  """Fixed pricing policy details."""
  fixed: Shopify_SellingPlanFixedPricingPolicyInput
}

"""The percentage value of a selling plan pricing policy percentage type."""
type Shopify_SellingPlanPricingPolicyPercentageValue {
  """The percentage value."""
  percentage: Float!
}

"""
The input fields required to create or update a pricing policy adjustment value.
"""
input Shopify_SellingPlanPricingPolicyValueInput {
  """The percentage value."""
  percentage: Float
  """The fixed value for an fixed amount off or a new policy price."""
  fixedValue: Shopify_Decimal
}

"""Represents a recurring selling plan billing policy."""
type Shopify_SellingPlanRecurringBillingPolicy {
  """
  Specific anchor dates upon which the billing interval calculations should be made.
  """
  anchors: [Shopify_SellingPlanAnchor!]!
  """The date and time when the selling plan billing policy was created."""
  createdAt: DateTime!
  """The billing frequency, it can be either: day, week, month or year."""
  interval: Shopify_SellingPlanInterval!
  """The number of intervals between billings."""
  intervalCount: Int!
  """Maximum number of billing iterations."""
  maxCycles: Int
  """Minimum number of billing iterations."""
  minCycles: Int
}

"""
Specifies the input fields required to create or update a recurring billing policy.
"""
input Shopify_SellingPlanRecurringBillingPolicyInput {
  """The billing frequency, it can be either: day, week, month or year."""
  interval: Shopify_SellingPlanInterval
  """The number of intervals between billings."""
  intervalCount: Int
  """
  Specific anchor dates upon which the billing interval calculations should be made.
  """
  anchors: [Shopify_SellingPlanAnchorInput!]
  """Minimum number of billing iterations."""
  minCycles: Int
  """Maximum number of billing iterations."""
  maxCycles: Int
}

"""Represents a recurring selling plan delivery policy."""
type Shopify_SellingPlanRecurringDeliveryPolicy {
  """
  The specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [Shopify_SellingPlanAnchor!]!
  """The date and time when the selling plan delivery policy was created."""
  createdAt: DateTime!
  """
  Number of days which represent a buffer period for orders to be included in a cycle.
  """
  cutoff: Int
  """
  Whether the delivery policy is merchant or buyer-centric.
  Buyer-centric delivery policies state the time when the buyer will receive the goods.
  Merchant-centric delivery policies state the time when the fulfillment should be started.
  Currently, only merchant-centric delivery policies are supported.
  """
  intent: Shopify_SellingPlanRecurringDeliveryPolicyIntent!
  """The delivery frequency, it can be either: day, week, month or year."""
  interval: Shopify_SellingPlanInterval!
  """The number of intervals between deliveries."""
  intervalCount: Int!
  """
  The fulfillment or delivery behavior of the first fulfillment when the order
  is placed before the anchor. The default value for this field is `ASAP`.
  """
  preAnchorBehavior: Shopify_SellingPlanRecurringDeliveryPolicyPreAnchorBehavior!
}

"""
Specifies the input fields to create or update a recurring delivery policy.
"""
input Shopify_SellingPlanRecurringDeliveryPolicyInput {
  """The delivery frequency, it can be either: day, week, month or year."""
  interval: Shopify_SellingPlanInterval
  """The number of intervals between deliveries."""
  intervalCount: Int
  """
  The specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [Shopify_SellingPlanAnchorInput!]
  """A buffer period for orders to be included in a cycle."""
  cutoff: Int
  """
  Intention of this delivery policy, it can be either: delivery or fulfillment.
  """
  intent: Shopify_SellingPlanRecurringDeliveryPolicyIntent
  """The pre-anchor behavior. It can be either: asap or next."""
  preAnchorBehavior: Shopify_SellingPlanRecurringDeliveryPolicyPreAnchorBehavior
}

"""Whether the delivery policy is merchant or buyer-centric."""
enum Shopify_SellingPlanRecurringDeliveryPolicyIntent {
  """
  A merchant-centric delivery policy. Mark this delivery policy to define when the merchant should start fulfillment.
  """
  FULFILLMENT_BEGIN
}

"""
The fulfillment or delivery behaviors of the first fulfillment when the orderis placed before the anchor.
"""
enum Shopify_SellingPlanRecurringDeliveryPolicyPreAnchorBehavior {
  """
  The orders placed can be fulfilled or delivered immediately. The orders placed
  inside a cutoff can be fulfilled or delivered at the next anchor.
  """
  ASAP
  """
  The orders placed can be fulfilled or delivered at the next anchor date.
  The orders placed inside a cutoff will skip the next anchor and can be fulfilled or
  delivered at the following anchor.
  """
  NEXT
}

"""Represents a recurring selling plan pricing policy."""
type Shopify_SellingPlanRecurringPricingPolicy implements Shopify_SellingPlanPricingPolicyBase {
  """The price adjustment type."""
  adjustmentType: Shopify_SellingPlanPricingPolicyAdjustmentType!
  """The price adjustment value."""
  adjustmentValue: Shopify_SellingPlanPricingPolicyAdjustmentValue!
  """Cycle after which this pricing policy applies."""
  afterCycle: Int
  """
  The date and time when the recurring selling plan pricing policy was created.
  """
  createdAt: DateTime!
}

"""
Specifies the input fields required to create or update a recurring selling plan pricing policy.
"""
input Shopify_SellingPlanRecurringPricingPolicyInput {
  """ID of the pricing policy."""
  id: ID
  """Price adjustment type defined by the policy."""
  adjustmentType: Shopify_SellingPlanPricingPolicyAdjustmentType
  """Price adjustment value defined by the policy."""
  adjustmentValue: Shopify_SellingPlanPricingPolicyValueInput
  """Cycle after which the pricing policy applies."""
  afterCycle: Int!
}

"""When to capture the payment for the remaining amount due."""
enum Shopify_SellingPlanRemainingBalanceChargeTrigger {
  """When there's no remaining balance to be charged after checkout."""
  NO_REMAINING_BALANCE
  """
  At an exact time defined by the remaining_balance_charge_exact_time field.
  """
  EXACT_TIME
  """
  After the duration defined by the remaining_balance_charge_time_after_checkout field.
  """
  TIME_AFTER_CHECKOUT
}

"""When to reserve inventory for a selling plan."""
enum Shopify_SellingPlanReserve {
  """Reserve inventory when order is fulfilled."""
  ON_FULFILLMENT
  """Reserve inventory at time of sale."""
  ON_SALE
}

"""SEO information."""
type Shopify_SEO {
  """SEO Description."""
  description: String
  """SEO Title."""
  title: String
}

"""SEO information."""
input Shopify_SEOInput {
  """SEO title of the product."""
  title: String
  """SEO description of the product."""
  description: String
}

"""The class of the discount for combining purposes."""
enum Shopify_ShippingDiscountClass {
  """Combined as a shipping discount."""
  SHIPPING
}

"""
Represents the shipping details that the customer chose for their order.
"""
type Shopify_ShippingLine {
  """
  A reference to the carrier service that provided the rate.
  Present when the rate was computed by a third-party carrier service.
  """
  carrierIdentifier: String
  """A reference to the shipping method."""
  code: String
  """Whether the shipping line is custom or not."""
  custom: Boolean!
  """The general classification of the delivery method."""
  deliveryCategory: String
  """The discounts that have been allocated to the shipping line."""
  discountAllocations: [Shopify_DiscountAllocation!]!
  """The pre-tax shipping price with discounts applied."""
  discountedPrice: Shopify_MoneyV2! @deprecated(reason: "Use `discountedPriceSet` instead.")
  """The pre-tax shipping price with discounts applied."""
  discountedPriceSet: Shopify_MoneyBag!
  """A globally-unique identifier."""
  id: ID
  """The pre-tax shipping price without any discounts applied."""
  originalPrice: Shopify_MoneyV2! @deprecated(reason: "Use `originalPriceSet` instead.")
  """The pre-tax shipping price without any discounts applied."""
  originalPriceSet: Shopify_MoneyBag!
  """The phone number at the shipping address."""
  phone: String
  """Returns the price of the shipping line."""
  price: Shopify_Money! @deprecated(reason: "Use `originalPriceSet` instead.")
  """
  The fulfillment service requested for the shipping method.
  Present if the shipping method requires processing by a third party fulfillment service.
  """
  requestedFulfillmentService: Shopify_FulfillmentService
  """
  A unique identifier for the shipping rate. The format can change without notice and is not meant to be shown to users.
  """
  shippingRateHandle: String
  """Returns the rate source for the shipping line."""
  source: String
  """The TaxLine objects connected to this shipping line."""
  taxLines: [Shopify_TaxLine!]!
  """Returns the title of the shipping line."""
  title: String!
}

"""An auto-generated type for paginating through multiple ShippingLines."""
type Shopify_ShippingLineConnection {
  """A list of edges."""
  edges: [Shopify_ShippingLineEdge!]!
  """A list of the nodes contained in ShippingLineEdge."""
  nodes: [Shopify_ShippingLine!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ShippingLine and a cursor during pagination.
"""
type Shopify_ShippingLineEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of ShippingLineEdge."""
  node: Shopify_ShippingLine!
}

"""Specifies the shipping details for the order."""
input Shopify_ShippingLineInput {
  """Price of the shipping rate."""
  price: Shopify_Money
  """A unique identifier for the shipping rate."""
  shippingRateHandle: String
  """Title of the shipping rate."""
  title: String
}

"""A sale associated with a shipping charge."""
type Shopify_ShippingLineSale implements Shopify_Sale {
  """The type of order action that the sale represents."""
  actionType: Shopify_SaleActionType!
  """The unique identifier for the sale."""
  id: ID!
  """The line type assocated with the sale."""
  lineType: Shopify_SaleLineType!
  """The number of units either ordered or intended to be returned."""
  quantity: Int
  """
  The shipping line item for the associated sale. `shippingLine` is not available if the `SaleActionType` is a return.
  """
  shippingLine: Shopify_ShippingLine
  """All individual taxes associated with the sale."""
  taxes: [Shopify_SaleTax!]!
  """The total sale amount after taxes and discounts."""
  totalAmount: Shopify_MoneyBag!
  """The total discounts allocated to the sale after taxes."""
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag!
  """The total discounts allocated to the sale before taxes."""
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag!
  """The total amount of taxes for the sale."""
  totalTaxAmount: Shopify_MoneyBag!
}

"""
The shipping method for the delivery. Customers will see applicable shipping methods in the shipping section of checkout.
"""
type Shopify_ShippingMethod {
  """A unique code associated with the rate. For example: `expedited_mail`"""
  code: String!
  """
  A description of the rate, which customers will see at checkout.
  For example: `Local delivery`, `Free Express Worldwide`, `Includes tracking and insurance`.
  """
  label: String!
}

"""Return type for `shippingPackageDelete` mutation."""
type Shopify_ShippingPackageDeletePayload {
  """The ID of the deleted shipping package."""
  deletedId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `shippingPackageMakeDefault` mutation."""
type Shopify_ShippingPackageMakeDefaultPayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Type of a shipping package."""
enum Shopify_ShippingPackageType {
  """A shipping box."""
  BOX
  """A flat rate packaging supplied by a carrier."""
  FLAT_RATE
  """An envelope."""
  ENVELOPE
  """A soft-pack, bubble-wrap or vinyl envelope."""
  SOFT_PACK
}

"""Return type for `shippingPackageUpdate` mutation."""
type Shopify_ShippingPackageUpdatePayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
A shipping rate is an additional cost added to the cost of the products that were ordered.
"""
type Shopify_ShippingRate {
  """Human-readable unique identifier for this shipping rate."""
  handle: String!
  """The cost associated with the shipping rate."""
  price: Shopify_MoneyV2!
  """The name of the shipping rate."""
  title: String!
}

"""Represents the shipping costs refunded on the Refund."""
type Shopify_ShippingRefund {
  """The monetary value of the shipping fees to be refunded."""
  amount: Shopify_Money! @deprecated(reason: "Use `amountSet` instead.")
  """
  The monetary value of the shipping fees to be refunded in shop and presentment currencies.
  """
  amountSet: Shopify_MoneyBag!
  """The maximum amount of shipping fees currently refundable."""
  maximumRefundable: Shopify_Money! @deprecated(reason: "Use `maximumRefundableSet` instead.")
  """
  The maximum amount of shipping fees currently refundable in shop and presentment currencies.
  """
  maximumRefundableSet: Shopify_MoneyBag!
  """
  The monetary value of the tax allocated to shipping fees to be refunded.
  """
  tax: Shopify_Money! @deprecated(reason: "Use `taxSet` instead.")
  """
  The monetary value of the tax allocated to shipping fees to be refunded in shop and presentment currencies.
  """
  taxSet: Shopify_MoneyBag!
}

"""The input fields that are required to reimburse shipping costs."""
input Shopify_ShippingRefundInput {
  """The monetary value of the shipping fees to be reimbursed."""
  amount: Shopify_Money
  """Whether a full refund is provided."""
  fullRefund: Boolean
}

"""
Represents a collection of the general settings and information about the shop.
"""
type Shopify_Shop implements Shopify_HasMetafields & Shopify_HasPublishedTranslations & Shopify_Node {
  """
  A list of the shop's active alert messages that appear in the Shopify admin.
  """
  alerts: [Shopify_ShopAlert!]!
  """
  A list of the shop's product categories. Limit: 1000 product categories.
  """
  allProductCategories: [Shopify_ProductCategory!]!
  """The token required to query the shop's reports or dashboards."""
  analyticsToken: String! @deprecated(reason: "Not supported anymore.")
  """
  The paginated list of fulfillment orders assigned to fulfillment services.
  """
  assignedFulfillmentOrders(
    """
    The assigment status of the fulfillment orders that should be returned.
    """
    assignmentStatus: Shopify_FulfillmentOrderAssignmentStatus
    """
    Returns fulfillment orders only for certain locations, specified by a list of location IDs.
    """
    locationIds: [ID!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_FulfillmentOrderSortKeys = ID
  ): Shopify_FulfillmentOrderConnection!
  """The list of sales channels not currently installed on the shop."""
  availableChannelApps(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_AppConnection!
  """The shop's billing address information."""
  billingAddress: Shopify_ShopAddress!
  """Exposes the number of channels."""
  channelCount: Int! @deprecated(reason: "Use `publicationCount` instead.")
  """List of all channel definitions associated with a shop."""
  channelDefinitionsForInstalledChannels: [Shopify_AvailableChannelDefinitionsByChannel!]!
  """List of the shop's active sales channels."""
  channels(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ChannelConnection! @deprecated(reason: "Use `QueryRoot.channels` instead.")
  """Specifies whether the shop supports checkouts via Checkout API."""
  checkoutApiSupported: Boolean!
  """Return a collection by its handle."""
  collectionByHandle(
    """The handle of the collection."""
    handle: String!
  ): Shopify_Collection @deprecated(reason: "Use `QueryRoot.collectionByHandle` instead.")
  """List of the shop's collection saved searches."""
  collectionSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.collectionSavedSearches` instead.")
  """List of the shop's collections."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_CollectionSortKeys = ID
    """
    Supported filter parameters:
     - `collection_type`
     - `publishable_status`
     - `published_status`
     - `title`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_CollectionConnection! @deprecated(reason: "Use `QueryRoot.collections` instead.")
  """
  The public-facing contact email address for the shop.
  Customers will use this email to communicate with the shop owner.
  """
  contactEmail: String!
  """Countries that have been defined in shipping zones for the shop."""
  countriesInShippingZones: Shopify_CountriesInShippingZones!
  """The three letter code for the currency that the shop sells in."""
  currencyCode: Shopify_CurrencyCode!
  """How currencies are displayed on your store."""
  currencyFormats: Shopify_CurrencyFormats!
  """
  The presentment currency settings for the shop excluding the shop's own currency.
  """
  currencySettings(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_CurrencySettingConnection!
  """
  Whether customer accounts are required, optional, or disabled for the shop.
  """
  customerAccounts: Shopify_ShopCustomerAccountsSetting!
  """List of the shop's customer saved searches."""
  customerSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_CustomerSavedSearchSortKeys = ID
    """
    Supported filter parameters:
     - `name`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.customerSavedSearches` instead.")
  """A list of tags that have been added to customer accounts."""
  customerTags(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): Shopify_StringConnection!
  """Customer accounts associated to the shop."""
  customers(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_CustomerSortKeys = ID
    """
    Supported filter parameters:
     - `accepts_marketing`
     - `country`
     - `customer_date`
     - `email`
     - `last_abandoned_order_date`
     - `order_date`
     - `orders_count`
     - `phone`
     - `state`
     - `tag`
     - `tag_not`
     - `total_spent`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_CustomerConnection! @deprecated(reason: "Use `QueryRoot.customers` instead.")
  """The shop's meta description used in search engine results."""
  description: String
  """The domains configured for the shop."""
  domains: [Shopify_Domain!]! @deprecated(reason: "Use `domainsPaginated` instead.")
  """List of the shop's draft order saved searches."""
  draftOrderSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.draftOrderSavedSearches` instead.")
  """A list of tags that have been added to draft orders."""
  draftOrderTags(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): Shopify_StringConnection!
  """List of saved draft orders on the shop."""
  draftOrders(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_DraftOrderSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `customer_id`
     - `source`
     - `status`
     - `tag`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_DraftOrderConnection! @deprecated(reason: "Use `QueryRoot.draftOrders` instead.")
  """
  The shop owner's email address.
  Shopify will use this email address to communicate with the shop owner.
  """
  email: String!
  """The presentment currencies enabled for the shop."""
  enabledPresentmentCurrencies: [Shopify_CurrencyCode!]!
  """The set of features enabled for the shop."""
  features: Shopify_ShopFeatures!
  """
  The paginated list of merchant-managed and third-party fulfillment orders.
  """
  fulfillmentOrders(
    """Whether to include closed fulfillment orders."""
    includeClosed: Boolean = false
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_FulfillmentOrderSortKeys = ID
    """
    Supported filter parameters:
     - `assigned_location_id`
     - `status`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_FulfillmentOrderConnection! @deprecated(reason: "Use `QueryRoot.fulfillmentOrders` instead.")
  """List of the shop's installed fulfillment services."""
  fulfillmentServices: [Shopify_FulfillmentService!]!
  """The shop's time zone as defined by the IANA."""
  ianaTimezone: String!
  """A globally-unique identifier."""
  id: ID!
  """List of the shop's inventory items."""
  inventoryItems(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """
    Supported filter parameters:
     - `created_at`
     - `id`
     - `sku`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_InventoryItemConnection! @deprecated(reason: "Use `QueryRoot.inventoryItems` instead.")
  """
  The number of pendings orders on the shop.
  Limited to a maximum of 10000.
  """
  limitedPendingOrderCount: Shopify_LimitedPendingOrderCount!
  """List of active locations of the shop."""
  locations(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_LocationSortKeys = NAME
    """
    Supported filter parameters:
     - `active`
     - `address1`
     - `address2`
     - `city`
     - `country`
     - `legacy`
     - `name`
     - `province`
     - `zip`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """If true, also include the legacy locations of fulfillment services."""
    includeLegacy: Boolean = false
    """If true, also include the locations that are deactivated."""
    includeInactive: Boolean = false
  ): Shopify_LocationConnection! @deprecated(reason: "Use `QueryRoot.locations` instead.")
  """List of a shop's marketing events."""
  marketingEvents(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_MarketingEventSortKeys = ID
    """
    Supported filter parameters:
     - `app_id`
     - `description`
     - `started_at`
     - `type`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MarketingEventConnection! @deprecated(reason: "Use `QueryRoot.marketingEvents` instead.")
  """The approval signals for a shop to support onboarding to channel apps."""
  merchantApprovalSignals: Shopify_MerchantApprovalSignals
  """Returns a metafield by namespace and key that belongs to the resource."""
  metafield(
    """The namespace for the metafield."""
    namespace: String
    """The key for the metafield."""
    key: String!
  ): Shopify_Metafield
  """List of metafields that belong to the resource."""
  metafields(
    """The metafield namespace to filter by."""
    namespace: String
    """
    List of keys of metafields in the format `namespace.key`, will be returned in the same format.
    """
    keys: [String!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldConnection!
  """The shop's .myshopify.com domain name."""
  myshopifyDomain: String!
  """The shop's name."""
  name: String!
  """The shop's settings related to navigation."""
  navigationSettings: [Shopify_NavigationItem!]!
  """The prefix that appears before order numbers."""
  orderNumberFormatPrefix: String!
  """The suffix that appears after order numbers."""
  orderNumberFormatSuffix: String!
  """List of the shop's order saved searches."""
  orderSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.orderSavedSearches` instead.")
  """A list of tags that have been added to orders."""
  orderTags(
    """Returns up to the first `n` elements from the list."""
    first: Int!
    """Sort type."""
    sort: Shopify_ShopTagSort = ALPHABETICAL
  ): Shopify_StringConnection!
  """A list of the shop's orders."""
  orders(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_OrderSortKeys = PROCESSED_AT
    """
    Supported filter parameters:
     - `cart_token`
     - `channel`
     - `channel_id`
     - `chargeback_status`
     - `checkout_token`
     - `created_at`
     - `credit_card_last4`
     - `customer_id`
     - `delivery_method`
     - `discount_code`
     - `earliest_fulfill_by`
     - `email`
     - `financial_status`
     - `fraud_protection_level`
     - `fulfillment_location_id`
     - `fulfillment_status`
     - `gateway`
     - `location_id`
     - `name`
     - `payment_id`
     - `payment_provider_id`
     - `processed_at`
     - `reference_location_id`
     - `return_status`
     - `risk_level`
     - `sales_channel`
     - `sku`
     - `source_identifier`
     - `source_name`
     - `status`
     - `tag`
     - `tag_not`
     - `test`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_OrderConnection! @deprecated(reason: "Use `QueryRoot.orders` instead.")
  """The shop's settings related to payments."""
  paymentSettings: Shopify_PaymentSettings!
  """Number of pending orders on the shop."""
  pendingOrderCount: Int! @deprecated(reason: "Use `limitedPendingOrderCount` instead.")
  """The shop's billing plan."""
  plan: Shopify_ShopPlan!
  """List of the shop's price rule saved searches."""
  priceRuleSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.priceRuleSavedSearches` instead.")
  """List of the shop’s price rules."""
  priceRules(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_PriceRuleSortKeys = ID
    """
    Supported filter parameters:
     - `combines_with`
     - `created_at`
     - `discount_type`
     - `ends_at`
     - `starts_at`
     - `status`
     - `times_used`
     - `title`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_PriceRuleConnection! @deprecated(reason: "Use `QueryRoot.priceRules` instead.")
  """The primary domain of the shop's online store."""
  primaryDomain: Shopify_Domain!
  """
  Returns a private metafield by namespace and key that belongs to the resource.
  """
  privateMetafield(
    """The namespace for the private metafield."""
    namespace: String!
    """The key for the private metafield."""
    key: String!
  ): Shopify_PrivateMetafield
  """List of private metafields that belong to the resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
  """Return a product by its handle."""
  productByHandle(
    """
    A unique string that identifies the product. Handles are automatically
    generated based on the product's title, and are always lowercase. Whitespace
    and special characters are replaced with a hyphen: `-`. If there are
    multiple consecutive whitespace or special characters, then they're replaced
    with a single hyphen. Whitespace or special characters at the beginning are
    removed. If a duplicate product title is used, then the handle is
    auto-incremented by one. For example, if you had two products called
    `Potion`, then their handles would be `potion` and `potion-1`. After a
    product has been created, changing the product title doesn't update the handle.
    """
    handle: String!
  ): Shopify_Product @deprecated(reason: "Use `QueryRoot.productByHandle` instead.")
  """The list of all images of all products for the shop."""
  productImages(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductImageSortKeys = CREATED_AT
  ): Shopify_ImageConnection!
  """List of the shop's product saved searches."""
  productSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.productSavedSearches` instead.")
  """A list of tags that have been added to products."""
  productTags(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): Shopify_StringConnection!
  """The list of types added to products."""
  productTypes(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): Shopify_StringConnection!
  """List of the shop's product variants."""
  productVariants(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductVariantSortKeys = ID
    """
    Supported filter parameters:
     - `available_quantity`
     - `barcode`
     - `collection`
     - `committed_quantity`
     - `delivery_profile_id`
     - `exclude_composite`
     - `gift_card`
     - `incoming_quantity`
     - `inventory_quantity`
     - `location_id`
     - `managed`
     - `managed_by`
     - `on_hand_quantity`
     - `option1`
     - `option2`
     - `option3`
     - `product_id`
     - `product_status`
     - `product_type`
     - `publishable_status`
     - `published_status`
     - `reserved_quantity`
     - `sku`
     - `tag`
     - `tag_not`
     - `taxable`
     - `title`
     - `updated_at`
     - `vendor`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_ProductVariantConnection! @deprecated(reason: "Use `QueryRoot.productVariants` instead.")
  """The list of vendors added to products."""
  productVendors(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): Shopify_StringConnection!
  """List of the shop's products."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductSortKeys = ID
    """
    Supported filter parameters:
     - `barcode`
     - `created_at`
     - `delivery_profile_id`
     - `error_feedback`
     - `gift_card`
     - `has_only_composites`
     - `has_only_default_variant`
     - `has_variant_with_components`
     - `id`
     - `inventory_total`
     - `is_price_reduced`
     - `out_of_stock_somewhere`
     - `price`
     - `product_type`
     - `publishable_status`
     - `published_status`
     - `sku`
     - `status`
     - `tag`
     - `tag_not`
     - `title`
     - `updated_at`
     - `vendor`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_ProductConnection! @deprecated(reason: "Use `QueryRoot.products`.")
  """The number of publications for the shop."""
  publicationCount: Int!
  """
  The shop's limits for specific resources. For example, the maximum number
  ofvariants allowed per product, or the maximum number of locations allowed.
  """
  resourceLimits: Shopify_ShopResourceLimits!
  """The URL of the rich text editor that can be used for mobile devices."""
  richTextEditorUrl: URL!
  """Fetches a list of admin search results by a specified query."""
  search(
    """The search query to filter by."""
    query: String!
    """The search result types to filter by."""
    types: [Shopify_SearchResultType!]
    """Returns up to the first `n` elements from the list."""
    first: Int!
    """Returns the elements that come after the specified cursor."""
    after: String
  ): Shopify_SearchResultConnection!
  """
  The list of search filter options for the shop. These can be used to filter productvisibility for the shop.
  """
  searchFilters: Shopify_SearchFilterOptions!
  """Whether the shop has outstanding setup steps."""
  setupRequired: Boolean!
  """The list of countries that the shop ships to."""
  shipsToCountries: [CountryCode!]!
  """The list of all legal policies associated with a shop."""
  shopPolicies: [Shopify_ShopPolicy!]!
  """Shopify Payments account information, including balances and payouts."""
  shopifyPaymentsAccount: Shopify_ShopifyPaymentsAccount @deprecated(reason: "Use `QueryRoot.shopifyPaymentsAccount` instead.")
  """The paginated list of the shop's staff members."""
  staffMembers(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_StaffMemberConnection!
  """
  The storefront access token of a private application. These are scoped per-application.
  """
  storefrontAccessTokens(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_StorefrontAccessTokenConnection!
  """The URL of the shop's storefront."""
  storefrontUrl: URL! @deprecated(reason: "Use `url` instead.")
  """Whether the shop charges taxes for shipping."""
  taxShipping: Boolean!
  """Whether applicable taxes are included in the shop's product prices."""
  taxesIncluded: Boolean!
  """The shop's time zone abbreviation."""
  timezoneAbbreviation: String!
  """The shop's time zone offset."""
  timezoneOffset: String!
  """The shop's time zone offset expressed as a number of minutes."""
  timezoneOffsetMinutes: Int!
  """
  Whether transactional SMS sent by Shopify have been disabled for a shop.
  """
  transactionalSmsDisabled: Boolean!
  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Shopify_PublishedTranslation!]!
  """The shop's unit system for weights and measures."""
  unitSystem: Shopify_UnitSystem!
  """Fetches a list of images uploaded to the shop by their IDs."""
  uploadedImagesByIds(
    """The IDs of the uploaded images."""
    imageIds: [ID!]!
  ): [Shopify_Image!]!
  """The URL of the shop's online store."""
  url: URL!
  """The shop's primary unit of weight for products and shipping."""
  weightUnit: Shopify_WeightUnit!
}

"""The shop's billing address."""
type Shopify_ShopAddress implements Shopify_Node {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String
  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String
  """The name of the city, district, village, or town."""
  city: String
  """The name of the company or organization."""
  company: String
  """Whether the address coordinates are valid."""
  coordinatesValidated: Boolean!
  """The name of the country."""
  country: String
  """
  The two-letter code for the country of the address.
  
  For example, US.
  """
  countryCode: String @deprecated(reason: "Use `countryCodeV2` instead.")
  """
  The two-letter code for the country of the address.
  
  For example, US.
  """
  countryCodeV2: CountryCode
  """The first name."""
  firstName: String @deprecated(reason: "Always null in this context.")
  """
  A formatted version of the address, customized by the provided arguments.
  """
  formatted(
    """Whether to include the company in the formatted address."""
    withCompany: Boolean = true
  ): [String!]!
  """A comma-separated list of the values for city, province, and country."""
  formattedArea: String
  """A globally-unique identifier."""
  id: ID!
  """The last name."""
  lastName: String @deprecated(reason: "Always null in this context.")
  """The latitude coordinate of the address."""
  latitude: Float
  """The longitude coordinate of the address."""
  longitude: Float
  """The full name, based on firstName and lastName."""
  name: String @deprecated(reason: "Always null in this context.")
  """
  A phone number associated with the address.
  
  Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String
  """The region of the address, such as the province, state, or district."""
  province: String
  """
  The two-letter code for the region.
  
  For example, ON.
  """
  provinceCode: String
  """The zip or postal code of the address."""
  zip: String
}

"""
An alert message that appears in the Shopify admin about a problem with a store
setting, with an action to take. For example, you could show an alert to ask the
merchant to enter their billing information to activate Shopify Plus.
"""
type Shopify_ShopAlert {
  """
  The text for the button in the alert that links to related information. For example, _Add credit card_.
  """
  action: Shopify_ShopAlertAction!
  """
  A description of the alert and further information, such as whether the merchant will be charged.
  """
  description: String!
}

"""An action associated to a shop alert, such as adding a credit card."""
type Shopify_ShopAlertAction {
  """The text for the button in the alert. For example, _Add credit card_."""
  title: String!
  """The target URL that the button links to."""
  url: URL!
}

"""
Possible branding of a shop.
Branding can be used to define the look of a shop including its styling and logo in the Shopify Admin.
"""
enum Shopify_ShopBranding {
  """Shop has Shopify Gold branding."""
  SHOPIFY_GOLD
  """Shop has Shopify Plus branding."""
  SHOPIFY_PLUS
  """Shop has Rogers branding."""
  ROGERS
  """Shop has Shopify branding."""
  SHOPIFY
}

"""Represents the shop's customer account requirement preference."""
enum Shopify_ShopCustomerAccountsSetting {
  REQUIRED
  OPTIONAL
  DISABLED
}

"""
Represents the feature set available to the shop.
Most fields specify whether a feature is enabled for a shop, and some fields return information
related to specific features.
"""
type Shopify_ShopFeatures {
  """Whether a shop has access to Avalara AvaTax."""
  avalaraAvatax: Boolean!
  """
  The branding of the shop, which influences its look and feel in the Shopify admin.
  """
  branding: Shopify_ShopBranding!
  """Whether a shop's online store can have CAPTCHA protection."""
  captcha: Boolean!
  """
  Whether a shop's online store can have CAPTCHA protection for domains not managed by Shopify.
  """
  captchaExternalDomains: Boolean!
  """Whether the delivery profiles functionality is enabled for this shop."""
  deliveryProfiles: Boolean! @deprecated(reason: "Delivery profiles are now 100% enabled across Shopify.")
  """
  Whether a shop has access to the Google Analytics dynamic remarketing feature.
  """
  dynamicRemarketing: Boolean!
  """Whether a shop can be migrated to use Shopify subscriptions."""
  eligibleForSubscriptionMigration: Boolean!
  """Whether a shop is configured properly to sell subscriptions."""
  eligibleForSubscriptions: Boolean!
  """Whether a shop can create gift cards."""
  giftCards: Boolean!
  """
  Whether a shop displays Harmonized System codes on products. This is used for customs when shipping
  internationally.
  """
  harmonizedSystemCode: Boolean!
  """Whether a shop can enable international domains."""
  internationalDomains: Boolean!
  """Whether a shop can enable international price overrides."""
  internationalPriceOverrides: Boolean!
  """Whether a shop can enable international price rules."""
  internationalPriceRules: Boolean!
  """
  Whether a shop has enabled a legacy subscription gateway to handle older subscriptions.
  """
  legacySubscriptionGatewayEnabled: Boolean!
  """
  Whether to show the Live View metrics in the Shopify admin. Live view is hidden from merchants that are on a trial
  or don't have a storefront.
  """
  liveView: Boolean!
  """Whether a shop has multi-location functionality."""
  multiLocation: Boolean! @deprecated(reason: "All shops support multi-location inventory. Use `QueryRoot.locations` to determine whether shop has more than one location.\n")
  """Whether a shop has access to the onboarding visual."""
  onboardingVisual: Boolean!
  """
  Whether a shop is configured to sell subscriptions with PayPal Express.
  """
  paypalExpressSubscriptionGatewayStatus: Shopify_PaypalExpressSubscriptionsGatewayStatus!
  """Whether a shop has access to all reporting features."""
  reports: Boolean!
  """Whether a shop has ever had subscription products."""
  sellsSubscriptions: Boolean!
  """Whether the shop has a Shopify Plus subscription."""
  shopifyPlus: Boolean! @deprecated(reason: "Use Shop.plan.shopifyPlus instead.")
  """
  Whether to show metrics in the Shopify admin. Metrics are hidden for new merchants until they become meaningful.
  """
  showMetrics: Boolean!
  """Whether a shop has an online store."""
  storefront: Boolean!
  """Whether a shop is using Shopify Balance."""
  usingShopifyBalance: Boolean!
}

"""
Balance and payout information for a
[Shopify Payments](https://help.shopify.com/manual/payments/shopify-payments/getting-paid-with-shopify-payments)
account. Balance includes all balances for the currencies supported by the shop.
You can also query for a list of payouts, where each payout includes the corresponding currencyCode field.
"""
type Shopify_ShopifyPaymentsAccount implements Shopify_Node {
  """Whether the Shopify Payments setup is completed."""
  activated: Boolean!
  """Current balances in all currencies for the account."""
  balance: [Shopify_MoneyV2!]!
  """All bank accounts configured for the Shopify Payments account."""
  bankAccounts(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ShopifyPaymentsBankAccountConnection!
  """
  The statement descriptor used for charges.
  
  The statement descriptor appears on a customer's credit card or bank statement when they make a purchase.
  """
  chargeStatementDescriptor: String @deprecated(reason: "Use `chargeStatementDescriptors` instead.")
  """
  The statement descriptors used for charges.
  
  These descriptors appear on a customer's credit card or bank statement when they make a purchase.
  """
  chargeStatementDescriptors: Shopify_ShopifyPaymentsChargeStatementDescriptor
  """The Shopify Payments account country."""
  country: String!
  """The default payout currency for the Shopify Payments account."""
  defaultCurrency: Shopify_CurrencyCode!
  """All disputes related to the Shopify Payments account."""
  disputes(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """
    Supported filter parameters:
     - `id`
     - `initiated_at`
     - `status`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_ShopifyPaymentsDisputeConnection!
  """The fraud settings of the Shopify Payments account."""
  fraudSettings: Shopify_ShopifyPaymentsFraudSettings!
  """A globally-unique identifier."""
  id: ID!
  """The notifications settings for the account."""
  notificationSettings: Shopify_ShopifyPaymentsNotificationSettings!
  """Whether the Shopify Payments account can be onboarded."""
  onboardable: Boolean!
  """The payout schedule for the account."""
  payoutSchedule: Shopify_ShopifyPaymentsPayoutSchedule!
  """
  The descriptor used for payouts.
  
  The descriptor appears on a merchant's bank statement when they receive a payout.
  """
  payoutStatementDescriptor: String
  """
  All current and previous payouts made between the account and the bank account.
  """
  payouts(
    """Filter the direction of the payout."""
    transactionType: Shopify_ShopifyPaymentsPayoutTransactionType
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ShopifyPaymentsPayoutConnection!
  """The permitted documents for identity verification."""
  permittedVerificationDocuments: [Shopify_ShopifyPaymentsVerificationDocument!]!
  """The verifications necessary for this account."""
  verifications: [Shopify_ShopifyPaymentsVerification!]!
}

"""A bank account that can receive payouts."""
type Shopify_ShopifyPaymentsBankAccount implements Shopify_Node {
  """The account number of the bank account."""
  accountNumber: String!
  """The last digits of the account number (the rest is redacted)."""
  accountNumberLastDigits: String!
  """The name of the bank."""
  bankName: String
  """The country of the bank."""
  country: CountryCode!
  """The date that the bank account was created."""
  createdAt: DateTime!
  """The currency of the bank account."""
  currency: Shopify_CurrencyCode!
  """A globally-unique identifier."""
  id: ID!
  """
  All current and previous payouts made between the account and the bank account.
  """
  payouts(
    """Filter the direction of the payout."""
    transactionType: Shopify_ShopifyPaymentsPayoutTransactionType
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ShopifyPaymentsPayoutConnection!
  """The routing number of the bank account."""
  routingNumber: String!
  """The status of the bank account."""
  status: Shopify_ShopifyPaymentsBankAccountStatus!
}

"""
An auto-generated type for paginating through multiple ShopifyPaymentsBankAccounts.
"""
type Shopify_ShopifyPaymentsBankAccountConnection {
  """A list of edges."""
  edges: [Shopify_ShopifyPaymentsBankAccountEdge!]!
  """A list of the nodes contained in ShopifyPaymentsBankAccountEdge."""
  nodes: [Shopify_ShopifyPaymentsBankAccount!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ShopifyPaymentsBankAccount and a cursor during pagination.
"""
type Shopify_ShopifyPaymentsBankAccountEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of ShopifyPaymentsBankAccountEdge."""
  node: Shopify_ShopifyPaymentsBankAccount!
}

"""The bank account status."""
enum Shopify_ShopifyPaymentsBankAccountStatus {
  """A bank account that hasn't had any activity and that's not validated."""
  NEW
  """It was determined that the bank account exists."""
  VALIDATED
  """Bank account validation was successful."""
  VERIFIED
  """A payout to the bank account failed."""
  ERRORED
}

"""The charge descriptors for a payments account."""
interface Shopify_ShopifyPaymentsChargeStatementDescriptor {
  """The default charge statement descriptor."""
  default: String
  """The prefix of the statement descriptor."""
  prefix: String!
}

"""The charge descriptors for a payments account."""
type Shopify_ShopifyPaymentsDefaultChargeStatementDescriptor implements Shopify_ShopifyPaymentsChargeStatementDescriptor {
  """The default charge statement descriptor."""
  default: String
  """The prefix of the statement descriptor."""
  prefix: String!
}

"""
A dispute occurs when a buyer questions the legitimacy of a charge with their financial institution.
"""
type Shopify_ShopifyPaymentsDispute implements Shopify_LegacyInteroperability & Shopify_Node {
  """The total amount disputed by the cardholder."""
  amount: Shopify_MoneyV2!
  """The deadline for evidence submission."""
  evidenceDueBy: Date
  """
  The date when evidence was sent. Returns null if evidence has not yet been sent.
  """
  evidenceSentOn: Date
  """
  The date when this dispute was resolved. Returns null if the dispute is not yet resolved.
  """
  finalizedOn: Date
  """A globally-unique identifier."""
  id: ID!
  """The date when this dispute was initiated."""
  initiatedAt: DateTime!
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: Shopify_UnsignedInt64!
  """The order that contains the charge that is under dispute."""
  order: Shopify_Order
  """The reason of the dispute."""
  reasonDetails: Shopify_ShopifyPaymentsDisputeReasonDetails!
  """The current state of the dispute."""
  status: Shopify_DisputeStatus!
  """
  Indicates if this dispute is still in the inquiry phase or has turned into a chargeback.
  """
  type: Shopify_DisputeType!
}

"""
An auto-generated type for paginating through multiple ShopifyPaymentsDisputes.
"""
type Shopify_ShopifyPaymentsDisputeConnection {
  """A list of edges."""
  edges: [Shopify_ShopifyPaymentsDisputeEdge!]!
  """A list of the nodes contained in ShopifyPaymentsDisputeEdge."""
  nodes: [Shopify_ShopifyPaymentsDispute!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ShopifyPaymentsDispute and a cursor during pagination.
"""
type Shopify_ShopifyPaymentsDisputeEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of ShopifyPaymentsDisputeEdge."""
  node: Shopify_ShopifyPaymentsDispute!
}

"""The evidence associated with the dispute."""
type Shopify_ShopifyPaymentsDisputeEvidence implements Shopify_Node {
  """The activity logs associated with the dispute evidence."""
  accessActivityLog: String
  """The billing address that is provided by the customer."""
  billingAddress: Shopify_MailingAddress
  """
  The cancellation policy disclosure associated with the dispute evidence.
  """
  cancellationPolicyDisclosure: String
  """The cancellation policy file associated with the dispute evidence."""
  cancellationPolicyFile: Shopify_ShopifyPaymentsDisputeFileUpload
  """The cancellation rebuttal associated with the dispute evidence."""
  cancellationRebuttal: String
  """The customer communication file associated with the dispute evidence."""
  customerCommunicationFile: Shopify_ShopifyPaymentsDisputeFileUpload
  """The customer's email address."""
  customerEmailAddress: String
  """The customer's first name."""
  customerFirstName: String
  """The customer's last name."""
  customerLastName: String
  """The customer purchase ip for this dispute evidence."""
  customerPurchaseIp: String
  """The dispute associated with the evidence."""
  dispute: Shopify_ShopifyPaymentsDispute!
  """The file uploads associated with the dispute evidence."""
  disputeFileUploads: [Shopify_ShopifyPaymentsDisputeFileUpload!]!
  """The fulfillments associated with the dispute evidence."""
  fulfillments: [Shopify_ShopifyPaymentsDisputeFulfillment!]!
  """A globally-unique identifier."""
  id: ID!
  """The product description for this dispute evidence."""
  productDescription: String
  """The refund policy disclosure associated with the dispute evidence."""
  refundPolicyDisclosure: String
  """The refund policy file associated with the dispute evidence."""
  refundPolicyFile: Shopify_ShopifyPaymentsDisputeFileUpload
  """The refund refusal explanation associated with dispute evidence."""
  refundRefusalExplanation: String
  """The service documentation file associated with the dispute evidence."""
  serviceDocumentationFile: Shopify_ShopifyPaymentsDisputeFileUpload
  """The mailing address for shipping that is provided by the customer."""
  shippingAddress: Shopify_MailingAddress
  """The shipping documentation file associated with the dispute evidence."""
  shippingDocumentationFile: Shopify_ShopifyPaymentsDisputeFileUpload
  """Whether the dispute evidence is submitted."""
  submitted: Boolean!
  """The uncategorized file associated with the dispute evidence."""
  uncategorizedFile: Shopify_ShopifyPaymentsDisputeFileUpload
  """The uncategorized text for the dispute evidence."""
  uncategorizedText: String
}

"""The possible dispute evidence file types."""
enum Shopify_ShopifyPaymentsDisputeEvidenceFileType {
  """Customer Communication File."""
  CUSTOMER_COMMUNICATION_FILE
  """Refund Policy File."""
  REFUND_POLICY_FILE
  """Cancellation Policy File."""
  CANCELLATION_POLICY_FILE
  """Uncategorized File."""
  UNCATEGORIZED_FILE
  """Shipping Documentation File."""
  SHIPPING_DOCUMENTATION_FILE
  """Service Documentation File."""
  SERVICE_DOCUMENTATION_FILE
}

"""
Specifies the input fields required to update a dispute evidence object.
"""
input Shopify_ShopifyPaymentsDisputeEvidenceUpdateInput {
  """Customer email address."""
  customerEmailAddress: String
  """Customer last name."""
  customerLastName: String
  """Customer first name."""
  customerFirstName: String
  """The shipping address associated with the dispute evidence."""
  shippingAddress: Shopify_MailingAddressInput
  """Uncategorized text."""
  uncategorizedText: String
  """Activity logs."""
  accessActivityLog: String
  """Cancellation policy disclosure."""
  cancellationPolicyDisclosure: String
  """Cancellation rebuttal."""
  cancellationRebuttal: String
  """Refund policy disclosure."""
  refundPolicyDisclosure: String
  """Refund refusal explanation."""
  refundRefusalExplanation: String
  """Cancellation policy file."""
  cancellationPolicyFile: Shopify_ShopifyPaymentsDisputeFileUploadUpdateInput
  """Customer communication file."""
  customerCommunicationFile: Shopify_ShopifyPaymentsDisputeFileUploadUpdateInput
  """Refund policy file."""
  refundPolicyFile: Shopify_ShopifyPaymentsDisputeFileUploadUpdateInput
  """Shipping documentation file."""
  shippingDocumentationFile: Shopify_ShopifyPaymentsDisputeFileUploadUpdateInput
  """Uncategorized file."""
  uncategorizedFile: Shopify_ShopifyPaymentsDisputeFileUploadUpdateInput
  """Service documentation file."""
  serviceDocumentationFile: Shopify_ShopifyPaymentsDisputeFileUploadUpdateInput
  """Whether to submit the evidence."""
  submitEvidence: Boolean = false
}

"""The file upload associated with the dispute evidence."""
type Shopify_ShopifyPaymentsDisputeFileUpload implements Shopify_Node {
  """The type of the file for the dispute evidence."""
  disputeEvidenceType: Shopify_ShopifyPaymentsDisputeEvidenceFileType
  """The file size."""
  fileSize: Int!
  """The file type."""
  fileType: String!
  """A globally-unique identifier."""
  id: ID!
  """The original file name."""
  originalFileName: String
  """The URL for accessing the file."""
  url: URL!
}

"""
Specifies the input fields required to update a dispute file upload object.
"""
input Shopify_ShopifyPaymentsDisputeFileUploadUpdateInput {
  """The id of the file upload to be updated."""
  id: ID!
  """Whether to delete this file upload."""
  destroy: Boolean = false
}

"""The fulfillment associated with dispute evidence."""
type Shopify_ShopifyPaymentsDisputeFulfillment implements Shopify_Node {
  """A globally-unique identifier."""
  id: ID!
  """The shipping carrier for this fulfillment."""
  shippingCarrier: String
  """The shipping date for this fulfillment."""
  shippingDate: Date
  """The shipping tracking number for this fulfillment."""
  shippingTrackingNumber: String
}

"""The reason for the dispute provided by the cardholder's bank."""
enum Shopify_ShopifyPaymentsDisputeReason {
  """The cardholder claims that they didn’t authorize the payment."""
  FRAUDULENT
  """
  The dispute is uncategorized, so you should contact the customer for
  additional details to find out why the payment was disputed.
  """
  GENERAL
  """
  The customer doesn’t recognize the payment appearing on their card statement.
  """
  UNRECOGNIZED
  """
  The customer claims they were charged multiple times for the same product or service.
  """
  DUPLICATE
  """
  The customer claims that you continued to charge them after a subscription was canceled.
  """
  SUBSCRIPTION_CANCELLED
  """
  The product or service was received but was defective, damaged, or not as described.
  """
  PRODUCT_UNACCEPTABLE
  """
  The customer claims they did not receive the products or services purchased.
  """
  PRODUCT_NOT_RECEIVED
  """
  The customer claims that the purchased product was returned or the transaction
  was otherwise canceled, but you haven't yet provided a refund or credit.
  """
  CREDIT_NOT_PROCESSED
  """The customer account associated with the purchase is incorrect."""
  INCORRECT_ACCOUNT_DETAILS
  """The customer's bank account has insufficient funds."""
  INSUFFICIENT_FUNDS
  """The customer's bank can't process the charge."""
  BANK_CANNOT_PROCESS
  """
  The customer's bank can't proceed with the debit since it hasn't been authorized.
  """
  DEBIT_NOT_AUTHORIZED
  """
  The customer initiated the dispute. Contact the customer for additional details on why the payment was disputed.
  """
  CUSTOMER_INITIATED
}

"""Details regarding a dispute reason."""
type Shopify_ShopifyPaymentsDisputeReasonDetails {
  """The raw code provided by the payment network."""
  networkReasonCode: String
  """The reason for the dispute provided by the cardholder's banks."""
  reason: Shopify_ShopifyPaymentsDisputeReason!
}

"""
Presents all Shopify Payments information related to an extended authorization.
"""
type Shopify_ShopifyPaymentsExtendedAuthorization {
  """
  The time after which the extended authorization expires. After the expiry, the merchant is unable to capture the payment.
  """
  extendedAuthorizationExpiresAt: DateTime!
  """The time after which capture will incur an additional fee."""
  standardAuthorizationExpiresAt: DateTime!
}

"""The fraud settings of a payments account."""
type Shopify_ShopifyPaymentsFraudSettings {
  """Decline a charge if there is an AVS failure."""
  declineChargeOnAvsFailure: Boolean!
  """Decline a charge if there is an CVC failure."""
  declineChargeOnCvcFailure: Boolean!
}

"""The charge descriptors for a Japanese payments account."""
type Shopify_ShopifyPaymentsJpChargeStatementDescriptor implements Shopify_ShopifyPaymentsChargeStatementDescriptor {
  """The default charge statement descriptor."""
  default: String
  """The charge statement descriptor in kana."""
  kana: String
  """The charge statement descriptor in kanji."""
  kanji: String
  """The prefix of the statement descriptor."""
  prefix: String!
}

"""The notification settings for the account."""
type Shopify_ShopifyPaymentsNotificationSettings {
  """Receive email notifications when new payouts are sent or payouts fail."""
  payouts: Boolean!
}

"""
Payouts represent the movement of money between a merchant's Shopify
Payments balance and their bank account.
"""
type Shopify_ShopifyPaymentsPayout implements Shopify_LegacyInteroperability & Shopify_Node {
  """The bank account for the payout."""
  bankAccount: Shopify_ShopifyPaymentsBankAccount
  """The total amount and currency of the payout."""
  gross: Shopify_MoneyV2! @deprecated(reason: "Use `net` instead.")
  """A globally-unique identifier."""
  id: ID!
  """
  The exact time when the payout was issued. The payout only contains
  balance transactions that were available at this time.
  """
  issuedAt: DateTime!
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: Shopify_UnsignedInt64!
  """The total amount and currency of the payout."""
  net: Shopify_MoneyV2!
  """The transfer status of the payout."""
  status: Shopify_ShopifyPaymentsPayoutStatus!
  """The summary of the payout."""
  summary: Shopify_ShopifyPaymentsPayoutSummary!
  """The direction of the payout."""
  transactionType: Shopify_ShopifyPaymentsPayoutTransactionType!
}

"""
An auto-generated type for paginating through multiple ShopifyPaymentsPayouts.
"""
type Shopify_ShopifyPaymentsPayoutConnection {
  """A list of edges."""
  edges: [Shopify_ShopifyPaymentsPayoutEdge!]!
  """A list of the nodes contained in ShopifyPaymentsPayoutEdge."""
  nodes: [Shopify_ShopifyPaymentsPayout!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one ShopifyPaymentsPayout and a cursor during pagination.
"""
type Shopify_ShopifyPaymentsPayoutEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of ShopifyPaymentsPayoutEdge."""
  node: Shopify_ShopifyPaymentsPayout!
}

"""The interval at which payouts are sent to the connected bank account."""
enum Shopify_ShopifyPaymentsPayoutInterval {
  """Each business day."""
  DAILY
  """Each week, on the day of week specified by weeklyAnchor."""
  WEEKLY
  """Each month, on the day of month specified by monthlyAnchor."""
  MONTHLY
  """Payouts will not be automatically made."""
  MANUAL
}

"""The payment schedule for a payments account."""
type Shopify_ShopifyPaymentsPayoutSchedule {
  """The interval at which payouts are sent to the connected bank account."""
  interval: Shopify_ShopifyPaymentsPayoutInterval!
  """
  The day of the month funds will be paid out.
  
  The value can be any day of the month from the 1st to the 31st.
  If the payment interval is set to monthly, this value will be used.
  Payouts scheduled between 29-31st of the month are sent on the last day of shorter months.
  """
  monthlyAnchor: Int
  """
  The day of the week funds will be paid out.
  
  The value can be any weekday from Monday to Friday.
  If the payment interval is set to weekly, this value will be used.
  """
  weeklyAnchor: Shopify_DayOfTheWeek
}

"""The transfer status of the payout."""
enum Shopify_ShopifyPaymentsPayoutStatus {
  """
  The payout has been created and had transactions assigned to it, but
  it has not yet been submitted to the bank.
  """
  SCHEDULED
  """The payout has been submitted to the bank."""
  IN_TRANSIT
  """The payout has been successfully deposited into the bank."""
  PAID
  """The payout has been declined by the bank."""
  FAILED
  """The payout has been canceled by Shopify."""
  CANCELED
}

"""
Breakdown of the total fees and gross of each of the different types of transactions associated
with the payout.
"""
type Shopify_ShopifyPaymentsPayoutSummary {
  """Total fees for all adjustments including disputes."""
  adjustmentsFee: Shopify_MoneyV2!
  """Total gross amount for all adjustments including disputes."""
  adjustmentsGross: Shopify_MoneyV2!
  """Total fees for all charges."""
  chargesFee: Shopify_MoneyV2!
  """Total gross amount for all charges."""
  chargesGross: Shopify_MoneyV2!
  """Total fees for all refunds."""
  refundsFee: Shopify_MoneyV2!
  """Total gross amount for all refunds."""
  refundsFeeGross: Shopify_MoneyV2!
  """Total fees for all reserved funds."""
  reservedFundsFee: Shopify_MoneyV2!
  """Total gross amount for all reserved funds."""
  reservedFundsGross: Shopify_MoneyV2!
  """Total fees for all retried payouts."""
  retriedPayoutsFee: Shopify_MoneyV2!
  """Total gross amount for all retried payouts."""
  retriedPayoutsGross: Shopify_MoneyV2!
}

"""The possible transaction types for a payout."""
enum Shopify_ShopifyPaymentsPayoutTransactionType {
  """The payout is a deposit."""
  DEPOSIT
  """The payout is a withdrawal."""
  WITHDRAWAL
}

"""
Presents all Shopify Payments specific information related to an order refund.
"""
type Shopify_ShopifyPaymentsRefundSet {
  """
  The acquirer reference number (ARN) code generated for Visa/Mastercard transactions.
  """
  acquirerReferenceNumber: String
}

"""
Presents all Shopify Payments specific information related to an order transaction.
"""
type Shopify_ShopifyPaymentsTransactionSet {
  """Contains all fields related to an extended authorization."""
  extendedAuthorizationSet: Shopify_ShopifyPaymentsExtendedAuthorization
  """Contains all fields related to a refund."""
  refundSet: Shopify_ShopifyPaymentsRefundSet
}

"""
Each subject (individual) of an account has a verification object giving
 information about the verification state.
"""
type Shopify_ShopifyPaymentsVerification implements Shopify_Node {
  """A globally-unique identifier."""
  id: ID!
  """The status of the verification."""
  status: Shopify_ShopifyPaymentsVerificationStatus!
  """The subject/individual who has to be verified."""
  subject: Shopify_ShopifyPaymentsVerificationSubject!
}

"""A document which can be used to verify an individual."""
type Shopify_ShopifyPaymentsVerificationDocument {
  """True if the back side of the document is required."""
  backRequired: Boolean!
  """True if the front side of the document is required."""
  frontRequired: Boolean!
  """The type of the document which can be used for verification."""
  type: Shopify_ShopifyPaymentsVerificationDocumentType!
}

"""The types of possible verification documents."""
enum Shopify_ShopifyPaymentsVerificationDocumentType {
  """The subject's driver's license."""
  DRIVERS_LICENSE
  """A government's identification document of the subject."""
  GOVERNMENT_IDENTIFICATION
  """The subject's passport."""
  PASSPORT
}

"""The status of a verification."""
enum Shopify_ShopifyPaymentsVerificationStatus {
  """The verification has been verified."""
  VERIFIED
  """The verification has not yet been verified."""
  UNVERIFIED
  """
  The verification request has been submitted but a response has not yet been given.
  """
  PENDING
}

"""
The verification subject represents an individual that has to be verified.
"""
type Shopify_ShopifyPaymentsVerificationSubject {
  """The family name of the individual to verify."""
  familyName: String!
  """The given name of the individual to verify."""
  givenName: String!
}

"""A response to a ShopifyQL query."""
interface Shopify_ShopifyqlResponse {
  """A list of parse errors, if parsing fails."""
  parseErrors: [Shopify_ParseError!]
  """
  The result in a tabular format with schema and row data.
            To be used as a raw 2-dimensional response of the query.
            It's always present even if query has a `VISUALIZE` keyword.
  """
  tableData: Shopify_TableData
}

"""A locale that's been enabled on a shop."""
type Shopify_ShopLocale {
  """The locale ISO code."""
  locale: String!
  """The market web presences that use the locale."""
  marketWebPresences: [Shopify_MarketWebPresence!]!
  """The human-readable locale name."""
  name: String!
  """Whether the locale is the default locale for the shop."""
  primary: Boolean!
  """Whether the locale is visible to buyers."""
  published: Boolean!
}

"""Return type for `shopLocaleDisable` mutation."""
type Shopify_ShopLocaleDisablePayload {
  """ISO code of the locale that was deleted."""
  locale: String
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `shopLocaleEnable` mutation."""
type Shopify_ShopLocaleEnablePayload {
  """ISO code of the locale that was enabled."""
  shopLocale: Shopify_ShopLocale
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Specifies the input fields for a shop locale."""
input Shopify_ShopLocaleInput {
  """
  Whether the locale is published. Only published locales are visible to the buyer.
  """
  published: Boolean
  """
  The market web presences on which the locale should be enabled. Pass in an
  empty array to remove the locale across all market web presences.
  """
  marketWebPresenceIds: [ID!]
}

"""Return type for `shopLocaleUpdate` mutation."""
type Shopify_ShopLocaleUpdatePayload {
  """The locale that was updated."""
  shopLocale: Shopify_ShopLocale
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""The billing plan of the shop."""
type Shopify_ShopPlan {
  """The name of the shop's billing plan."""
  displayName: String!
  """Whether the shop is a partner development shop for testing purposes."""
  partnerDevelopment: Boolean!
  """Whether the shop has a Shopify Plus subscription."""
  shopifyPlus: Boolean!
}

"""
Policy that a merchant has configured for their store, such as their refund or privacy policy.
"""
type Shopify_ShopPolicy implements Shopify_HasPublishedTranslations & Shopify_Node {
  """The text of the policy. The maximum size is 512kb."""
  body: Shopify_HTML!
  """A globally-unique identifier."""
  id: ID!
  """The translations associated with the resource."""
  translations(
    """Filters translations locale."""
    locale: String!
    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Shopify_PublishedTranslation!]!
  """The shop policy type."""
  type: Shopify_ShopPolicyType!
  """The public URL of the policy."""
  url: URL!
}

"""Possible error codes that can be returned by `ShopPolicyUserError`."""
enum Shopify_ShopPolicyErrorCode {
  """The input value is too big."""
  TOO_BIG
}

"""Specifies the input fields required to update a policy."""
input Shopify_ShopPolicyInput {
  """The shop policy type."""
  type: Shopify_ShopPolicyType!
  """Policy text, maximum size of 512kb."""
  body: String!
}

"""Available shop policy types."""
enum Shopify_ShopPolicyType {
  """The refund policy."""
  REFUND_POLICY
  """The shipping policy."""
  SHIPPING_POLICY
  """The privacy policy."""
  PRIVACY_POLICY
  """The terms of service."""
  TERMS_OF_SERVICE
  """The terms of sale."""
  TERMS_OF_SALE
  """The legal notice."""
  LEGAL_NOTICE
  """The purchase options cancellation policy."""
  SUBSCRIPTION_POLICY
  """The contact information."""
  CONTACT_INFORMATION
}

"""Return type for `shopPolicyUpdate` mutation."""
type Shopify_ShopPolicyUpdatePayload {
  """The shop policy that has been updated."""
  shopPolicy: Shopify_ShopPolicy
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ShopPolicyUserError!]!
}

"""An error that occurs during the execution of a shop policy mutation."""
type Shopify_ShopPolicyUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_ShopPolicyErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""Return type for `shopResourceFeedbackCreate` mutation."""
type Shopify_ShopResourceFeedbackCreatePayload {
  """The shop feedback that's created."""
  feedback: Shopify_AppFeedback
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ShopResourceFeedbackCreateUserError!]!
}

"""
An error that occurs during the execution of `ShopResourceFeedbackCreate`.
"""
type Shopify_ShopResourceFeedbackCreateUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_ShopResourceFeedbackCreateUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `ShopResourceFeedbackCreateUserError`.
"""
enum Shopify_ShopResourceFeedbackCreateUserErrorCode {
  """The feedback for a later version of the resource was already accepted."""
  OUTDATED_FEEDBACK
  """The input value is invalid."""
  INVALID
  """The input value is blank."""
  BLANK
  """The input value needs to be blank."""
  PRESENT
}

"""Resource limits of a shop."""
type Shopify_ShopResourceLimits {
  """Maximum number of locations allowed."""
  locationLimit: Int!
  """Maximum number of product options allowed."""
  maxProductOptions: Int!
  """The maximum number of variants allowed per product."""
  maxProductVariants: Int!
  """
  Whether the shop has reached the limit of the number of URL redirects it can make for resources.
  """
  redirectLimitReached: Boolean!
  """
  The maximum number of variants allowed per shop. If the shop has unlimited
  SKUs, then the quantity used cannot be retrieved.
  """
  skuResourceLimits: Shopify_ResourceLimit!
}

"""Possible sort of tags."""
enum Shopify_ShopTagSort {
  """Alphabetical sort."""
  ALPHABETICAL
  """Popularity sort."""
  POPULAR
}

"""
Represents the data about a staff member's Shopify account. Merchants can use
staff member data to get more information about the staff members in their store.
"""
type Shopify_StaffMember implements Shopify_Node {
  """Whether the staff member is active."""
  active: Boolean!
  """The image used as the staff member's avatar in the Shopify admin."""
  avatar(
    """The default image returned if the staff member has no avatar."""
    fallback: Shopify_StaffMemberDefaultImage = DEFAULT
  ): Shopify_Image!
  """The staff member's email address."""
  email: String!
  """Whether the staff member's account exists."""
  exists: Boolean!
  """The staff member's first name."""
  firstName: String
  """A globally-unique identifier."""
  id: ID!
  """The staff member's initials, if available."""
  initials: [String!]
  """Whether the staff member is the shop owner."""
  isShopOwner: Boolean!
  """The staff member's last name."""
  lastName: String
  """
  The staff member's preferred locale. Locale values use the format `language`
  or `language-COUNTRY`, where `language` is a two-letter language code, and
  `COUNTRY` is a two-letter country code. For example: `en` or `en-US`
  """
  locale: String!
  """The staff member's full name."""
  name: String!
  """The staff member's phone number."""
  phone: String
  """
  The data used to customize the Shopify admin experience for the staff member.
  """
  privateData: Shopify_StaffMemberPrivateData!
}

"""An auto-generated type for paginating through multiple StaffMembers."""
type Shopify_StaffMemberConnection {
  """A list of edges."""
  edges: [Shopify_StaffMemberEdge!]!
  """A list of the nodes contained in StaffMemberEdge."""
  nodes: [Shopify_StaffMember!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
Represents the fallback avatar image for a staff member. This is used only if the staff member has no avatar image.
"""
enum Shopify_StaffMemberDefaultImage {
  """Returns a default avatar image for the staff member."""
  DEFAULT
  """Returns a transparent avatar image for the staff member."""
  TRANSPARENT
  """Returns a URL that returns a 404 error if the image is not present."""
  NOT_FOUND
}

"""
An auto-generated type which holds one StaffMember and a cursor during pagination.
"""
type Shopify_StaffMemberEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of StaffMemberEdge."""
  node: Shopify_StaffMember!
}

"""Represents access permissions for a staff member."""
enum Shopify_StaffMemberPermission {
  """The staff member can manage and install apps and channels."""
  APPLICATIONS
  """The staff member can manage and install sales channels."""
  CHANNELS
  """
  The staff member can view, create, update, and delete customers, and respond
  to customer messages in the Shopify Messaging API.
  """
  CUSTOMERS
  """
  The staff member can view the Shopify Home page, which includes sales information and other shop data.
  """
  DASHBOARD
  """The staff member can view, buy, and manage domains."""
  DOMAINS
  """The staff member can create, update, and delete draft orders."""
  DRAFT_ORDERS
  """The staff member can update orders."""
  EDIT_ORDERS
  """
  The staff has the same permissions as the [store owner](https://shopify.dev/en/manual/your-account/staff-accounts/staff-permissions#store-owner-permissions)
  with some exceptions, such as modifying the account billing or deleting staff accounts.
  """
  FULL @deprecated(reason: "Use the list of the staff member's explicit permissions returned in the `StaffMember.permissions.userPermissions` field instead of `full` permission.")
  """
  The staff member can view, create, issue, and export gift cards to a CSV file.
  """
  GIFT_CARDS
  """The staff member can view and modify links and navigation menus."""
  LINKS
  """
  The staff member can create, update, and delete locations where inventory is stocked or managed.
  """
  LOCATIONS
  """
  The staff member can view and create discount codes and automatic discounts, and export discounts to a CSV file.
  """
  MARKETING
  """The staff member can view, create, and automate marketing campaigns."""
  MARKETING_SECTION
  """
  The staff member can view, create, update, delete, and cancel orders, and
  receive order notifications. The staff member can still create draft orders
  without this permission.
  """
  ORDERS
  """
  The staff member can view the Overview and Live view pages,
              which include sales information, and other shop and sales channels data.
  """
  OVERVIEWS
  """
  The staff member can view, create, update, publish, and delete blog posts and pages.
  """
  PAGES
  """The staff member can pay for an order by using a vaulted card."""
  PAY_ORDERS_BY_VAULTED_CARD
  """The staff member can view the preferences and configuration of a shop."""
  PREFERENCES
  """
  The staff member can view, create, import, and update products, collections, and inventory.
  """
  PRODUCTS
  """
  The staff member can view and create all reports, which includes sales information and other shop data.
  """
  REPORTS
  """The staff member can view, update, and publish themes."""
  THEMES
  """The staff member can view and create translations."""
  TRANSLATIONS @deprecated(reason: "Unused.")
}

"""
Represents the data used to customize the Shopify admin experience for a logged-in staff member.
"""
type Shopify_StaffMemberPrivateData {
  """The URL to the staff member's account settings page."""
  accountSettingsUrl: URL!
  """The date and time when the staff member was created."""
  createdAt: DateTime!
  """Access permissions for the staff member."""
  permissions: [Shopify_StaffMemberPermission!]! @deprecated(reason: "Use StaffMember.permissions.userPermissions instead")
}

"""
Information about a staged upload target, which should be used to send a request to upload
the file.

For more information on the upload process, refer to
[Upload media to Shopify](https://shopify.dev/apps/online-store/media/products#step-1-upload-media-to-shopify).
"""
type Shopify_StagedMediaUploadTarget {
  """Parameters needed to authenticate a request to upload the file."""
  parameters: [Shopify_StagedUploadParameter!]!
  """
  The URL to be passed as `originalSource` in
  [CreateMediaInput](https://shopify.dev/api/admin-graphql/latest/input-objects/CreateMediaInput)
  and [FileCreateInput](https://shopify.dev/api/admin-graphql/2022-04/input-objects/FileCreateInput)
  for the [productCreateMedia](https://shopify.dev/api/admin-graphql/2022-04/mutations/productCreateMedia)
  and [fileCreate](https://shopify.dev/api/admin-graphql/2022-04/mutations/fileCreate)
  mutations.
  """
  resourceUrl: URL
  """
  The URL to use when sending an request to upload the file. Should be used in conjunction with
  the parameters field.
  """
  url: URL
}

"""
The possible HTTP methods that can be used when sending a request to upload a file using information from a
[StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget).
"""
enum Shopify_StagedUploadHttpMethodType {
  """The POST HTTP method."""
  POST
  """The PUT HTTP method."""
  PUT
}

"""The information required to generate staged upload targets."""
input Shopify_StagedUploadInput {
  """The file's intended Shopify resource type."""
  resource: Shopify_StagedUploadTargetGenerateUploadResource!
  """The file's name and extension."""
  filename: String!
  """The file's MIME type."""
  mimeType: String!
  """
  The HTTP method to be used when sending a request to upload the file using the returned staged
  upload target.
  """
  httpMethod: Shopify_StagedUploadHttpMethodType = PUT
  """
  The size of the file to upload, in bytes. This is required when the request's resource property is set to
  [VIDEO](https://shopify.dev/api/admin-graphql/latest/enums/StagedUploadTargetGenerateUploadResource#value-video)
  or [MODEL_3D](https://shopify.dev/api/admin-graphql/latest/enums/StagedUploadTargetGenerateUploadResource#value-model3d).
  """
  fileSize: Shopify_UnsignedInt64
}

"""
The parameters required to authenticate a file upload request using a
[StagedMediaUploadTarget's url field](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget#field-stagedmediauploadtarget-url).

For more information on the upload process, refer to
[Upload media to Shopify](https://shopify.dev/apps/online-store/media/products#step-1-upload-media-to-shopify).
"""
type Shopify_StagedUploadParameter {
  """The parameter's name."""
  name: String!
  """The parameter's value."""
  value: String!
}

"""Return type for `stagedUploadsCreate` mutation."""
type Shopify_StagedUploadsCreatePayload {
  """The staged upload targets that were generated."""
  stagedTargets: [Shopify_StagedMediaUploadTarget!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
Information about the staged target.

Deprecated in favor of
[StagedMediaUploadTarget](https://shopify.dev/api/admin-graphql/latest/objects/StagedMediaUploadTarget),
which is returned by the
[stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
"""
type Shopify_StagedUploadTarget {
  """The parameters of an image to be uploaded."""
  parameters: [Shopify_ImageUploadParameter!]!
  """The image URL."""
  url: String!
}

"""
The required fields and parameters to generate the URL upload an"
asset to Shopify.

Deprecated in favor of
[StagedUploadInput](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadInput),
which is used by the
[stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
"""
input Shopify_StagedUploadTargetGenerateInput {
  """The resource type being uploaded."""
  resource: Shopify_StagedUploadTargetGenerateUploadResource!
  """The filename of the asset being uploaded."""
  filename: String!
  """The MIME type of the asset being uploaded."""
  mimeType: String!
  """The HTTP method to be used by the staged upload."""
  httpMethod: Shopify_StagedUploadHttpMethodType = PUT
  """The size of the file to upload, in bytes."""
  fileSize: Shopify_UnsignedInt64
}

"""Return type for `stagedUploadTargetGenerate` mutation."""
type Shopify_StagedUploadTargetGeneratePayload {
  """The signed parameters that can be used to upload the asset."""
  parameters: [Shopify_MutationsStagedUploadTargetGenerateUploadParameter!]!
  """The signed URL where the asset can be uploaded."""
  url: String!
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""The resource type to receive."""
enum Shopify_StagedUploadTargetGenerateUploadResource {
  """
  An image associated with a collection.
  
  For example, after uploading an image, you can use the
  [collectionUpdate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/collectionUpdate)
  to add the image to a collection.
  """
  COLLECTION_IMAGE
  """
  Represents any file other than HTML.
  
  For example, after uploading the file, you can add the file to the
  [Files page](https://shopify.com/admin/settings/files) in Shopify admin using the
  [fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).
  """
  FILE
  """
  An image.
  
  For example, after uploading an image, you can add the image to a product using the
  [productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia)
  or to the [Files page](https://shopify.com/admin/settings/files) in Shopify admin using the
  [fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).
  """
  IMAGE
  """
  A Shopify hosted 3d model.
  
  For example, after uploading the 3d model, you can add the 3d model to a product using the
  [productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia).
  """
  MODEL_3D
  """
  An image that's associated with a product.
  
  For example, after uploading the image, you can add the image to a product using the
  [productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia).
  """
  PRODUCT_IMAGE
  """
  An image.
  
  For example, after uploading the image, you can add the image to the
  [Files page](https://shopify.com/admin/settings/files) in Shopify admin using the
  [fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).
  """
  SHOP_IMAGE
  """
  A Shopify-hosted video.
  
  For example, after uploading the video, you can add the video to a product using the
  [productCreateMedia mutation](https://shopify.dev/api/admin-graphql/latest/mutations/productCreateMedia)
  or to the [Files page](https://shopify.com/admin/settings/files) in Shopify admin using the
  [fileCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/fileCreate).
  """
  VIDEO
  """
  Represents bulk mutation variables.
  
  For example, bulk mutation variables can be used for bulk operations using the
  [bulkOperationRunMutation mutation](https://shopify.dev/api/admin-graphql/latest/mutations/bulkOperationRunMutation).
  """
  BULK_MUTATION_VARIABLES
  """
  Represents a label associated with a return.
  
  For example, once uploaded, this resource can be used to [create a
  ReverseDelivery](https://shopify.dev/api/admin-graphql/unstable/mutations/reverseDeliveryCreateWithShipping).
  """
  RETURN_LABEL
  """
  Represents a redirect CSV file.
  
  Example usage: This resource can be used for creating a
  [UrlRedirectImport](https://shopify.dev/api/admin-graphql/2022-04/objects/UrlRedirectImport)
  object for use in the
  [urlRedirectImportCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/urlRedirectImportCreate).
  """
  URL_REDIRECT_IMPORT
}

"""Return type for `stagedUploadTargetsGenerate` mutation."""
type Shopify_StagedUploadTargetsGeneratePayload {
  """The staged upload targets that were generated."""
  urls: [Shopify_StagedUploadTarget!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An image to be uploaded.

Deprecated in favor of
[StagedUploadInput](https://shopify.dev/api/admin-graphql/latest/objects/StagedUploadInput),
which is used by the
[stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stagedUploadsCreate).
"""
input Shopify_StageImageInput {
  """The image resource."""
  resource: Shopify_StagedUploadTargetGenerateUploadResource!
  """The image filename."""
  filename: String!
  """The image MIME type."""
  mimeType: String!
  """HTTP method to be used by the staged upload."""
  httpMethod: Shopify_StagedUploadHttpMethodType = PUT
}

"""
Represents the details of a specific type of product within the [Shopify product
taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt).
"""
type Shopify_StandardizedProductType {
  """
  The product taxonomy node associated with the standardized product type.
  """
  productTaxonomyNode: Shopify_ProductTaxonomyNode
}

"""
Provides the fields and values to use when adding a standard product type to a
product. The [Shopify product
taxonomy](https://help.shopify.com/txt/product_taxonomy/en.txt) contains the
full list of available values.
"""
input Shopify_StandardizedProductTypeInput {
  """
  The id of the node in the Shopify taxonomy that represents the product type.
  """
  productTaxonomyNodeId: ID!
}

"""Return type for `standardMetafieldDefinitionEnable` mutation."""
type Shopify_StandardMetafieldDefinitionEnablePayload {
  """The metafield definition that was created."""
  createdDefinition: Shopify_MetafieldDefinition
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_StandardMetafieldDefinitionEnableUserError!]!
}

"""
An error that occurs during the execution of `StandardMetafieldDefinitionEnable`.
"""
type Shopify_StandardMetafieldDefinitionEnableUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_StandardMetafieldDefinitionEnableUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `StandardMetafieldDefinitionEnableUserError`.
"""
enum Shopify_StandardMetafieldDefinitionEnableUserErrorCode {
  """The input value is invalid."""
  INVALID
  """The input value is already taken."""
  TAKEN
  """The standard metafield definition template was not found."""
  TEMPLATE_NOT_FOUND
  """The maximum number of definitions per owner type has been exceeded."""
  LIMIT_EXCEEDED
  """The namespace and key is already in use for a set of your metafields."""
  UNSTRUCTURED_ALREADY_EXISTS
  """
  The definition type is not eligible to be used as collection condition.
  """
  TYPE_NOT_ALLOWED_FOR_CONDITIONS
}

"""
Standard metafield definition templates provide preset configurations to create metafield definitions.
Each template has a specific namespace and key that we've reserved to have specific meanings for common use cases.

Refer to the [list of standard metafield definitions](https://shopify.dev/apps/metafields/definitions/standard-definitions).
"""
type Shopify_StandardMetafieldDefinitionTemplate implements Shopify_Node {
  """The description of the standard metafield definition."""
  description: String
  """A globally-unique identifier."""
  id: ID!
  """
  The key owned by the definition after the definition has been activated.
  """
  key: String!
  """The human-readable name for the standard metafield definition."""
  name: String!
  """
  The namespace owned by the definition after the definition has been activated.
  """
  namespace: String!
  """
  The list of resource types that the standard metafield definition can be applied to.
  """
  ownerTypes: [Shopify_MetafieldOwnerType!]!
  """
  The associated [metafield definition
  type](https://shopify.dev/apps/metafields/definitions/types) that the
  metafield stores.
  """
  type: Shopify_MetafieldDefinitionType!
  """The configured validations for the standard metafield definition."""
  validations: [Shopify_MetafieldDefinitionValidation!]!
  """
  Whether metafields for the definition are by default visible using the Storefront API.
  """
  visibleToStorefrontApi: Boolean!
}

"""
An auto-generated type for paginating through multiple StandardMetafieldDefinitionTemplates.
"""
type Shopify_StandardMetafieldDefinitionTemplateConnection {
  """A list of edges."""
  edges: [Shopify_StandardMetafieldDefinitionTemplateEdge!]!
  """
  A list of the nodes contained in StandardMetafieldDefinitionTemplateEdge.
  """
  nodes: [Shopify_StandardMetafieldDefinitionTemplate!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one StandardMetafieldDefinitionTemplate and a cursor during pagination.
"""
type Shopify_StandardMetafieldDefinitionTemplateEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of StandardMetafieldDefinitionTemplateEdge."""
  node: Shopify_StandardMetafieldDefinitionTemplate!
}

"""Return type for `standardMetaobjectDefinitionEnable` mutation."""
type Shopify_StandardMetaobjectDefinitionEnablePayload {
  """
  The metaobject definition that was enabled using the standard template.
  """
  metaobjectDefinition: Shopify_MetaobjectDefinition
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_MetaobjectUserError!]!
}

"""
A token that's used to delegate unauthenticated access scopes to clients that need to access
the unauthenticated Storefront API. An app can have a maximum of 100 active storefront access
tokens for each shop.
"""
type Shopify_StorefrontAccessToken implements Shopify_Node {
  """List of permissions associated with the token."""
  accessScopes: [Shopify_AccessScope!]!
  """The issued public access token."""
  accessToken: String!
  """The date and time when the public access token was created."""
  createdAt: DateTime!
  """A globally-unique identifier."""
  id: ID!
  """
  An arbitrary title for each token determined by the developer, used for reference         purposes.
  """
  title: String!
  """The date and time when the storefront access token was updated."""
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple StorefrontAccessTokens.
"""
type Shopify_StorefrontAccessTokenConnection {
  """A list of edges."""
  edges: [Shopify_StorefrontAccessTokenEdge!]!
  """A list of the nodes contained in StorefrontAccessTokenEdge."""
  nodes: [Shopify_StorefrontAccessToken!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `storefrontAccessTokenCreate` mutation."""
type Shopify_StorefrontAccessTokenCreatePayload {
  """The user's shop."""
  shop: Shopify_Shop!
  """The storefront access token."""
  storefrontAccessToken: Shopify_StorefrontAccessToken
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Specifies the input fields to delete a storefront access token."""
input Shopify_StorefrontAccessTokenDeleteInput {
  """The ID of the storefront access token to delete."""
  id: ID!
}

"""Return type for `storefrontAccessTokenDelete` mutation."""
type Shopify_StorefrontAccessTokenDeletePayload {
  """The ID of the deleted storefront access token."""
  deletedStorefrontAccessTokenId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An auto-generated type which holds one StorefrontAccessToken and a cursor during pagination.
"""
type Shopify_StorefrontAccessTokenEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of StorefrontAccessTokenEdge."""
  node: Shopify_StorefrontAccessToken!
}

"""Specifies the input fields for a storefront access token."""
input Shopify_StorefrontAccessTokenInput {
  """A title for the storefront access token."""
  title: String!
}

"""
Represents a unique identifier in the Storefront API. A `StorefrontID` value can
be used wherever an ID is expected in the Storefront API.

Example value: `"Z2lkOi8vc2hvcGlmeS9Qcm9kdWN0LzEwMDc5Nzg1MTAw"`.
"""
scalar Shopify_StorefrontID

"""An auto-generated type for paginating through a list of Strings."""
type Shopify_StringConnection {
  """A list of edges."""
  edges: [Shopify_StringEdge!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one String and a cursor during pagination.
"""
type Shopify_StringEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of StringEdge."""
  node: String!
}

"""Represents an applied code discount."""
type Shopify_SubscriptionAppliedCodeDiscount {
  """The unique identifier."""
  id: ID!
  """The redeem code of the discount that applies on the subscription."""
  redeemCode: String!
  """The reason that the discount on the subscription draft is rejected."""
  rejectionReason: Shopify_SubscriptionDiscountRejectionReason
}

"""
A record of an execution of the subscription billing process. Billing attempts use
idempotency keys to avoid duplicate order creation. A successful billing attempt
will create an order.
"""
type Shopify_SubscriptionBillingAttempt implements Shopify_Node {
  """The date and time when the billing attempt was completed."""
  completedAt: DateTime
  """The date and time when the billing attempt was created."""
  createdAt: DateTime!
  """A code corresponding to a payment error during processing."""
  errorCode: Shopify_SubscriptionBillingAttemptErrorCode
  """A message describing a payment error during processing."""
  errorMessage: String
  """A globally-unique identifier."""
  id: ID!
  """A unique key generated by the client to avoid duplicate payments."""
  idempotencyKey: String!
  """
  The URL where the customer needs to be redirected so they can complete the 3D Secure payment flow.
  """
  nextActionUrl: URL
  """The result of this billing attempt if completed successfully."""
  order: Shopify_Order
  """
  The date and time used to calculate fulfillment intervals for a billing attempt that
  successfully completed after the current anchor date. To prevent fulfillment from being
  pushed to the next anchor date, this field can override the billing attempt date.
  """
  originTime: DateTime
  """Whether the billing attempt is still processing."""
  ready: Boolean!
  """The subscription contract."""
  subscriptionContract: Shopify_SubscriptionContract!
}

"""
An auto-generated type for paginating through multiple SubscriptionBillingAttempts.
"""
type Shopify_SubscriptionBillingAttemptConnection {
  """A list of edges."""
  edges: [Shopify_SubscriptionBillingAttemptEdge!]!
  """A list of the nodes contained in SubscriptionBillingAttemptEdge."""
  nodes: [Shopify_SubscriptionBillingAttempt!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `subscriptionBillingAttemptCreate` mutation."""
type Shopify_SubscriptionBillingAttemptCreatePayload {
  """The subscription billing attempt."""
  subscriptionBillingAttempt: Shopify_SubscriptionBillingAttempt
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_BillingAttemptUserError!]!
}

"""
An auto-generated type which holds one SubscriptionBillingAttempt and a cursor during pagination.
"""
type Shopify_SubscriptionBillingAttemptEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of SubscriptionBillingAttemptEdge."""
  node: Shopify_SubscriptionBillingAttempt!
}

"""
The possible error codes associated with making billing attempts. The error codes supplement the
`error_message` to provide consistent results and help with dunning management.
"""
enum Shopify_SubscriptionBillingAttemptErrorCode {
  """Payment method was not found."""
  PAYMENT_METHOD_NOT_FOUND
  """Payment provider is not enabled."""
  PAYMENT_PROVIDER_IS_NOT_ENABLED
  """
  Payment method is invalid. Please update or create a new payment method.
  """
  INVALID_PAYMENT_METHOD
  """There was an unexpected error during the billing attempt."""
  UNEXPECTED_ERROR
  """Payment method is expired."""
  EXPIRED_PAYMENT_METHOD
  """Payment method was declined by processor."""
  PAYMENT_METHOD_DECLINED
  """There was an error during the authentication."""
  AUTHENTICATION_ERROR
  """Gateway is in test mode and attempted to bill a live payment method."""
  TEST_MODE
  """Payment method was canceled by buyer."""
  BUYER_CANCELED_PAYMENT_METHOD
  """Customer was not found."""
  CUSTOMER_NOT_FOUND
  """Customer is invalid."""
  CUSTOMER_INVALID
  """The shipping address is either missing or invalid."""
  INVALID_SHIPPING_ADDRESS
  """
  The billing agreement ID or the transaction ID for the customer's payment method is invalid.
  """
  INVALID_CUSTOMER_BILLING_AGREEMENT
  """A payment has already been made for this invoice."""
  INVOICE_ALREADY_PAID
  """
  Payment method cannot be used with the current payment gateway test mode configuration.
  """
  PAYMENT_METHOD_INCOMPATIBLE_WITH_GATEWAY_CONFIG
  """The amount is too small."""
  AMOUNT_TOO_SMALL
  """No inventory location found or enabled."""
  INVENTORY_ALLOCATIONS_NOT_FOUND
}

"""
Specifies the fields required to complete a subscription billing attempt.
"""
input Shopify_SubscriptionBillingAttemptInput {
  """
  A unique key generated by the client to avoid duplicate payments. For more
  information, refer to [Idempotent
  requests](https://shopify.dev/api/usage/idempotent-requests).
  """
  idempotencyKey: String!
  """
  The date and time used to calculate fulfillment intervals for a billing attempt that
  successfully completed after the current anchor date. To prevent fulfillment from being
  pushed to the next anchor date, this field can override the billing attempt date.
  """
  originTime: DateTime
  """
  Select the specific billing cycle to be billed.
  Default to bill the current billing cycle if not specified.
  """
  billingCycleSelector: Shopify_SubscriptionBillingCycleSelector
}

"""A subscription billing cycle."""
type Shopify_SubscriptionBillingCycle {
  """The date on which the billing attempt is expected to be made."""
  billingAttemptExpectedDate: DateTime!
  """The list of billing attempts associated with the billing cycle."""
  billingAttempts(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionBillingAttemptConnection!
  """The end date of the billing cycle."""
  cycleEndAt: DateTime!
  """The index of the billing cycle."""
  cycleIndex: Int!
  """The start date of the billing cycle."""
  cycleStartAt: DateTime!
  """Whether this billing cycle was edited."""
  edited: Boolean!
  """The active edited contract for the billing cycle."""
  editedContract: Shopify_SubscriptionBillingCycleEditedContract
  """Whether this billing cycle was skipped."""
  skipped: Boolean!
  """The subscription contract that the billing cycle belongs to."""
  sourceContract: Shopify_SubscriptionContract!
  """The status of the billing cycle."""
  status: Shopify_SubscriptionBillingCycleBillingCycleStatus!
}

"""The possible status values of a subscription billing cycle."""
enum Shopify_SubscriptionBillingCycleBillingCycleStatus {
  """The billing cycle is billed."""
  BILLED
  """The billing cycle hasn't been billed."""
  UNBILLED
}

"""
An auto-generated type for paginating through multiple SubscriptionBillingCycles.
"""
type Shopify_SubscriptionBillingCycleConnection {
  """A list of edges."""
  edges: [Shopify_SubscriptionBillingCycleEdge!]!
  """A list of the nodes contained in SubscriptionBillingCycleEdge."""
  nodes: [Shopify_SubscriptionBillingCycle!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
Return type for `subscriptionBillingCycleContractDraftCommit` mutation.
"""
type Shopify_SubscriptionBillingCycleContractDraftCommitPayload {
  """The committed Subscription Billing Cycle Edited Contract object."""
  contract: Shopify_SubscriptionBillingCycleEditedContract
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SubscriptionDraftUserError!]!
}

"""
Return type for `subscriptionBillingCycleContractDraftConcatenate` mutation.
"""
type Shopify_SubscriptionBillingCycleContractDraftConcatenatePayload {
  """The Subscription Draft object."""
  draft: Shopify_SubscriptionDraft
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SubscriptionDraftUserError!]!
}

"""Return type for `subscriptionBillingCycleContractEdit` mutation."""
type Shopify_SubscriptionBillingCycleContractEditPayload {
  """The draft subscription contract object."""
  draft: Shopify_SubscriptionDraft
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SubscriptionDraftUserError!]!
}

"""
An auto-generated type which holds one SubscriptionBillingCycle and a cursor during pagination.
"""
type Shopify_SubscriptionBillingCycleEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of SubscriptionBillingCycleEdge."""
  node: Shopify_SubscriptionBillingCycle!
}

"""Return type for `subscriptionBillingCycleEditDelete` mutation."""
type Shopify_SubscriptionBillingCycleEditDeletePayload {
  """The list of updated billing cycles."""
  billingCycles: [Shopify_SubscriptionBillingCycle!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SubscriptionBillingCycleUserError!]!
}

"""Represents a subscription contract with billing cycles."""
type Shopify_SubscriptionBillingCycleEditedContract implements Shopify_SubscriptionContractBase {
  """The subscription app that the subscription contract is registered to."""
  app: Shopify_App
  """The URL of the subscription contract page on the subscription app."""
  appAdminUrl: URL
  """The billing cycles that the edited contract belongs to."""
  billingCycles(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_SubscriptionBillingCyclesSortKeys = CYCLE_INDEX
  ): Shopify_SubscriptionBillingCycleConnection!
  """The date and time when the subscription contract was created."""
  createdAt: DateTime!
  """The currency that's used for the subscription contract."""
  currencyCode: Shopify_CurrencyCode!
  """A list of the custom attributes to be added to the generated orders."""
  customAttributes: [Shopify_Attribute!]!
  """The customer to whom the subscription contract belongs."""
  customer: Shopify_Customer
  """The customer payment method that's used for the subscription contract."""
  customerPaymentMethod(
    """Whether to show the customer's revoked payment method."""
    showRevoked: Boolean = false
  ): Shopify_CustomerPaymentMethod
  """The delivery method for each billing of the subscription contract."""
  deliveryMethod: Shopify_SubscriptionDeliveryMethod
  """The delivery price for each billing of the subscription contract."""
  deliveryPrice: Shopify_MoneyV2!
  """
  The list of subscription discounts associated with the subscription contract.
  """
  discounts(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionManualDiscountConnection!
  """The number of lines associated with the subscription contract."""
  lineCount: Int!
  """
  The list of subscription lines associated with the subscription contract.
  """
  lines(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionLineConnection!
  """The note field that will be applied to the generated orders."""
  note: String
  """A list of the subscription contract's orders."""
  orders(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_OrderConnection!
  """The date and time when the subscription contract was updated."""
  updatedAt: DateTime!
}

"""Return type for `subscriptionBillingCycleEditsDelete` mutation."""
type Shopify_SubscriptionBillingCycleEditsDeletePayload {
  """The list of updated billing cycles."""
  billingCycles: [Shopify_SubscriptionBillingCycle!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SubscriptionBillingCycleUserError!]!
}

"""
Possible error codes that can be returned by `SubscriptionBillingCycleUserError`.
"""
enum Shopify_SubscriptionBillingCycleErrorCode {
  """The input value is invalid."""
  INVALID
  """Can't find the billing cycle."""
  CYCLE_NOT_FOUND
  """
  There's no contract or schedule edit associated with the targeted billing cycle(s).
  """
  NO_CYCLE_EDITS
  """The index selector is invalid."""
  INVALID_CYCLE_INDEX
  """The date selector is invalid."""
  INVALID_DATE
  """
  Billing cycle schedule edit input provided is empty. Must take in parameters to modify schedule.
  """
  EMPTY_BILLING_CYCLE_EDIT_SCHEDULE_INPUT
  """Billing date cannot be set on skipped billing cycle."""
  BILLING_DATE_SET_ON_SKIPPED
  """
  Billing date of a cycle cannot be set to a value outside of its billing date range.
  """
  OUT_OF_BOUNDS
  """
  Billing cycle selector cannot select upcoming billing cycle past limit.
  """
  UPCOMING_CYCLE_LIMIT_EXCEEDED
  """
  Billing cycle selector cannot select billing cycle outside of index range.
  """
  CYCLE_INDEX_OUT_OF_RANGE
  """
  Billing cycle selector cannot select billing cycle outside of start date range.
  """
  CYCLE_START_DATE_OUT_OF_RANGE
  """Billing cycle has incomplete billing attempts in progress."""
  INCOMPLETE_BILLING_ATTEMPTS
}

"""
Specifies the subscription contract and selects the associated billing cycle.
"""
input Shopify_SubscriptionBillingCycleInput {
  """The ID of the subscription contract associated with the billing cycle."""
  contractId: ID!
  """Selects the billing cycle by date or index."""
  selector: Shopify_SubscriptionBillingCycleSelector!
}

"""Parameters for modifying the shedule of a specific billing cycle."""
input Shopify_SubscriptionBillingCycleScheduleEditInput {
  """Sets the skip status for the billing cycle."""
  skip: Boolean
  """Sets the expected billing date for the billing cycle."""
  billingDate: DateTime
  """The reason for editing."""
  reason: Shopify_SubscriptionBillingCycleScheduleEditInputScheduleEditReason!
}

"""Possible reasons for editing the billing cycle's schedule."""
enum Shopify_SubscriptionBillingCycleScheduleEditInputScheduleEditReason {
  """Buyer initiated the schedule edit."""
  BUYER_INITIATED
  """Merchant initiated the schedule edit."""
  MERCHANT_INITIATED
  """Developer initiated the schedule edit."""
  DEV_INITIATED
}

"""Return type for `subscriptionBillingCycleScheduleEdit` mutation."""
type Shopify_SubscriptionBillingCycleScheduleEditPayload {
  """The updated billing cycle."""
  billingCycle: Shopify_SubscriptionBillingCycle
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SubscriptionBillingCycleUserError!]!
}

"""Select a subset of subscription billing cycles within a date range."""
input Shopify_SubscriptionBillingCyclesDateRangeSelector {
  """The start date and time for the range."""
  startDate: DateTime!
  """The end date and time for the range."""
  endDate: DateTime!
}

"""Select by either date or index for SubscriptionBillingCycle."""
input Shopify_SubscriptionBillingCycleSelector {
  """Returns a billing cycle by index."""
  index: Int
  """Returns a billing cycle by date."""
  date: DateTime
}

"""Select a subset of subscription billing cycles within an index range."""
input Shopify_SubscriptionBillingCyclesIndexRangeSelector {
  """The start index for the range."""
  startIndex: Int!
  """The end index for the range."""
  endIndex: Int!
}

"""The set of valid sort keys for the SubscriptionBillingCycles query."""
enum Shopify_SubscriptionBillingCyclesSortKeys {
  """Sort by the `cycle_index` value."""
  CYCLE_INDEX
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""Select subscription billing cycles to be targeted."""
enum Shopify_SubscriptionBillingCyclesTargetSelection {
  """Target all future subscription billing cycles."""
  ALL
}

"""The possible errors for a subscription billing cycle."""
type Shopify_SubscriptionBillingCycleUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_SubscriptionBillingCycleErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""Represents a Subscription Billing Policy."""
type Shopify_SubscriptionBillingPolicy {
  """
  Specific anchor dates upon which the billing interval calculations should be made.
  """
  anchors: [Shopify_SellingPlanAnchor!]!
  """
  The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
  """
  interval: Shopify_SellingPlanInterval!
  """The number of billing intervals between invoices."""
  intervalCount: Int!
  """Maximum amount of cycles after which the subscription ends."""
  maxCycles: Int
  """Minimum amount of cycles required in the subscription."""
  minCycles: Int
}

"""Specifies the input fields for a Subscription Billing Policy."""
input Shopify_SubscriptionBillingPolicyInput {
  """
  The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
  """
  interval: Shopify_SellingPlanInterval!
  """The number of billing intervals between invoices."""
  intervalCount: Int!
  """Minimum amount of cycles required in the subscription."""
  minCycles: Int
  """Maximum amount of cycles required in the subscription."""
  maxCycles: Int
  """
  Specific anchor dates upon which the billing interval calculations should be made.
  """
  anchors: [Shopify_SellingPlanAnchorInput!] = []
}

"""Represents a Subscription Contract."""
type Shopify_SubscriptionContract implements Shopify_Node & Shopify_SubscriptionContractBase {
  """The subscription app that the subscription contract is registered to."""
  app: Shopify_App
  """The URL of the subscription contract page on the subscription app."""
  appAdminUrl: URL
  """
  The list of billing attempts associated with the subscription contract.
  """
  billingAttempts(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionBillingAttemptConnection!
  """The billing policy associated with the subscription contract."""
  billingPolicy: Shopify_SubscriptionBillingPolicy!
  """The date and time when the subscription contract was created."""
  createdAt: DateTime!
  """The currency that's used for the subscription contract."""
  currencyCode: Shopify_CurrencyCode!
  """A list of the custom attributes to be added to the generated orders."""
  customAttributes: [Shopify_Attribute!]!
  """The customer to whom the subscription contract belongs."""
  customer: Shopify_Customer
  """The customer payment method that's used for the subscription contract."""
  customerPaymentMethod(
    """Whether to show the customer's revoked payment method."""
    showRevoked: Boolean = false
  ): Shopify_CustomerPaymentMethod
  """The delivery method for each billing of the subscription contract."""
  deliveryMethod: Shopify_SubscriptionDeliveryMethod
  """The delivery policy associated with the subscription contract."""
  deliveryPolicy: Shopify_SubscriptionDeliveryPolicy!
  """The delivery price for each billing of the subscription contract."""
  deliveryPrice: Shopify_MoneyV2!
  """
  The list of subscription discounts associated with the subscription contract.
  """
  discounts(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionManualDiscountConnection!
  """A globally-unique identifier."""
  id: ID!
  """The current status of the last payment."""
  lastPaymentStatus: Shopify_SubscriptionContractLastPaymentStatus
  """The number of lines associated with the subscription contract."""
  lineCount: Int!
  """
  The list of subscription lines associated with the subscription contract.
  """
  lines(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionLineConnection!
  """The next billing date for the subscription contract."""
  nextBillingDate: DateTime
  """The note field that will be applied to the generated orders."""
  note: String
  """A list of the subscription contract's orders."""
  orders(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_OrderConnection!
  """The order from which this contract originated."""
  originOrder: Shopify_Order
  """The current status of the subscription contract."""
  status: Shopify_SubscriptionContractSubscriptionStatus!
  """The date and time when the subscription contract was updated."""
  updatedAt: DateTime!
}

"""Represents subscription contract common fields."""
interface Shopify_SubscriptionContractBase {
  """The subscription app that the subscription contract is registered to."""
  app: Shopify_App
  """The URL of the subscription contract page on the subscription app."""
  appAdminUrl: URL
  """The currency that's used for the subscription contract."""
  currencyCode: Shopify_CurrencyCode!
  """A list of the custom attributes to be added to the generated orders."""
  customAttributes: [Shopify_Attribute!]!
  """The customer to whom the subscription contract belongs."""
  customer: Shopify_Customer
  """The customer payment method that's used for the subscription contract."""
  customerPaymentMethod(
    """Whether to show the customer's revoked payment method."""
    showRevoked: Boolean = false
  ): Shopify_CustomerPaymentMethod
  """The delivery method for each billing of the subscription contract."""
  deliveryMethod: Shopify_SubscriptionDeliveryMethod
  """The delivery price for each billing of the subscription contract."""
  deliveryPrice: Shopify_MoneyV2!
  """
  The list of subscription discounts associated with the subscription contract.
  """
  discounts(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionManualDiscountConnection!
  """The number of lines associated with the subscription contract."""
  lineCount: Int!
  """
  The list of subscription lines associated with the subscription contract.
  """
  lines(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionLineConnection!
  """The note field that will be applied to the generated orders."""
  note: String
  """A list of the subscription contract's orders."""
  orders(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_OrderConnection!
  """The date and time when the subscription contract was updated."""
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple SubscriptionContracts.
"""
type Shopify_SubscriptionContractConnection {
  """A list of edges."""
  edges: [Shopify_SubscriptionContractEdge!]!
  """A list of the nodes contained in SubscriptionContractEdge."""
  nodes: [Shopify_SubscriptionContract!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Specifies the input fields required to create a Subscription Contract."""
input Shopify_SubscriptionContractCreateInput {
  """The ID of the customer to associate with the subscription contract."""
  customerId: ID!
  """The next billing date for the subscription contract."""
  nextBillingDate: DateTime!
  """The currency used for the subscription contract."""
  currencyCode: Shopify_CurrencyCode!
  """The attributes used as input for the Subscription Draft."""
  contract: Shopify_SubscriptionDraftInput!
}

"""Return type for `subscriptionContractCreate` mutation."""
type Shopify_SubscriptionContractCreatePayload {
  """The Subscription Contract object."""
  draft: Shopify_SubscriptionDraft
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SubscriptionDraftUserError!]!
}

"""
An auto-generated type which holds one SubscriptionContract and a cursor during pagination.
"""
type Shopify_SubscriptionContractEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of SubscriptionContractEdge."""
  node: Shopify_SubscriptionContract!
}

"""
Possible error codes that can be returned by `SubscriptionContractUserError`.
"""
enum Shopify_SubscriptionContractErrorCode {
  """The input value is invalid."""
  INVALID
}

"""
The possible status values of the last payment on a subscription contract.
"""
enum Shopify_SubscriptionContractLastPaymentStatus {
  """Successful subscription billing attempt."""
  SUCCEEDED
  """Failed subscription billing attempt."""
  FAILED
}

"""Return type for `subscriptionContractSetNextBillingDate` mutation."""
type Shopify_SubscriptionContractSetNextBillingDatePayload {
  """The updated Subscription Contract object."""
  contract: Shopify_SubscriptionContract
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SubscriptionContractUserError!]!
}

"""The possible status values of a subscription."""
enum Shopify_SubscriptionContractSubscriptionStatus {
  """The contract is active and continuing per its policies."""
  ACTIVE
  """
  The contract is temporarily paused and is expected to resume in the future.
  """
  PAUSED
  """The contract was ended by an unplanned customer action."""
  CANCELLED
  """
  The contract has ended per the expected circumstances. All billing and deliverycycles of the subscriptions were executed.
  """
  EXPIRED
  """
  The contract ended because billing failed and no further billing attempts are expected.
  """
  FAILED
}

"""Return type for `subscriptionContractUpdate` mutation."""
type Shopify_SubscriptionContractUpdatePayload {
  """The Subscription Contract object."""
  draft: Shopify_SubscriptionDraft
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SubscriptionDraftUserError!]!
}

"""Represents a Subscription Contract error."""
type Shopify_SubscriptionContractUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_SubscriptionContractErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""Represents a Subscription Line Pricing Cycle Adjustment."""
type Shopify_SubscriptionCyclePriceAdjustment {
  """Price adjustment type."""
  adjustmentType: Shopify_SellingPlanPricingPolicyAdjustmentType!
  """Price adjustment value."""
  adjustmentValue: Shopify_SellingPlanPricingPolicyAdjustmentValue!
  """The number of cycles required before this pricing policy applies."""
  afterCycle: Int!
  """The computed price after the adjustments applied."""
  computedPrice: Shopify_MoneyV2!
}

"""
Describes the delivery method to use to get the physical goods to the customer.
"""
union Shopify_SubscriptionDeliveryMethod = Shopify_SubscriptionDeliveryMethodLocalDelivery | Shopify_SubscriptionDeliveryMethodPickup | Shopify_SubscriptionDeliveryMethodShipping

"""
Specifies delivery method fields for a subscription draft.
This is an input union: one, and only one, field can be provided.
The field provided will determine which delivery method is to be used.
"""
input Shopify_SubscriptionDeliveryMethodInput {
  """The input fields for the shipping delivery method."""
  shipping: Shopify_SubscriptionDeliveryMethodShippingInput
  """The input fields for the local delivery method."""
  localDelivery: Shopify_SubscriptionDeliveryMethodLocalDeliveryInput
  """The input fields for the pickup delivery method."""
  pickup: Shopify_SubscriptionDeliveryMethodPickupInput
}

"""
A local delivery method, which includes a mailing address and a local delivery option.
"""
type Shopify_SubscriptionDeliveryMethodLocalDelivery {
  """The address to deliver to."""
  address: Shopify_SubscriptionMailingAddress!
  """The details of the local delivery method to use."""
  localDeliveryOption: Shopify_SubscriptionDeliveryMethodLocalDeliveryOption!
}

"""
The input fields for a local delivery method.

This input accepts partial input. When a field is not provided,
its prior value is left unchanged.
"""
input Shopify_SubscriptionDeliveryMethodLocalDeliveryInput {
  """The address to deliver to."""
  address: Shopify_MailingAddressInput
  """The details of the local delivery method to use."""
  localDeliveryOption: Shopify_SubscriptionDeliveryMethodLocalDeliveryOptionInput
}

"""The selected delivery option on a subscription contract."""
type Shopify_SubscriptionDeliveryMethodLocalDeliveryOption {
  """A custom reference to the delivery method for use with automations."""
  code: String
  """
  The details displayed to the customer to describe the local delivery option.
  """
  description: String
  """
  The delivery instructions that the customer can provide to the merchant.
  """
  instructions: String
  """
  The phone number that the customer provided to the merchant.
  Formatted using E.164 standard. For example, `+16135551111`.
  """
  phone: String!
  """The presentment title of the local delivery option."""
  presentmentTitle: String
  """The title of the local delivery option."""
  title: String
}

"""Specifies local delivery option fields."""
input Shopify_SubscriptionDeliveryMethodLocalDeliveryOptionInput {
  """The title of the local delivery option."""
  title: String
  """The presentment title of the local delivery option."""
  presentmentTitle: String
  """
  The details displayed to the customer to describe the local delivery option.
  """
  description: String
  """A custom reference to the delivery method for use with automations."""
  code: String
  """
  The phone number that the customer must provide to the merchant.
  Formatted using E.164 standard. For example, `+16135551111`.
  """
  phone: String!
  """
  The delivery instructions that the customer can provide to the merchant.
  """
  instructions: String
}

"""A delivery method with a pickup option."""
type Shopify_SubscriptionDeliveryMethodPickup {
  """The details of the pickup delivery method to use."""
  pickupOption: Shopify_SubscriptionDeliveryMethodPickupOption!
}

"""
The input fields for a pickup delivery method.

This input accepts partial input. When a field is not provided,
its prior value is left unchanged.
"""
input Shopify_SubscriptionDeliveryMethodPickupInput {
  """The details of the pickup method to use."""
  pickupOption: Shopify_SubscriptionDeliveryMethodPickupOptionInput
}

"""Represents the selected pickup option on a subscription contract."""
type Shopify_SubscriptionDeliveryMethodPickupOption {
  """A custom reference to the delivery method for use with automations."""
  code: String
  """The details displayed to the customer to describe the pickup option."""
  description: String
  """The location where the customer will pickup the merchandise."""
  location: Shopify_Location!
  """The presentment title of the pickup option."""
  presentmentTitle: String
  """The title of the pickup option."""
  title: String
}

"""Specifies pickup option fields."""
input Shopify_SubscriptionDeliveryMethodPickupOptionInput {
  """The title of the pickup option."""
  title: String
  """The presentment title of the pickup option."""
  presentmentTitle: String
  """The details displayed to the customer to describe the pickup option."""
  description: String
  """A custom reference to the delivery method for use with automations."""
  code: String
  """The ID of the pickup location."""
  locationId: ID!
}

"""
Represents a shipping delivery method: a mailing address and a shipping option.
"""
type Shopify_SubscriptionDeliveryMethodShipping {
  """The address to ship to."""
  address: Shopify_SubscriptionMailingAddress!
  """The details of the shipping method to use."""
  shippingOption: Shopify_SubscriptionDeliveryMethodShippingOption!
}

"""
Specifies shipping delivery method fields.

This input accepts partial input. When a field is not provided,
its prior value is left unchanged.
"""
input Shopify_SubscriptionDeliveryMethodShippingInput {
  """The address to ship to."""
  address: Shopify_MailingAddressInput
  """The details of the shipping method to use."""
  shippingOption: Shopify_SubscriptionDeliveryMethodShippingOptionInput
}

"""Represents the selected shipping option on a subscription contract."""
type Shopify_SubscriptionDeliveryMethodShippingOption {
  """
  The carrier service that is providing this shipping option.
  This field isn't currently supported and returns null.
  """
  carrierService: Shopify_DeliveryCarrierService
  """The code of the shipping option."""
  code: String
  """The description of the shipping option."""
  description: String
  """The presentment title of the shipping option."""
  presentmentTitle: String
  """The title of the shipping option."""
  title: String
}

"""Specifies shipping option fields."""
input Shopify_SubscriptionDeliveryMethodShippingOptionInput {
  """The title of the shipping option."""
  title: String
  """The presentment title of the shipping option."""
  presentmentTitle: String
  """The description of the shipping option."""
  description: String
  """The code of the shipping option."""
  code: String
  """The carrier service ID of the shipping option."""
  carrierServiceId: ID
}

"""The delivery option for a subscription contract."""
union Shopify_SubscriptionDeliveryOption = Shopify_SubscriptionLocalDeliveryOption | Shopify_SubscriptionPickupOption | Shopify_SubscriptionShippingOption

"""
The result of the query to fetch delivery options for the subscription contract.
"""
union Shopify_SubscriptionDeliveryOptionResult = Shopify_SubscriptionDeliveryOptionResultFailure | Shopify_SubscriptionDeliveryOptionResultSuccess

"""
A failure to find the available delivery options for a subscription contract.
"""
type Shopify_SubscriptionDeliveryOptionResultFailure {
  """The reason for the failure."""
  message: String
}

"""The delivery option for a subscription contract."""
type Shopify_SubscriptionDeliveryOptionResultSuccess {
  """The available delivery options."""
  deliveryOptions: [Shopify_SubscriptionDeliveryOption!]!
}

"""Represents a Subscription Delivery Policy."""
type Shopify_SubscriptionDeliveryPolicy {
  """
  The specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [Shopify_SellingPlanAnchor!]!
  """
  The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
  """
  interval: Shopify_SellingPlanInterval!
  """The number of delivery intervals between deliveries."""
  intervalCount: Int!
}

"""Specifies the input fields for a Subscription Delivery Policy."""
input Shopify_SubscriptionDeliveryPolicyInput {
  """
  The kind of interval that is associated with this schedule (e.g. Monthly, Weekly, etc).
  """
  interval: Shopify_SellingPlanInterval!
  """The number of billing intervals between invoices."""
  intervalCount: Int!
  """
  The specific anchor dates upon which the delivery interval calculations should be made.
  """
  anchors: [Shopify_SellingPlanAnchorInput!] = []
}

"""Subscription draft discount types."""
union Shopify_SubscriptionDiscount = Shopify_SubscriptionAppliedCodeDiscount | Shopify_SubscriptionManualDiscount

"""Represents what a particular discount reduces from a line price."""
type Shopify_SubscriptionDiscountAllocation {
  """Allocation amount."""
  amount: Shopify_MoneyV2!
  """Discount that created the allocation."""
  discount: Shopify_SubscriptionDiscount!
}

"""
An auto-generated type for paginating through multiple SubscriptionDiscounts.
"""
type Shopify_SubscriptionDiscountConnection {
  """A list of edges."""
  edges: [Shopify_SubscriptionDiscountEdge!]!
  """A list of the nodes contained in SubscriptionDiscountEdge."""
  nodes: [Shopify_SubscriptionDiscount!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SubscriptionDiscount and a cursor during pagination.
"""
type Shopify_SubscriptionDiscountEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of SubscriptionDiscountEdge."""
  node: Shopify_SubscriptionDiscount!
}

"""Represents the subscription lines the discount applies on."""
type Shopify_SubscriptionDiscountEntitledLines {
  """
  Specify whether the subscription discount will apply on all subscription lines.
  """
  all: Boolean!
  """
  The list of subscription lines associated with the subscription discount.
  """
  lines(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionLineConnection!
}

"""The value of the discount and how it will be applied."""
type Shopify_SubscriptionDiscountFixedAmountValue {
  """The fixed amount value of the discount."""
  amount: Shopify_MoneyV2!
  """Whether the amount is applied per item."""
  appliesOnEachItem: Boolean!
}

"""The percentage value of the discount."""
type Shopify_SubscriptionDiscountPercentageValue {
  """The percentage value of the discount."""
  percentage: Int!
}

"""The reason a discount on a subscription draft was rejected."""
enum Shopify_SubscriptionDiscountRejectionReason {
  """Discount code is not found."""
  NOT_FOUND
  """Discount does not apply to any of the given line items."""
  NO_ENTITLED_LINE_ITEMS
  """Quantity of items does not qualify for the discount."""
  QUANTITY_NOT_IN_RANGE
  """Purchase amount of items does not qualify for the discount."""
  PURCHASE_NOT_IN_RANGE
  """Given customer does not qualify for the discount."""
  CUSTOMER_NOT_ELIGIBLE
  """Discount usage limit has been reached."""
  USAGE_LIMIT_REACHED
  """Customer usage limit has been reached."""
  CUSTOMER_USAGE_LIMIT_REACHED
  """Discount is inactive."""
  CURRENTLY_INACTIVE
  """No applicable shipping lines."""
  NO_ENTITLED_SHIPPING_LINES
  """Purchase type does not qualify for the discount."""
  INCOMPATIBLE_PURCHASE_TYPE
  """Internal error during discount code validation."""
  INTERNAL_ERROR
}

"""The value of the discount and how it will be applied."""
union Shopify_SubscriptionDiscountValue = Shopify_SubscriptionDiscountFixedAmountValue | Shopify_SubscriptionDiscountPercentageValue

"""Represents a Subscription Draft."""
type Shopify_SubscriptionDraft implements Shopify_Node {
  """
  The billing cycle that the subscription contract will be associated with.
  """
  billingCycle: Shopify_SubscriptionBillingCycle
  """The billing policy for the subscription contract."""
  billingPolicy: Shopify_SubscriptionBillingPolicy!
  """
  The billing cycles of the contracts that will be concatenated to the subscription contract.
  """
  concatenatedBillingCycles(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_SubscriptionBillingCyclesSortKeys = CYCLE_INDEX
  ): Shopify_SubscriptionBillingCycleConnection!
  """The currency used for the subscription contract."""
  currencyCode: Shopify_CurrencyCode!
  """A list of the custom attributes to be added to the generated orders."""
  customAttributes: [Shopify_Attribute!]!
  """The customer to whom the subscription contract belongs."""
  customer: Shopify_Customer!
  """The customer payment method used for the subscription contract."""
  customerPaymentMethod(
    """Whether to show the customer's revoked payment method."""
    showRevoked: Boolean = false
  ): Shopify_CustomerPaymentMethod
  """The delivery method for each billing of the subscription contract."""
  deliveryMethod: Shopify_SubscriptionDeliveryMethod
  """
  The available delivery options for a given delivery address. Returns `null` for pending requests.
  """
  deliveryOptions(
    """The address to deliver the subscription contract to."""
    deliveryAddress: Shopify_MailingAddressInput
  ): Shopify_SubscriptionDeliveryOptionResult
  """The delivery policy for the subscription contract."""
  deliveryPolicy: Shopify_SubscriptionDeliveryPolicy!
  """The delivery price for each billing the subscription contract."""
  deliveryPrice: Shopify_MoneyV2
  """
  The list of subscription discounts which will be associated with the subscription contract.
  """
  discounts(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionDiscountConnection!
  """
  The list of subscription discounts to be added to the subscription contract.
  """
  discountsAdded(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionDiscountConnection!
  """
  The list of subscription discounts to be removed from the subscription contract.
  """
  discountsRemoved(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionDiscountConnection!
  """
  The list of subscription discounts to be updated on the subscription contract.
  """
  discountsUpdated(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionDiscountConnection!
  """A globally-unique identifier."""
  id: ID!
  """
  The list of subscription lines which will be associated with the subscription contract.
  """
  lines(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionLineConnection!
  """
  The list of subscription lines to be added to the subscription contract.
  """
  linesAdded(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionLineConnection!
  """
  The list of subscription lines to be removed from the subscription contract.
  """
  linesRemoved(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionLineConnection!
  """The next billing date for the subscription contract."""
  nextBillingDate: DateTime
  """The note field that will be applied to the generated orders."""
  note: String
  """The original subscription contract."""
  originalContract: Shopify_SubscriptionContract
  """
  Available Shipping Options for a given delivery address. Returns NULL for pending requests.
  """
  shippingOptions(
    """The address to delivery the subscription contract to."""
    deliveryAddress: Shopify_MailingAddressInput
  ): Shopify_SubscriptionShippingOptionResult @deprecated(reason: "Use `deliveryOptions` instead.")
  """The current status of the subscription contract."""
  status: Shopify_SubscriptionContractSubscriptionStatus
}

"""Return type for `subscriptionDraftCommit` mutation."""
type Shopify_SubscriptionDraftCommitPayload {
  """The updated Subscription Contract object."""
  contract: Shopify_SubscriptionContract
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SubscriptionDraftUserError!]!
}

"""Return type for `subscriptionDraftDiscountAdd` mutation."""
type Shopify_SubscriptionDraftDiscountAddPayload {
  """The added Subscription Discount."""
  discountAdded: Shopify_SubscriptionManualDiscount
  """The Subscription Contract draft object."""
  draft: Shopify_SubscriptionDraft
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SubscriptionDraftUserError!]!
}

"""Return type for `subscriptionDraftDiscountCodeApply` mutation."""
type Shopify_SubscriptionDraftDiscountCodeApplyPayload {
  """The added subscription discount."""
  appliedDiscount: Shopify_SubscriptionAppliedCodeDiscount
  """The subscription contract draft object."""
  draft: Shopify_SubscriptionDraft
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SubscriptionDraftUserError!]!
}

"""Return type for `subscriptionDraftDiscountRemove` mutation."""
type Shopify_SubscriptionDraftDiscountRemovePayload {
  """The removed subscription draft discount."""
  discountRemoved: Shopify_SubscriptionDiscount
  """The subscription contract draft object."""
  draft: Shopify_SubscriptionDraft
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SubscriptionDraftUserError!]!
}

"""Return type for `subscriptionDraftDiscountUpdate` mutation."""
type Shopify_SubscriptionDraftDiscountUpdatePayload {
  """The updated Subscription Discount."""
  discountUpdated: Shopify_SubscriptionManualDiscount
  """The Subscription Contract draft object."""
  draft: Shopify_SubscriptionDraft
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SubscriptionDraftUserError!]!
}

"""
Possible error codes that can be returned by `SubscriptionDraftUserError`.
"""
enum Shopify_SubscriptionDraftErrorCode {
  """This line has already been removed."""
  ALREADY_REMOVED
  """Input value is not present."""
  PRESENCE
  """Subscription draft has been already committed."""
  COMMITTED
  """Value is not in range."""
  NOT_IN_RANGE
  """The value is not an integer."""
  NOT_AN_INTEGER
  """The maximum number of cycles must be greater than the minimum."""
  SELLING_PLAN_MAX_CYCLES_MUST_BE_GREATER_THAN_MIN_CYCLES
  """
  The delivery policy interval must be a multiple of the billing policy interval.
  """
  DELIVERY_MUST_BE_MULTIPLE_OF_BILLING
  """Next billing date is invalid."""
  INVALID_BILLING_DATE
  """Note length is too long."""
  INVALID_NOTE_LENGTH
  """Must have at least one line."""
  INVALID_LINES
  """Discount must have at least one entitled line."""
  NO_ENTITLED_LINES
  """The customer doesn't exist."""
  CUSTOMER_DOES_NOT_EXIST
  """The payment method customer must be the same as the contract customer."""
  CUSTOMER_MISMATCH
  """The delivery method can't be blank if any lines require shipping."""
  DELIVERY_METHOD_REQUIRED
  """The after cycle attribute must be unique between cycle discounts."""
  CYCLE_DISCOUNTS_UNIQUE_AFTER_CYCLE
  """The adjustment value must the same type as the adjustment type."""
  INVALID_ADJUSTMENT_TYPE
  """The adjustment value must be either fixed_value or percentage."""
  INVALID_ADJUSTMENT_VALUE
  """
  Another operation updated the contract concurrently as the commit was in progress.
  """
  STALE_CONTRACT
  """Currency is not enabled."""
  CURRENCY_NOT_ENABLED
  """
  Cannot update a subscription contract with a future contract or schedule edit.
  """
  HAS_FUTURE_EDITS
  """
  Cannot commit a billing cycle contract draft with this mutation. Please use SubscriptionBillingCycleContractDraftCommit.
  """
  BILLING_CYCLE_PRESENT
  """
  Cannot commit a contract draft with this mutation. Please use SubscriptionDraftCommit.
  """
  BILLING_CYCLE_ABSENT
  """Delivery policy cannot be updated for billing cycle contract drafts."""
  BILLING_CYCLE_CONTRACT_DRAFT_DELIVERY_POLICY_INVALID
  """Billing policy cannot be updated for billing cycle contract drafts."""
  BILLING_CYCLE_CONTRACT_DRAFT_BILLING_POLICY_INVALID
  """
  Contract draft must be a billing cycle contract draft for contract concatenation.
  """
  CONCATENATION_BILLING_CYCLE_CONTRACT_DRAFT_REQUIRED
  """
  Concatenated contracts cannot contain duplicate subscription contracts.
  """
  DUPLICATE_CONCATENATED_CONTRACTS
  """
  Billing cycle selector cannot select upcoming billing cycle past limit.
  """
  UPCOMING_CYCLE_LIMIT_EXCEEDED
  """
  Billing cycle selector cannot select billing cycle outside of index range.
  """
  CYCLE_INDEX_OUT_OF_RANGE
  """
  Billing cycle selector cannot select billing cycle outside of start date range.
  """
  CYCLE_START_DATE_OUT_OF_RANGE
  """
  Billing cycle selector requires exactly one of index or date to be provided.
  """
  CYCLE_SELECTOR_VALIDATE_ONE_OF
  """
  Maximum number of concatenated contracts on a billing cycle contract draft exceeded.
  """
  EXCEEDED_MAX_CONCATENATED_CONTRACTS
  """The input value is invalid."""
  INVALID
  """The input value is blank."""
  BLANK
  """The input value should be greater than the minimum allowed value."""
  GREATER_THAN
  """
  The input value should be greater than or equal to the minimum value allowed.
  """
  GREATER_THAN_OR_EQUAL_TO
  """The input value should be less than the maximum value allowed."""
  LESS_THAN
  """
  The input value should be less than or equal to the maximum value allowed.
  """
  LESS_THAN_OR_EQUAL_TO
  """The input value is too long."""
  TOO_LONG
  """The input value is too short."""
  TOO_SHORT
}

"""Return type for `subscriptionDraftFreeShippingDiscountAdd` mutation."""
type Shopify_SubscriptionDraftFreeShippingDiscountAddPayload {
  """The added subscription free shipping discount."""
  discountAdded: Shopify_SubscriptionManualDiscount
  """The subscription contract draft object."""
  draft: Shopify_SubscriptionDraft
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SubscriptionDraftUserError!]!
}

"""
Return type for `subscriptionDraftFreeShippingDiscountUpdate` mutation.
"""
type Shopify_SubscriptionDraftFreeShippingDiscountUpdatePayload {
  """The updated Subscription Discount."""
  discountUpdated: Shopify_SubscriptionManualDiscount
  """The Subscription Contract draft object."""
  draft: Shopify_SubscriptionDraft
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SubscriptionDraftUserError!]!
}

"""Specifies the input fields required to create a Subscription Draft."""
input Shopify_SubscriptionDraftInput {
  """The current status of the subscription contract."""
  status: Shopify_SubscriptionContractSubscriptionStatus
  """The ID of the payment method to be used for the subscription contract."""
  paymentMethodId: ID
  """The next billing date for the subscription contract."""
  nextBillingDate: DateTime
  """The billing policy for the subscription contract."""
  billingPolicy: Shopify_SubscriptionBillingPolicyInput
  """The delivery policy for the subscription contract."""
  deliveryPolicy: Shopify_SubscriptionDeliveryPolicyInput
  """The shipping price for each renewal the subscription contract."""
  deliveryPrice: Shopify_Decimal
  """The delivery method for the subscription contract."""
  deliveryMethod: Shopify_SubscriptionDeliveryMethodInput
  """The note field that will be applied to the generated orders."""
  note: String
  """A list of the custom attributes added to the subscription contract."""
  customAttributes: [Shopify_AttributeInput!]
}

"""Return type for `subscriptionDraftLineAdd` mutation."""
type Shopify_SubscriptionDraftLineAddPayload {
  """The Subscription Contract draft object."""
  draft: Shopify_SubscriptionDraft
  """The added Subscription Line."""
  lineAdded: Shopify_SubscriptionLine
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SubscriptionDraftUserError!]!
}

"""Return type for `subscriptionDraftLineRemove` mutation."""
type Shopify_SubscriptionDraftLineRemovePayload {
  """
  The list of updated subscription discounts impacted by the removed line.
  """
  discountsUpdated: [Shopify_SubscriptionManualDiscount!]
  """The Subscription Contract draft object."""
  draft: Shopify_SubscriptionDraft
  """The removed Subscription Line."""
  lineRemoved: Shopify_SubscriptionLine
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SubscriptionDraftUserError!]!
}

"""Return type for `subscriptionDraftLineUpdate` mutation."""
type Shopify_SubscriptionDraftLineUpdatePayload {
  """The Subscription Contract draft object."""
  draft: Shopify_SubscriptionDraft
  """The updated Subscription Line."""
  lineUpdated: Shopify_SubscriptionLine
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SubscriptionDraftUserError!]!
}

"""Return type for `subscriptionDraftUpdate` mutation."""
type Shopify_SubscriptionDraftUpdatePayload {
  """The Subscription Draft object."""
  draft: Shopify_SubscriptionDraft
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_SubscriptionDraftUserError!]!
}

"""Represents a Subscription Draft error."""
type Shopify_SubscriptionDraftUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_SubscriptionDraftErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Specifies the input fields of a subscription free shipping discount on a contract.
"""
input Shopify_SubscriptionFreeShippingDiscountInput {
  """The title associated with the subscription free shipping discount."""
  title: String
  """
  The maximum number of times the subscription free shipping discount will be applied on orders.
  """
  recurringCycleLimit: Int
}

"""Represents a Subscription Line."""
type Shopify_SubscriptionLine {
  """
  The price per unit for the subscription line in the contract's currency.
  """
  currentPrice: Shopify_MoneyV2!
  """List of custom attributes associated to the line item."""
  customAttributes: [Shopify_Attribute!]!
  """Discount allocations."""
  discountAllocations: [Shopify_SubscriptionDiscountAllocation!]!
  """The unique identifier."""
  id: ID!
  """Total line price including all discounts."""
  lineDiscountedPrice: Shopify_MoneyV2!
  """Describe the price changes of the line over time."""
  pricingPolicy: Shopify_SubscriptionPricingPolicy
  """The product id associated with the subscription line."""
  productId: ID
  """The quantity of the unit selected for the subscription line."""
  quantity: Int!
  """Whether physical shipping is required for the variant."""
  requiresShipping: Boolean!
  """
  The selling plan ID associated to the line.
  
  Indicates which selling plan was used to create this
  contract line initially. The selling plan ID is also used to
  find the associated delivery profile.
  
  The subscription contract, subscription line, or selling plan might have
  changed. As a result, the selling plan's attributes might not
  match the information on the contract.
  """
  sellingPlanId: ID
  """
  The selling plan name associated to the line. This name describes
  the order line items created from this subscription line
  for both merchants and customers.
  
  The value can be different from the selling plan's name, because both
  the selling plan's name and the subscription line's selling_plan_name
  attribute can be updated independently.
  """
  sellingPlanName: String
  """Variant SKU number of the item associated with the subscription line."""
  sku: String
  """Whether the variant is taxable."""
  taxable: Boolean!
  """Product title of the item associated with the subscription line."""
  title: String!
  """The product variant id associated with the subscription line."""
  variantId: ID
  """The image associated with the line item's variant or product."""
  variantImage: Shopify_Image
  """
  Product variant title of the item associated with the subscription line.
  """
  variantTitle: String
}

"""
An auto-generated type for paginating through multiple SubscriptionLines.
"""
type Shopify_SubscriptionLineConnection {
  """A list of edges."""
  edges: [Shopify_SubscriptionLineEdge!]!
  """A list of the nodes contained in SubscriptionLineEdge."""
  nodes: [Shopify_SubscriptionLine!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SubscriptionLine and a cursor during pagination.
"""
type Shopify_SubscriptionLineEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of SubscriptionLineEdge."""
  node: Shopify_SubscriptionLine!
}

"""
Specifies the input fields required to add a new subscription line to a contract.
"""
input Shopify_SubscriptionLineInput {
  """The ID of the product variant the subscription line refers to."""
  productVariantId: ID!
  """The quantity of the product."""
  quantity: Int!
  """The price of the product."""
  currentPrice: Shopify_Decimal!
  """The custom attributes for this subscription line."""
  customAttributes: [Shopify_AttributeInput!]
  """The selling plan for the subscription line."""
  sellingPlanId: ID
  """
  The selling plan name for the subscription line.
  
  Defaults to using the selling plan's current name when not specified.
  """
  sellingPlanName: String
  """Describes expected price changes of the subscription line over time."""
  pricingPolicy: Shopify_SubscriptionPricingPolicyInput
}

"""
Specifies the input fields required to update a subscription line on a contract.
"""
input Shopify_SubscriptionLineUpdateInput {
  """The ID of the product variant the subscription line refers to."""
  productVariantId: ID
  """The quantity of the product."""
  quantity: Int
  """The selling plan for the subscription line."""
  sellingPlanId: ID
  """The selling plan name for the subscription line."""
  sellingPlanName: String
  """The price of the product."""
  currentPrice: Shopify_Decimal
  """The custom attributes for this subscription line."""
  customAttributes: [Shopify_AttributeInput!]
  """Describes expected price changes of the subscription line over time."""
  pricingPolicy: Shopify_SubscriptionPricingPolicyInput
}

"""A local delivery option for a subscription contract."""
type Shopify_SubscriptionLocalDeliveryOption {
  """The code of the local delivery option."""
  code: String!
  """The description of the local delivery option."""
  description: String
  """Whether a phone number is required for the local delivery option."""
  phoneRequired: Boolean!
  """The presentment title of the local delivery option."""
  presentmentTitle: String
  """The price of the local delivery option."""
  price: Shopify_MoneyV2
  """The title of the local delivery option."""
  title: String!
}

"""Represents a Mailing Address on a Subscription."""
type Shopify_SubscriptionMailingAddress {
  """
  The first line of the address. Typically the street address or PO Box number.
  """
  address1: String
  """
  The second line of the address. Typically the number of the apartment, suite, or unit.
  """
  address2: String
  """The name of the city, district, village, or town."""
  city: String
  """The name of the customer's company or organization."""
  company: String
  """The name of the country."""
  country: String
  """
  The two-letter code for the country of the address.
  
  For example, US.
  """
  countryCode: CountryCode
  """The first name of the customer."""
  firstName: String
  """The last name of the customer."""
  lastName: String
  """The full name of the customer, based on firstName and lastName."""
  name: String
  """
  A unique phone number for the customer. Formatted using E.164 standard. For example, _+16135551111_.
  """
  phone: String
  """The region of the address, such as the province, state, or district."""
  province: String
  """
  The two-letter code for the region.
  
  For example, ON.
  """
  provinceCode: String
  """The zip or postal code of the address."""
  zip: String
}

"""Custom subscription discount."""
type Shopify_SubscriptionManualDiscount {
  """Entitled line items used to apply the subscription discount on."""
  entitledLines: Shopify_SubscriptionDiscountEntitledLines!
  """The unique identifier."""
  id: ID!
  """
  The maximum number of times the subscription discount will be applied on orders.
  """
  recurringCycleLimit: Int
  """The reason that the discount on the subscription draft is rejected."""
  rejectionReason: Shopify_SubscriptionDiscountRejectionReason
  """Type of line the discount applies on."""
  targetType: Shopify_DiscountTargetType!
  """The title associated with the subscription discount."""
  title: String
  """The type of the subscription discount."""
  type: Shopify_DiscountType!
  """The number of times the discount was applied."""
  usageCount: Int!
  """The value of the subscription discount."""
  value: Shopify_SubscriptionDiscountValue!
}

"""
An auto-generated type for paginating through multiple SubscriptionManualDiscounts.
"""
type Shopify_SubscriptionManualDiscountConnection {
  """A list of edges."""
  edges: [Shopify_SubscriptionManualDiscountEdge!]!
  """A list of the nodes contained in SubscriptionManualDiscountEdge."""
  nodes: [Shopify_SubscriptionManualDiscount!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one SubscriptionManualDiscount and a cursor during pagination.
"""
type Shopify_SubscriptionManualDiscountEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of SubscriptionManualDiscountEdge."""
  node: Shopify_SubscriptionManualDiscount!
}

"""Represents the subscription lines the discount applies on."""
input Shopify_SubscriptionManualDiscountEntitledLinesInput {
  """
  Specify whether the subscription discount will apply on all subscription lines.
  """
  all: Boolean
  """
  The ID of the lines to add to or remove from the subscription discount.
  """
  lines: Shopify_SubscriptionManualDiscountLinesInput
}

"""
Specifies the fixed amount value of the discount and distribution on the lines.
"""
input Shopify_SubscriptionManualDiscountFixedAmountInput {
  """Fixed amount value."""
  amount: Float
  """Whether the amount is intended per line item or once per subscription."""
  appliesOnEachItem: Boolean
}

"""Specifies the input fields of a subscription discount on a contract."""
input Shopify_SubscriptionManualDiscountInput {
  """The title associated with the subscription discount."""
  title: String
  """Percentage or fixed amount value of the discount."""
  value: Shopify_SubscriptionManualDiscountValueInput
  """
  The maximum number of times the subscription discount will be applied on orders.
  """
  recurringCycleLimit: Int
  """Entitled line items used to apply the subscription discount on."""
  entitledLines: Shopify_SubscriptionManualDiscountEntitledLinesInput
}

"""Line items that a the discount refers to."""
input Shopify_SubscriptionManualDiscountLinesInput {
  """The ID of the lines to add to the subscription discount."""
  add: [ID!]
  """The ID of the lines to remove from the subscription discount."""
  remove: [ID!]
}

"""Specifies the discount value and its distribution."""
input Shopify_SubscriptionManualDiscountValueInput {
  """The percentage value of the discount. Value must be between 0 - 100."""
  percentage: Int
  """Fixed amount input in the currency defined by the subscription."""
  fixedAmount: Shopify_SubscriptionManualDiscountFixedAmountInput
}

"""A pickup option to deliver a subscription contract."""
type Shopify_SubscriptionPickupOption {
  """The code of the pickup option."""
  code: String!
  """The description of the pickup option."""
  description: String
  """The pickup location."""
  location: Shopify_Location!
  """Whether a phone number is required for the pickup option."""
  phoneRequired: Boolean!
  """
  The estimated amount of time it takes for the pickup to be ready. For example, "Usually ready in 24 hours".).
  """
  pickupTime: String!
  """The presentment title of the pickup option."""
  presentmentTitle: String
  """The price of the pickup option."""
  price: Shopify_MoneyV2
  """The title of the pickup option."""
  title: String!
}

"""Represents a Subscription Line Pricing Policy."""
type Shopify_SubscriptionPricingPolicy {
  """
  The base price per unit for the subscription line in the contract's currency.
  """
  basePrice: Shopify_MoneyV2!
  """The adjustments per cycle for the subscription line."""
  cycleDiscounts: [Shopify_SubscriptionCyclePriceAdjustment!]!
}

"""An array containing all pricing changes for each billing cycle."""
input Shopify_SubscriptionPricingPolicyCycleDiscountsInput {
  """The cycle after which the pricing policy applies."""
  afterCycle: Int!
  """The price adjustment type."""
  adjustmentType: Shopify_SellingPlanPricingPolicyAdjustmentType!
  """The price adjustment value."""
  adjustmentValue: Shopify_SellingPlanPricingPolicyValueInput!
  """The computed price after the adjustments are applied."""
  computedPrice: Shopify_Decimal!
}

"""Describes expected price changes of the subscription line over time."""
input Shopify_SubscriptionPricingPolicyInput {
  """
  The base price per unit for the subscription line in the contract's currency.
  """
  basePrice: Shopify_Decimal!
  """An array containing all pricing changes for each billing cycle."""
  cycleDiscounts: [Shopify_SubscriptionPricingPolicyCycleDiscountsInput!]!
}

"""A shipping option to deliver a subscription contract."""
type Shopify_SubscriptionShippingOption {
  """
  The carrier service that is providing this shipping option.
  This field isn't currently supported and returns null.
  """
  carrierService: Shopify_DeliveryCarrierService
  """The code of the shipping option."""
  code: String!
  """The description of the shipping option."""
  description: String
  """If a phone number is required for the shipping option."""
  phoneRequired: Boolean
  """The presentment title of the shipping option."""
  presentmentTitle: String
  """The price of the shipping option."""
  price: Shopify_MoneyV2
  """The title of the shipping option."""
  title: String!
}

"""
The result of the query to fetch shipping options for the subscription contract.
"""
union Shopify_SubscriptionShippingOptionResult = Shopify_SubscriptionShippingOptionResultFailure | Shopify_SubscriptionShippingOptionResultSuccess

"""
Failure determining available shipping options for delivery of a subscription contract.
"""
type Shopify_SubscriptionShippingOptionResultFailure {
  """Failure reason."""
  message: String
}

"""A shipping option for delivery of a subscription contract."""
type Shopify_SubscriptionShippingOptionResultSuccess {
  """Available shipping options."""
  shippingOptions: [Shopify_SubscriptionShippingOption!]!
}

"""
A suggested transaction. Suggested transaction are usually used in the context of refunds
and exchanges.
"""
type Shopify_SuggestedOrderTransaction {
  """The masked account number associated with the payment method."""
  accountNumber: String
  """The amount of the transaction."""
  amount: Shopify_Money! @deprecated(reason: "Use `amountSet` instead.")
  """
  The amount and currency of the suggested order transaction in shop and presentment currencies.
  """
  amountSet: Shopify_MoneyBag!
  """
  The human-readable payment gateway name suggested to process the transaction.
  """
  formattedGateway: String
  """The suggested payment gateway used to process the transaction."""
  gateway: String
  """Specifies the kind of the suggested order transaction."""
  kind: Shopify_SuggestedOrderTransactionKind!
  """
  Specifies the available amount to refund on the gateway. Only available within SuggestedRefund.
  """
  maximumRefundable: Shopify_Money @deprecated(reason: "Use `maximumRefundableSet` instead.")
  """
  Specifies the available amount to refund on the gateway in shop and
  presentment currencies. Only available within SuggestedRefund.
  """
  maximumRefundableSet: Shopify_MoneyBag
  """
  The associated parent transaction, for example the authorization of a capture.
  """
  parentTransaction: Shopify_OrderTransaction
}

"""Specifies the kind of the suggested order transaction."""
enum Shopify_SuggestedOrderTransactionKind {
  """A suggested refund transaction for an order."""
  SUGGESTED_REFUND
}

"""
Represents a refund suggested by Shopify based on the items being reimbursed.
You can then use the suggested refund object to generate an actual refund.
"""
type Shopify_SuggestedRefund {
  """The total monetary value to be refunded."""
  amount: Shopify_Money! @deprecated(reason: "Use `amountSet` instead.")
  """
  The total monetary value to be refunded in shop and presentment currencies.
  """
  amountSet: Shopify_MoneyBag!
  """The sum of all the discounted prices of the line items being refunded."""
  discountedSubtotalSet: Shopify_MoneyBag!
  """The total monetary value available to refund."""
  maximumRefundable: Shopify_Money! @deprecated(reason: "Use `maximumRefundableSet` instead.")
  """
  The total monetary value available to refund in shop and presentment currencies.
  """
  maximumRefundableSet: Shopify_MoneyBag!
  """A list of duties to be refunded from the order."""
  refundDuties: [Shopify_RefundDuty!]!
  """A list of line items to be refunded, along with restock instructions."""
  refundLineItems: [Shopify_RefundLineItem!]!
  """The shipping costs to be refunded from the order."""
  shipping: Shopify_ShippingRefund!
  """The sum of all the prices of the line items being refunded."""
  subtotal: Shopify_Money! @deprecated(reason: "Use `subtotalSet` instead.")
  """
  The sum of all the prices of the line items being refunded in shop and presentment currencies.
  """
  subtotalSet: Shopify_MoneyBag!
  """A list of suggested order transactions."""
  suggestedTransactions: [Shopify_SuggestedOrderTransaction!]!
  """
  The total cart discount amount that was applied to all line items in this refund.
  """
  totalCartDiscountAmountSet: Shopify_MoneyBag!
  """
  The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive.
  """
  totalDutiesSet: Shopify_MoneyBag!
  """
  The sum of the taxes being refunded from the order in shop and presentment currencies. The value must be positive.
  """
  totalTaxSet: Shopify_MoneyBag!
  """
  The sum of the taxes being refunded from the order. The value must be positive.
  """
  totalTaxes: Shopify_Money! @deprecated(reason: "Use `totalTaxSet` instead.")
}

"""
Represents a return refund suggested by Shopify based on the items being
reimbursed. You can then use the suggested refund object to generate an actual
refund for the return.
"""
type Shopify_SuggestedReturnRefund {
  """
  The total monetary value to be refunded in shop and presentment currencies.
  """
  amount: Shopify_MoneyBag!
  """The sum of all the discounted prices of the line items being refunded."""
  discountedSubtotal: Shopify_MoneyBag!
  """
  The total monetary value available to refund in shop and presentment currencies.
  """
  maximumRefundable: Shopify_MoneyBag!
  """A list of duties to be refunded from the order."""
  refundDuties: [Shopify_RefundDuty!]!
  """The shipping costs to be refunded from the order."""
  shipping: Shopify_ShippingRefund!
  """
  The sum of all the prices of the line items being refunded in shop and presentment currencies.
  """
  subtotal: Shopify_MoneyBag!
  """A list of suggested order transactions."""
  suggestedTransactions: [Shopify_SuggestedOrderTransaction!]!
  """
  The total cart discount amount that was applied to all line items in this refund.
  """
  totalCartDiscountAmount: Shopify_MoneyBag!
  """
  The sum of all the duties being refunded from the order in shop and presentment currencies. The value must be positive.
  """
  totalDuties: Shopify_MoneyBag!
  """
  The sum of the taxes being refunded in shop and presentment currencies. The value must be positive.
  """
  totalTax: Shopify_MoneyBag!
}

"""
The result in a tabular format with schema information and formatted and unformatted row data.
"""
type Shopify_TableData {
  """The data table columns."""
  columns: [Shopify_TableDataColumn!]!
  """The formatted data values."""
  rowData: [[String!]!]!
  """The unformatted data values."""
  unformattedData: JSON!
}

"""
A nested array representation of the data. An index in an array represents a row number.
"""
type Shopify_TableDataColumn {
  """The data type of the column value."""
  dataType: String!
  """The display name of the column in the data model."""
  displayName: String!
  """The name of the column in the data model."""
  name: String!
}

"""The default table response structure for a ShopifyQL query."""
type Shopify_TableResponse implements Shopify_ShopifyqlResponse {
  """A list of parse errors, if parsing fails."""
  parseErrors: [Shopify_ParseError!]
  """The result in a tabular format with schema and row data."""
  tableData: Shopify_TableData
}

"""Return type for `tagsAdd` mutation."""
type Shopify_TagsAddPayload {
  """The object that was updated."""
  node: Shopify_Node
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `tagsRemove` mutation."""
type Shopify_TagsRemovePayload {
  """The object that was updated."""
  node: Shopify_Node
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Available customer tax exemptions."""
enum Shopify_TaxExemption {
  """
  This customer is exempt from specific taxes for holding a valid STATUS_CARD_EXEMPTION in Canada.
  """
  CA_STATUS_CARD_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in British Columbia.
  """
  CA_BC_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Manitoba.
  """
  CA_MB_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Saskatchewan.
  """
  CA_SK_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid DIPLOMAT_EXEMPTION in Canada.
  """
  CA_DIPLOMAT_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in British Columbia.
  """
  CA_BC_COMMERCIAL_FISHERY_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Manitoba.
  """
  CA_MB_COMMERCIAL_FISHERY_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Nova Scotia.
  """
  CA_NS_COMMERCIAL_FISHERY_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Prince Edward Island.
  """
  CA_PE_COMMERCIAL_FISHERY_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid COMMERCIAL_FISHERY_EXEMPTION in Saskatchewan.
  """
  CA_SK_COMMERCIAL_FISHERY_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in British Columbia.
  """
  CA_BC_PRODUCTION_AND_MACHINERY_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid PRODUCTION_AND_MACHINERY_EXEMPTION in Saskatchewan.
  """
  CA_SK_PRODUCTION_AND_MACHINERY_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in British Columbia.
  """
  CA_BC_SUB_CONTRACTOR_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid SUB_CONTRACTOR_EXEMPTION in Saskatchewan.
  """
  CA_SK_SUB_CONTRACTOR_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in British Columbia.
  """
  CA_BC_CONTRACTOR_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid CONTRACTOR_EXEMPTION in Saskatchewan.
  """
  CA_SK_CONTRACTOR_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid PURCHASE_EXEMPTION in Ontario.
  """
  CA_ON_PURCHASE_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Manitoba.
  """
  CA_MB_FARMER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Nova Scotia.
  """
  CA_NS_FARMER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid FARMER_EXEMPTION in Saskatchewan.
  """
  CA_SK_FARMER_EXEMPTION
  """
  This customer is exempt from VAT for purchases within the EU that is shipping from outside of customer's country.
  """
  EU_REVERSE_CHARGE_EXEMPTION_RULE
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Alabama.
  """
  US_AL_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Alaska.
  """
  US_AK_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Arizona.
  """
  US_AZ_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Arkansas.
  """
  US_AR_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in California.
  """
  US_CA_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Colorado.
  """
  US_CO_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Connecticut.
  """
  US_CT_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Delaware.
  """
  US_DE_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Florida.
  """
  US_FL_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Georgia.
  """
  US_GA_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Hawaii.
  """
  US_HI_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Idaho.
  """
  US_ID_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Illinois.
  """
  US_IL_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Indiana.
  """
  US_IN_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Iowa.
  """
  US_IA_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Kansas.
  """
  US_KS_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Kentucky.
  """
  US_KY_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Louisiana.
  """
  US_LA_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Maine.
  """
  US_ME_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Maryland.
  """
  US_MD_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Massachusetts.
  """
  US_MA_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Michigan.
  """
  US_MI_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Minnesota.
  """
  US_MN_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Mississippi.
  """
  US_MS_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Missouri.
  """
  US_MO_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Montana.
  """
  US_MT_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Nebraska.
  """
  US_NE_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Nevada.
  """
  US_NV_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Hampshire.
  """
  US_NH_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Jersey.
  """
  US_NJ_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New Mexico.
  """
  US_NM_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in New York.
  """
  US_NY_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in North Carolina.
  """
  US_NC_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in North Dakota.
  """
  US_ND_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Ohio.
  """
  US_OH_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Oklahoma.
  """
  US_OK_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Oregon.
  """
  US_OR_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Pennsylvania.
  """
  US_PA_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Rhode Island.
  """
  US_RI_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in South Carolina.
  """
  US_SC_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in South Dakota.
  """
  US_SD_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Tennessee.
  """
  US_TN_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Texas.
  """
  US_TX_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Utah.
  """
  US_UT_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Vermont.
  """
  US_VT_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Virginia.
  """
  US_VA_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Washington.
  """
  US_WA_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in West Virginia.
  """
  US_WV_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Wisconsin.
  """
  US_WI_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Wyoming.
  """
  US_WY_RESELLER_EXEMPTION
  """
  This customer is exempt from specific taxes for holding a valid RESELLER_EXEMPTION in Washington DC.
  """
  US_DC_RESELLER_EXEMPTION
}

"""Represents a single tax applied to the associated line item."""
type Shopify_TaxLine {
  """
  Whether the channel that submitted the tax line is liable for remitting. A
  value of null indicates unknown liability for this tax line.
  """
  channelLiable: Boolean
  """
  The amount of tax, in shop currency, after discounts and before returns.
  """
  price: Shopify_Money! @deprecated(reason: "Use `priceSet` instead.")
  """
  The amount of tax, in shop and presentment currencies, after discounts and before returns.
  """
  priceSet: Shopify_MoneyBag!
  """
  The proportion of the line item price that the tax represents as a decimal.
  """
  rate: Float
  """
  The proportion of the line item price that the tax represents as a percentage.
  """
  ratePercentage: Float
  """The name of the tax."""
  title: String!
}

"""
A TenderTransaction represents a transaction with financial impact on a shop's balance sheet. A tender transaction always
represents actual money movement between a buyer and a shop. TenderTransactions can be used instead of OrderTransactions
for reconciling a shop's cash flow. A TenderTransaction is immutable once created.
"""
type Shopify_TenderTransaction implements Shopify_Node {
  """The amount and currency of the tender transaction."""
  amount: Shopify_MoneyV2!
  """A globally-unique identifier."""
  id: ID!
  """Information about the payment method used for the transaction."""
  paymentMethod: String
  """Date and time when the transaction was processed."""
  processedAt: DateTime
  """The remote gateway reference associated with the tender transaction."""
  remoteReference: String
  """Whether the transaction is a test transaction."""
  test: Boolean!
  """Information about the payment instrument used for the transaction."""
  transactionDetails: Shopify_TenderTransactionDetails
  """The staff member who performed the transaction."""
  user: Shopify_StaffMember
}

"""
An auto-generated type for paginating through multiple TenderTransactions.
"""
type Shopify_TenderTransactionConnection {
  """A list of edges."""
  edges: [Shopify_TenderTransactionEdge!]!
  """A list of the nodes contained in TenderTransactionEdge."""
  nodes: [Shopify_TenderTransaction!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Information about the credit card used for this transaction."""
type Shopify_TenderTransactionCreditCardDetails {
  """
  The name of the company that issued the customer's credit card. Example: `Visa`.
  """
  creditCardCompany: String
  """
  The customer's credit card number, with all digits except the last 4 redacted. Example: `•••• •••• •••• 1234`
  """
  creditCardNumber: String
}

"""Information about the payment instrument used for this transaction."""
union Shopify_TenderTransactionDetails = Shopify_TenderTransactionCreditCardDetails

"""
An auto-generated type which holds one TenderTransaction and a cursor during pagination.
"""
type Shopify_TenderTransactionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of TenderTransactionEdge."""
  node: Shopify_TenderTransaction!
}

"""A sale associated with a tip."""
type Shopify_TipSale implements Shopify_Sale {
  """The type of order action that the sale represents."""
  actionType: Shopify_SaleActionType!
  """The unique identifier for the sale."""
  id: ID!
  """The line item for the associated sale."""
  lineItem: Shopify_LineItem!
  """The line type assocated with the sale."""
  lineType: Shopify_SaleLineType!
  """The number of units either ordered or intended to be returned."""
  quantity: Int
  """All individual taxes associated with the sale."""
  taxes: [Shopify_SaleTax!]!
  """The total sale amount after taxes and discounts."""
  totalAmount: Shopify_MoneyBag!
  """The total discounts allocated to the sale after taxes."""
  totalDiscountAmountAfterTaxes: Shopify_MoneyBag!
  """The total discounts allocated to the sale before taxes."""
  totalDiscountAmountBeforeTaxes: Shopify_MoneyBag!
  """The total amount of taxes for the sale."""
  totalTaxAmount: Shopify_MoneyBag!
}

"""Transaction fee related to an order transaction."""
type Shopify_TransactionFee implements Shopify_Node {
  """Amount of the fee."""
  amount: Shopify_MoneyV2!
  """Flat rate charge for a transaction."""
  flatFee: Shopify_MoneyV2!
  """Name of the credit card flat fee."""
  flatFeeName: String
  """A globally-unique identifier."""
  id: ID!
  """Percentage charge."""
  rate: Shopify_Decimal!
  """Name of the credit card rate."""
  rateName: String
  """Tax amount charged on the fee."""
  taxAmount: Shopify_MoneyV2!
  """Name of the type of fee."""
  type: String!
}

"""Translatable content of a resource's field."""
type Shopify_TranslatableContent {
  """Hash digest representation of the content value."""
  digest: String
  """The resource field that is being translated."""
  key: String!
  """Locale of the content."""
  locale: String!
  """Content value."""
  value: String
}

"""A resource that has translatable fields."""
type Shopify_TranslatableResource {
  """GID of the resource."""
  resourceId: ID!
  """Translatable content."""
  translatableContent: [Shopify_TranslatableContent!]!
  """Translatable content translations."""
  translations(
    """Filters translations by locale."""
    locale: String!
    """Filters by outdated translations."""
    outdated: Boolean
    """
    Filters translations by market ID. Use this argument to retrieve content specific to a market.
    """
    marketId: ID
  ): [Shopify_Translation!]!
}

"""
An auto-generated type for paginating through multiple TranslatableResources.
"""
type Shopify_TranslatableResourceConnection {
  """A list of edges."""
  edges: [Shopify_TranslatableResourceEdge!]!
  """A list of the nodes contained in TranslatableResourceEdge."""
  nodes: [Shopify_TranslatableResource!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""
An auto-generated type which holds one TranslatableResource and a cursor during pagination.
"""
type Shopify_TranslatableResourceEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of TranslatableResourceEdge."""
  node: Shopify_TranslatableResource!
}

"""Specifies the type of resources that are translatable."""
enum Shopify_TranslatableResourceType {
  """
  A product collection. Translatable fields: `title`, `body_html`, `meta_title`, `meta_description`.
  """
  COLLECTION
  """
  The delivery method definition. For example, "Standard", or "Expedited".
          Translatable fields: `name`.
  """
  DELIVERY_METHOD_DEFINITION
  """An email template. Translatable fields: `title`, `body_html`."""
  EMAIL_TEMPLATE
  """A link to direct users. Translatable fields: `title`."""
  LINK
  """A Metafield. Translatable fields: `value`."""
  METAFIELD
  """
  An online store article. Translatable fields: `title`, `body_html`, `summary_html`, `meta_title`, `meta_description`.
  """
  ONLINE_STORE_ARTICLE
  """
  An online store blog. Translatable fields: `title`, `meta_title`, `meta_description`.
  """
  ONLINE_STORE_BLOG
  """A category of links. Translatable fields: `title`."""
  ONLINE_STORE_MENU
  """
  An online store page. Translatable fields: `title`, `body_html`, `meta_title`, `meta_description`.
  """
  ONLINE_STORE_PAGE
  """
  An online store theme. Translatable fields: `dynamic keys based on theme data`.
  """
  ONLINE_STORE_THEME
  """A packing slip template. Translatable fields: `body`."""
  PACKING_SLIP_TEMPLATE
  """A payment gateway. Translatable fields: `name`."""
  PAYMENT_GATEWAY
  """
  An online store product. Translatable fields: `title`, `body_html`, `meta_title`, `meta_description`.
  """
  PRODUCT
  """
  An online store custom product property name. For example, "Size", "Color", or "Material".
          Translatable fields: `name`.
  """
  PRODUCT_OPTION
  """
  An online store product variant. Translatable fields: `title`, `option1`,
  `option2`, `option3`. The field `title` has been deprecated.
  """
  PRODUCT_VARIANT
  """
  A selling plan. Translatable fields:`name`, `option1`, `option2`, `option3`, `description`.
  """
  SELLING_PLAN
  """
  A selling plan group. Translatable fields: `name`, `option1`, `option2`, `option3`.
  """
  SELLING_PLAN_GROUP
  """A shop. Translatable fields: `meta_title`, `meta_description`."""
  SHOP
  """A shop policy. Translatable fields: `body`."""
  SHOP_POLICY
}

"""Translation of a field of a resource."""
type Shopify_Translation {
  """
  On the resource that this translation belongs to, the reference to the value being translated.
  """
  key: String!
  """ISO code of the translation locale."""
  locale: String!
  """
  The market that the translation is specific to. Null value means the translation is available in all markets.
  """
  market: Shopify_Market
  """
  Whether the original content has changed since this translation was updated.
  """
  outdated: Boolean!
  """The date and time when the translation was updated."""
  updatedAt: DateTime
  """Translation value."""
  value: String
}

"""Possible error codes that can be returned by `TranslationUserError`."""
enum Shopify_TranslationErrorCode {
  """The input value is blank."""
  BLANK
  """The input value is invalid."""
  INVALID
  """Resource does not exist."""
  RESOURCE_NOT_FOUND
  """Too many translation keys for the resource."""
  TOO_MANY_KEYS_FOR_RESOURCE
  """Translation key is invalid."""
  INVALID_KEY_FOR_MODEL
  """Translation value is invalid."""
  FAILS_RESOURCE_VALIDATION
  """Translatable content is invalid."""
  INVALID_TRANSLATABLE_CONTENT
  """Market localizable content is invalid."""
  INVALID_MARKET_LOCALIZABLE_CONTENT
  """Locale is invalid for the shop."""
  INVALID_LOCALE_FOR_SHOP
  """Locale language code is invalid."""
  INVALID_CODE
  """Locale code format is invalid."""
  INVALID_FORMAT
  """The shop isn't allowed to operate on market custom content."""
  MARKET_CUSTOM_CONTENT_NOT_ALLOWED
  """The market corresponding to the `marketId` argument doesn't exist."""
  MARKET_DOES_NOT_EXIST
  """The market override locale creation failed."""
  MARKET_LOCALE_CREATION_FAILED
  """The specified resource can't be customized for a market."""
  RESOURCE_NOT_MARKET_CUSTOMIZABLE
  """
  The locale is missing on the market corresponding to the `marketId` argument.
  """
  INVALID_LOCALE_FOR_MARKET
}

"""
Provides the fields and values to use when creating or updating a translation.
"""
input Shopify_TranslationInput {
  """ISO code of the locale being translated into."""
  locale: String!
  """
  On the resource that this translation belongs to,         the reference to the value being translated.
  """
  key: String!
  """The value of the translation."""
  value: String!
  """Hash digest representation         of the content being translated."""
  translatableContentDigest: String!
  """
  The ID of the market that the translation is specific to. Not specifying this
  field means that the translation will be available in all markets.
  """
  marketId: ID
}

"""Return type for `translationsRegister` mutation."""
type Shopify_TranslationsRegisterPayload {
  """The translations that were created or updated."""
  translations: [Shopify_Translation!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_TranslationUserError!]!
}

"""Return type for `translationsRemove` mutation."""
type Shopify_TranslationsRemovePayload {
  """The translations that were deleted."""
  translations: [Shopify_Translation!]
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_TranslationUserError!]!
}

"""
Represents an error that happens during the execution of a translation mutation.
"""
type Shopify_TranslationUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_TranslationErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""Represents a typed custom attribute."""
type Shopify_TypedAttribute {
  """Key or name of the attribute."""
  key: String!
  """Value of the attribute."""
  value: String!
}

"""Systems of weights and measures."""
enum Shopify_UnitSystem {
  """Imperial system of weights and measures."""
  IMPERIAL_SYSTEM
  """Metric system of weights and measures."""
  METRIC_SYSTEM
}

"""
An unsigned 64-bit integer. Represents whole numeric values between 0 and 2^64 - 1 encoded as a string of base-10 digits.

Example value: `"50"`.
"""
scalar Shopify_UnsignedInt64

"""Specifies the input fields required to update a media object."""
input Shopify_UpdateMediaInput {
  """Specifies the media to update."""
  id: ID!
  """
  The source from which to update the media preview image. May be an external URL or staged upload URL.
  """
  previewImageSource: String
  """The alt text associated to the media."""
  alt: String
}

"""
Represents an [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986) and
[RFC 3987](https://datatracker.ietf.org/doc/html/rfc3987)-compliant URI string.

For example, `"https://johns-apparel.myshopify.com"` is a valid URL. It includes a scheme (`https`) and a host
(`johns-apparel.myshopify.com`).
"""
scalar URL

"""The URL redirect for the online store."""
type Shopify_UrlRedirect implements Shopify_Node {
  """The ID of the URL redirect."""
  id: ID!
  """
  The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
  """
  path: String!
  """The target location where the user will be redirected to."""
  target: String!
}

"""Return type for `urlRedirectBulkDeleteAll` mutation."""
type Shopify_UrlRedirectBulkDeleteAllPayload {
  """The asynchronous job removing the redirects."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""Return type for `urlRedirectBulkDeleteByIds` mutation."""
type Shopify_UrlRedirectBulkDeleteByIdsPayload {
  """The asynchronous job removing the redirects."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UrlRedirectBulkDeleteByIdsUserError!]!
}

"""
An error that occurs during the execution of `UrlRedirectBulkDeleteByIds`.
"""
type Shopify_UrlRedirectBulkDeleteByIdsUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_UrlRedirectBulkDeleteByIdsUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `UrlRedirectBulkDeleteByIdsUserError`.
"""
enum Shopify_UrlRedirectBulkDeleteByIdsUserErrorCode {
  """
  You must pass one or more [`URLRedirect`](
              https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect
            ) object IDs.
  """
  IDS_EMPTY
}

"""Return type for `urlRedirectBulkDeleteBySavedSearch` mutation."""
type Shopify_UrlRedirectBulkDeleteBySavedSearchPayload {
  """The asynchronous job removing the redirects."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UrlRedirectBulkDeleteBySavedSearchUserError!]!
}

"""
An error that occurs during the execution of `UrlRedirectBulkDeleteBySavedSearch`.
"""
type Shopify_UrlRedirectBulkDeleteBySavedSearchUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_UrlRedirectBulkDeleteBySavedSearchUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `UrlRedirectBulkDeleteBySavedSearchUserError`.
"""
enum Shopify_UrlRedirectBulkDeleteBySavedSearchUserErrorCode {
  """Saved search not found."""
  SAVED_SEARCH_NOT_FOUND
  """The saved search's query cannot match all entries or be empty."""
  INVALID_SAVED_SEARCH_QUERY
}

"""Return type for `urlRedirectBulkDeleteBySearch` mutation."""
type Shopify_UrlRedirectBulkDeleteBySearchPayload {
  """The asynchronous job removing the redirects."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UrlRedirectBulkDeleteBySearchUserError!]!
}

"""
An error that occurs during the execution of `UrlRedirectBulkDeleteBySearch`.
"""
type Shopify_UrlRedirectBulkDeleteBySearchUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_UrlRedirectBulkDeleteBySearchUserErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Possible error codes that can be returned by `UrlRedirectBulkDeleteBySearchUserError`.
"""
enum Shopify_UrlRedirectBulkDeleteBySearchUserErrorCode {
  """Invalid search string."""
  INVALID_SEARCH_ARGUMENT
}

"""An auto-generated type for paginating through multiple UrlRedirects."""
type Shopify_UrlRedirectConnection {
  """A list of edges."""
  edges: [Shopify_UrlRedirectEdge!]!
  """A list of the nodes contained in UrlRedirectEdge."""
  nodes: [Shopify_UrlRedirect!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `urlRedirectCreate` mutation."""
type Shopify_UrlRedirectCreatePayload {
  """The created redirect."""
  urlRedirect: Shopify_UrlRedirect
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UrlRedirectUserError!]!
}

"""Return type for `urlRedirectDelete` mutation."""
type Shopify_UrlRedirectDeletePayload {
  """The ID of the deleted redirect."""
  deletedUrlRedirectId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UrlRedirectUserError!]!
}

"""
An auto-generated type which holds one UrlRedirect and a cursor during pagination.
"""
type Shopify_UrlRedirectEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of UrlRedirectEdge."""
  node: Shopify_UrlRedirect!
}

"""Possible error codes that can be returned by `UrlRedirectUserError`."""
enum Shopify_UrlRedirectErrorCode {
  """Redirect does not exist."""
  DOES_NOT_EXIST
  """Redirect could not be created."""
  CREATE_FAILED
  """Redirect could not be updated."""
  UPDATE_FAILED
  """Redirect could not be deleted."""
  DELETE_FAILED
}

"""
A request to import a [`URLRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object
into the Online Store channel. Apps can use this to query the state of an `UrlRedirectImport` request.

For more information, see [`url-redirect`](https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect)s.
"""
type Shopify_UrlRedirectImport implements Shopify_Node {
  """The number of rows in the file."""
  count: Int
  """The number of redirects created from the import."""
  createdCount: Int
  """The number of redirects that failed to be imported."""
  failedCount: Int
  """Whether the import is finished."""
  finished: Boolean!
  """The date and time when the import finished."""
  finishedAt: DateTime
  """The ID of the `UrlRedirectImport` object."""
  id: ID!
  """A list of up to three previews of the URL redirects to be imported."""
  previewRedirects: [Shopify_UrlRedirectImportPreview!]!
  """The number of redirects updated during the import."""
  updatedCount: Int
}

"""Return type for `urlRedirectImportCreate` mutation."""
type Shopify_UrlRedirectImportCreatePayload {
  """The created `URLRedirectImport` object."""
  urlRedirectImport: Shopify_UrlRedirectImport
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UrlRedirectImportUserError!]!
}

"""
Possible error codes that can be returned by `UrlRedirectImportUserError`.
"""
enum Shopify_UrlRedirectImportErrorCode {
  """CSV file does not exist at given URL."""
  FILE_DOES_NOT_EXIST @deprecated(reason: "This error code is never returned")
  """URL redirect import not found."""
  NOT_FOUND
  """The import has already completed."""
  ALREADY_IMPORTED
  """The import is already in progress."""
  IN_PROGRESS
}

"""A preview of a URL redirect import row."""
type Shopify_UrlRedirectImportPreview {
  """
  The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
  """
  path: String!
  """The target location where the user will be redirected to."""
  target: String!
}

"""Return type for `urlRedirectImportSubmit` mutation."""
type Shopify_UrlRedirectImportSubmitPayload {
  """The asynchronous job importing the redirects."""
  job: Shopify_Job
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UrlRedirectImportUserError!]!
}

"""
Represents an error that happens during execution of a redirect import mutation.
"""
type Shopify_UrlRedirectImportUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_UrlRedirectImportErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""The input fields to create or update a URL redirect."""
input Shopify_UrlRedirectInput {
  """
  The old path to be redirected from. When the user visits this path, they will be redirected to the target location.
  """
  path: String
  """The target location where the user will be redirected to."""
  target: String
}

"""The set of valid sort keys for the UrlRedirect query."""
enum Shopify_UrlRedirectSortKeys {
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
  """Sort by the `path` value."""
  PATH
  """Sort by the `id` value."""
  ID
}

"""Return type for `urlRedirectUpdate` mutation."""
type Shopify_UrlRedirectUpdatePayload {
  """Returns the updated URL redirect."""
  urlRedirect: Shopify_UrlRedirect
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UrlRedirectUserError!]!
}

"""
Represents an error that happens during execution of a redirect mutation.
"""
type Shopify_UrlRedirectUserError implements Shopify_DisplayableError {
  """The error code."""
  code: Shopify_UrlRedirectErrorCode
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""Represents an error in the input of a mutation."""
type Shopify_UserError implements Shopify_DisplayableError {
  """The path to the input field that caused the error."""
  field: [String!]
  """The error message."""
  message: String!
}

"""
Time between UTC time and a location's observed time, in the format `"+HH:MM"` or `"-HH:MM"`.

Example value: `"-07:00"`.
"""
scalar UtcOffset

"""
Specifies the
[Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
that are associated with a related marketing campaign.
"""
input Shopify_UTMInput {
  """The name of the UTM campaign."""
  campaign: String!
  """The name of the website or application where the referral link exists."""
  source: String!
  """The UTM campaign medium."""
  medium: String!
}

"""Represents a set of UTM parameters."""
type Shopify_UTMParameters {
  """The name of a marketing campaign."""
  campaign: String
  """
  Identifies specific content in a marketing campaign. Used to differentiate
  between similar content or links in a marketing campaign to determine which is
  the most effective.
  """
  content: String
  """
  The medium of a marketing campaign, such as a banner or email newsletter.
  """
  medium: String
  """
  The source of traffic to the merchant's store, such as Google or an email newsletter.
  """
  source: String
  """Paid search terms used by a marketing campaign."""
  term: String
}

"""Represents a credit card payment instrument."""
type Shopify_VaultCreditCard {
  """The billing address of the card."""
  billingAddress: Shopify_CustomerCreditCardBillingAddress
  """The brand for the card."""
  brand: String!
  """Whether the card has been expired."""
  expired: Boolean!
  """The expiry month of the card."""
  expiryMonth: Int!
  """The expiry year of the card."""
  expiryYear: Int!
  """The last four digits for the card."""
  lastDigits: String!
  """The name of the card holder."""
  name: String!
}

"""Represents a paypal billing agreement payment instrument."""
type Shopify_VaultPaypalBillingAgreement {
  """Whether the paypal billing agreement is inactive."""
  inactive: Boolean!
  """The paypal account name."""
  name: String!
  """The paypal account email address."""
  paypalAccountEmail: String!
}

"""
Representation of 3d vectors and points. It can represent
either the coordinates of a point in space, a direction, or
size. Presented as an object with three floating-point values.
"""
type Shopify_Vector3 {
  """The x coordinate of Vector3."""
  x: Float!
  """The y coordinate of Vector3."""
  y: Float!
  """The z coordinate of Vector3."""
  z: Float!
}

"""Represents a Shopify hosted video."""
type Shopify_Video implements Shopify_File & Shopify_Media & Shopify_Node {
  """A word or phrase to share the nature or contents of a media."""
  alt: String
  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the file was created.
  """
  createdAt: DateTime!
  """
  The video's duration in milliseconds. This value is `null` unless the video's status field is
  [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
  """
  duration: Int
  """Any errors that have occurred on the file."""
  fileErrors: [Shopify_FileError!]!
  """The status of the file."""
  fileStatus: Shopify_FileStatus!
  """The video's filename."""
  filename: String!
  """A globally-unique identifier."""
  id: ID!
  """The media content type."""
  mediaContentType: Shopify_MediaContentType!
  """Any errors which have occurred on the media."""
  mediaErrors: [Shopify_MediaError!]!
  """The warnings attached to the media."""
  mediaWarnings: [Shopify_MediaWarning!]!
  """
  The video's original source. This value is `null` unless the video's status field is
  [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
  """
  originalSource: Shopify_VideoSource
  """The preview image for the media."""
  preview: Shopify_MediaPreviewImage
  """
  The video's sources. This value is empty unless the video's status field is
  [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready).
  """
  sources: [Shopify_VideoSource!]!
  """Current status of the media."""
  status: Shopify_MediaStatus!
}

"""
Represents a source for a Shopify hosted video.

Types of sources include the original video, lower resolution versions of the original video,
and an m3u8 playlist file.

Only [videos](https://shopify.dev/api/admin-graphql/latest/objects/video) with a status field
of [READY](https://shopify.dev/api/admin-graphql/latest/enums/MediaStatus#value-ready) have sources.
"""
type Shopify_VideoSource {
  """The video source's file size in bytes."""
  fileSize: Int
  """The video source's file format extension."""
  format: String!
  """The video source's height."""
  height: Int!
  """The video source's MIME type."""
  mimeType: String!
  """The video source's URL."""
  url: String!
  """The video source's width."""
  width: Int!
}

"""A type of visualization."""
enum Shopify_VisualizationType {
  """Line Chart."""
  LINE
  """Bar Chart."""
  BAR
}

"""
An Amazon EventBridge partner event source to which webhook subscriptions publish events.
"""
type Shopify_WebhookEventBridgeEndpoint {
  """The ARN of this EventBridge partner event source."""
  arn: Shopify_ARN!
}

"""An HTTPS endpoint to which webhook subscriptions send POST requests."""
type Shopify_WebhookHttpEndpoint {
  """The URL to which the webhooks events are sent."""
  callbackUrl: URL!
}

"""
A Google Cloud Pub/Sub topic to which webhook subscriptions publish events.
"""
type Shopify_WebhookPubSubEndpoint {
  """The Google Cloud Pub/Sub project ID."""
  pubSubProject: String!
  """The Google Cloud Pub/Sub topic ID."""
  pubSubTopic: String!
}

"""
A webhook subscription is a persisted data object created by an app using the REST Admin API or GraphQL Admin API.
It describes the topic that the app wants to receive, and a destination where
Shopify should send webhooks of the specified topic.
When an event for a given topic occurs, the webhook subscription sends a relevant payload to the destination.
Learn more about the [webhooks system](https://shopify.dev/apps/webhooks).
"""
type Shopify_WebhookSubscription implements Shopify_LegacyInteroperability & Shopify_Node {
  """
  The destination URI to which the webhook subscription will send a message when an event occurs.
  """
  callbackUrl: URL! @deprecated(reason: "Use `endpoint` instead.")
  """The date and time when the webhook subscription was created."""
  createdAt: DateTime!
  """The endpoint to which the webhook subscription will send events."""
  endpoint: Shopify_WebhookSubscriptionEndpoint!
  """The format in which the webhook subscription should send the data."""
  format: Shopify_WebhookSubscriptionFormat!
  """A globally-unique identifier."""
  id: ID!
  """
  An optional array of top-level resource fields that should be serialized and
  sent in the webhook message. If null, then all fields will be sent.
  """
  includeFields: [String!]!
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: Shopify_UnsignedInt64!
  """
  The list of namespaces for any metafields that should be included in the webhook subscription.
  """
  metafieldNamespaces: [String!]!
  """
  The list of namespaces for private metafields that should be included in the webhook subscription.
  """
  privateMetafieldNamespaces: [String!]!
  """
  The type of event that triggers the webhook. The topic determines when the
  webhook subscription sends a webhook, as well as what class of data object
  that webhook contains.
  """
  topic: Shopify_WebhookSubscriptionTopic!
  """The date and time when the webhook subscription was updated."""
  updatedAt: DateTime!
}

"""
An auto-generated type for paginating through multiple WebhookSubscriptions.
"""
type Shopify_WebhookSubscriptionConnection {
  """A list of edges."""
  edges: [Shopify_WebhookSubscriptionEdge!]!
  """A list of the nodes contained in WebhookSubscriptionEdge."""
  nodes: [Shopify_WebhookSubscription!]!
  """Information to aid in pagination."""
  pageInfo: Shopify_PageInfo!
}

"""Return type for `webhookSubscriptionCreate` mutation."""
type Shopify_WebhookSubscriptionCreatePayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
  """The webhook subscription that was created."""
  webhookSubscription: Shopify_WebhookSubscription
}

"""Return type for `webhookSubscriptionDelete` mutation."""
type Shopify_WebhookSubscriptionDeletePayload {
  """The ID of the deleted webhook subscription."""
  deletedWebhookSubscriptionId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
}

"""
An auto-generated type which holds one WebhookSubscription and a cursor during pagination.
"""
type Shopify_WebhookSubscriptionEdge {
  """A cursor for use in pagination."""
  cursor: String!
  """The item at the end of WebhookSubscriptionEdge."""
  node: Shopify_WebhookSubscription!
}

"""An endpoint to which webhook subscriptions send webhooks events."""
union Shopify_WebhookSubscriptionEndpoint = Shopify_WebhookEventBridgeEndpoint | Shopify_WebhookHttpEndpoint | Shopify_WebhookPubSubEndpoint

"""The supported formats for webhook subscriptions."""
enum Shopify_WebhookSubscriptionFormat {
  JSON
  XML
}

"""Specifies the input fields for a webhook subscription."""
input Shopify_WebhookSubscriptionInput {
  """
  URL where the webhook subscription should send the POST request when the event occurs.
  """
  callbackUrl: URL
  """The format in which the webhook subscription should send the data."""
  format: Shopify_WebhookSubscriptionFormat
  """The list of fields to be included in the webhook subscription."""
  includeFields: [String!]
  """
  The list of namespaces for any metafields that should be included in the webhook subscription.
  """
  metafieldNamespaces: [String!]
  """
  The list of namespaces for private metafields that should be included inthe webhook subscription.
  """
  privateMetafieldNamespaces: [String!]
}

"""The set of valid sort keys for the WebhookSubscription query."""
enum Shopify_WebhookSubscriptionSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT
  """Sort by the `id` value."""
  ID
  """
  Sort by relevance to the search terms when the `query` parameter is specified on the connection.
  Don't use this sort key when no search query is specified.
  """
  RELEVANCE
}

"""
The supported topics for webhook subscriptions. You can use webhook subscriptions to receive
notifications about particular events in a shop.

You don't create webhook subscriptions to
[mandatory webhooks](https://shopify.dev/apps/webhooks/configuration/mandatory-webhooks).
Instead, you configure mandatory webhooks in your Partner Dashboard as part of your app setup.
"""
enum Shopify_WebhookSubscriptionTopic {
  """
  The webhook topic for `app/uninstalled` events. Occurs whenever a shop has uninstalled the app.
  """
  APP_UNINSTALLED
  """
  The webhook topic for `carts/create` events. Occurs when a cart is created in
  the online store. Other types of carts aren't supported. For example, the
  webhook doesn't support carts that are created in a custom storefront.
  Requires the `read_orders` scope.
  """
  CARTS_CREATE
  """
  The webhook topic for `carts/update` events. Occurs when a cart is updated in
  the online store. Other types of carts aren't supported. For example, the
  webhook doesn't support carts that are updated in a custom storefront.
  Requires the `read_orders` scope.
  """
  CARTS_UPDATE
  """
  The webhook topic for `channels/delete` events. Occurs whenever a channel is
  deleted. Requires the `read_publications` scope.
  """
  CHANNELS_DELETE
  """
  The webhook topic for `checkouts/create` events. Occurs whenever a checkout is created. Requires the `read_orders` scope.
  """
  CHECKOUTS_CREATE
  """
  The webhook topic for `checkouts/delete` events. Occurs whenever a checkout is deleted. Requires the `read_orders` scope.
  """
  CHECKOUTS_DELETE
  """
  The webhook topic for `checkouts/update` events. Occurs whenever a checkout is updated. Requires the `read_orders` scope.
  """
  CHECKOUTS_UPDATE
  """
  The webhook topic for `customer_payment_methods/create` events. Occurs
  whenever a customer payment method is created. Requires the
  `read_customer_payment_methods` scope.
  """
  CUSTOMER_PAYMENT_METHODS_CREATE
  """
  The webhook topic for `customer_payment_methods/update` events. Occurs
  whenever a customer payment method is updated. Requires the
  `read_customer_payment_methods` scope.
  """
  CUSTOMER_PAYMENT_METHODS_UPDATE
  """
  The webhook topic for `customer_payment_methods/revoke` events. Occurs
  whenever a customer payment method is revoked. Requires the
  `read_customer_payment_methods` scope.
  """
  CUSTOMER_PAYMENT_METHODS_REVOKE
  """
  The webhook topic for `collection_listings/add` events. Occurs whenever a
  collection listing is added. Requires the `read_product_listings` scope.
  """
  COLLECTION_LISTINGS_ADD
  """
  The webhook topic for `collection_listings/remove` events. Occurs whenever a
  collection listing is removed. Requires the `read_product_listings` scope.
  """
  COLLECTION_LISTINGS_REMOVE
  """
  The webhook topic for `collection_listings/update` events. Occurs whenever a
  collection listing is updated. Requires the `read_product_listings` scope.
  """
  COLLECTION_LISTINGS_UPDATE
  """
  The webhook topic for `collection_publications/create` events. Occurs whenever
  a collection publication listing is created. Requires the `read_publications` scope.
  """
  COLLECTION_PUBLICATIONS_CREATE
  """
  The webhook topic for `collection_publications/delete` events. Occurs whenever
  a collection publication listing is deleted. Requires the `read_publications` scope.
  """
  COLLECTION_PUBLICATIONS_DELETE
  """
  The webhook topic for `collection_publications/update` events. Occurs whenever
  a collection publication listing is updated. Requires the `read_publications` scope.
  """
  COLLECTION_PUBLICATIONS_UPDATE
  """
  The webhook topic for `collections/create` events. Occurs whenever a
  collection is created. Requires the `read_products` scope.
  """
  COLLECTIONS_CREATE
  """
  The webhook topic for `collections/delete` events. Occurs whenever a
  collection is deleted. Requires the `read_products` scope.
  """
  COLLECTIONS_DELETE
  """
  The webhook topic for `collections/update` events. Occurs whenever a
  collection is updated, including whenever products are added or removed from
  the collection. Occurs once if multiple products are added or removed from a
  collection at the same time. Requires the `read_products` scope.
  """
  COLLECTIONS_UPDATE
  """
  The webhook topic for `customer_groups/create` events. Occurs whenever a
  customer saved search is created. Requires the `read_customers` scope.
  """
  CUSTOMER_GROUPS_CREATE
  """
  The webhook topic for `customer_groups/delete` events. Occurs whenever a
  customer saved search is deleted. Requires the `read_customers` scope.
  """
  CUSTOMER_GROUPS_DELETE
  """
  The webhook topic for `customer_groups/update` events. Occurs whenever a
  customer saved search is updated. Requires the `read_customers` scope.
  """
  CUSTOMER_GROUPS_UPDATE
  """
  The webhook topic for `customers/create` events. Occurs whenever a customer is
  created. Requires the `read_customers` scope.
  """
  CUSTOMERS_CREATE
  """
  The webhook topic for `customers/delete` events. Occurs whenever a customer is
  deleted. Requires the `read_customers` scope.
  """
  CUSTOMERS_DELETE
  """
  The webhook topic for `customers/disable` events. Occurs whenever a customer
  account is disabled. Requires the `read_customers` scope.
  """
  CUSTOMERS_DISABLE
  """
  The webhook topic for `customers/enable` events. Occurs whenever a customer
  account is enabled. Requires the `read_customers` scope.
  """
  CUSTOMERS_ENABLE
  """
  The webhook topic for `customers/update` events. Occurs whenever a customer is
  updated. Requires the `read_customers` scope.
  """
  CUSTOMERS_UPDATE
  """
  The webhook topic for `customers_marketing_consent/update` events. Occurs
  whenever a customer's marketing consent is updated. Requires the
  `read_customers` scope.
  """
  CUSTOMERS_MARKETING_CONSENT_UPDATE
  """
  The webhook topic for `disputes/create` events. Occurs whenever a dispute is
  created. Requires the `read_shopify_payments_disputes` scope.
  """
  DISPUTES_CREATE
  """
  The webhook topic for `disputes/update` events. Occurs whenever a dispute is
  updated. Requires the `read_shopify_payments_disputes` scope.
  """
  DISPUTES_UPDATE
  """
  The webhook topic for `draft_orders/create` events. Occurs whenever a draft
  order is created. Requires the `read_draft_orders` scope.
  """
  DRAFT_ORDERS_CREATE
  """
  The webhook topic for `draft_orders/delete` events. Occurs whenever a draft
  order is deleted. Requires the `read_draft_orders` scope.
  """
  DRAFT_ORDERS_DELETE
  """
  The webhook topic for `draft_orders/update` events. Occurs whenever a draft
  order is updated. Requires the `read_draft_orders` scope.
  """
  DRAFT_ORDERS_UPDATE
  """
  The webhook topic for `fulfillment_events/create` events. Occurs whenever a
  fulfillment event is created. Requires the `read_fulfillments` scope.
  """
  FULFILLMENT_EVENTS_CREATE
  """
  The webhook topic for `fulfillment_events/delete` events. Occurs whenever a
  fulfillment event is deleted. Requires the `read_fulfillments` scope.
  """
  FULFILLMENT_EVENTS_DELETE
  """
  The webhook topic for `fulfillments/create` events. Occurs whenever a
  fulfillment is created. Requires at least one of the following scopes:
  read_fulfillments, read_marketplace_orders.
  """
  FULFILLMENTS_CREATE
  """
  The webhook topic for `fulfillments/update` events. Occurs whenever a
  fulfillment is updated. Requires at least one of the following scopes:
  read_fulfillments, read_marketplace_orders.
  """
  FULFILLMENTS_UPDATE
  """
  The webhook topic for `attributed_sessions/first` events. Occurs whenever an
  order with a "first" attributed session is attributed. Requires the
  `read_marketing_events` scope.
  """
  ATTRIBUTED_SESSIONS_FIRST
  """
  The webhook topic for `attributed_sessions/last` events. Occurs whenever an
  order with a "last" attributed session is attributed. Requires the
  `read_marketing_events` scope.
  """
  ATTRIBUTED_SESSIONS_LAST
  """
  The webhook topic for `order_transactions/create` events. Occurs when a order
  transaction is created or when it's status is updated. Only occurs for
  transactions with a status of success, failure or error. Requires at least one
  of the following scopes: read_orders, read_marketplace_orders.
  """
  ORDER_TRANSACTIONS_CREATE
  """
  The webhook topic for `orders/cancelled` events. Occurs whenever an order is
  cancelled. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders.
  """
  ORDERS_CANCELLED
  """
  The webhook topic for `orders/create` events. Occurs whenever an order is
  created. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders.
  """
  ORDERS_CREATE
  """
  The webhook topic for `orders/delete` events. Occurs whenever an order is deleted. Requires the `read_orders` scope.
  """
  ORDERS_DELETE
  """
  The webhook topic for `orders/edited` events. Occurs whenever an order is
  edited. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders.
  """
  ORDERS_EDITED
  """
  The webhook topic for `orders/fulfilled` events. Occurs whenever an order is
  fulfilled. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders.
  """
  ORDERS_FULFILLED
  """
  The webhook topic for `orders/paid` events. Occurs whenever an order is paid.
  Requires at least one of the following scopes: read_orders,
  read_marketplace_orders.
  """
  ORDERS_PAID
  """
  The webhook topic for `orders/partially_fulfilled` events. Occurs whenever an
  order is partially fulfilled. Requires at least one of the following scopes:
  read_orders, read_marketplace_orders.
  """
  ORDERS_PARTIALLY_FULFILLED
  """
  The webhook topic for `orders/updated` events. Occurs whenever an order is
  updated. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders.
  """
  ORDERS_UPDATED
  """
  The webhook topic for `fulfillment_orders/moved` events. Occurs whenever a
  fulfillment order is moved. Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_MOVED
  """
  The webhook topic for `fulfillment_orders/hold_released` events. Occurs
  whenever a fulfillment order hold is released. Requires at least one of the
  following scopes: read_merchant_managed_fulfillment_orders,
  read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_HOLD_RELEASED
  """
  The webhook topic for `fulfillment_orders/scheduled_fulfillment_order_ready`
  events. Occurs whenever a fulfillment order which was scheduled becomes due.
  Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_SCHEDULED_FULFILLMENT_ORDER_READY
  """
  The webhook topic for `fulfillment_orders/order_routing_complete` events.
  Occurs when an order has finished being routed and it's fulfillment orders
  assigned to a fulfillment service's location. Requires at least one of the
  following scopes: read_merchant_managed_fulfillment_orders,
  read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_ORDER_ROUTING_COMPLETE
  """
  The webhook topic for `fulfillment_orders/cancelled` events. Occurs when a
  fulfillment order is cancelled. Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_CANCELLED
  """
  The webhook topic for
  `fulfillment_orders/fulfillment_service_failed_to_complete` events. Occurs
  when a fulfillment service intends to close an in_progress fulfillment order.
  Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_FULFILLMENT_SERVICE_FAILED_TO_COMPLETE
  """
  The webhook topic for `fulfillment_orders/fulfillment_request_rejected`
  events. Occurs when a 3PL rejects a fulfillment request that was sent by a
  merchant. Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_REJECTED
  """
  The webhook topic for `fulfillment_orders/cancellation_request_submitted`
  events. Occurs when a merchant requests a fulfillment request to be cancelled
  after that request was approved by a 3PL. Requires at least one of the
  following scopes: read_merchant_managed_fulfillment_orders,
  read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_CANCELLATION_REQUEST_SUBMITTED
  """
  The webhook topic for `fulfillment_orders/cancellation_request_accepted`
  events. Occurs when a 3PL accepts a fulfillment cancellation request, received
  from a merchant. Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_CANCELLATION_REQUEST_ACCEPTED
  """
  The webhook topic for `fulfillment_orders/cancellation_request_rejected`
  events. Occurs when a 3PL rejects a fulfillment cancellation request, received
  from a merchant. Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_CANCELLATION_REQUEST_REJECTED
  """
  The webhook topic for `fulfillment_orders/fulfillment_request_submitted`
  events. Occurs when a merchant submits a fulfillment request to a 3PL.
  Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_SUBMITTED
  """
  The webhook topic for `fulfillment_orders/fulfillment_request_accepted`
  events. Occurs when a fulfillment service accepts a request to fulfill a
  fulfillment order. Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_FULFILLMENT_REQUEST_ACCEPTED
  """
  The webhook topic for
  `fulfillment_orders/line_items_prepared_for_local_delivery` events. Occurs
  whenever a fulfillment order's line items are prepared for local delivery.
  Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_LINE_ITEMS_PREPARED_FOR_LOCAL_DELIVERY
  """
  The webhook topic for `fulfillment_orders/placed_on_hold` events. Occurs when
  a fulfillment order is placed on hold. Requires at least one of the following
  scopes: read_merchant_managed_fulfillment_orders,
  read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_PLACED_ON_HOLD
  """
  The webhook topic for `product_listings/add` events. Occurs whenever an active
  product is listed on a channel. Requires the `read_product_listings` scope.
  """
  PRODUCT_LISTINGS_ADD
  """
  The webhook topic for `product_listings/remove` events. Occurs whenever a
  product listing is removed from the channel. Requires the
  `read_product_listings` scope.
  """
  PRODUCT_LISTINGS_REMOVE
  """
  The webhook topic for `product_listings/update` events. Occurs whenever a
  product publication is updated. Requires the `read_product_listings` scope.
  """
  PRODUCT_LISTINGS_UPDATE
  """
  The webhook topic for `scheduled_product_listings/add` events. Occurs whenever
  a product is scheduled to be published. Requires the `read_product_listings` scope.
  """
  SCHEDULED_PRODUCT_LISTINGS_ADD
  """
  The webhook topic for `scheduled_product_listings/update` events. Occurs
  whenever a product's scheduled availability date changes. Requires the
  `read_product_listings` scope.
  """
  SCHEDULED_PRODUCT_LISTINGS_UPDATE
  """
  The webhook topic for `scheduled_product_listings/remove` events. Occurs
  whenever a product is no longer scheduled to be published. Requires the
  `read_product_listings` scope.
  """
  SCHEDULED_PRODUCT_LISTINGS_REMOVE
  """
  The webhook topic for `product_publications/create` events. Occurs whenever a
  product publication for an active product is created, or whenever an existing
  product publication is published. Requires the `read_publications` scope.
  """
  PRODUCT_PUBLICATIONS_CREATE
  """
  The webhook topic for `product_publications/delete` events. Occurs whenever a
  product publication for an active product is removed, or whenever an existing
  product publication is unpublished. Requires the `read_publications` scope.
  """
  PRODUCT_PUBLICATIONS_DELETE
  """
  The webhook topic for `product_publications/update` events. Occurs whenever a
  product publication is updated. Requires the `read_publications` scope.
  """
  PRODUCT_PUBLICATIONS_UPDATE
  """
  The webhook topic for `products/create` events. Occurs whenever a product is created. Requires the `read_products` scope.
  """
  PRODUCTS_CREATE
  """
  The webhook topic for `products/delete` events. Occurs whenever a product is deleted. Requires the `read_products` scope.
  """
  PRODUCTS_DELETE
  """
  The webhook topic for `products/update` events. Occurs whenever a product is
  updated, or whenever a product is ordered, or whenever a variant is added,
  removed, or updated. Requires the `read_products` scope.
  """
  PRODUCTS_UPDATE
  """
  The webhook topic for `refunds/create` events. Occurs whenever a new refund is
  created without errors on an order, independent from the movement of money.
  Requires at least one of the following scopes: read_orders,
  read_marketplace_orders.
  """
  REFUNDS_CREATE
  """
  The webhook topic for `segments/create` events. Occurs whenever a segment is created. Requires the `read_customers` scope.
  """
  SEGMENTS_CREATE
  """
  The webhook topic for `segments/delete` events. Occurs whenever a segment is deleted. Requires the `read_customers` scope.
  """
  SEGMENTS_DELETE
  """
  The webhook topic for `segments/update` events. Occurs whenever a segment is updated. Requires the `read_customers` scope.
  """
  SEGMENTS_UPDATE
  """
  The webhook topic for `shipping_addresses/create` events. Occurs whenever a
  shipping address is created. Requires the `read_shipping` scope.
  """
  SHIPPING_ADDRESSES_CREATE
  """
  The webhook topic for `shipping_addresses/update` events. Occurs whenever a
  shipping address is updated. Requires the `read_shipping` scope.
  """
  SHIPPING_ADDRESSES_UPDATE
  """
  The webhook topic for `shop/update` events. Occurs whenever a shop is updated.
  """
  SHOP_UPDATE
  """
  The webhook topic for `tax_services/create` events. Occurs whenever a tax
  service is created. Requires the `read_taxes` scope.
  """
  TAX_SERVICES_CREATE
  """
  The webhook topic for `tax_services/update` events. Occurs whenver a tax
  service is updated. Requires the `read_taxes` scope.
  """
  TAX_SERVICES_UPDATE
  """
  The webhook topic for `themes/create` events. Occurs whenever a theme is
  created. Does not occur when theme files are created. Requires the
  `read_themes` scope.
  """
  THEMES_CREATE
  """
  The webhook topic for `themes/delete` events. Occurs whenever a theme is
  deleted. Does not occur when theme files are deleted. Requires the
  `read_themes` scope.
  """
  THEMES_DELETE
  """
  The webhook topic for `themes/publish` events. Occurs whenever a theme with
  the main or mobile (deprecated) role is published. Requires the `read_themes` scope.
  """
  THEMES_PUBLISH
  """
  The webhook topic for `themes/update` events. Occurs whenever a theme is
  updated. Does not occur when theme files are updated. Requires the
  `read_themes` scope.
  """
  THEMES_UPDATE
  """
  The webhook topic for `variants/in_stock` events. Occurs whenever a variant
  becomes in stock. Requires the `read_products` scope.
  """
  VARIANTS_IN_STOCK
  """
  The webhook topic for `variants/out_of_stock` events. Occurs whenever a
  variant becomes out of stock. Requires the `read_products` scope.
  """
  VARIANTS_OUT_OF_STOCK
  """
  The webhook topic for `inventory_levels/connect` events. Occurs whenever an
  inventory level is connected. Requires the `read_inventory` scope.
  """
  INVENTORY_LEVELS_CONNECT
  """
  The webhook topic for `inventory_levels/update` events. Occurs whenever an
  inventory level is updated. Requires the `read_inventory` scope.
  """
  INVENTORY_LEVELS_UPDATE
  """
  The webhook topic for `inventory_levels/disconnect` events. Occurs whenever an
  inventory level is disconnected. Requires the `read_inventory` scope.
  """
  INVENTORY_LEVELS_DISCONNECT
  """
  The webhook topic for `inventory_items/create` events. Occurs whenever an
  inventory item is created. Requires the `read_inventory` scope.
  """
  INVENTORY_ITEMS_CREATE
  """
  The webhook topic for `inventory_items/update` events. Occurs whenever an
  inventory item is updated. Requires the `read_inventory` scope.
  """
  INVENTORY_ITEMS_UPDATE
  """
  The webhook topic for `inventory_items/delete` events. Occurs whenever an
  inventory item is deleted. Requires the `read_inventory` scope.
  """
  INVENTORY_ITEMS_DELETE
  """
  The webhook topic for `locations/activate` events. Occurs whenever a
  deactivated location is re-activated. Requires the `read_locations` scope.
  """
  LOCATIONS_ACTIVATE
  """
  The webhook topic for `locations/deactivate` events. Occurs whenever a
  location is deactivated. Requires the `read_locations` scope.
  """
  LOCATIONS_DEACTIVATE
  """
  The webhook topic for `locations/create` events. Occurs whenever a location is
  created. Requires the `read_locations` scope.
  """
  LOCATIONS_CREATE
  """
  The webhook topic for `locations/update` events. Occurs whenever a location is
  updated. Requires the `read_locations` scope.
  """
  LOCATIONS_UPDATE
  """
  The webhook topic for `locations/delete` events. Occurs whenever a location is
  deleted. Requires the `read_locations` scope.
  """
  LOCATIONS_DELETE
  """
  The webhook topic for `tender_transactions/create` events. Occurs when a
  tender transaction is created. Requires the `read_orders` scope.
  """
  TENDER_TRANSACTIONS_CREATE
  """
  The webhook topic for `app_purchases_one_time/update` events. Occurs whenever a one-time app charge is updated.
  """
  APP_PURCHASES_ONE_TIME_UPDATE
  """
  The webhook topic for `app_subscriptions/approaching_capped_amount` events.
  Occurs when the balance used on an app subscription crosses 90% of the capped amount.
  """
  APP_SUBSCRIPTIONS_APPROACHING_CAPPED_AMOUNT
  """
  The webhook topic for `app_subscriptions/update` events. Occurs whenever an app subscription is updated.
  """
  APP_SUBSCRIPTIONS_UPDATE
  """
  The webhook topic for `locales/create` events. Occurs whenever a shop locale is created Requires the `read_locales` scope.
  """
  LOCALES_CREATE
  """
  The webhook topic for `locales/update` events. Occurs whenever a shop locale
  is updated, such as published or unpublished Requires the `read_locales` scope.
  """
  LOCALES_UPDATE
  """
  The webhook topic for `domains/create` events. Occurs whenever a domain is created.
  """
  DOMAINS_CREATE
  """
  The webhook topic for `domains/update` events. Occurs whenever a domain is updated.
  """
  DOMAINS_UPDATE
  """
  The webhook topic for `domains/destroy` events. Occurs whenever a domain is destroyed.
  """
  DOMAINS_DESTROY
  """
  The webhook topic for `subscription_contracts/create` events. Occurs whenever
  a subscription contract is created. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_CONTRACTS_CREATE
  """
  The webhook topic for `subscription_contracts/update` events. Occurs whenever
  a subscription contract is updated. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_CONTRACTS_UPDATE
  """
  The webhook topic for `subscription_billing_cycle_edits/create` events. Occurs
  whenever a subscription contract billing cycle is edited. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_CYCLE_EDITS_CREATE
  """
  The webhook topic for `subscription_billing_cycle_edits/update` events. Occurs
  whenever a subscription contract billing cycle edit is updated. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_CYCLE_EDITS_UPDATE
  """
  The webhook topic for `subscription_billing_cycle_edits/delete` events. Occurs
  whenever a subscription contract billing cycle edit is deleted. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_CYCLE_EDITS_DELETE
  """
  The webhook topic for `profiles/create` events. Occurs whenever a delivery
  profile is created Requires the `read_shipping` scope.
  """
  PROFILES_CREATE
  """
  The webhook topic for `profiles/update` events. Occurs whenever a delivery
  profile is updated Requires the `read_shipping` scope.
  """
  PROFILES_UPDATE
  """
  The webhook topic for `profiles/delete` events. Occurs whenever a delivery
  profile is deleted Requires the `read_shipping` scope.
  """
  PROFILES_DELETE
  """
  The webhook topic for `subscription_billing_attempts/success` events. Occurs
  whenever a subscription billing attempt succeeds. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_ATTEMPTS_SUCCESS
  """
  The webhook topic for `subscription_billing_attempts/failure` events. Occurs
  whenever a subscription billing attempt fails. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_ATTEMPTS_FAILURE
  """
  The webhook topic for `subscription_billing_attempts/challenged` events.
  Occurs when the financial instutition challenges the subscripttion billing
  attempt charge as per 3D Secure. Requires the
  `read_own_subscription_contracts` scope.
  """
  SUBSCRIPTION_BILLING_ATTEMPTS_CHALLENGED
  """
  The webhook topic for `returns/cancel` events. Occurs whenever a return is
  canceled. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders, read_returns, read_marketplace_returns.
  """
  RETURNS_CANCEL
  """
  The webhook topic for `returns/close` events. Occurs whenever a return is
  closed. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders, read_returns, read_marketplace_returns.
  """
  RETURNS_CLOSE
  """
  The webhook topic for `returns/reopen` events. Occurs whenever a closed return
  is reopened. Requires at least one of the following scopes: read_orders,
  read_marketplace_orders, read_returns, read_marketplace_returns.
  """
  RETURNS_REOPEN
  """
  The webhook topic for `returns/request` events. Occurs whenever a return is
  requested. This means `Return.status` is `REQUESTED`. Requires at least one of
  the following scopes: read_returns, read_marketplace_returns.
  """
  RETURNS_REQUEST
  """
  The webhook topic for `returns/approve` events. Occurs whenever a return is
  approved. This means `Return.status` is `OPEN`. Requires at least one of the
  following scopes: read_returns, read_marketplace_returns.
  """
  RETURNS_APPROVE
  """
  The webhook topic for `returns/decline` events. Occurs whenever a return is
  declined. This means `Return.status` is `DECLINED`. Requires at least one of
  the following scopes: read_returns, read_marketplace_returns.
  """
  RETURNS_DECLINE
  """
  The webhook topic for `reverse_deliveries/attach_deliverable` events. Occurs
  whenever a deliverable is attached to a reverse delivery.
  This occurs when a reverse delivery is created or updated with delivery metadata.
  Metadata includes the delivery method, label, and tracking information associated with a reverse delivery.
   Requires at least one of the following scopes: read_returns, read_marketplace_returns.
  """
  REVERSE_DELIVERIES_ATTACH_DELIVERABLE
  """
  The webhook topic for `reverse_fulfillment_orders/dispose` events. Occurs
  whenever a disposition is made on a reverse fulfillment order.
  This includes dispositions made on reverse deliveries that are associated with the reverse fulfillment order.
   Requires at least one of the following scopes: read_returns, read_marketplace_returns.
  """
  REVERSE_FULFILLMENT_ORDERS_DISPOSE
  """
  The webhook topic for `payment_terms/create` events. Occurs whenever payment
  terms are created. Requires the `read_payment_terms` scope.
  """
  PAYMENT_TERMS_CREATE
  """
  The webhook topic for `payment_terms/delete` events. Occurs whenever payment
  terms are deleted. Requires the `read_payment_terms` scope.
  """
  PAYMENT_TERMS_DELETE
  """
  The webhook topic for `payment_terms/update` events. Occurs whenever payment
  terms are updated. Requires the `read_payment_terms` scope.
  """
  PAYMENT_TERMS_UPDATE
  """
  The webhook topic for `payment_schedules/due` events. Occurs whenever payment
  schedules are due. Requires the `read_payment_terms` scope.
  """
  PAYMENT_SCHEDULES_DUE
  """
  The webhook topic for `selling_plan_groups/create` events. Notifies when a
  SellingPlanGroup is created. Requires the `read_products` scope.
  """
  SELLING_PLAN_GROUPS_CREATE
  """
  The webhook topic for `selling_plan_groups/update` events. Notifies when a
  SellingPlanGroup is updated. Requires the `read_products` scope.
  """
  SELLING_PLAN_GROUPS_UPDATE
  """
  The webhook topic for `selling_plan_groups/delete` events. Notifies when a
  SellingPlanGroup is deleted. Requires the `read_products` scope.
  """
  SELLING_PLAN_GROUPS_DELETE
  """
  The webhook topic for `bulk_operations/finish` events. Notifies when a Bulk Operation finishes.
  """
  BULK_OPERATIONS_FINISH
  """
  The webhook topic for `markets/create` events. Occurs when a new market is created. Requires the `read_markets` scope.
  """
  MARKETS_CREATE
  """
  The webhook topic for `markets/update` events. Occurs when a market is updated. Requires the `read_markets` scope.
  """
  MARKETS_UPDATE
  """
  The webhook topic for `markets/delete` events. Occurs when a market is deleted. Requires the `read_markets` scope.
  """
  MARKETS_DELETE
  """
  The webhook topic for `fulfillment_orders/rescheduled` events. Triggers when a
  fulfillment order is rescheduled Requires at least one of the following
  scopes: read_merchant_managed_fulfillment_orders,
  read_assigned_fulfillment_orders, read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_RESCHEDULED
  """
  The webhook topic for `audit_events/admin_api_activity` events. Triggers for
  each auditable Admin API request. This topic is limited to one active
  subscription per Plus store and requires the use of Google Cloud Pub/Sub or
  AWS EventBridge. Requires the `read_audit_events` scope.
  """
  AUDIT_EVENTS_ADMIN_API_ACTIVITY
  """
  The webhook topic for `fulfillment_orders/line_items_prepared_for_pickup`
  events. Triggers when one or more of the line items for a fulfillment order
  are prepared for pickup Requires at least one of the following scopes:
  read_merchant_managed_fulfillment_orders, read_assigned_fulfillment_orders,
  read_third_party_fulfillment_orders.
  """
  FULFILLMENT_ORDERS_LINE_ITEMS_PREPARED_FOR_PICKUP
}

"""Return type for `webhookSubscriptionUpdate` mutation."""
type Shopify_WebhookSubscriptionUpdatePayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_UserError!]!
  """The webhook subscription that was updated."""
  webhookSubscription: Shopify_WebhookSubscription
}

"""A web pixel settings."""
type Shopify_WebPixel implements Shopify_Node {
  """A globally-unique identifier."""
  id: ID!
  """The settings JSON object for the web pixel."""
  settings: JSON!
}

"""Return type for `webPixelCreate` mutation."""
type Shopify_WebPixelCreatePayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ErrorsWebPixelUserError!]!
  """The created web pixel settings."""
  webPixel: Shopify_WebPixel
}

"""Return type for `webPixelDelete` mutation."""
type Shopify_WebPixelDeletePayload {
  """The ID of the web pixel settings that was deleted."""
  deletedWebPixelId: ID
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ErrorsWebPixelUserError!]!
}

"""The input fields to use to update a web pixel."""
input Shopify_WebPixelInput {
  """The web pixel settings in JSON format."""
  settings: JSON!
}

"""Return type for `webPixelUpdate` mutation."""
type Shopify_WebPixelUpdatePayload {
  """The list of errors that occurred from executing the mutation."""
  userErrors: [Shopify_ErrorsWebPixelUserError!]!
  """The updated web pixel settings."""
  webPixel: Shopify_WebPixel
}

"""A weight, which includes a numeric value and a unit of measurement."""
type Shopify_Weight {
  """The unit of measurement for `value`."""
  unit: Shopify_WeightUnit!
  """The weight value using the unit system specified with `unit`."""
  value: Float!
}

"""Specifies the weight unit and value inputs."""
input Shopify_WeightInput {
  """The weight value using the unit system specified with `weight_unit`."""
  value: Float!
  """Unit of measurement for `value`."""
  unit: Shopify_WeightUnit!
}

"""Units of measurement for weight."""
enum Shopify_WeightUnit {
  """1 kilogram equals 1000 grams."""
  KILOGRAMS
  """Metric system unit of mass."""
  GRAMS
  """1 pound equals 16 ounces."""
  POUNDS
  """Imperial system unit of mass."""
  OUNCES
}

type Shopify_SpecT0CredentialsT0 {
  token: String
  shop_name: String
}

type Shopify_SpecT0 {
  credentials: Shopify_SpecT0CredentialsT0
}

input Shopify_CredentialsT0 {
  token: String
  shop_name: String
}

type Shopify_HeaderConfig {
  headers: JSON
}

type Shopify_CheckConfig {
  status: Boolean
  error: String
}

type Shopify_SpecConfig {
  spec: JSON
}

type Query {
  """Returns an abandonment by ID."""
  abandonment(
    """The ID of the Abandonment to return."""
    id: ID!
  ): Shopify_Abandonment
  """Returns an Abandonment by the Abandoned Checkout ID."""
  abandonmentByAbandonedCheckoutId(
    """The ID of the Abandoned Checkout ID to query by."""
    abandonedCheckoutId: ID!
  ): Shopify_Abandonment
  """Lookup an App by ID or return the currently authenticated App."""
  app(
    """The ID to lookup the App by."""
    id: ID
  ): Shopify_App
  """
  Fetches app by handle.
  Returns null if the app doesn't exist.
  """
  appByHandle(
    """Handle of the App."""
    handle: String!
  ): Shopify_App
  """
  Fetches an app by its client ID.
  Returns null if the app doesn't exist.
  """
  appByKey(
    """Client ID of the app."""
    apiKey: String!
  ): Shopify_App
  """An app discount type."""
  appDiscountType(
    """The ID for the function providing the app discount type."""
    functionId: String!
  ): Shopify_AppDiscountType
  """A list of app discount types installed by apps."""
  appDiscountTypes: [Shopify_AppDiscountType!]!
  """
  Lookup an AppInstallation by ID or return the AppInstallation for the currently authenticated App.
  """
  appInstallation(
    """ID used to lookup AppInstallation."""
    id: ID
  ): Shopify_AppInstallation
  """List of app installations."""
  appInstallations(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_AppInstallationSortKeys = INSTALLED_AT
    """The category of app installations to fetch."""
    category: Shopify_AppInstallationCategory
    """The privacy level of app installations to fetch."""
    privacy: Shopify_AppInstallationPrivacy = PUBLIC
  ): Shopify_AppInstallationConnection!
  """Returns an automatic discount resource by ID."""
  automaticDiscount(
    """The ID of the DiscountAutomatic to return."""
    id: ID!
  ): Shopify_DiscountAutomatic @deprecated(reason: "Use `automaticDiscountNode` instead.")
  """Returns an automatic discount resource by ID."""
  automaticDiscountNode(
    """The ID of the DiscountAutomaticNode to return."""
    id: ID!
  ): Shopify_DiscountAutomaticNode
  """List of automatic discounts."""
  automaticDiscountNodes(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_AutomaticDiscountSortKeys = CREATED_AT
    """
    Supported filter parameters:
     - `status`
     - `type`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_DiscountAutomaticNodeConnection!
  """List of the shop's automatic discount saved searches."""
  automaticDiscountSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection!
  """List of automatic discounts."""
  automaticDiscounts(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_AutomaticDiscountSortKeys = CREATED_AT
    """
    Supported filter parameters:
     - `status`
     - `type`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_DiscountAutomaticConnection! @deprecated(reason: "Use `automaticDiscountNodes` instead.")
  """
  Returns a list of activated carrier services and associated shop locations that support them.
  """
  availableCarrierServices: [Shopify_DeliveryCarrierServiceAndLocations!]!
  """A list of available locales."""
  availableLocales: [Locale!]!
  """Returns a `DeliveryCarrierService` object by ID."""
  carrierService(
    """The ID of the DeliveryCarrierService to return."""
    id: ID!
  ): Shopify_DeliveryCarrierService
  """Lookup a channel by ID."""
  channel(
    """The ID of the Channel to return."""
    id: ID!
  ): Shopify_Channel @deprecated(reason: "Use `publication` instead.")
  """List of the active sales channels."""
  channels(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ChannelConnection! @deprecated(reason: "Use `publications` instead.")
  """A checkout profile on a shop."""
  checkoutProfile(
    """The ID of the checkout profile."""
    id: ID!
  ): Shopify_CheckoutProfile
  """List of checkout profiles on a shop."""
  checkoutProfiles(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_CheckoutProfileSortKeys = UPDATED_AT
    """
    Supported filter parameters:
     - `is_published`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_CheckoutProfileConnection!
  """Returns a code discount resource by ID."""
  codeDiscountNode(
    """The ID of the DiscountCodeNode to return."""
    id: ID!
  ): Shopify_DiscountCodeNode
  """Returns a code discount identified by its discount code."""
  codeDiscountNodeByCode(
    """The case-insensitive code of the `DiscountCodeNode` to return."""
    code: String!
  ): Shopify_DiscountCodeNode
  """
  List of code discounts. Special fields for query params:
   * status: active, expired, scheduled
   * discount_type: bogo, fixed_amount, free_shipping, percentage.
  """
  codeDiscountNodes(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_CodeDiscountSortKeys = CREATED_AT
    """
    Supported filter parameters:
     - `combines_with`
     - `created_at`
     - `discount_type`
     - `ends_at`
     - `starts_at`
     - `status`
     - `times_used`
     - `title`
     - `type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_DiscountCodeNodeConnection!
  """List of the shop's code discount saved searches."""
  codeDiscountSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection!
  """Returns a Collection resource by ID."""
  collection(
    """The ID of the Collection to return."""
    id: ID!
  ): Shopify_Collection
  """Return a collection by its handle."""
  collectionByHandle(
    """The handle of the collection."""
    handle: String!
  ): Shopify_Collection
  """Lists all rules that can be used to create smart collections."""
  collectionRulesConditions: [Shopify_CollectionRuleConditions!]!
  """Returns a list of the shop's collection saved searches."""
  collectionSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection!
  """Returns a list of collections."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_CollectionSortKeys = ID
    """
    Supported filter parameters:
     - `collection_type`
     - `publishable_status`
     - `published_status`
     - `title`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_CollectionConnection!
  """Returns the list of companies in the shop."""
  companies(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_CompanySortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `external_id`
     - `name`
     - `since_date`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_CompanyConnection!
  """Returns a `Company` object by ID."""
  company(
    """The ID of the Company to return."""
    id: ID!
  ): Shopify_Company
  """Returns a `CompanyContact` object by ID."""
  companyContact(
    """The ID of the CompanyContact to return."""
    id: ID!
  ): Shopify_CompanyContact
  """Returns a `CompanyContactRole` object by ID."""
  companyContactRole(
    """The ID of the CompanyContactRole to return."""
    id: ID!
  ): Shopify_CompanyContactRole
  """The number of companies for a shop."""
  companyCount: Int!
  """Returns a `CompanyLocation` object by ID."""
  companyLocation(
    """The ID of the CompanyLocation to return."""
    id: ID!
  ): Shopify_CompanyLocation
  """Returns the list of company locations in the shop."""
  companyLocations(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_CompanyLocationSortKeys = ID
    """
    Supported filter parameters:
     - `company_id`
     - `created_at`
     - `external_id`
     - `ids`
     - `name`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_CompanyLocationConnection!
  """Return the AppInstallation for the currently authenticated App."""
  currentAppInstallation: Shopify_AppInstallation!
  """
  Returns the current app's most recent BulkOperation. Apps can run one bulk
  query and one bulk mutation operation at a time, by shop.
  """
  currentBulkOperation(
    """The current bulk operation's type."""
    type: Shopify_BulkOperationType = QUERY
  ): Shopify_BulkOperation
  """Returns a Customer resource by ID."""
  customer(
    """The ID of the Customer to return."""
    id: ID!
  ): Shopify_Customer
  """Returns a CustomerPaymentMethod resource by its ID."""
  customerPaymentMethod(
    """The ID of the CustomerPaymentMethod to return."""
    id: ID!
    """Whether to show the customer's revoked payment method."""
    showRevoked: Boolean = false
  ): Shopify_CustomerPaymentMethod
  """
  The list of members, such as customers, that's associated with an individual segment.
  """
  customerSegmentMembers(
    """The ID of the segment."""
    segmentId: ID
    """The query that's used to filter the members."""
    query: String
    """The ID of the segment members query."""
    queryId: ID
    """
    The timezone that's used to interpret relative date arguments. The timezone
    defaults to UTC if the timezone isn't provided.
    """
    timezone: String
    """
    Reverse the order of the list. The sorting behaviour defaults to ascending order.
    """
    reverse: Boolean = false
    """Sort the list by a given key."""
    sortKey: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
  ): Shopify_CustomerSegmentMemberConnection!
  """Returns a segment members query resource by ID."""
  customerSegmentMembersQuery(
    """The ID of the CustomerSegmentMembersQuery to return."""
    id: ID!
  ): Shopify_CustomerSegmentMembersQuery
  """Whether a member, which is a customer, belongs to a segment."""
  customerSegmentMembership(
    """The segments to evaluate for the given customer."""
    segmentIds: [ID!]!
    """The ID of the customer that has the membership."""
    customerId: ID!
  ): Shopify_SegmentMembershipResponse!
  """List of customers."""
  customers(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_CustomerSortKeys = ID
    """
    Supported filter parameters:
     - `accepts_marketing`
     - `country`
     - `customer_date`
     - `email`
     - `last_abandoned_order_date`
     - `order_date`
     - `orders_count`
     - `phone`
     - `state`
     - `tag`
     - `tag_not`
     - `total_spent`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_CustomerConnection!
  """The paginated list of deletion events."""
  deletionEvents(
    """List of subject types to filter by."""
    subjectTypes: [Shopify_DeletionEventSubjectType!]
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_DeletionEventSortKeys = ID
    """
    Supported filter parameters:
     - `occurred_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_DeletionEventConnection!
  """Returns a Delivery Profile resource by ID."""
  deliveryProfile(
    """The ID of the DeliveryProfile to return."""
    id: ID!
  ): Shopify_DeliveryProfile
  """Returns a list of saved delivery profiles."""
  deliveryProfiles(
    """
    If `true`, returns only delivery profiles that were created by the merchant.
    """
    merchantOwnedOnly: Boolean
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_DeliveryProfileConnection!
  """Returns the shop-wide shipping settings."""
  deliverySettings: Shopify_DeliverySetting
  """The total number of discount codes for the shop."""
  discountCodeCount(
    """
    Supported filter parameters:
     * times_used.
    """
    query: String
  ): Int!
  """Returns a discount resource by ID."""
  discountNode(
    """The ID of the DiscountNode to return."""
    id: ID!
  ): Shopify_DiscountNode
  """List of discounts."""
  discountNodes(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_DiscountSortKeys = CREATED_AT
    """
    Supported filter parameters:
     - `combines_with`
       - Acceptable Values:
         - `PRODUCT_DISCOUNTS`
         - `ORDER_DISCOUNTS`
         - `SHIPPING_DISCOUNTS`
     - `discount_class`
       - Acceptable Values:
         - `PRODUCT`
         - `ORDER`
         - `SHIPPING`
     - `discount_type`
     - `method`
     - `starts_at`
     - `status`
     - `times_used`
     - `title`
     - `type`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_DiscountNodeConnection!
  """Returns a bulk code creation resource by ID."""
  discountRedeemCodeBulkCreation(
    """The ID of the DiscountRedeemCodeBulkCreation to return."""
    id: ID!
  ): Shopify_DiscountRedeemCodeBulkCreation
  """List of the shop's redeemed discount code saved searches."""
  discountRedeemCodeSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_DiscountCodeSortKeys = ID
    """
    Supported filter parameters:
     - `times_used`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_SavedSearchConnection!
  """Returns dispute details based on ID."""
  dispute(
    """The ID of the ShopifyPaymentsDispute to return."""
    id: ID!
  ): Shopify_ShopifyPaymentsDispute
  """Returns dispute evidence details based on ID."""
  disputeEvidence(
    """The ID of the ShopifyPaymentsDisputeEvidence to return."""
    id: ID!
  ): Shopify_ShopifyPaymentsDisputeEvidence
  """Lookup a Domain by ID."""
  domain(
    """The ID of the Domain to return."""
    id: ID!
  ): Shopify_Domain
  """Returns a DraftOrder resource by ID."""
  draftOrder(
    """The ID of the DraftOrder to return."""
    id: ID!
  ): Shopify_DraftOrder
  """List of the shop's draft order saved searches."""
  draftOrderSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection!
  """Returns a DraftOrderTag resource by ID."""
  draftOrderTag(
    """The ID of the DraftOrderTag to return."""
    id: ID!
  ): Shopify_DraftOrderTag
  """List of saved draft orders."""
  draftOrders(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_DraftOrderSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `customer_id`
     - `source`
     - `status`
     - `tag`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_DraftOrderConnection!
  """A list of the shop's file saved searches."""
  fileSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection!
  """Returns a paginated list of files that have been uploaded to Shopify."""
  files(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_FileSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `filename`
     - `media_type`
     - `original_upload_size`
     - `status`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_FileConnection!
  """Returns a Fulfillment resource by ID."""
  fulfillment(
    """The ID of the Fulfillment to return."""
    id: ID!
  ): Shopify_Fulfillment
  """Returns a Fulfillment order resource by ID."""
  fulfillmentOrder(
    """The ID of the FulfillmentOrder to return."""
    id: ID!
  ): Shopify_FulfillmentOrder
  """
  The paginated list of merchant-managed and third-party fulfillment orders.
  """
  fulfillmentOrders(
    """Whether to include closed fulfillment orders."""
    includeClosed: Boolean = false
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_FulfillmentOrderSortKeys = ID
    """
    Supported filter parameters:
     - `assigned_location_id`
     - `status`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_FulfillmentOrderConnection!
  """Returns a FulfillmentService resource by ID."""
  fulfillmentService(
    """The ID of the FulfillmentService to return."""
    id: ID!
  ): Shopify_FulfillmentService
  """Returns a gift card resource by ID."""
  giftCard(
    """The ID of the GiftCard to return."""
    id: ID!
  ): Shopify_GiftCard
  """Returns a list of gift cards."""
  giftCards(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_GiftCardSortKeys = ID
    """
    Supported filter parameters:
     - `balance_status`
     - `created_at`
     - `expires_on`
     - `initial_value`
     - `source`
     - `status`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_GiftCardConnection!
  """The total number of gift cards issued for the shop."""
  giftCardsCount(
    """Whether to count enabled or disabled or all gift cards."""
    enabled: Boolean
  ): Shopify_UnsignedInt64!
  """Returns an `InventoryItem` object by ID."""
  inventoryItem(
    """The ID of the InventoryItem to return."""
    id: ID!
  ): Shopify_InventoryItem
  """Returns a list of inventory items."""
  inventoryItems(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """
    Supported filter parameters:
     - `created_at`
     - `id`
     - `sku`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_InventoryItemConnection!
  """Returns an `InventoryLevel` object by ID."""
  inventoryLevel(
    """The ID of the InventoryLevel to return."""
    id: ID!
  ): Shopify_InventoryLevel
  """General inventory properties for the shop."""
  inventoryProperties: Shopify_InventoryProperties!
  """
  Returns a Job resource by ID. Used to check the status of internal jobs and any applicable changes.
  """
  job(
    """ID of the job to query."""
    id: ID!
  ): Shopify_Job
  """Returns an inventory Location resource by ID."""
  location(
    """
    The ID of the location to return. If no ID is provided, the primary location of the Shop is returned.
    """
    id: ID
  ): Shopify_Location
  """Returns a list of active inventory locations."""
  locations(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_LocationSortKeys = NAME
    """
    Supported filter parameters:
     - `active`
     - `address1`
     - `address2`
     - `city`
     - `country`
     - `legacy`
     - `name`
     - `province`
     - `zip`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """If true, also include the legacy locations of fulfillment services."""
    includeLegacy: Boolean = false
    """If true, also include the locations that are deactivated."""
    includeInactive: Boolean = false
  ): Shopify_LocationConnection!
  """
  Returns a list of all origin locations available for a delivery profile.
  """
  locationsAvailableForDeliveryProfiles: [Shopify_Location!] @deprecated(reason: "Use `locationsAvailableForDeliveryProfilesConnection` instead.")
  """
  Returns a list of all origin locations available for a delivery profile.
  """
  locationsAvailableForDeliveryProfilesConnection(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_LocationConnection!
  """Returns a list of fulfillment orders that are on hold."""
  manualHoldsFulfillmentOrders(
    """
    The query conditions used to filter fulfillment orders. Only fulfillment
    orders corresponding to orders matching the query will be counted.
    Supported filter parameters:
     - `order_financial_status`
     - `order_risk_level`
     - `shipping_address_coordinates_validated`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_FulfillmentOrderConnection!
  """Returns a market resource by ID."""
  market(
    """The ID of the Market to return."""
    id: ID!
  ): Shopify_Market
  """
  Returns the applicable market for a customer based on where they are in the world.
  """
  marketByGeography(
    """The code for the country where the customer is."""
    countryCode: CountryCode!
  ): Shopify_Market
  """A resource that can have localized values for different markets."""
  marketLocalizableResource(
    """Find a market localizable resource by ID."""
    resourceId: ID!
  ): Shopify_MarketLocalizableResource
  """Resources that can have localized values for different markets."""
  marketLocalizableResources(
    """Return only resources of a type."""
    resourceType: Shopify_MarketLocalizableResourceType!
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MarketLocalizableResourceConnection!
  """Resources that can have localized values for different markets."""
  marketLocalizableResourcesByIds(
    """Return only resources for given IDs."""
    resourceIds: [ID!]!
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MarketLocalizableResourceConnection!
  """A list of marketing activities associated with the marketing app."""
  marketingActivities(
    """The list of marketing activity IDs to filter by."""
    marketingActivityIds: [ID!] = []
    """
    The list of remote IDs associated with marketing activities to filter by.
    """
    remoteIds: [String!] = []
    """The UTM parameters associated with marketing activities to filter by."""
    utm: Shopify_UTMInput
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_MarketingActivitySortKeys = CREATED_AT
    """
    Supported filter parameters:
     - `app_id`
     - `app_name`
     - `created_at`
     - `marketing_campaign_id`
     - `scheduled_to_end_at`
     - `scheduled_to_start_at`
     - `tactic`
     - `title`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_MarketingActivityConnection!
  """Returns a MarketingActivity resource by ID."""
  marketingActivity(
    """The ID of the MarketingActivity to return."""
    id: ID!
  ): Shopify_MarketingActivity
  """Returns a MarketingEvent resource by ID."""
  marketingEvent(
    """The ID of the MarketingEvent to return."""
    id: ID!
  ): Shopify_MarketingEvent
  """A list of marketing events associated with the marketing app."""
  marketingEvents(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_MarketingEventSortKeys = ID
    """
    Supported filter parameters:
     - `app_id`
     - `description`
     - `started_at`
     - `type`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MarketingEventConnection!
  """The markets configured for the shop."""
  markets(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MarketConnection!
  """Returns a metafield by ID."""
  metafield(
    """The ID of the Metafield to return."""
    id: ID!
  ): Shopify_Metafield
  """Returns a metafield definition by ID."""
  metafieldDefinition(
    """The ID of the MetafieldDefinition to return."""
    id: ID!
  ): Shopify_MetafieldDefinition
  """
  Each metafield definition has a type, which defines the type of information that it can store.
  This type is enforced across every instance of the resource that owns the metafield definition.
  
  Refer to the [list of supported metafield types](https://shopify.dev/apps/metafields/types).
  """
  metafieldDefinitionTypes: [Shopify_MetafieldDefinitionType!]!
  """List of metafield definitions."""
  metafieldDefinitions(
    """Filter metafield definition by key."""
    key: String
    """Filter metafield definition by namespace."""
    namespace: String
    """Filter the metafield definition by the specific owner type."""
    ownerType: Shopify_MetafieldOwnerType!
    """Filter the metafield definition by the pinned status."""
    pinnedStatus: Shopify_MetafieldDefinitionPinnedStatus = ANY
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_MetafieldDefinitionSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `key`
     - `namespace`
     - `owner_type`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetafieldDefinitionConnection!
  """List of the `MetafieldStorefrontVisibility` records."""
  metafieldStorefrontVisibilities(
    """Filter the visible metafields by namespace."""
    namespace: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetafieldStorefrontVisibilityConnection!
  """
  Returns a `MetafieldStorefrontVisibility` record by ID. A `MetafieldStorefrontVisibility` record lists the
  metafields to make visible in the Storefront API.
  """
  metafieldStorefrontVisibility(
    """The ID of the MetafieldStorefrontVisibility to return."""
    id: ID!
  ): Shopify_MetafieldStorefrontVisibility
  """Retrieves a metaobject by ID."""
  metaobject(
    """The ID of the metaobject to return."""
    id: ID!
  ): Shopify_Metaobject
  """Retrieves a metaobject by handle."""
  metaobjectByHandle(
    """The identifier of the metaobject to return."""
    handle: Shopify_MetaobjectHandleInput!
  ): Shopify_Metaobject
  """Retrieves a metaobject definition by ID."""
  metaobjectDefinition(
    """The ID of the metaobject to return."""
    id: ID!
  ): Shopify_MetaobjectDefinition
  """Finds a metaobject definition by type."""
  metaobjectDefinitionByType(
    """The type of the metaobject definition to return."""
    type: String!
  ): Shopify_MetaobjectDefinition
  """All metaobject definitions."""
  metaobjectDefinitions(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_MetaobjectDefinitionConnection!
  """All metaobjects for the shop."""
  metaobjects(
    """The type of the metaobjects to query."""
    type: String!
    """
    The key of a field to sort with. Supports "id", "type", "updated_at", and "display_name".
    """
    sortKey: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """
    Supported filter parameters:
     - `display_name`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_MetaobjectConnection!
  """
  Returns a specific node (any object that implements the
  [Node](https://shopify.dev/api/admin-graphql/latest/interfaces/Node)
  interface) by ID, in accordance with the
  [Relay specification](https://relay.dev/docs/guides/graphql-server-specification/#object-identification).
  This field is commonly used for refetching an object.
  """
  node(
    """The ID of the Node to return."""
    id: ID!
  ): Shopify_Node
  """
  Returns the list of nodes (any objects that implement the
  [Node](https://shopify.dev/api/admin-graphql/latest/interfaces/Node)
  interface) with the given IDs, in accordance with the
  [Relay specification](https://relay.dev/docs/guides/graphql-server-specification/#object-identification).
  """
  nodes(
    """The IDs of the Nodes to return."""
    ids: [ID!]!
  ): [Shopify_Node]!
  """Returns an Order resource by ID."""
  order(
    """The ID of the Order to return."""
    id: ID!
  ): Shopify_Order
  """
  Returns a payment status by payment reference ID. Used to check the status of a deferred payment.
  """
  orderPaymentStatus(
    """Unique identifier returned by orderCreatePayment."""
    paymentReferenceId: String!
    """ID of the order for which the payment was initiated."""
    orderId: ID!
  ): Shopify_OrderPaymentStatus
  """List of the shop's order saved searches."""
  orderSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection!
  """Returns a list of orders placed."""
  orders(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_OrderSortKeys = PROCESSED_AT
    """
    Supported filter parameters:
     - `cart_token`
     - `channel`
     - `channel_id`
     - `chargeback_status`
     - `checkout_token`
     - `created_at`
     - `credit_card_last4`
     - `customer_id`
     - `delivery_method`
     - `discount_code`
     - `earliest_fulfill_by`
     - `email`
     - `financial_status`
     - `fraud_protection_level`
     - `fulfillment_location_id`
     - `fulfillment_status`
     - `gateway`
     - `location_id`
     - `name`
     - `payment_id`
     - `payment_provider_id`
     - `processed_at`
     - `reference_location_id`
     - `return_status`
     - `risk_level`
     - `sales_channel`
     - `sku`
     - `source_identifier`
     - `source_name`
     - `status`
     - `tag`
     - `tag_not`
     - `test`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_OrderConnection!
  """The list of payment terms templates eligible for all shops and users."""
  paymentTermsTemplates(
    """The payment terms type to filter the payment terms templates list."""
    paymentTermsType: Shopify_PaymentTermsType
  ): [Shopify_PaymentTermsTemplate!]!
  """Returns a price list resource by ID."""
  priceList(
    """The ID of the `PriceList` to return."""
    id: ID!
  ): Shopify_PriceList
  """All price lists for a shop."""
  priceLists(
    """The context that the price list applies to."""
    matchRule: Shopify_PriceListContext
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_PriceListSortKeys = ID
  ): Shopify_PriceListConnection!
  """
  Returns a code price rule resource by ID.
  
  We recommend using the [`codeDiscountNode`
  query](https://shopify.dev/api/admin-graphql/latest/queries/codeDiscountNode)
  instead, which will replace this query in the future.
  
  More information can be found on the [Manage existing discounts](https://shopify.dev/apps/discounts/existing) page.
  """
  priceRule(
    """The ID of the PriceRule to return."""
    id: ID!
  ): Shopify_PriceRule
  """List of the shop's price rule saved searches."""
  priceRuleSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection!
  """
  Returns a list of code price rule resources that have at least one associated discount code.
  
  We recommend using the [`codeDiscountNodes`
  query](https://shopify.dev/api/admin-graphql/latest/queries/codeDiscountNodes)
  instead, which will replace this query in the future.
  
  More information can be found on the [Manage existing discounts](https://shopify.dev/apps/discounts/existing) page.
  """
  priceRules(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_PriceRuleSortKeys = ID
    """
    Supported filter parameters:
     - `combines_with`
     - `created_at`
     - `discount_type`
     - `ends_at`
     - `starts_at`
     - `status`
     - `times_used`
     - `title`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_PriceRuleConnection!
  """The primary market of the shop."""
  primaryMarket: Shopify_Market!
  """
  Returns a private metafield by ID.
  Private metafields are accessible only by the application that created them.
  """
  privateMetafield(
    """The ID of the PrivateMetafield to return."""
    id: ID!
  ): Shopify_PrivateMetafield
  """Returns a list of private metafields associated to a resource."""
  privateMetafields(
    """Filter the private metafields by namespace."""
    namespace: String
    """
    Retrieve the private metafields of a certain resource, specified by the resource ID.
    """
    owner: ID!
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PrivateMetafieldConnection!
  """Returns a Product resource by ID."""
  product(
    """The ID of the Product to return."""
    id: ID!
  ): Shopify_Product
  """Return a product by its handle."""
  productByHandle(
    """
    A unique string that identifies the product. Handles are automatically
    generated based on the product's title, and are always lowercase. Whitespace
    and special characters are replaced with a hyphen: `-`. If there are
    multiple consecutive whitespace or special characters, then they're replaced
    with a single hyphen. Whitespace or special characters at the beginning are
    removed. If a duplicate product title is used, then the handle is
    auto-incremented by one. For example, if you had two products called
    `Potion`, then their handles would be `potion` and `potion-1`. After a
    product has been created, changing the product title doesn't update the handle.
    """
    handle: String!
  ): Shopify_Product
  """
  Returns the product resource feedback for the currently authenticated app.
  """
  productResourceFeedback(
    """The product associated with the resource feedback."""
    id: ID!
  ): Shopify_ProductResourceFeedback
  """Returns a list of the shop's product saved searches."""
  productSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection!
  """Returns a ProductVariant resource by ID."""
  productVariant(
    """The ID of the ProductVariant to return."""
    id: ID!
  ): Shopify_ProductVariant
  """List of the product variants."""
  productVariants(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductVariantSortKeys = ID
    """
    Supported filter parameters:
     - `available_quantity`
     - `barcode`
     - `collection`
     - `committed_quantity`
     - `delivery_profile_id`
     - `exclude_composite`
     - `gift_card`
     - `incoming_quantity`
     - `inventory_quantity`
     - `location_id`
     - `managed`
     - `managed_by`
     - `on_hand_quantity`
     - `option1`
     - `option2`
     - `option3`
     - `product_id`
     - `product_status`
     - `product_type`
     - `publishable_status`
     - `published_status`
     - `reserved_quantity`
     - `sku`
     - `tag`
     - `tag_not`
     - `taxable`
     - `title`
     - `updated_at`
     - `vendor`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_ProductVariantConnection!
  """List of products."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_ProductSortKeys = ID
    """
    Supported filter parameters:
     - `barcode`
     - `created_at`
     - `delivery_profile_id`
     - `error_feedback`
     - `gift_card`
     - `has_only_composites`
     - `has_only_default_variant`
     - `has_variant_with_components`
     - `id`
     - `inventory_total`
     - `is_price_reduced`
     - `out_of_stock_somewhere`
     - `price`
     - `product_type`
     - `publishable_status`
     - `published_status`
     - `sku`
     - `status`
     - `tag`
     - `tag_not`
     - `title`
     - `updated_at`
     - `vendor`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_ProductConnection!
  """
  The list of publicly-accessible Admin API versions, including supported
  versions, the release candidate, and unstable versions.
  """
  publicApiVersions: [Shopify_ApiVersion!]!
  """Lookup a publication by ID."""
  publication(
    """The ID of the Publication to return."""
    id: ID!
  ): Shopify_Publication
  """List of publications."""
  publications(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_PublicationConnection!
  """Returns a Refund resource by ID."""
  refund(
    """The ID of the Refund to return."""
    id: ID!
  ): Shopify_Refund
  """Returns a Return resource by ID."""
  return(
    """The ID of the Return to return."""
    id: ID!
  ): Shopify_Return
  """Lookup a returnable fulfillment by ID."""
  returnableFulfillment(
    """The ID of the ReturnableFulfillment to return."""
    id: ID!
  ): Shopify_ReturnableFulfillment
  """List of returnable fulfillments."""
  returnableFulfillments(
    """Order ID that will scope all returnable fulfillments."""
    orderId: ID!
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_ReturnableFulfillmentConnection!
  """Lookup a reverse delivery by ID."""
  reverseDelivery(
    """The ID of the ReverseDelivery to return."""
    id: ID!
  ): Shopify_ReverseDelivery
  """Lookup a reverse fulfillment order by ID."""
  reverseFulfillmentOrder(
    """The ID of the reverse fulfillment order to return."""
    id: ID!
  ): Shopify_ReverseFulfillmentOrder
  """
  <div class="note"><h4>Theme app extensions</h4>
    <p>Your app might not pass App Store review if it uses script tags instead of
  theme app extensions. All new apps, and apps that integrate with Online Store
  2.0 themes, should use theme app extensions, such as app blocks or app embed
  blocks. Script tags are an alternative you can use with only vintage themes.
  <a href="/apps/online-store#what-integration-method-should-i-use"
  target="_blank">Learn more</a>.</p></div>
  
  
  Lookup a script tag resource by ID.
  """
  scriptTag(
    """The ID of the ScriptTag to return."""
    id: ID!
  ): Shopify_ScriptTag
  """
  <div class="note"><h4>Theme app extensions</h4>
    <p>Your app might not pass App Store review if it uses script tags instead of
  theme app extensions. All new apps, and apps that integrate with Online Store
  2.0 themes, should use theme app extensions, such as app blocks or app embed
  blocks. Script tags are an alternative you can use with only vintage themes.
  <a href="/apps/online-store#what-integration-method-should-i-use"
  target="_blank">Learn more</a>.</p></div>
  
  
  A list of script tags.
  """
  scriptTags(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """The source URL of the script tag to filter by."""
    src: URL
  ): Shopify_ScriptTagConnection!
  """The Customer Segment."""
  segment(
    """Find a segment by ID."""
    id: ID!
  ): Shopify_Segment
  """The number of segments for a shop."""
  segmentCount: Int!
  """
  A list of filter suggestions associated with a segment. A segment is a group
  of members (commonly customers) that meet specific criteria.
  """
  segmentFilterSuggestions(
    """Returns the elements of a list by keyword or term."""
    search: String!
    """Returns up to the first `n` elements from the list."""
    first: Int!
    """Returns the elements that come after the specified cursor."""
    after: String
  ): Shopify_SegmentFilterConnection!
  """A list of filters."""
  segmentFilters(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
  ): Shopify_SegmentFilterConnection!
  """A list of a shop's segment migrations."""
  segmentMigrations(
    """Search a segment migration by its saved search ID."""
    savedSearchId: ID
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
  ): Shopify_SegmentMigrationConnection!
  """
  The list of suggested values that's associated with an individual segment.A
  segment is a group of members, such as customers, that meet specific criteria.
  """
  segmentValueSuggestions(
    """Returns the elements of a list by keyword or term."""
    search: String!
    """Returns the elements of a list by filter handle."""
    filterQueryName: String
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
  ): Shopify_SegmentValueConnection!
  """A list of a shop's segments."""
  segments(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_SegmentSortKeys = CREATION_DATE
    """
    Supported filter parameters:
     - `name`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_SegmentConnection!
  """Returns a Selling Plan Group resource by ID."""
  sellingPlanGroup(
    """The ID of the SellingPlanGroup to return."""
    id: ID!
  ): Shopify_SellingPlanGroup
  """List Selling Plan Groups."""
  sellingPlanGroups(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_SellingPlanGroupSortKeys = ID
    """
    Supported filter parameters:
     - `app_id`
       - Acceptable Values:
         - `CURRENT`
         - `ALL`
         - `App ID number`
       - Default Value: `CURRENT`
     - `category`
       - Acceptable Values:
         - `SUBSCRIPTION`
         - `PRE_ORDER`
         - `TRY_BEFORE_YOU_BUY`
         - `OTHER`
     - `created_at`
     - `delivery_frequency`
     - `name`
     - `percentage_off`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_SellingPlanGroupConnection!
  """
  Returns the Shop resource corresponding to the access token used in the request. The Shop resource contains
  business and store management settings for the shop.
  """
  shop: Shopify_Shop!
  """A list of locales available on a shop."""
  shopLocales(
    """Return only published locales."""
    published: Boolean = false
  ): [Shopify_ShopLocale!]!
  """Shopify Payments account information, including balances and payouts."""
  shopifyPaymentsAccount: Shopify_ShopifyPaymentsAccount
  """
  Returns the results of a ShopifyQL query. Refer to the [ShopifyQL
  documentation](https://shopify.dev/api/shopifyql) for more information.
  """
  shopifyqlQuery(
    """A ShopifyQL query."""
    query: String!
  ): Shopify_ShopifyqlResponse
  """The StaffMember resource, by ID."""
  staffMember(
    """
    The ID of the staff member to return. If no ID is provided, then the staff member making the query (if any) is returned.
    """
    id: ID
  ): Shopify_StaffMember
  """
  Standard metafield definitions are intended for specific, common use cases.
  Their namespace and keys reflect these use cases and are reserved.
  
  Refer to all available [`Standard Metafield Definition Templates`](https://shopify.dev/api/admin-graphql/latest/objects/StandardMetafieldDefinitionTemplate).
  """
  standardMetafieldDefinitionTemplates(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_StandardMetafieldDefinitionTemplateConnection!
  """Returns a SubscriptionBillingAttempt by ID."""
  subscriptionBillingAttempt(
    """The ID of the SubscriptionBillingAttempt to return."""
    id: ID!
  ): Shopify_SubscriptionBillingAttempt
  """
  Returns a subscription billing cycle found either by cycle index or date.
  """
  subscriptionBillingCycle(
    """Input object used to select and use billing cycles."""
    billingCycleInput: Shopify_SubscriptionBillingCycleInput!
  ): Shopify_SubscriptionBillingCycle
  """Returns subscription billing cycles for a contract ID."""
  subscriptionBillingCycles(
    """The ID of the subscription contract to retrieve billing cycles for."""
    contractId: ID!
    """Select subscription billing cycles within a date range."""
    billingCyclesDateRangeSelector: Shopify_SubscriptionBillingCyclesDateRangeSelector
    """Select subscription billing cycles within an index range."""
    billingCyclesIndexRangeSelector: Shopify_SubscriptionBillingCyclesIndexRangeSelector
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_SubscriptionBillingCyclesSortKeys = CYCLE_INDEX
  ): Shopify_SubscriptionBillingCycleConnection!
  """Returns a Subscription Contract resource by ID."""
  subscriptionContract(
    """The ID of the Subscription Contract to return."""
    id: ID!
  ): Shopify_SubscriptionContract
  """List Subscription Contracts."""
  subscriptionContracts(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SubscriptionContractConnection!
  """Returns a Subscription Draft resource by ID."""
  subscriptionDraft(
    """The ID of the Subscription Draft to return."""
    id: ID!
  ): Shopify_SubscriptionDraft
  """Returns a list of TenderTransactions associated with the shop."""
  tenderTransactions(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """
    Supported filter parameters:
     - `point_of_sale_device_id`
     - `processed_at`
     - `test`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
  ): Shopify_TenderTransactionConnection!
  """A resource that can have localized values for different languages."""
  translatableResource(
    """Find a translatable resource by ID."""
    resourceId: ID!
  ): Shopify_TranslatableResource
  """Resources that can have localized values for different languages."""
  translatableResources(
    """Return only resources of a type."""
    resourceType: Shopify_TranslatableResourceType!
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_TranslatableResourceConnection!
  """Resources that can have localized values for different languages."""
  translatableResourcesByIds(
    """Return only resources for given IDs."""
    resourceIds: [ID!]!
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_TranslatableResourceConnection!
  """Returns a redirect resource by ID."""
  urlRedirect(
    """The ID of the UrlRedirect to return."""
    id: ID!
  ): Shopify_UrlRedirect
  """Returns a redirect import resource by ID."""
  urlRedirectImport(
    """The ID of the UrlRedirectImport to return."""
    id: ID!
  ): Shopify_UrlRedirectImport
  """A list of the shop's URL redirect saved searches."""
  urlRedirectSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): Shopify_SavedSearchConnection!
  """A list of redirects for a shop."""
  urlRedirects(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_UrlRedirectSortKeys = ID
    """
    Supported filter parameters:
     - `created_at`
     - `path`
     - `target`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """
    The ID of an existing saved search.
    The search’s query string is used as the query argument.
    Refer to [SavedSearch](https://shopify.dev/api/admin-graphql/latest/objects/savedsearch).
    """
    savedSearchId: ID
  ): Shopify_UrlRedirectConnection!
  """The web pixel configured by the app."""
  webPixel(
    """Returns a web pixel by ID."""
    id: ID!
  ): Shopify_WebPixel
  """Returns a webhook subscription by ID."""
  webhookSubscription(
    """The ID of the WebhookSubscription to return."""
    id: ID!
  ): Shopify_WebhookSubscription
  """Returns a list of webhook subscriptions."""
  webhookSubscriptions(
    """Returns up to the first `n` elements from the list."""
    first: Int
    """Returns the elements that come after the specified cursor."""
    after: String
    """Returns up to the last `n` elements from the list."""
    last: Int
    """Returns the elements that come before the specified cursor."""
    before: String
    """Reverse the order of the underlying list."""
    reverse: Boolean = false
    """Sort the underlying list by the given key."""
    sortKey: Shopify_WebhookSubscriptionSortKeys = CREATED_AT
    """
    Supported filter parameters:
     - `created_at`
     - `updated_at`
    
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax)
    for more information about using filters.
    """
    query: String
    """Callback URL to filter by."""
    callbackUrl: URL
    """Response format to filter by."""
    format: Shopify_WebhookSubscriptionFormat
    """List of webhook subscription topics to filter by."""
    topics: [Shopify_WebhookSubscriptionTopic!]
  ): Shopify_WebhookSubscriptionConnection!
  getSpec: Shopify_SpecConfig
  getHeaders(config: Shopify_CredentialsT0): Shopify_HeaderConfig
  check(config: Shopify_CredentialsT0): Shopify_CheckConfig
}

type Mutation {
  """Updates the email state value for an abandonment."""
  abandonmentEmailStateUpdate(
    """The ID of the abandonment that needs to be updated."""
    id: ID!
    """The new email state of the abandonment."""
    emailState: Shopify_AbandonmentEmailState!
    """The date and time for when the email was sent, if that is the case."""
    emailSentAt: DateTime
    """The reason why the email was or was not sent."""
    emailStateChangeReason: String
  ): Shopify_AbandonmentEmailStateUpdatePayload
  """
  Allows an app to create a credit for a shop that can be used towards future app purchases.
  """
  appCreditCreate(
    """The description of the app credit."""
    description: String!
    """The amount that can be used towards future app purchases in Shopify."""
    amount: Shopify_MoneyInput!
    """Specifies whether the app credit is a test transaction."""
    test: Boolean = false
  ): Shopify_AppCreditCreatePayload
  """
  Charges a shop for features or services one time.
  This type of charge is recommended for apps that aren't billed on a recurring basis.
  Test and demo shops aren't charged.
  """
  appPurchaseOneTimeCreate(
    """The name of the one-time purchase from the app."""
    name: String!
    """The amount to be charged to the store for the app one-time purchase."""
    price: Shopify_MoneyInput!
    """
    The URL where the merchant is redirected after approving the app one-time purchase.
    """
    returnUrl: URL!
    """
    Whether the app one-time purchase is a test transaction. The default value is `false`.
    """
    test: Boolean = false
  ): Shopify_AppPurchaseOneTimeCreatePayload
  """
  Creates a record of the attributed revenue for the app. This mutation should
  only be used to capture transactions that are not managed by the Billing API.
  """
  appRevenueAttributionRecordCreate(
    """The app revenue attribution record to be created."""
    appRevenueAttributionRecord: Shopify_AppRevenueAttributionRecordInput!
  ): Shopify_AppRevenueAttributionRecordCreatePayload
  """Deletes a record of the attributed revenue for the app."""
  appRevenueAttributionRecordDelete(
    """The unique identifier of the revenue attribution record."""
    id: ID!
  ): Shopify_AppRevenueAttributionRecordDeletePayload
  """Cancels an app subscription on a store."""
  appSubscriptionCancel(
    """The ID of the app subscription to be cancelled."""
    id: ID!
    """
    Whether to issue prorated credits for the unused portion of the app subscription.  There will
    be a corresponding deduction (based on revenue share) to your Partner account.
    For example, if a $10.00 app subscription (with 0% revenue share) is cancelled and prorated half way
    through the billing cycle, then the merchant will be credited $5.00 and that amount will be deducted
    from your Partner account.
    """
    prorate: Boolean = false
  ): Shopify_AppSubscriptionCancelPayload
  """
  Allows an app to charge a store for features or services on a recurring basis.
  """
  appSubscriptionCreate(
    """A descriptive name for the app subscription."""
    name: String!
    """
    Attaches one or more pricing plans to an app subscription. Only one pricing plan can be defined for each available type.
    """
    lineItems: [Shopify_AppSubscriptionLineItemInput!]!
    """
    Whether the app subscription is a test transaction. The default value is `false`.
    """
    test: Boolean
    """
    The number of days of the free trial period, beginning on the day that the merchant approves the app charges.
    """
    trialDays: Int
    """
    The URL pointing to the page where the merchant is redirected after approving the app subscription.
    """
    returnUrl: URL!
    """
    The replacement behavior when creating an app subscription for a merchant with an already existing app subscription.
    """
    replacementBehavior: Shopify_AppSubscriptionReplacementBehavior = STANDARD
  ): Shopify_AppSubscriptionCreatePayload
  """
  Updates the capped amount on the usage pricing plan of an app subscription line item.
  """
  appSubscriptionLineItemUpdate(
    """The ID of the app subscription line item to be updated."""
    id: ID!
    """
    The new maximum amount of usage charges that can be incurred within a subscription billing interval.
    """
    cappedAmount: Shopify_MoneyInput!
  ): Shopify_AppSubscriptionLineItemUpdatePayload
  """Extends the trial of an app subscription."""
  appSubscriptionTrialExtend(
    """The ID of the app subscription to extend the trial for."""
    id: ID!
    """
    The number of days to extend the trial. The value must be greater than 0 and less than or equal to 1000.
    """
    days: Int!
  ): Shopify_AppSubscriptionTrialExtendPayload
  """
  Enables an app to charge a store for features or services on a per-use basis.
  The usage charge value is counted towards the `cappedAmount` limit that was
  specified in the `appUsagePricingDetails` field when the app subscription was created.
  If you create an app usage charge that causes the total usage charges in a
  billing interval to exceed the capped amount, then a `Total price exceeds
  balance remaining` error is returned.
  """
  appUsageRecordCreate(
    """
    The ID of the app subscription line item to create the usage record under.
    This app subscription line item must have a usage pricing plan.
    """
    subscriptionLineItemId: ID!
    """The price of the app usage record."""
    price: Shopify_MoneyInput!
    """The description of the app usage record."""
    description: String!
  ): Shopify_AppUsageRecordCreatePayload
  """
  Starts the cancelation process of a running bulk operation.
  
  There may be a short delay from when a cancelation starts until the operation is actually canceled.
  """
  bulkOperationCancel(
    """The ID of the bulk operation to cancel."""
    id: ID!
  ): Shopify_BulkOperationCancelPayload
  """
  Creates and runs a bulk operation mutation.
  
  To learn how to bulk import large volumes of data asynchronously, refer to the
  [bulk import data guide](https://shopify.dev/api/usage/bulk-operations/imports).
  """
  bulkOperationRunMutation(
    """The mutation to be executed in bulk."""
    mutation: String!
    """The staged upload path of the file containing mutation variables."""
    stagedUploadPath: String!
    """An optional identifier which may be used for querying."""
    clientIdentifier: String
  ): Shopify_BulkOperationRunMutationPayload
  """
  Creates and runs a bulk operation query.
  
  See the [bulk operations guide](https://shopify.dev/api/usage/bulk-operations/imports) for more details.
  """
  bulkOperationRunQuery(
    """The query to be executed in bulk."""
    query: String!
  ): Shopify_BulkOperationRunQueryPayload
  """Creates product feedback for multiple products."""
  bulkProductResourceFeedbackCreate(
    """An array of inputs to create the feedback. Limited to 50."""
    feedbackInput: [Shopify_ProductResourceFeedbackInput!]!
  ): Shopify_BulkProductResourceFeedbackCreatePayload
  """Adds products to a collection."""
  collectionAddProducts(
    """
    The ID of the collection that's being updated. This can't be a smart collection.
    """
    id: ID!
    """
    The IDs of the products that are being added to the collection.
    If any of the products is already present in the input collection,
    then an error is raised and no products are added.
    """
    productIds: [ID!]!
  ): Shopify_CollectionAddProductsPayload
  """
  Asynchronously adds a set of products to a given collection. It can take a
  long time to run. Instead of returning a collection, it returns a job which
  should be polled.
  """
  collectionAddProductsV2(
    """The ID of the collection that's being updated."""
    id: ID!
    """
    The IDs of the products that are being added to the collection. If the
    collection's sort order is manual, the products will be added in the order
    in which they are provided.
    """
    productIds: [ID!]!
  ): Shopify_CollectionAddProductsV2Payload
  """Creates a collection."""
  collectionCreate(
    """The properties to use when creating the collection."""
    input: Shopify_CollectionInput!
  ): Shopify_CollectionCreatePayload
  """Deletes a collection."""
  collectionDelete(
    """The collection to delete."""
    input: Shopify_CollectionDeleteInput!
  ): Shopify_CollectionDeletePayload
  """Publishes a collection to a channel."""
  collectionPublish(
    """
    Specify a collection to publish and the sales channels to publish it to.
    """
    input: Shopify_CollectionPublishInput!
  ): Shopify_CollectionPublishPayload @deprecated(reason: "Use `publishablePublish` instead.")
  """
  Removes a set of products from a given collection. The mutation can take a
  long time to run. Instead of returning an updated collection the mutation
  returns a job, which should be
  [polled](https://shopify.dev/api/admin-graphql/latest/queries/job). For use
  with manual collections only.
  """
  collectionRemoveProducts(
    """
    The ID of the collection to remove products from. The ID must reference an existing manual collection.
    """
    id: ID!
    """
    The IDs of products to remove from the collection. The mutation doesn't
    validate that the products belong to the collection or whether the products exist.
    """
    productIds: [ID!]!
  ): Shopify_CollectionRemoveProductsPayload
  """
  Asynchronously reorders a set of products within a specified collection.
  Instead of returning an updated collection, this mutation returns a job, which
  should be [polled](https://shopify.dev/api/admin-graphql/latest/queries/job). The [`Collection.sortOrder`](https://shopify.dev/api/admin-graphql/latest/objects/Collection#field-collection-sortorder)
  must be `MANUAL`. Displaced products will have their position altered in a
  consistent manner, with no gaps.
  """
  collectionReorderProducts(
    """The ID of the collection on which to reorder products."""
    id: ID!
    """
    A list of moves to perform, which will be evaluated in order. Up to 250
    moves are supported, the `newPosition` does not have to be unique.
    """
    moves: [Shopify_MoveInput!]!
  ): Shopify_CollectionReorderProductsPayload
  """Unpublishes a collection."""
  collectionUnpublish(
    """
    Specify a collection to unpublish and the sales channels to remove it from.
    """
    input: Shopify_CollectionUnpublishInput!
  ): Shopify_CollectionUnpublishPayload @deprecated(reason: "Use `publishableUnpublish` instead.")
  """Updates a collection."""
  collectionUpdate(
    """The updated properties for the collection."""
    input: Shopify_CollectionInput!
  ): Shopify_CollectionUpdatePayload
  """Deletes a list of companies."""
  companiesDelete(
    """A list of IDs of companies to delete."""
    companyIds: [ID!]!
  ): Shopify_CompaniesDeletePayload
  """Deletes a company address."""
  companyAddressDelete(
    """The ID of the address to delete."""
    addressId: ID!
  ): Shopify_CompanyAddressDeletePayload
  """Assigns the customer as a company contact."""
  companyAssignCustomerAsContact(
    """The ID of the company to assign the contact to."""
    companyId: ID!
    """The ID of the customer to assign as the contact."""
    customerId: ID!
  ): Shopify_CompanyAssignCustomerAsContactPayload
  """Assigns the main contact for the company."""
  companyAssignMainContact(
    """The ID of the company to assign the main contact to."""
    companyId: ID!
    """The ID of the company contact to be assigned as the main contact."""
    companyContactId: ID!
  ): Shopify_CompanyAssignMainContactPayload
  """Assigns a role to a contact for a location."""
  companyContactAssignRole(
    """The ID of the contact to assign a role to."""
    companyContactId: ID!
    """The ID of the role to assign to a contact."""
    companyContactRoleId: ID!
    """The ID of the location to assign a role to a contact."""
    companyLocationId: ID!
  ): Shopify_CompanyContactAssignRolePayload
  """Assigns roles on a company contact."""
  companyContactAssignRoles(
    """The contact whose roles are being assigned."""
    companyContactId: ID!
    """The new roles to assign."""
    rolesToAssign: [Shopify_CompanyContactRoleAssign!]!
  ): Shopify_CompanyContactAssignRolesPayload
  """Creates a company contact."""
  companyContactCreate(
    """The ID of the company that the company contact belongs to."""
    companyId: ID!
    """The fields to use to create the company contact."""
    input: Shopify_CompanyContactInput!
  ): Shopify_CompanyContactCreatePayload
  """Deletes a company contact."""
  companyContactDelete(
    """The ID of the company contact to delete."""
    companyContactId: ID!
  ): Shopify_CompanyContactDeletePayload
  """Revokes a role on a company contact."""
  companyContactRevokeRole(
    """The ID of the contact to revoke a role from."""
    companyContactId: ID!
    """The ID of the role assignment to revoke from a contact."""
    companyContactRoleAssignmentId: ID!
  ): Shopify_CompanyContactRevokeRolePayload
  """Revokes roles on a company contact."""
  companyContactRevokeRoles(
    """The contact whose roles are being revoked."""
    companyContactId: ID!
    """The current role assignment IDs to revoke."""
    roleAssignmentIds: [ID!]
    """Flag to revoke all roles on the contact."""
    revokeAll: Boolean = false
  ): Shopify_CompanyContactRevokeRolesPayload
  """Updates a company contact."""
  companyContactUpdate(
    """The ID of the company contact to be updated."""
    companyContactId: ID!
    """The fields to use to update the company contact."""
    input: Shopify_CompanyContactInput!
  ): Shopify_CompanyContactUpdatePayload
  """Deletes one or more company contacts."""
  companyContactsDelete(
    """The list of IDs of the company contacts to delete."""
    companyContactIds: [ID!]!
  ): Shopify_CompanyContactsDeletePayload
  """Creates a company."""
  companyCreate(
    """The fields to use when creating the company."""
    input: Shopify_CompanyCreateInput!
  ): Shopify_CompanyCreatePayload
  """Deletes a company."""
  companyDelete(
    """The ID of the company to delete."""
    id: ID!
  ): Shopify_CompanyDeletePayload
  """Updates an address on a company location."""
  companyLocationAssignAddress(
    """The ID of the company location to update addresses on."""
    locationId: ID!
    """The input fields to use to update the address."""
    address: Shopify_CompanyAddressInput!
    """The list of address types on the location to update."""
    addressTypes: [Shopify_CompanyAddressType!]!
  ): Shopify_CompanyLocationAssignAddressPayload
  """Assigns roles on a company location."""
  companyLocationAssignRoles(
    """The location whose roles are being assigned."""
    companyLocationId: ID!
    """The roles to assign."""
    rolesToAssign: [Shopify_CompanyLocationRoleAssign!]!
  ): Shopify_CompanyLocationAssignRolesPayload
  """Assigns tax exemptions to the company location."""
  companyLocationAssignTaxExemptions(
    """The location to which the tax exemptions will be assigned."""
    companyLocationId: ID!
    """The tax exemptions that are being assigned to the location."""
    taxExemptions: [Shopify_TaxExemption!]!
  ): Shopify_CompanyLocationAssignTaxExemptionsPayload
  """Creates a company location."""
  companyLocationCreate(
    """The ID of the company that the company location belongs to."""
    companyId: ID!
    """The fields to use to create the company location."""
    input: Shopify_CompanyLocationInput!
  ): Shopify_CompanyLocationCreatePayload
  """Creates a tax registration for a company location."""
  companyLocationCreateTaxRegistration(
    """
    The ID of the company location that the tax registration gets assigned to.
    """
    locationId: ID!
    """The unique tax id for the tax registration."""
    taxId: String!
  ): Shopify_CompanyLocationCreateTaxRegistrationPayload
  """Deletes a company location."""
  companyLocationDelete(
    """The ID of the company location to delete."""
    companyLocationId: ID!
  ): Shopify_CompanyLocationDeletePayload
  """Revokes roles on a company location."""
  companyLocationRevokeRoles(
    """The location whose roles are being revoked."""
    companyLocationId: ID!
    """The current roles to revoke."""
    rolesToRevoke: [ID!]!
  ): Shopify_CompanyLocationRevokeRolesPayload
  """Revokes tax exemptions from the company location."""
  companyLocationRevokeTaxExemptions(
    """The location from which the tax exemptions will be revoked."""
    companyLocationId: ID!
    """The tax exemptions that are being revoked from the location."""
    taxExemptions: [Shopify_TaxExemption!]!
  ): Shopify_CompanyLocationRevokeTaxExemptionsPayload
  """Revokes tax registration on a company location."""
  companyLocationRevokeTaxRegistration(
    """The location whose tax registration is being revoked."""
    companyLocationId: ID!
  ): Shopify_CompanyLocationRevokeTaxRegistrationPayload
  """Updates a company location."""
  companyLocationUpdate(
    """The ID of the company location to update."""
    companyLocationId: ID!
    """The input fields to update in the company location."""
    input: Shopify_CompanyLocationUpdateInput!
  ): Shopify_CompanyLocationUpdatePayload
  """Deletes a list of company locations."""
  companyLocationsDelete(
    """A list of IDs of company locations to delete."""
    companyLocationIds: [ID!]!
  ): Shopify_CompanyLocationsDeletePayload
  """Revokes the main contact from the company."""
  companyRevokeMainContact(
    """The ID of the company to revoke the main contact from."""
    companyId: ID!
  ): Shopify_CompanyRevokeMainContactPayload
  """Updates a company."""
  companyUpdate(
    """The ID of the company to be updated."""
    companyId: ID!
    """The input fields to update the company."""
    input: Shopify_CompanyInput!
  ): Shopify_CompanyUpdatePayload
  """Add tax exemptions for the customer."""
  customerAddTaxExemptions(
    """The ID of the customer to update."""
    customerId: ID!
    """
    The list of tax exemptions to add for the customer, in the format of an
    array or a comma-separated list. Example values:
    `["CA_BC_RESELLER_EXEMPTION", "CA_STATUS_CARD_EXEMPTION"]`,
    `"CA_BC_RESELLER_EXEMPTION, CA_STATUS_CARD_EXEMPTION"`.
    """
    taxExemptions: [Shopify_TaxExemption!]!
  ): Shopify_CustomerAddTaxExemptionsPayload
  """
  Create a new customer. As of API version 2022-10, apps using protected
  customer data must meet the protected customer data [requirements](https://shopify.dev/apps/store/data-protection/protected-customer-data).
  """
  customerCreate(
    """The input fields to create a customer."""
    input: Shopify_CustomerInput!
  ): Shopify_CustomerCreatePayload
  """
  Delete a customer. As of API version 2022-10, apps using protected customer
  data must meet the protected customer data [requirements](https://shopify.dev/apps/store/data-protection/protected-customer-data).
  """
  customerDelete(
    """Specifies the customer to delete."""
    input: Shopify_CustomerDeleteInput!
  ): Shopify_CustomerDeletePayload
  """Update a customer's email marketing information information."""
  customerEmailMarketingConsentUpdate(
    """
    Specifies the input fields to update a customer's email marketing consent information.
    """
    input: Shopify_CustomerEmailMarketingConsentUpdateInput!
  ): Shopify_CustomerEmailMarketingConsentUpdatePayload
  """Generate an account activation URL for a customer."""
  customerGenerateAccountActivationUrl(
    """The ID of the customer that the URL is generated for."""
    customerId: ID!
  ): Shopify_CustomerGenerateAccountActivationUrlPayload
  """Creates a credit card payment method for a customer."""
  customerPaymentMethodCreditCardCreate(
    """The ID of the customer."""
    customerId: ID!
    """The billing address."""
    billingAddress: Shopify_MailingAddressInput!
    """The Cardserver session ID."""
    sessionId: String!
  ): Shopify_CustomerPaymentMethodCreditCardCreatePayload
  """Updates the credit card payment method for a customer."""
  customerPaymentMethodCreditCardUpdate(
    """The ID of the customer payment method."""
    id: ID!
    """The billing address."""
    billingAddress: Shopify_MailingAddressInput!
    """The Cardserver session ID."""
    sessionId: String!
  ): Shopify_CustomerPaymentMethodCreditCardUpdatePayload
  """
  Returns a URL that allows the customer to update a specific payment method.
  
  Currently, `customerPaymentMethodGetUpdateUrl` only supports Shop Pay.
  """
  customerPaymentMethodGetUpdateUrl(
    """The payment method to be updated."""
    customerPaymentMethodId: ID!
  ): Shopify_CustomerPaymentMethodGetUpdateUrlPayload
  """Creates a PayPal billing agreement for a customer."""
  customerPaymentMethodPaypalBillingAgreementCreate(
    """The ID of the customer."""
    customerId: ID!
    """The billing address."""
    billingAddress: Shopify_MailingAddressInput
    """
    The billing agreement ID from PayPal that starts with 'B-' (for example, `B-1234XXXXX`).
    """
    billingAgreementId: String!
    """Whether the PayPal billing agreement is inactive."""
    inactive: Boolean = false
  ): Shopify_CustomerPaymentMethodPaypalBillingAgreementCreatePayload
  """Updates a PayPal billing agreement for a customer."""
  customerPaymentMethodPaypalBillingAgreementUpdate(
    """The ID of the customer payment method."""
    id: ID!
    """The billing address."""
    billingAddress: Shopify_MailingAddressInput!
  ): Shopify_CustomerPaymentMethodPaypalBillingAgreementUpdatePayload
  """Create a payment method from remote gateway identifiers."""
  customerPaymentMethodRemoteCreate(
    """The ID of the customer."""
    customerId: ID!
    """Remote gateway payment method details."""
    remoteReference: Shopify_CustomerPaymentMethodRemoteInput!
  ): Shopify_CustomerPaymentMethodRemoteCreatePayload
  """Create a payment method from a credit card stored by Stripe."""
  customerPaymentMethodRemoteCreditCardCreate(
    """The ID of the customer."""
    customerId: ID!
    """The Stripe Customer ID."""
    stripeCustomerId: String!
    """The Stripe Payment Method ID."""
    stripePaymentMethodId: String
  ): Shopify_CustomerPaymentMethodRemoteCreditCardCreatePayload @deprecated(reason: "Use `customerPaymentMethodRemoteCreate` instead.")
  """Revokes a customer's payment method."""
  customerPaymentMethodRevoke(
    """The ID of the customer payment method to be revoked."""
    customerPaymentMethodId: ID!
  ): Shopify_CustomerPaymentMethodRevokePayload
  """
  Sends a link to the customer so they can update a specific payment method.
  """
  customerPaymentMethodSendUpdateEmail(
    """The payment method to be updated."""
    customerPaymentMethodId: ID!
    """Specifies the payment method update email fields."""
    email: Shopify_EmailInput
  ): Shopify_CustomerPaymentMethodSendUpdateEmailPayload
  """Remove tax exemptions from a customer."""
  customerRemoveTaxExemptions(
    """The ID of the customer to update."""
    customerId: ID!
    """
    The list of tax exemptions to remove for the customer, in the format of an
    array or a comma-separated list. Example values:
    `["CA_BC_RESELLER_EXEMPTION", "A_STATUS_CARD_EXEMPTION"]`,
    `"CA_BC_RESELLER_EXEMPTION, CA_STATUS_CARD_EXEMPTION"`.
    """
    taxExemptions: [Shopify_TaxExemption!]!
  ): Shopify_CustomerRemoveTaxExemptionsPayload
  """Replace tax exemptions for a customer."""
  customerReplaceTaxExemptions(
    """The ID of the customer to update."""
    customerId: ID!
    """
    The list of tax exemptions that will replace the current exemptions for a
    customer. Can be an array or a comma-separated list.
      Example values: `["CA_BC_RESELLER_EXEMPTION", "A_STATUS_CARD_EXEMPTION"]`,
    `"CA_BC_RESELLER_EXEMPTION, CA_STATUS_CARD_EXEMPTION"`.
    """
    taxExemptions: [Shopify_TaxExemption!]!
  ): Shopify_CustomerReplaceTaxExemptionsPayload
  """Creates a customer segment members query."""
  customerSegmentMembersQueryCreate(
    """The input fields to create a customer segment members query."""
    input: Shopify_CustomerSegmentMembersQueryInput!
  ): Shopify_CustomerSegmentMembersQueryCreatePayload
  """Update a customer's SMS marketing consent information."""
  customerSmsMarketingConsentUpdate(
    """
    Specifies the input fields to update a customer's SMS marketing consent information.
    """
    input: Shopify_CustomerSmsMarketingConsentUpdateInput!
  ): Shopify_CustomerSmsMarketingConsentUpdatePayload
  """
  Update a customer's attributes. As of API version 2022-10, apps using
  protected customer data must meet the protected customer data [requirements](https://shopify.dev/apps/store/data-protection/protected-customer-data).
  """
  customerUpdate(
    """Provides updated fields for the customer."""
    input: Shopify_CustomerInput!
  ): Shopify_CustomerUpdatePayload
  """Updates a customer's default address."""
  customerUpdateDefaultAddress(
    """The ID of the customer whose default address is being updated."""
    customerId: ID!
    """The ID of the customer's new default address."""
    addressId: ID!
  ): Shopify_CustomerUpdateDefaultAddressPayload
  """
  Creates a delegate access token.
  
  To learn more about creating delegate access tokens, refer to
  [Delegate OAuth access tokens to subsystems]
  (https://shopify.dev/apps/auth/oauth/delegate-access-tokens).
  """
  delegateAccessTokenCreate(
    """The input fields for creating a delegate access token."""
    input: Shopify_DelegateAccessTokenInput!
  ): Shopify_DelegateAccessTokenCreatePayload
  """Create a delivery profile."""
  deliveryProfileCreate(
    """Specifies the input fields for a delivery profile."""
    profile: Shopify_DeliveryProfileInput!
  ): Shopify_deliveryProfileCreatePayload
  """Enqueue the removal of a delivery profile."""
  deliveryProfileRemove(
    """The ID of the delivery profile to remove."""
    id: ID!
  ): Shopify_deliveryProfileRemovePayload
  """Update a delivery profile."""
  deliveryProfileUpdate(
    """The ID of the delivery profile to update."""
    id: ID!
    """Specifies the input fields for a delivery profile."""
    profile: Shopify_DeliveryProfileInput!
    """Whether this delivery profile should leave legacy mode."""
    leaveLegacyModeProfiles: Boolean
  ): Shopify_deliveryProfileUpdatePayload
  """Set the delivery settings for a shop."""
  deliverySettingUpdate(
    """Specifies the input fields for the delivery shop level settings."""
    setting: Shopify_DeliverySettingInput!
  ): Shopify_DeliverySettingUpdatePayload
  """
  Assigns a location as the shipping origin while using legacy compatibility mode for multi-location delivery profiles.
  """
  deliveryShippingOriginAssign(
    """The ID of the location to assign as the shipping origin."""
    locationId: ID!
  ): Shopify_DeliveryShippingOriginAssignPayload
  """Activates an automatic discount."""
  discountAutomaticActivate(
    """The ID of the automatic discount to activate."""
    id: ID!
  ): Shopify_DiscountAutomaticActivatePayload
  """Creates an app discount."""
  discountAutomaticAppCreate(
    """The input data used to create the app discount."""
    automaticAppDiscount: Shopify_DiscountAutomaticAppInput!
  ): Shopify_DiscountAutomaticAppCreatePayload
  """Updates an automatic app discount."""
  discountAutomaticAppUpdate(
    """The ID of the automatic app discount to update."""
    id: ID!
    """The input fields required to update the automatic app discount."""
    automaticAppDiscount: Shopify_DiscountAutomaticAppInput!
  ): Shopify_DiscountAutomaticAppUpdatePayload
  """Creates a basic automatic discount."""
  discountAutomaticBasicCreate(
    """The input data used to create the automatic discount."""
    automaticBasicDiscount: Shopify_DiscountAutomaticBasicInput!
  ): Shopify_DiscountAutomaticBasicCreatePayload
  """Updates a basic automatic discount."""
  discountAutomaticBasicUpdate(
    """The ID of the automatic discount to update."""
    id: ID!
    """The input data used to update the automatic discount."""
    automaticBasicDiscount: Shopify_DiscountAutomaticBasicInput!
  ): Shopify_DiscountAutomaticBasicUpdatePayload
  """
  Asynchronously delete automatic discounts in bulk if a `search` or `saved_search_id` argument is provided or if a
  maximum discount threshold is reached (1,000). Otherwise, deletions will occur inline.
  **Warning:** All automatic discounts will be deleted if a blank `search` argument is provided.
  """
  discountAutomaticBulkDelete(
    """
    The search query for filtering automatic discounts to delete.
    
    For more information on the list of supported fields and search syntax,
    refer to the [AutomaticDiscountNodes query section](https://shopify.dev/api/admin-graphql/latest/queries/automaticDiscountNodes#argument-automaticdiscountnodes-query).
    """
    search: String
    """
    The ID of the saved search to use for filtering automatic discounts to delete.
    """
    savedSearchId: ID
    """The IDs of the automatic discounts to delete."""
    ids: [ID!]
  ): Shopify_DiscountAutomaticBulkDeletePayload
  """Creates a BXGY automatic discount."""
  discountAutomaticBxgyCreate(
    """The input data used to create the automatic discount."""
    automaticBxgyDiscount: Shopify_DiscountAutomaticBxgyInput!
  ): Shopify_DiscountAutomaticBxgyCreatePayload
  """Updates an existing Buy X, Get Y (BXGY) automatic discount."""
  discountAutomaticBxgyUpdate(
    """The ID of the automatic discount to update."""
    id: ID!
    """The input data used to update the automatic discount."""
    automaticBxgyDiscount: Shopify_DiscountAutomaticBxgyInput!
  ): Shopify_DiscountAutomaticBxgyUpdatePayload
  """Deactivates an automatic discount."""
  discountAutomaticDeactivate(
    """The ID of the automatic discount to deactivate."""
    id: ID!
  ): Shopify_DiscountAutomaticDeactivatePayload
  """Deletes an automatic discount."""
  discountAutomaticDelete(
    """The ID of the automatic discount to delete."""
    id: ID!
  ): Shopify_DiscountAutomaticDeletePayload
  """Activates a code discount."""
  discountCodeActivate(
    """The ID of the code discount to activate."""
    id: ID!
  ): Shopify_DiscountCodeActivatePayload
  """Creates a code app discount."""
  discountCodeAppCreate(
    """The input data used to create the app discount."""
    codeAppDiscount: Shopify_DiscountCodeAppInput!
  ): Shopify_DiscountCodeAppCreatePayload
  """Updates a code app discount."""
  discountCodeAppUpdate(
    """The ID of the code app discount to update."""
    id: ID!
    """The input fields required to update the code app discount."""
    codeAppDiscount: Shopify_DiscountCodeAppInput!
  ): Shopify_DiscountCodeAppUpdatePayload
  """Creates a basic code discount."""
  discountCodeBasicCreate(
    """The input data used to create the code discount."""
    basicCodeDiscount: Shopify_DiscountCodeBasicInput!
  ): Shopify_DiscountCodeBasicCreatePayload
  """Updates a basic code discount."""
  discountCodeBasicUpdate(
    """The ID of the code discount to update."""
    id: ID!
    """The input data used to update the code discount."""
    basicCodeDiscount: Shopify_DiscountCodeBasicInput!
  ): Shopify_DiscountCodeBasicUpdatePayload
  """
  Asynchronously activate code discounts in bulk using a search query, a saved search ID, or a list of code discount IDs.
  """
  discountCodeBulkActivate(
    """
    The search query for filtering code discounts.
    
    For more information on the list of supported fields and search syntax,
    refer to the [CodeDiscountNodes query section](https://shopify.dev/api/admin-graphql/latest/queries/codeDiscountNodes#argument-codediscountnodes-query).
    """
    search: String
    """The ID of the saved search."""
    savedSearchId: ID
    """The IDs of the code discounts to activate."""
    ids: [ID!]
  ): Shopify_DiscountCodeBulkActivatePayload
  """
  Asynchronously deactivate code discounts in bulk using a search query, a saved search ID, or a list of code discount IDs.
  """
  discountCodeBulkDeactivate(
    """
    The search query for filtering code discounts.
    
    For more information on the list of supported fields and search syntax,
    refer to the [CodeDiscountNodes query section](https://shopify.dev/api/admin-graphql/latest/queries/codeDiscountNodes#argument-codediscountnodes-query).
    """
    search: String
    """The ID of the saved search."""
    savedSearchId: ID
    """The IDs of the code discounts to deactivate."""
    ids: [ID!]
  ): Shopify_DiscountCodeBulkDeactivatePayload
  """
  Asynchronously delete code discounts in bulk using a search query, a saved search ID, or a list of code discount IDs.
  """
  discountCodeBulkDelete(
    """
    The search query for filtering code discounts to delete.
    
    For more information on the list of supported fields and search syntax,
    refer to the [CodeDiscountNodes query section](https://shopify.dev/api/admin-graphql/latest/queries/codeDiscountNodes#argument-codediscountnodes-query).
    """
    search: String
    """
    The ID of the saved search to use for filtering code discounts to delete.
    """
    savedSearchId: ID
    """The IDs of the code discounts to delete."""
    ids: [ID!]
  ): Shopify_DiscountCodeBulkDeletePayload
  """Creates a Buy X get Y (BXGY) code discount."""
  discountCodeBxgyCreate(
    """The input data used to create the code discount."""
    bxgyCodeDiscount: Shopify_DiscountCodeBxgyInput!
  ): Shopify_DiscountCodeBxgyCreatePayload
  """Updates a Buy X, Get Y (BXGY) code discount."""
  discountCodeBxgyUpdate(
    """The ID of the code discount to update."""
    id: ID!
    """The input data used to update the code discount."""
    bxgyCodeDiscount: Shopify_DiscountCodeBxgyInput!
  ): Shopify_DiscountCodeBxgyUpdatePayload
  """Deactivates a code discount."""
  discountCodeDeactivate(
    """The ID of the code discount to deactivate."""
    id: ID!
  ): Shopify_DiscountCodeDeactivatePayload
  """Deletes a code discount."""
  discountCodeDelete(
    """The ID of the code discount to delete."""
    id: ID!
  ): Shopify_DiscountCodeDeletePayload
  """Creates a free shipping code discount."""
  discountCodeFreeShippingCreate(
    """The input data used to create the code discount."""
    freeShippingCodeDiscount: Shopify_DiscountCodeFreeShippingInput!
  ): Shopify_DiscountCodeFreeShippingCreatePayload
  """Updates a free shipping code discount."""
  discountCodeFreeShippingUpdate(
    """The ID of the code discount to update."""
    id: ID!
    """The input data used to update the code discount."""
    freeShippingCodeDiscount: Shopify_DiscountCodeFreeShippingInput!
  ): Shopify_DiscountCodeFreeShippingUpdatePayload
  """
  Asynchronously delete discount redeem codes in bulk. Specify the redeem codes to delete by providing a
  search query, a saved search ID, or a list of redeem code IDs.
  """
  discountCodeRedeemCodeBulkDelete(
    """The ID of the redeem code's discount."""
    discountId: ID!
    """The search query for filtering discount redeem codes."""
    search: String
    """The ID of the saved search."""
    savedSearchId: ID
    """The IDs of the discount redeem codes to delete."""
    ids: [ID!]
  ): Shopify_DiscountCodeRedeemCodeBulkDeletePayload
  """
  Asynchronously add discount redeem codes in bulk. Specify the codes to add
  and the discount code ID that the codes will belong to.
  """
  discountRedeemCodeBulkAdd(
    """The ID of the code discount that the codes will be added to."""
    discountId: ID!
    """
    The list of codes that will be added to the code discount. Maximum 100 codes permitted.
    """
    codes: [Shopify_DiscountRedeemCodeInput!]!
  ): Shopify_DiscountRedeemCodeBulkAddPayload
  """Updates a dispute evidence."""
  disputeEvidenceUpdate(
    """The ID of the dispute evidence to be updated."""
    id: ID!
    """The updated properties for a dispute evidence."""
    input: Shopify_ShopifyPaymentsDisputeEvidenceUpdateInput!
  ): Shopify_DisputeEvidenceUpdatePayload
  """Adds tags to multiple draft orders."""
  draftOrderBulkAddTags(
    """
    The conditions for filtering draft orders on.
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    search: String
    """The ID of the draft order saved search for filtering draft orders on."""
    savedSearchId: ID
    """The IDs of the draft orders to add tags to."""
    ids: [ID!]
    """List of tags to be added."""
    tags: [String!]!
  ): Shopify_DraftOrderBulkAddTagsPayload
  """Deletes multiple draft orders."""
  draftOrderBulkDelete(
    """
    The conditions for filtering draft orders on.
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    search: String
    """The ID of the draft order saved search for filtering draft orders on."""
    savedSearchId: ID
    """The IDs of the draft orders to delete."""
    ids: [ID!]
  ): Shopify_DraftOrderBulkDeletePayload
  """Removes tags from multiple draft orders."""
  draftOrderBulkRemoveTags(
    """
    The conditions for filtering draft orders on.
    See the detailed [search syntax](https://shopify.dev/api/usage/search-syntax).
    """
    search: String
    """The ID of the draft order saved search for filtering draft orders on."""
    savedSearchId: ID
    """The IDs of the draft orders to remove tags from."""
    ids: [ID!]
    """List of tags to be removed."""
    tags: [String!]!
  ): Shopify_DraftOrderBulkRemoveTagsPayload
  """
  Calculates the properties of a draft order. Useful for determining information
  such as total taxes or price without actually creating a draft order.
  """
  draftOrderCalculate(
    """The fields for the draft order."""
    input: Shopify_DraftOrderInput!
  ): Shopify_DraftOrderCalculatePayload
  """Completes a draft order and creates an order."""
  draftOrderComplete(
    """The draft order to complete."""
    id: ID!
    """Whether the payment is pending."""
    paymentPending: Boolean = false
    """The gateway for the completed draft order."""
    paymentGatewayId: ID
    """A channel definition handle used for sales channel attribution."""
    sourceName: String
  ): Shopify_DraftOrderCompletePayload
  """Creates a draft order."""
  draftOrderCreate(
    """The fields used to create the draft order."""
    input: Shopify_DraftOrderInput!
  ): Shopify_DraftOrderCreatePayload
  """Creates a Draft Order from Order."""
  draftOrderCreateFromOrder(
    """Specifies the Order's id that we create the Draft Order from."""
    orderId: ID!
  ): Shopify_DraftOrderCreateFromOrderPayload
  """Creates a merchant checkout for the given draft order."""
  draftOrderCreateMerchantCheckout(
    """Specifies the Draft order's id that we create the checkout for."""
    id: ID!
  ): Shopify_DraftOrderCreateMerchantCheckoutPayload
  """Deletes a draft order."""
  draftOrderDelete(
    """Specify the draft order to delete by its ID."""
    input: Shopify_DraftOrderDeleteInput!
  ): Shopify_DraftOrderDeletePayload
  """Duplicates a draft order."""
  draftOrderDuplicate(
    """The ID of the draft order to duplicate."""
    id: ID
  ): Shopify_DraftOrderDuplicatePayload
  """Previews a draft order invoice email."""
  draftOrderInvoicePreview(
    """Specifies the draft order invoice email to preview."""
    id: ID!
    """Specifies the draft order invoice email fields."""
    email: Shopify_EmailInput
  ): Shopify_DraftOrderInvoicePreviewPayload
  """Sends an email invoice for a draft order."""
  draftOrderInvoiceSend(
    """Specifies the draft order to send the invoice for."""
    id: ID!
    """Specifies the draft order invoice email fields."""
    email: Shopify_EmailInput
  ): Shopify_DraftOrderInvoiceSendPayload
  """
  Updates a draft order.
  
  If a checkout has been started for a draft order, any update to the draft will unlink the checkout. Checkouts
  are created but not immediately completed when opening the merchant credit card modal in the admin, and when a
  buyer opens the invoice URL. This is usually fine, but there is an edge case where a checkout is in progress
  and the draft is updated before the checkout completes. This will not interfere with the checkout and order
  creation, but if the link from draft to checkout is broken the draft will remain open even after the order is
  created.
  """
  draftOrderUpdate(
    """Specifies the draft order to update."""
    id: ID!
    """The draft order properties to update."""
    input: Shopify_DraftOrderInput!
  ): Shopify_DraftOrderUpdatePayload
  """Creates a new Amazon EventBridge webhook subscription."""
  eventBridgeWebhookSubscriptionCreate(
    """The type of event that triggers the webhook."""
    topic: Shopify_WebhookSubscriptionTopic!
    """Specifies the input fields for an EventBridge webhook subscription."""
    webhookSubscription: Shopify_EventBridgeWebhookSubscriptionInput!
  ): Shopify_EventBridgeWebhookSubscriptionCreatePayload
  """Updates an Amazon EventBridge webhook subscription."""
  eventBridgeWebhookSubscriptionUpdate(
    """The ID of the webhook subscription to update."""
    id: ID!
    """Specifies the input fields for an EventBridge webhook subscription."""
    webhookSubscription: Shopify_EventBridgeWebhookSubscriptionInput!
  ): Shopify_EventBridgeWebhookSubscriptionUpdatePayload
  """
  Creates file assets using an external URL or for files that were previously uploaded using the
  [stagedUploadsCreate mutation](https://shopify.dev/api/admin-graphql/latest/mutations/stageduploadscreate).
  These files are added to the [Files page](https://shopify.com/admin/settings/files) in Shopify admin.
  """
  fileCreate(
    """List of new files to be created."""
    files: [Shopify_FileCreateInput!]!
  ): Shopify_FileCreatePayload
  """Deletes existing file assets that were uploaded to Shopify."""
  fileDelete(
    """The IDs of the files to be deleted."""
    fileIds: [ID!]!
  ): Shopify_FileDeletePayload
  """Updates an existing file asset that was uploaded to Shopify."""
  fileUpdate(
    """List of files to be updated."""
    files: [Shopify_FileUpdateInput!]!
  ): Shopify_FileUpdatePayload
  """
  Triggers any workflows that begin with the trigger specified in the request
  body. To learn more, refer to [_Create Shopify Flow
  triggers_](https://shopify.dev/apps/flow/triggers).
  """
  flowTriggerReceive(
    """The payload needed to run the Trigger."""
    body: String!
  ): Shopify_FlowTriggerReceivePayload
  """Cancels a fulfillment."""
  fulfillmentCancel(
    """The ID of the fulfillment to be canceled."""
    id: ID!
  ): Shopify_FulfillmentCancelPayload
  """
  Creates a fulfillment for one or many fulfillment orders.
  The fulfillment orders are associated with the same order and are assigned to the same location.
  """
  fulfillmentCreateV2(
    """The input fields used to create a fulfillment from fulfillment orders."""
    fulfillment: Shopify_FulfillmentV2Input!
    """An optional message for the fulfillment request."""
    message: String
  ): Shopify_FulfillmentCreateV2Payload
  """Creates a fulfillment event for a specified fulfillment."""
  fulfillmentEventCreate(
    """The input fields used to create a fulfillment event for a fulfillment."""
    fulfillmentEvent: Shopify_FulfillmentEventInput!
  ): Shopify_FulfillmentEventCreatePayload
  """
  Accept a cancellation request sent to a fulfillment service for a fulfillment order.
  """
  fulfillmentOrderAcceptCancellationRequest(
    """
    The ID of the fulfillment order associated with the cancellation request.
    """
    id: ID!
    """An optional reason for accepting the cancellation request."""
    message: String
  ): Shopify_FulfillmentOrderAcceptCancellationRequestPayload
  """
  Accepts a fulfillment request sent to a fulfillment service for a fulfillment order.
  """
  fulfillmentOrderAcceptFulfillmentRequest(
    """
    The ID of the fulfillment order associated with the fulfillment request.
    """
    id: ID!
    """An optional reason for accepting the fulfillment request."""
    message: String
  ): Shopify_FulfillmentOrderAcceptFulfillmentRequestPayload
  """Marks a fulfillment order as canceled."""
  fulfillmentOrderCancel(
    """The ID of the fulfillment order to mark as canceled."""
    id: ID!
  ): Shopify_FulfillmentOrderCancelPayload
  """
  Marks an in-progress fulfillment order as incomplete, indicating the
  fulfillment service is unable to ship any remaining items and intends to close
  the fulfillment order.
  """
  fulfillmentOrderClose(
    """The ID of the fulfillment order to mark as incomplete."""
    id: ID!
    """An optional reason for marking the fulfillment order as incomplete."""
    message: String
  ): Shopify_FulfillmentOrderClosePayload
  """Applies a fulfillment hold on an open fulfillment order."""
  fulfillmentOrderHold(
    """
    The ID of the fulfillment order on which a fulfillment hold is applied.
    """
    id: ID!
    """The details of the fulfillment hold applied on the fulfillment order."""
    fulfillmentHold: Shopify_FulfillmentOrderHoldInput!
  ): Shopify_FulfillmentOrderHoldPayload
  """
  Mark line items associated with a fulfillment order as being ready for pickup by a customer.
  
  Sends a Ready For Pickup notification to the customer to let them know that their order is ready
  to be picked up.
  """
  fulfillmentOrderLineItemsPreparedForPickup(
    """
    The input for marking fulfillment order line items as ready for pickup.
    """
    input: Shopify_FulfillmentOrderLineItemsPreparedForPickupInput!
  ): Shopify_FulfillmentOrderLineItemsPreparedForPickupPayload
  """Moves a fulfillment order to a new location."""
  fulfillmentOrderMove(
    """The ID of the fulfillment order to be moved."""
    id: ID!
    """The ID of the location where the fulfillment order will be moved."""
    newLocationId: ID!
  ): Shopify_FulfillmentOrderMovePayload
  """Marks a scheduled fulfillment order as open."""
  fulfillmentOrderOpen(
    """The ID of the fulfillment order to mark as open."""
    id: ID!
  ): Shopify_FulfillmentOrderOpenPayload
  """
  Rejects a cancellation request sent to a fulfillment service for a fulfillment order.
  """
  fulfillmentOrderRejectCancellationRequest(
    """
    The ID of the fulfillment order associated with the cancellation request.
    """
    id: ID!
    """An optional reason for rejecting the cancellation request."""
    message: String
  ): Shopify_FulfillmentOrderRejectCancellationRequestPayload
  """
  Rejects a fulfillment request sent to a fulfillment service for a fulfillment order.
  """
  fulfillmentOrderRejectFulfillmentRequest(
    """
    The ID of the fulfillment order associated with the fulfillment request.
    """
    id: ID!
    """The reason for the fulfillment order rejection."""
    reason: Shopify_FulfillmentOrderRejectionReason
    """An optional reason for rejecting the fulfillment request."""
    message: String
    """A list of rejected line items."""
    lineItems: [Shopify_IncomingRequestLineItemInput!]
  ): Shopify_FulfillmentOrderRejectFulfillmentRequestPayload
  """Releases the fulfillment hold on a fulfillment order."""
  fulfillmentOrderReleaseHold(
    """
    The ID of the fulfillment order for which to release the fulfillment hold.
    """
    id: ID!
    """
    A configurable ID used to track the automation system releasing this hold.
    """
    externalId: String
  ): Shopify_FulfillmentOrderReleaseHoldPayload
  """Reschedules a scheduled fulfillment order."""
  fulfillmentOrderReschedule(
    """The ID of the fulfillment order to reschedule."""
    id: ID!
    """The new fulfill at date of the fulfillment order."""
    fulfillAt: DateTime!
  ): Shopify_FulfillmentOrderReschedulePayload
  """
  Sends a cancellation request to the fulfillment service of a fulfillment order.
  """
  fulfillmentOrderSubmitCancellationRequest(
    """
    The ID of the fulfillment order associated with the cancellation request.
    """
    id: ID!
    """An optional reason for the cancellation request."""
    message: String
  ): Shopify_FulfillmentOrderSubmitCancellationRequestPayload
  """
  Sends a fulfillment request to the fulfillment service of a fulfillment order.
  """
  fulfillmentOrderSubmitFulfillmentRequest(
    """The ID of the fulfillment order associated with fulfillment request."""
    id: ID!
    """An optional message for the fulfillment request."""
    message: String
    """
    Whether the customer should be notified when fulfillments are created for this fulfillment order.
    """
    notifyCustomer: Boolean
    """
    The fulfillment order line items to be requested for fulfillment.
    If left blank, all line items of the fulfillment order are requested for fulfillment.
    """
    fulfillmentOrderLineItems: [Shopify_FulfillmentOrderLineItemInput!]
    """
    A reference to the [ShippingMethod](https://shopify.dev/api/admin-graphql/latest/objects/shippingmethod)
    code, such as `FREE_SHIPPING`.
    """
    shippingMethod: String
  ): Shopify_FulfillmentOrderSubmitFulfillmentRequestPayload
  """Releases the fulfillment holds on a list of fulfillment orders."""
  fulfillmentOrdersReleaseHolds(
    """
    The IDs of the fulfillment orders for which to release the fulfillment holds.
    """
    ids: [ID!]!
    """
    A configurable ID used to track the automation system releasing these holds.
    """
    externalId: String
  ): Shopify_FulfillmentOrdersReleaseHoldsPayload
  """
  Sets the latest date and time by which the fulfillment orders need to be fulfilled.
  """
  fulfillmentOrdersSetFulfillmentDeadline(
    """The IDs of the fulfillment orders for which the deadline is being set."""
    fulfillmentOrderIds: [ID!]!
    """The new fulfillment deadline of the fulfillment orders."""
    fulfillmentDeadline: DateTime!
  ): Shopify_FulfillmentOrdersSetFulfillmentDeadlinePayload
  """Creates a fulfillment service."""
  fulfillmentServiceCreate(
    """The name of the fulfillment service."""
    name: String!
    """
    The URL to send requests for the fulfillment service. The following considerations apply:
    
    - Shopify queries the <code>callback_url/fetch_tracking_numbers</code> endpoint to retrieve tracking numbers
        for orders, if `trackingSupport` is set to `true`.
    - Shopify queries the <code>callback_url/fetch_stock</code> endpoint to retrieve inventory levels,
        if `inventoryManagement` is set to `true`.
    - Shopify uses the <code>callback_url/fulfillment_order_notification</code> endpoint to send
        [fulfillment and cancellation requests](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-2-receive-fulfillment-requests-and-cancellations).
    """
    callbackUrl: URL!
    """
    Whether the fulfillment service provides tracking numbers for packages.
    """
    trackingSupport: Boolean = false
    """
    Whether the fulfillment service uses the [fulfillment order based workflow](
      https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments
    ) for managing fulfillments.
    
    [As of 2022-07 API version](https://shopify.dev/changelog/legacy-fulfillment-api-deprecation),
    the fulfillment order based workflow is the only way to manage fulfillments,
    and `fulfillmentOrdersOptIn` must be set to `true`.
    """
    fulfillmentOrdersOptIn: Boolean!
    """
    Whether the fulfillment service can stock inventory alongside other locations.
    """
    permitsSkuSharing: Boolean = false
    """
    Whether the fulfillment service manages product inventory and provides updates to Shopify.
    """
    inventoryManagement: Boolean = false
  ): Shopify_FulfillmentServiceCreatePayload
  """Deletes a fulfillment service."""
  fulfillmentServiceDelete(
    """The ID of the fulfillment service to delete."""
    id: ID!
    """
    The ID of the location where inventory and commitments will be relocated
    after the fulfillment service is deleted.
    """
    destinationLocationId: ID
  ): Shopify_FulfillmentServiceDeletePayload
  """Updates a fulfillment service."""
  fulfillmentServiceUpdate(
    """The id of the fulfillment service."""
    id: ID!
    """The name of the fulfillment service."""
    name: String
    """
    The URL to send requests for the fulfillment service. The following considerations apply:
    
    - Shopify queries the <code>callback_url/fetch_tracking_numbers</code> endpoint to retrieve tracking numbers
        for orders, if `trackingSupport` is set to `true`.
    - Shopify queries the <code>callback_url/fetch_stock</code> endpoint to retrieve inventory levels,
        if `inventoryManagement` is set to `true`.
    - Shopify uses the <code>callback_url/fulfillment_order_notification</code> endpoint to send
        [fulfillment and cancellation requests](https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments#step-2-receive-fulfillment-requests-and-cancellations).
    """
    callbackUrl: URL
    """
    Whether the fulfillment service provides tracking numbers for packages.
    """
    trackingSupport: Boolean
    """
    Whether the fulfillment service uses the [fulfillment order based workflow](
      https://shopify.dev/apps/fulfillment/fulfillment-service-apps/manage-fulfillments
    ) for managing fulfillments.
    
    [As of 2022-07 API version](https://shopify.dev/changelog/legacy-fulfillment-api-deprecation),
    the fulfillment order based workflow is the only way to manage fulfillments,
    and `true` is the only valid value for `fulfillmentOrdersOptIn`.
    """
    fulfillmentOrdersOptIn: Boolean
    """
    Whether the fulfillment service can stock inventory alongside other locations.
    """
    permitsSkuSharing: Boolean
  ): Shopify_FulfillmentServiceUpdatePayload
  """Updates tracking information for a fulfillment."""
  fulfillmentTrackingInfoUpdateV2(
    """The ID of the fulfillment."""
    fulfillmentId: ID!
    """
    The tracking input for the mutation, including tracking URL, number, and company.
    """
    trackingInfoInput: Shopify_FulfillmentTrackingInput!
    """
    Whether the customer will be notified of this update and future updates for the fulfillment.
    If this field is left blank, then notifications won't be sent to the customer when the fulfillment is updated.
    """
    notifyCustomer: Boolean
  ): Shopify_FulfillmentTrackingInfoUpdateV2Payload
  """Create a gift card."""
  giftCardCreate(
    """The input fields to create a gift card."""
    input: Shopify_GiftCardCreateInput!
  ): Shopify_GiftCardCreatePayload
  """
  Disable a gift card. A disabled gift card cannot be used by a customer. A disabled gift card cannot be re-enabled.
  """
  giftCardDisable(
    """The ID of the gift card to disable."""
    id: ID!
  ): Shopify_GiftCardDisablePayload
  """Update a gift card."""
  giftCardUpdate(
    """The ID of the gift card to be updated."""
    id: ID!
    """The input fields to update the gift card."""
    input: Shopify_GiftCardUpdateInput!
  ): Shopify_GiftCardUpdatePayload
  """Activate an inventory item at a location."""
  inventoryActivate(
    """The ID of the inventory item to activate."""
    inventoryItemId: ID!
    """The ID of the location of the inventory item being activated."""
    locationId: ID!
    """
    The initial available quantity of the inventory item being activated at the location.
    """
    available: Int
    """
    The initial on_hand quantity of the inventory item being activated at the location.
    """
    onHand: Int
  ): Shopify_InventoryActivatePayload
  """Apply changes to inventory quantities."""
  inventoryAdjustQuantities(
    """The information required to adjust inventory quantities."""
    input: Shopify_InventoryAdjustQuantitiesInput!
  ): Shopify_InventoryAdjustQuantitiesPayload
  """Adjusts the inventory by a certain quantity."""
  inventoryAdjustQuantity(
    """Provides the input fields required to update an inventory level."""
    input: Shopify_InventoryAdjustQuantityInput!
  ): Shopify_InventoryAdjustQuantityPayload
  """Adjusts the inventory at a location for multiple inventory items."""
  inventoryBulkAdjustQuantityAtLocation(
    """Specifies adjustments for items."""
    inventoryItemAdjustments: [Shopify_InventoryAdjustItemInput!]!
    """Specifies where the item should be adjusted."""
    locationId: ID!
  ): Shopify_InventoryBulkAdjustQuantityAtLocationPayload
  """
  Modify the activation status of an inventory item at locations. Activating an
  inventory item at a particular location allows that location to stock that
  inventory item. Deactivating an inventory item at a location removes the
  inventory item's quantities and turns off the inventory item from that location.
  """
  inventoryBulkToggleActivation(
    """
    The ID of the inventory item to modify the activation status locations for.
    """
    inventoryItemId: ID!
    """
    A list of pairs of locations and activate status to update for the specified inventory item.
    """
    inventoryItemUpdates: [Shopify_InventoryBulkToggleActivationInput!]!
  ): Shopify_InventoryBulkToggleActivationPayload
  """
  Removes an inventory item's quantities from a location, and turns off inventory at the location.
  """
  inventoryDeactivate(
    """The ID of the inventory level to deactivate."""
    inventoryLevelId: ID!
  ): Shopify_InventoryDeactivatePayload
  """Updates an inventory item."""
  inventoryItemUpdate(
    """The ID of the inventory item to update."""
    id: ID!
    """
    The input fields that update an [`inventoryItem`](https://shopify.dev/api/admin-graphql/latest/queries/inventoryitem).
    """
    input: Shopify_InventoryItemUpdateInput!
  ): Shopify_InventoryItemUpdatePayload
  """Moves inventory between inventory quantities."""
  inventoryMoveQuantities(
    """The information required to move inventory quantities."""
    input: Shopify_InventoryMoveQuantitiesInput!
  ): Shopify_InventoryMoveQuantitiesPayload
  """Set inventory on-hand quantities using absolute values."""
  inventorySetOnHandQuantities(
    """The information required to set inventory on hand quantities."""
    input: Shopify_InventorySetOnHandQuantitiesInput!
  ): Shopify_InventorySetOnHandQuantitiesPayload
  """Activates a location."""
  locationActivate(
    """The ID of a location to activate."""
    locationId: ID!
  ): Shopify_LocationActivatePayload
  """Adds a new location."""
  locationAdd(
    """The properties of the location to add."""
    input: Shopify_LocationAddInput!
  ): Shopify_LocationAddPayload
  """
  Deactivates a location and moves inventory, pending orders, and moving transfers to a destination location.
  """
  locationDeactivate(
    """The ID of a location to deactivate."""
    locationId: ID!
    """
    The ID of a destination location to which inventory, pending orders and
    moving transfers will be moved from the location to deactivate.
    """
    destinationLocationId: ID
  ): Shopify_LocationDeactivatePayload
  """Deletes a location."""
  locationDelete(
    """The ID of a location to delete."""
    locationId: ID!
  ): Shopify_LocationDeletePayload
  """Edits an existing location."""
  locationEdit(
    """The ID of a location to edit."""
    id: ID!
    """The updated properties for the location."""
    input: Shopify_LocationEditInput!
  ): Shopify_LocationEditPayload
  """Disables local pickup for a location."""
  locationLocalPickupDisable(
    """The ID of the location to disable local pickup for."""
    locationId: ID!
  ): Shopify_LocationLocalPickupDisablePayload
  """Enables local pickup for a location."""
  locationLocalPickupEnable(
    """The settings required to enable local pickup for a location."""
    localPickupSettings: Shopify_DeliveryLocationLocalPickupEnableInput!
  ): Shopify_LocationLocalPickupEnablePayload
  """Creates a new market."""
  marketCreate(
    """The properties of the new market."""
    input: Shopify_MarketCreateInput!
  ): Shopify_MarketCreatePayload
  """Updates currency settings of a market."""
  marketCurrencySettingsUpdate(
    """The ID of the market definition to target."""
    marketId: ID!
    """Properties to update for the market currency settings."""
    input: Shopify_MarketCurrencySettingsUpdateInput!
  ): Shopify_MarketCurrencySettingsUpdatePayload
  """Deletes a market definition."""
  marketDelete(
    """The ID of the market to delete."""
    id: ID!
  ): Shopify_MarketDeletePayload
  """Creates or updates market localizations."""
  marketLocalizationsRegister(
    """
    The ID of the resource that is being localized within the context of a market.
    """
    resourceId: ID!
    """The input fields for a market localization."""
    marketLocalizations: [Shopify_MarketLocalizationRegisterInput!]!
  ): Shopify_MarketLocalizationsRegisterPayload
  """Deletes market localizations."""
  marketLocalizationsRemove(
    """
    The ID of the resource for which market localizations are being deleted.
    """
    resourceId: ID!
    """The list of market localization keys."""
    marketLocalizationKeys: [String!]!
    """The list of market IDs."""
    marketIds: [ID!]!
  ): Shopify_MarketLocalizationsRemovePayload
  """Deletes a market region."""
  marketRegionDelete(
    """The ID of the market region to delete."""
    id: ID!
  ): Shopify_MarketRegionDeletePayload
  """Creates regions that belong to an existing market."""
  marketRegionsCreate(
    """The ID of the market to add the regions to."""
    marketId: ID!
    """The regions to be created."""
    regions: [Shopify_MarketRegionCreateInput!]!
  ): Shopify_MarketRegionsCreatePayload
  """Updates the properties of a market."""
  marketUpdate(
    """The ID of the market to update."""
    id: ID!
    """The properties to update."""
    input: Shopify_MarketUpdateInput!
  ): Shopify_MarketUpdatePayload
  """Creates a web presence for a market."""
  marketWebPresenceCreate(
    """The ID of the market for which to create a web presence."""
    marketId: ID!
    """The details of the web presence to be created."""
    webPresence: Shopify_MarketWebPresenceCreateInput!
  ): Shopify_MarketWebPresenceCreatePayload
  """Deletes a market web presence."""
  marketWebPresenceDelete(
    """The ID of the market for which to delete the web presence."""
    marketId: ID!
  ): Shopify_MarketWebPresenceDeletePayload
  """Updates a market web presence."""
  marketWebPresenceUpdate(
    """The ID of the market for which to update the web presence."""
    marketId: ID!
    """The web_presence fields used to update the market's web presence."""
    webPresence: Shopify_MarketWebPresenceUpdateInput!
  ): Shopify_MarketWebPresenceUpdatePayload
  """Create new marketing activity."""
  marketingActivityCreate(
    """The Input of marketing activity create."""
    input: Shopify_MarketingActivityCreateInput!
  ): Shopify_MarketingActivityCreatePayload
  """Creates a new external marketing activity."""
  marketingActivityCreateExternal(
    """The input field for creating a external marketing activity."""
    input: Shopify_MarketingActivityCreateExternalInput!
  ): Shopify_MarketingActivityCreateExternalPayload
  """Updates a marketing activity with the latest information."""
  marketingActivityUpdate(
    """The Input of the marketing activity."""
    input: Shopify_MarketingActivityUpdateInput!
  ): Shopify_MarketingActivityUpdatePayload
  """Update an external marketing activity."""
  marketingActivityUpdateExternal(
    """The input to update the external marketing activity."""
    input: Shopify_MarketingActivityUpdateExternalInput!
    """
    The ID of the marketing activity. You must provide one of the following
    values: marketing activity ID, remote ID, or UTM must be provided.
    """
    marketingActivityId: ID
    """
    The remote ID of the marketing event associated with the marketing activity.
    You must provide one of the following values: marketing activity ID, remote
    ID, or UTM must be provided.
    """
    remoteId: String
    """
    The UTM parameters associated with marketing activities to filter by.You
    must provide one of the following values: marketing activity ID, remote ID,
    or UTM must be provided.
    """
    utm: Shopify_UTMInput
  ): Shopify_MarketingActivityUpdateExternalPayload
  """Creates a new marketing event engagement for a marketing activity."""
  marketingEngagementCreate(
    """The ID of the marketing activity."""
    marketingActivityId: ID!
    """The marketing engagement's attributes."""
    marketingEngagement: Shopify_MarketingEngagementInput!
  ): Shopify_MarketingEngagementCreatePayload
  """Creates a metafield definition."""
  metafieldDefinitionCreate(
    """Specifies the input fields for a metafield definition."""
    definition: Shopify_MetafieldDefinitionInput!
  ): Shopify_MetafieldDefinitionCreatePayload
  """
  Delete a metafield definition.
  Optionally deletes all associated metafields asynchronously when specified.
  """
  metafieldDefinitionDelete(
    """The id of the metafield definition to delete."""
    id: ID!
    """Whether to delete all associated metafields."""
    deleteAllAssociatedMetafields: Boolean = false
  ): Shopify_MetafieldDefinitionDeletePayload
  """
  You can organize your metafields in your Shopify admin by pinning/unpinning metafield definitions.
  The order of your pinned metafield definitions determines the order in which your metafields are displayed
  on the corresponding pages in your Shopify admin. By default, only pinned metafields are automatically displayed.
  """
  metafieldDefinitionPin(
    """The ID of the metafield definition to pin."""
    definitionId: ID!
  ): Shopify_MetafieldDefinitionPinPayload
  """
  You can organize your metafields in your Shopify admin by pinning/unpinning metafield definitions.
  The order of your pinned metafield definitions determines the order in which your metafields are displayed
  on the corresponding pages in your Shopify admin. By default, only pinned metafields are automatically displayed.
  """
  metafieldDefinitionUnpin(
    """The ID of the metafield definition to unpin."""
    definitionId: ID!
  ): Shopify_MetafieldDefinitionUnpinPayload
  """Updates a metafield definition."""
  metafieldDefinitionUpdate(
    """The input fields for the metafield definition update."""
    definition: Shopify_MetafieldDefinitionUpdateInput!
  ): Shopify_MetafieldDefinitionUpdatePayload
  """Deletes a metafield."""
  metafieldDelete(input: Shopify_MetafieldDeleteInput!): Shopify_MetafieldDeletePayload
  """
  Creates a `MetafieldStorefrontVisibility` record to make all metafields that belong to the specified resource
  and have the established `namespace` and `key` combination visible in the Storefront API.
  """
  metafieldStorefrontVisibilityCreate(
    """
    Specifies the input fields for a `MetafieldStorefrontVisibility` record.
    """
    input: Shopify_MetafieldStorefrontVisibilityInput!
  ): Shopify_MetafieldStorefrontVisibilityCreatePayload
  """
  Deletes a `MetafieldStorefrontVisibility` record. All metafields that belongs to the specified record will no
  longer be visible in the Storefront API.
  """
  metafieldStorefrontVisibilityDelete(
    """The ID of the `MetafieldStorefrontVisibility` record to delete."""
    id: ID!
  ): Shopify_MetafieldStorefrontVisibilityDeletePayload
  """
  Sets metafield values. Metafield values will be set regardless if they were previously created or not.
  
  Allows a maximum of 25 metafields to be set at a time.
  """
  metafieldsSet(
    """The list of metafield values to set. Maximum of 25."""
    metafields: [Shopify_MetafieldsSetInput!]!
  ): Shopify_MetafieldsSetPayload
  """
  Asynchronously delete metaobjects and their associated metafields in bulk.
  """
  metaobjectBulkDelete(
    """
    Specifies the condition by which metaobjects are deleted.
    Exactly one field of input is required.
    """
    where: Shopify_MetaobjectBulkDeleteWhereCondition!
  ): Shopify_MetaobjectBulkDeletePayload
  """Creates a new metaobject."""
  metaobjectCreate(
    """The parameters for the metaobject to create."""
    metaobject: Shopify_MetaobjectCreateInput!
  ): Shopify_MetaobjectCreatePayload
  """Creates a new metaobject definition."""
  metaobjectDefinitionCreate(
    """The input fields for creating a metaobject definition."""
    definition: Shopify_MetaobjectDefinitionCreateInput!
  ): Shopify_MetaobjectDefinitionCreatePayload
  """
  Deletes the specified metaobject definition.
  Also deletes all related metafield definitions, metaobjects, and metafields asynchronously.
  """
  metaobjectDefinitionDelete(
    """The ID of the metaobjects definition to delete."""
    id: ID!
  ): Shopify_MetaobjectDefinitionDeletePayload
  """
  Updates a metaobject definition with new settings and metafield definitions.
  """
  metaobjectDefinitionUpdate(
    """The ID of the metaobject definition to update."""
    id: ID!
    """The input fields for updating a metaobject definition."""
    definition: Shopify_MetaobjectDefinitionUpdateInput!
  ): Shopify_MetaobjectDefinitionUpdatePayload
  """Deletes the specified metaobject and its associated metafields."""
  metaobjectDelete(
    """The ID of the metaobject to delete."""
    id: ID!
  ): Shopify_MetaobjectDeletePayload
  """Updates an existing metaobject."""
  metaobjectUpdate(
    """The ID of the metaobject to update."""
    id: ID!
    """Specifies parameters to update on the metaobject."""
    metaobject: Shopify_MetaobjectUpdateInput!
  ): Shopify_MetaobjectUpdatePayload
  """
  Retrieves a metaobject by handle, then updates it with the provided input values.
  If no matching metaobject is found, a new metaobject is created with the provided input values.
  """
  metaobjectUpsert(
    """The identifier of the metaobject to upsert."""
    handle: Shopify_MetaobjectHandleInput!
    """The parameters to upsert the metaobject."""
    metaobject: Shopify_MetaobjectUpsertInput!
  ): Shopify_MetaobjectUpsertPayload
  """
  Captures payment for an authorized transaction on an order. An order can only
  be captured if it has a successful authorization transaction. Capturing an
  order will claim the money reserved by the authorization.
  """
  orderCapture(
    """The input for the mutation."""
    input: Shopify_OrderCaptureInput!
  ): Shopify_OrderCapturePayload
  """Closes an open order."""
  orderClose(
    """The input for the mutation."""
    input: Shopify_OrderCloseInput!
  ): Shopify_OrderClosePayload
  """Creates a payment for an order by mandate."""
  orderCreateMandatePayment(
    """The ID of the order to collect the balance for."""
    id: ID!
    """The ID of the payment schedule to collect the balance for."""
    paymentScheduleId: ID
    """A unique key to identify the payment request."""
    idempotencyKey: String!
    """The mandate ID used for payment."""
    mandateId: ID!
    """
    Whether the payment should be authorized or captured. If `false`, then the authorization of
                the payment is triggered.
    """
    autoCapture: Boolean = true
  ): Shopify_OrderCreateMandatePaymentPayload
  """
  Adds a custom line item to an existing order. For example, you could add a
  gift wrapping service as a [custom line item](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing#add-a-custom-line-item).
  To learn how to edit existing orders, refer to [Edit an existing order with Admin API](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
  """
  orderEditAddCustomItem(
    """
    The ID of the [calculated order](https://shopify.dev/api/admin-graphql/latest/objects/calculatedorder)
    to which the custom item is added.
    """
    id: ID!
    """The name of the custom item to add."""
    title: String!
    """
    The ID of the retail [location](https://shopify.dev/api/admin-graphql/latest/objects/location)
    (if applicable) from which the custom item is sold. Used for tax
    calculations. A default location will be chosen automatically if none is provided.
    """
    locationId: ID
    """The unit price of the custom item. This value can't be negative."""
    price: Shopify_MoneyInput!
    """The quantity of the custom item. This value must be greater than zero."""
    quantity: Int!
    """Whether the custom item is taxable. Defaults to `true`."""
    taxable: Boolean
    """Whether the custom item requires shipping. Defaults to `false`."""
    requiresShipping: Boolean
  ): Shopify_OrderEditAddCustomItemPayload
  """
  Adds a discount to a newly added line item on the current order edit. More
  information on how to use the GraphQL Admin API to edit an existing order,
  refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
  """
  orderEditAddLineItemDiscount(
    """The ID of the calculated order to update."""
    id: ID!
    """The ID of a newly added calculated line item to add the discount to."""
    lineItemId: ID!
    """The discount to add to the line item."""
    discount: Shopify_OrderEditAppliedDiscountInput!
  ): Shopify_OrderEditAddLineItemDiscountPayload
  """Adds a line item from an existing product variant."""
  orderEditAddVariant(
    """
    The ID of the [calculated order](https://shopify.dev/api/admin-graphql/latest/objects/calculatedorder)
    to edit.
    """
    id: ID!
    """The ID of the variant to add."""
    variantId: ID!
    """
    The ID of the [location](https://shopify.dev/api/admin-graphql/latest/objects/location)
    to check for inventory availability. A default location ID is chosen automatically if none is provided.
    """
    locationId: ID
    """
    The quantity of the item to add to the order. Must be a positive value.
    """
    quantity: Int!
    """
    Whether the mutation can create a line item for a variant that's already on the calculated order.
    """
    allowDuplicates: Boolean = false
  ): Shopify_OrderEditAddVariantPayload
  """
  Starts editing an order. Mutations are operating on `OrderEdit`.
  All order edits start with `orderEditBegin`, have any number of `orderEdit`*
  mutations made, and end with `orderEditCommit`.
  """
  orderEditBegin(
    """The ID of the order to begin editing."""
    id: ID!
  ): Shopify_OrderEditBeginPayload
  """
  Applies and saves staged changes to an order. Mutations are operating on `OrderEdit`.
  All order edits start with `orderEditBegin`, have any number of `orderEdit`*
  mutations made, and end with `orderEditCommit`.
  """
  orderEditCommit(
    """
    The ID of the calculated order that will have its changes applied to the order.
    """
    id: ID!
    """Whether to notify the customer or not."""
    notifyCustomer: Boolean
    """Note for staff members."""
    staffNote: String
  ): Shopify_OrderEditCommitPayload
  """
  Removes a line item discount that was applied as part of an order edit.
  """
  orderEditRemoveLineItemDiscount(
    """
    The ID of the [calculated order](https://shopify.dev/api/admin-graphql/latest/objects/calculatedorder)
    from which to remove the discount.
    """
    id: ID!
    """
    The ID of the [calculated discount application](https://shopify.dev/api/admin-graphql/latest/interfaces/calculateddiscountapplication)
    to remove.
    """
    discountApplicationId: ID!
  ): Shopify_OrderEditRemoveLineItemDiscountPayload
  """
  Sets the quantity of a line item on an order that is being edited. More
  information on how to use the GraphQL Admin API to edit an existing order,
  refer to [Edit existing orders](https://shopify.dev/apps/fulfillment/order-management-apps/order-editing).
  """
  orderEditSetQuantity(
    """
    The ID of the calculated order to edit. The edit changes the quantity on the line item.
    """
    id: ID!
    """The ID of the line item to edit."""
    lineItemId: ID!
    """
    The new quantity to set for the line item. This value cannot be negative.
    """
    quantity: Int!
    """
    Whether or not to restock the line item when the updated quantity is less than the original quantity.
    """
    restock: Boolean
  ): Shopify_OrderEditSetQuantityPayload
  """Sends an email invoice for an order."""
  orderInvoiceSend(
    """The order associated with the invoice."""
    id: ID!
    """
    The email input fields for the order invoice. The `bcc` and `from` fields should be store or staff account emails.
    """
    email: Shopify_EmailInput
  ): Shopify_OrderInvoiceSendPayload
  """
  Marks an order as paid. You can only mark an order as paid if it isn't already fully paid.
  """
  orderMarkAsPaid(
    """The input for the mutation."""
    input: Shopify_OrderMarkAsPaidInput!
  ): Shopify_OrderMarkAsPaidPayload
  """Opens a closed order."""
  orderOpen(
    """The input for the mutation."""
    input: Shopify_OrderOpenInput!
  ): Shopify_OrderOpenPayload
  """Updates the fields of an order."""
  orderUpdate(
    """The input for the mutation."""
    input: Shopify_OrderInput!
  ): Shopify_OrderUpdatePayload
  """Sends an email payment reminder for a payment schedule."""
  paymentReminderSend(
    """The payment schedule id associated with the reminder."""
    paymentScheduleId: ID!
  ): Shopify_PaymentReminderSendPayload
  """
  Create payment terms on an order. To create payment terms on a draft order,
  use a draft order mutation and include the request with the `DraftOrderInput`.
  """
  paymentTermsCreate(
    """Specifies the reference orderId to add the payment terms for."""
    referenceId: ID!
    """The attributes used to create the payment terms."""
    paymentTermsAttributes: Shopify_PaymentTermsCreateInput!
  ): Shopify_PaymentTermsCreatePayload
  """
  Delete payment terms for an order. To delete payment terms on a draft order,
  use a draft order mutation and include the request with the `DraftOrderInput`.
  """
  paymentTermsDelete(
    """The input fields used to delete the payment terms."""
    input: Shopify_PaymentTermsDeleteInput!
  ): Shopify_PaymentTermsDeletePayload
  """
  Update payment terms on an order. To update payment terms on a draft order,
  use a draft order mutation and include the request with the `DraftOrderInput`.
  """
  paymentTermsUpdate(
    """The input fields used to update the payment terms."""
    input: Shopify_PaymentTermsUpdateInput!
  ): Shopify_PaymentTermsUpdatePayload
  """
  Creates a price list. You can use the `priceListCreate` mutation to create a
  new price list for a country. This enables you to sell your products with
  international pricing.
  """
  priceListCreate(
    """The properties of the new price list."""
    input: Shopify_PriceListCreateInput!
  ): Shopify_PriceListCreatePayload
  """
  Deletes a price list. For example, you can delete a price list so that it no
  longer applies for products in the associated market.
  """
  priceListDelete(
    """The ID of the price list to be deleted."""
    id: ID!
  ): Shopify_PriceListDeletePayload
  """
  Creates or updates fixed prices on a price list. You can use the
  `priceListFixedPricesAdd` mutation to set a fixed price for specific product
  variants. This lets you change product variant pricing on a per country basis.
  Any existing fixed price list prices for these variants will be overwritten.
  """
  priceListFixedPricesAdd(
    """
    The ID of the price list to which the fixed prices will be added or updated.
    """
    priceListId: ID!
    """The list of fixed prices to add or update in the price list."""
    prices: [Shopify_PriceListPriceInput!]!
  ): Shopify_PriceListFixedPricesAddPayload
  """
  Deletes specific fixed prices from a price list using a product variant ID.
  You can use the `priceListFixedPricesDelete` mutation to delete a set of fixed
  prices from a price list. After deleting the set of fixed prices from the
  price list, the price of each product variant reverts to the original price
  that was determined by the price list adjustment.
  """
  priceListFixedPricesDelete(
    """The ID of the price list from which the fixed prices will be removed."""
    priceListId: ID!
    """
    A list of product variant IDs whose fixed prices will be removed from the price list.
    """
    variantIds: [ID!]!
  ): Shopify_PriceListFixedPricesDeletePayload
  """
  Updates a price list.
  If you modify the currency, then any fixed prices set on the price list will be deleted.
  """
  priceListUpdate(
    """The ID of the price list to update."""
    id: ID!
    """The input data used to update the price list."""
    input: Shopify_PriceListUpdateInput!
  ): Shopify_PriceListUpdatePayload
  """Activate a price rule."""
  priceRuleActivate(
    """ID of the price rule to update."""
    id: ID!
  ): Shopify_PriceRuleActivatePayload
  """Create a price rule using the input."""
  priceRuleCreate(
    """The input fields to create a price rule."""
    priceRule: Shopify_PriceRuleInput!
    """The input fields to create a discount code for the price rule."""
    priceRuleDiscountCode: Shopify_PriceRuleDiscountCodeInput
  ): Shopify_PriceRuleCreatePayload
  """Deactivate a price rule."""
  priceRuleDeactivate(
    """ID of the price rule to update."""
    id: ID!
  ): Shopify_PriceRuleDeactivatePayload
  """Delete a price rule."""
  priceRuleDelete(
    """The ID of the price rule object."""
    id: ID!
  ): Shopify_PriceRuleDeletePayload
  """Create a discount code for a price rule."""
  priceRuleDiscountCodeCreate(
    """The ID of the price rule object."""
    priceRuleId: ID!
    """The code to create for the price rule."""
    code: String!
  ): Shopify_PriceRuleDiscountCodeCreatePayload
  """Update a discount code for a price rule."""
  priceRuleDiscountCodeUpdate(
    """The ID of the price rule object."""
    priceRuleId: ID!
    """The new code of a price rule."""
    code: String!
  ): Shopify_PriceRuleDiscountCodeUpdatePayload
  """Updates a price rule using its ID and an input."""
  priceRuleUpdate(
    """ID of the price rule to update."""
    id: ID!
    """The input fields to update a price rule."""
    priceRule: Shopify_PriceRuleInput!
    """The input fields to update the discount code of the price rule."""
    priceRuleDiscountCode: Shopify_PriceRuleDiscountCodeInput
  ): Shopify_PriceRuleUpdatePayload
  """
  Deletes a private metafield.
  Private metafields are automatically deleted when the app that created them is uninstalled.
  """
  privateMetafieldDelete(
    """The input fields for the private metafield to delete."""
    input: Shopify_PrivateMetafieldDeleteInput!
  ): Shopify_PrivateMetafieldDeletePayload
  """
  Creates or updates a private metafield. Use private metafields when you don't
  want the metafield data to be accessible by merchants or other apps.
  Private metafields are accessible only by the application that created them and only from the GraphQL Admin API.
  
  An application can create a maximum of 10 private metafields per shop resource.
  """
  privateMetafieldUpsert(
    """Specifies the input fields for the private metafield."""
    input: Shopify_PrivateMetafieldInput!
  ): Shopify_PrivateMetafieldUpsertPayload
  """Appends images to a product."""
  productAppendImages(
    """Specifies the new images and the product that they're being added to."""
    input: Shopify_ProductAppendImagesInput!
  ): Shopify_ProductAppendImagesPayload @deprecated(reason: "Use `productCreateMedia` instead.")
  """
  Changes the status of a product. This allows you to set the availability of the product across all channels.
  """
  productChangeStatus(
    """The ID of the product."""
    productId: ID!
    """The status to be assigned to the product."""
    status: Shopify_ProductStatus!
  ): Shopify_ProductChangeStatusPayload
  """
  Creates a product.
  
  If you need to create a product with many
  [variants](https://shopify.dev/api/admin-graphql/latest/input-objects/ProductVariantInput)
  that are active at several
  [locations](https://shopify.dev/api/admin-graphql/latest/input-objects/InventoryLevelInput),
  especially with a lot of
  [collections](https://shopify.dev/api/admin-graphql/latest/mutations/productCreate#field-productinput-collectionstojoin)
  and
  [tags](https://shopify.dev/api/admin-graphql/latest/mutations/productCreate#field-productinput-tags),
  then you should first create the product with just the variants.
  
  After the product is created, you can activate the variants at locations
  and add the other related objects to the product. This reduces the size of
  each mutation and increases the likelihood that it will
  complete before the operation times out.
  
  The following example shows how you might break up product creation and object association into multiple steps:
  
  1. Create the product with variants. Don't specify any tags or collections on the product, and don't specify
  [inventory quantities](https://shopify.dev/api/admin-graphql/latest/input-objects/ProductVariantInput#field-productvariantinput-inventoryquantities)
  for each variant.
  
  2. After the product is created, add tags to the product using the
  [tagsAdd](https://shopify.dev/api/admin-graphql/latest/mutations/tagsAdd) mutation, and add collections using the
  [collectionsAddProducts](https://shopify.dev/api/admin-graphql/latest/mutations/collectionAddProducts) mutation.
  
  3. Use the [inventoryBulkToggleActivation](https://shopify.dev/api/admin-graphql/latest/mutations/inventoryBulkToggleActivation) mutation
  on each [inventory
  item](https://shopify.dev/api/admin-graphql/latest/objects/InventoryItem) to
  activate it at the appropriate locations.
  
  4. After activating the variants at the locations, adjust inventory quantities at each location using the
  [inventoryBulkAdjustQuantityAtLocation](https://shopify.dev/api/admin-graphql/latest/mutations/inventoryBulkAdjustQuantityAtLocation) mutation.
  """
  productCreate(
    """The properties of the new product."""
    input: Shopify_ProductInput!
    """List of new media to be added to the product."""
    media: [Shopify_CreateMediaInput!]
  ): Shopify_ProductCreatePayload
  """Creates media for a product."""
  productCreateMedia(
    """Specifies the product associated with the media."""
    productId: ID!
    """List of new media to be added to a product."""
    media: [Shopify_CreateMediaInput!]!
  ): Shopify_ProductCreateMediaPayload
  """
  Deletes a product, including all associated variants and media.
  
  As of API version `2023-01`, if you need to delete a large product, such as one that has many
  [variants](https://shopify.dev/api/admin-graphql/latest/input-objects/ProductVariantInput)
  that are active at several
  [locations](https://shopify.dev/api/admin-graphql/latest/input-objects/InventoryLevelInput),
  you may encounter timeout errors. To avoid these timeout errors, you can instead use the asynchronous
  [ProductDeleteAsync](https://shopify.dev/api/admin-graphql/latest/mutations/productDeleteAsync)
  mutation.
  """
  productDelete(
    """Specifies the product to delete by its ID."""
    input: Shopify_ProductDeleteInput!
  ): Shopify_ProductDeletePayload
  """
  Deletes a product asynchronously, including all associated variants and media.
  """
  productDeleteAsync(
    """The ID of the product to be deleted."""
    productId: ID!
  ): Shopify_ProductDeleteAsyncPayload
  """Removes product images from the product."""
  productDeleteImages(
    """This is the ID of the product."""
    id: ID!
    """This is the array of image IDs to delete from the product."""
    imageIds: [ID!]!
  ): Shopify_ProductDeleteImagesPayload @deprecated(reason: "Use `productDeleteMedia` instead.")
  """Deletes media for a product."""
  productDeleteMedia(
    """Specifies the product ID from which the media will be deleted."""
    productId: ID!
    """The media IDs to be deleted."""
    mediaIds: [ID!]!
  ): Shopify_ProductDeleteMediaPayload
  """
  Duplicates a product.
  
  As of API version `2023-01`, if you need to duplicate a large product, such as one that has many
  [variants](https://shopify.dev/api/admin-graphql/latest/input-objects/ProductVariantInput)
  that are active at several
  [locations](https://shopify.dev/api/admin-graphql/latest/input-objects/InventoryLevelInput),
  you may encounter timeout errors. To avoid these timeout errors, you can instead use the asynchronous
  [ProductDuplicateAsync](https://shopify.dev/api/admin-graphql/latest/mutations/productDuplicateAsync)
  mutation.
  """
  productDuplicate(
    """The ID of the product to be duplicated."""
    productId: ID!
    """The new title of the product."""
    newTitle: String!
    """
    The new status of the product. If no value is provided the status will be inherited from the original product.
    """
    newStatus: Shopify_ProductStatus
    """Specifies whether or not to duplicate images."""
    includeImages: Boolean = false
  ): Shopify_ProductDuplicatePayload
  """Asynchronously duplicate a single product."""
  productDuplicateAsync(
    """The params for duplicating the product."""
    input: Shopify_ProductDuplicateAsyncInput!
  ): Shopify_ProductDuplicateAsyncPayload
  """Updates an image of a product."""
  productImageUpdate(
    """The ID of the product on which to update the image."""
    productId: ID!
    """Image to be updated."""
    image: Shopify_ImageInput!
  ): Shopify_ProductImageUpdatePayload @deprecated(reason: "Use `productUpdateMedia` instead.")
  """Adds multiple selling plan groups to a product."""
  productJoinSellingPlanGroups(
    """The ID of the product."""
    id: ID!
    """The IDs of the selling plan groups to add."""
    sellingPlanGroupIds: [ID!]!
  ): Shopify_ProductJoinSellingPlanGroupsPayload
  """Removes multiple groups from a product."""
  productLeaveSellingPlanGroups(
    """The ID of the product."""
    id: ID!
    """The IDs of the selling plan groups to add."""
    sellingPlanGroupIds: [ID!]!
  ): Shopify_ProductLeaveSellingPlanGroupsPayload
  """
  Publishes a product. Products that are sold exclusively on subscription
  (`requiresSellingPlan: true`) can only be published on online stores.
  """
  productPublish(
    """Specifies the product to publish and the channels to publish it to."""
    input: Shopify_ProductPublishInput!
  ): Shopify_ProductPublishPayload @deprecated(reason: "Use `publishablePublish` instead.")
  """Asynchronously reorders a set of images for a given product."""
  productReorderImages(
    """The ID of the product on which to reorder images."""
    id: ID!
    """A list of moves to perform which will be evaluated in order."""
    moves: [Shopify_MoveInput!]!
  ): Shopify_ProductReorderImagesPayload @deprecated(reason: "Use `productReorderMedia` instead.")
  """Asynchronously reorders the media attached to a product."""
  productReorderMedia(
    """The ID of the product on which to reorder medias."""
    id: ID!
    """A list of moves to perform which will be evaluated in order."""
    moves: [Shopify_MoveInput!]!
  ): Shopify_ProductReorderMediaPayload
  """Unpublishes a product."""
  productUnpublish(
    """
    Specifies the product to unpublish and the channel to unpublish it from.
    """
    input: Shopify_ProductUnpublishInput!
  ): Shopify_ProductUnpublishPayload @deprecated(reason: "Use `publishableUnpublish` instead.")
  """
  Updates a product. If you update a product and only include some variants in the update,
  then any variants not included will be deleted. To safely manage variants without the risk of
  deleting excluded variants, use
  [productVariantsBulkUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/productvariantsbulkupdate).
  If you want to update a single variant, then use
  [productVariantUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/productvariantupdate).
  """
  productUpdate(
    """The updated properties for a product."""
    input: Shopify_ProductInput!
  ): Shopify_ProductUpdatePayload
  """Updates media for a product."""
  productUpdateMedia(
    """Specifies the product on which media will be updated."""
    productId: ID!
    """A list of media updates."""
    media: [Shopify_UpdateMediaInput!]!
  ): Shopify_ProductUpdateMediaPayload
  """Appends media from a product to variants of the product."""
  productVariantAppendMedia(
    """Specifies the product associated to the media."""
    productId: ID!
    """A list of pairs of variants and media to be attached to the variants."""
    variantMedia: [Shopify_ProductVariantAppendMediaInput!]!
  ): Shopify_ProductVariantAppendMediaPayload
  """Creates a product variant."""
  productVariantCreate(
    """The properties for the new product variant."""
    input: Shopify_ProductVariantInput!
  ): Shopify_ProductVariantCreatePayload
  """Deletes a product variant."""
  productVariantDelete(
    """The ID of the product variant to be deleted."""
    id: ID!
  ): Shopify_ProductVariantDeletePayload
  """Detaches media from product variants."""
  productVariantDetachMedia(
    """Specifies the product to which the variants and media are associated."""
    productId: ID!
    """A list of pairs of variants and media to be deleted from the variants."""
    variantMedia: [Shopify_ProductVariantDetachMediaInput!]!
  ): Shopify_ProductVariantDetachMediaPayload
  """Adds multiple selling plan groups to a product variant."""
  productVariantJoinSellingPlanGroups(
    """The ID of the product variant."""
    id: ID!
    """The IDs of the selling plan groups to add."""
    sellingPlanGroupIds: [ID!]!
  ): Shopify_ProductVariantJoinSellingPlanGroupsPayload
  """Remove multiple groups from a product variant."""
  productVariantLeaveSellingPlanGroups(
    """The ID of the product variant."""
    id: ID!
    """The IDs of the selling plan groups to leave."""
    sellingPlanGroupIds: [ID!]!
  ): Shopify_ProductVariantLeaveSellingPlanGroupsPayload
  """Updates a product variant."""
  productVariantUpdate(
    """The updated properties for the product variant."""
    input: Shopify_ProductVariantInput!
  ): Shopify_ProductVariantUpdatePayload
  """
  Creates product variants in bulk. If you want to create a single variant, then use
  [productVariantCreate](https://shopify.dev/api/admin-graphql/latest/mutations/productvariantcreate).
  """
  productVariantsBulkCreate(
    """An array of product variants to be created."""
    variants: [Shopify_ProductVariantsBulkInput!]!
    """The ID of the product on which to create the variants."""
    productId: ID!
  ): Shopify_ProductVariantsBulkCreatePayload
  """
  Deletes product variants in bulk. If you want to delete a single variant, then use
  [productVariantDelete](https://shopify.dev/api/admin-graphql/latest/mutations/productvariantdelete).
  """
  productVariantsBulkDelete(
    """An array of product variants IDs to delete."""
    variantsIds: [ID!]!
    """The ID of the product with the variants to update."""
    productId: ID!
  ): Shopify_ProductVariantsBulkDeletePayload
  """Reorder product variants in bulk."""
  productVariantsBulkReorder(
    """The product ID of the variants to be reordered."""
    productId: ID!
    """An array of variant positions."""
    positions: [Shopify_ProductVariantPositionInput!]!
  ): Shopify_ProductVariantsBulkReorderPayload
  """
  Updates product variants in bulk. If you want to update a single variant, then use
  [productVariantUpdate](https://shopify.dev/api/admin-graphql/latest/mutations/productvariantupdate).
  """
  productVariantsBulkUpdate(
    """An array of product variants to update."""
    variants: [Shopify_ProductVariantsBulkInput!]!
    """The ID of the product associated with the variants to update."""
    productId: ID!
  ): Shopify_ProductVariantsBulkUpdatePayload
  """Creates a new Google Cloud Pub/Sub webhook subscription."""
  pubSubWebhookSubscriptionCreate(
    """The type of event that triggers the webhook."""
    topic: Shopify_WebhookSubscriptionTopic!
    """
    Specifies the input fields for a Google Cloud Pub/Sub webhook subscription.
    """
    webhookSubscription: Shopify_PubSubWebhookSubscriptionInput!
  ): Shopify_PubSubWebhookSubscriptionCreatePayload
  """Updates a Google Cloud Pub/Sub webhook subscription."""
  pubSubWebhookSubscriptionUpdate(
    """The ID of the webhook subscription to update."""
    id: ID!
    """
    Specifies the input fields for a Google Cloud Pub/Sub webhook subscription.
    """
    webhookSubscription: Shopify_PubSubWebhookSubscriptionInput
  ): Shopify_PubSubWebhookSubscriptionUpdatePayload
  """
  Publishes a resource to a channel. If the resource is a product, then it's
  visible in the channel only if the product status is `active`. Products that
  are sold exclusively on subscription (`requiresSellingPlan: true`) can be
  published only on online stores.
  """
  publishablePublish(
    """The resource to create or update publications for."""
    id: ID!
    """Specifies the input fields required to publish a resource."""
    input: [Shopify_PublicationInput!]!
  ): Shopify_PublishablePublishPayload
  """
  Publishes a resource to current channel. If the resource is a product, then
  it's visible in the channel only if the product status is `active`. Products
  that are sold exclusively on subscription (`requiresSellingPlan: true`) can be
  published only on online stores.
  """
  publishablePublishToCurrentChannel(
    """The resource to create or update publications for."""
    id: ID!
  ): Shopify_PublishablePublishToCurrentChannelPayload
  """
  Unpublishes a resource from a channel. If the resource is a product, then it's
  visible in the channel only if the product status is `active`.
  """
  publishableUnpublish(
    """The resource to delete or update publications for."""
    id: ID!
    """Specifies the input fields required to unpublish a resource."""
    input: [Shopify_PublicationInput!]!
  ): Shopify_PublishableUnpublishPayload
  """
  Unpublishes a resource from the current channel. If the resource is a product,
  then it's visible in the channel only if the product status is `active`.
  """
  publishableUnpublishToCurrentChannel(
    """The resource to delete or update publications for."""
    id: ID!
  ): Shopify_PublishableUnpublishToCurrentChannelPayload
  """Creates a refund."""
  refundCreate(
    """The input fields that are used in the mutation for creating a refund."""
    input: Shopify_RefundInput!
  ): Shopify_RefundCreatePayload
  """
  Approves a customer's return request.
  If this mutation is successful, then the `Return.status` field of the
  approved return is set to `OPEN`.
  """
  returnApproveRequest(
    """The input fields to approve a return."""
    input: Shopify_ReturnApproveRequestInput!
  ): Shopify_ReturnApproveRequestPayload
  """
  Cancels a return and restores the items back to being fulfilled.
  Canceling a return is only available before any work has been done
  on the return (such as an inspection or refund).
  """
  returnCancel(
    """The ID of the return to cancel."""
    id: ID!
    """
    Whether the customer receives an email notification regarding the canceled return.
    """
    notifyCustomer: Boolean = false
  ): Shopify_ReturnCancelPayload
  """
  Indicates a return is complete, either when a refund has been made and items restocked,
  or simply when it has been marked as returned in the system.
  """
  returnClose(
    """The ID of the return to close."""
    id: ID!
  ): Shopify_ReturnClosePayload
  """Creates a return."""
  returnCreate(
    """Specifies the input fields for a return."""
    returnInput: Shopify_ReturnInput!
  ): Shopify_ReturnCreatePayload
  """
  Declines a return on an order.
  When a return is declined, each `ReturnLineItem.fulfillmentLineItem` can be associated to a new return.
  Use the `ReturnCreate` or `ReturnRequest` mutation to initiate a new return.
  """
  returnDeclineRequest(
    """The input fields for declining a customer's return request."""
    input: Shopify_ReturnDeclineRequestInput!
  ): Shopify_ReturnDeclineRequestPayload
  """Refunds a return and associates it with the related return request."""
  returnRefund(
    """The input fields to refund a return."""
    returnRefundInput: Shopify_ReturnRefundInput!
  ): Shopify_ReturnRefundPayload
  """Reopens a closed return."""
  returnReopen(
    """The ID of the return to reopen."""
    id: ID!
  ): Shopify_ReturnReopenPayload
  """
  A customer's return request that hasn't been approved or declined.
  This mutation sets the value of the `Return.status` field to `REQUESTED`.
  To create a return that has the `Return.status` field set to `OPEN`, use the `returnCreate` mutation.
  """
  returnRequest(
    """The input fields for requesting a return."""
    input: Shopify_ReturnRequestInput!
  ): Shopify_ReturnRequestPayload
  """
  Creates a new reverse delivery with associated external shipping information.
  """
  reverseDeliveryCreateWithShipping(
    """
    The ID of the reverse fulfillment order that's associated to the reverse delivery.
    """
    reverseFulfillmentOrderId: ID!
    """
    The reverse delivery line items to be created. If an empty array is provided, then this mutation
              will create a reverse delivery line item for each reverse fulfillment order line item, with its quantity equal
              to the reverse fulfillment order line item total quantity.
    """
    reverseDeliveryLineItems: [Shopify_ReverseDeliveryLineItemInput!]!
    """The tracking information for the reverse delivery."""
    trackingInput: Shopify_ReverseDeliveryTrackingInput = null
    """The return label file information for the reverse delivery."""
    labelInput: Shopify_ReverseDeliveryLabelInput = null
    """
    When `true` the customer is notified with delivery instructions if the `ReverseFulfillmentOrder.order.email` is present.
    """
    notifyCustomer: Boolean = true
  ): Shopify_ReverseDeliveryCreateWithShippingPayload
  """
  Disposes reverse delivery line items for a reverse delivery on the same shop.
  """
  reverseDeliveryDispose(
    """The input parameters required to dispose reverse delivery line items."""
    dispositionInputs: [Shopify_ReverseDeliveryDisposeInput!]!
  ): Shopify_ReverseDeliveryDisposePayload
  """
  Updates a reverse delivery with associated external shipping information.
  """
  reverseDeliveryShippingUpdate(
    """The ID of the reverse delivery to update."""
    reverseDeliveryId: ID!
    """The tracking information for the reverse delivery."""
    trackingInput: Shopify_ReverseDeliveryTrackingInput = null
    """The return label file information for the reverse delivery."""
    labelInput: Shopify_ReverseDeliveryLabelInput = null
    """
    If `true` and an email address exists on the
    `ReverseFulfillmentOrder.order`, then the customer is notified with the
    updated delivery instructions.
    """
    notifyCustomer: Boolean = true
  ): Shopify_ReverseDeliveryShippingUpdatePayload
  """Disposes reverse fulfillment order line items."""
  reverseFulfillmentOrderDispose(
    """
    The input parameters required to dispose reverse fulfillment order line items.
    """
    dispositionInputs: [Shopify_ReverseFulfillmentOrderDisposeInput!]!
  ): Shopify_ReverseFulfillmentOrderDisposePayload
  """Creates a saved search."""
  savedSearchCreate(
    """Specifies the input fields for a saved search."""
    input: Shopify_SavedSearchCreateInput!
  ): Shopify_SavedSearchCreatePayload
  """Delete a saved search."""
  savedSearchDelete(
    """The input fields to delete a saved search."""
    input: Shopify_SavedSearchDeleteInput!
  ): Shopify_SavedSearchDeletePayload
  """Updates a saved search."""
  savedSearchUpdate(
    """The input fields to update a saved search."""
    input: Shopify_SavedSearchUpdateInput!
  ): Shopify_SavedSearchUpdatePayload
  """
  <div class="note"><h4>Theme app extensions</h4>
    <p>Your app might not pass App Store review if it uses script tags instead of
  theme app extensions. All new apps, and apps that integrate with Online Store
  2.0 themes, should use theme app extensions, such as app blocks or app embed
  blocks. Script tags are an alternative you can use with only vintage themes.
  <a href="/apps/online-store#what-integration-method-should-i-use"
  target="_blank">Learn more</a>.</p></div>
  
  
  Creates a new script tag.
  """
  scriptTagCreate(
    """The input fields for a script tag."""
    input: Shopify_ScriptTagInput!
  ): Shopify_ScriptTagCreatePayload
  """
  <div class="note"><h4>Theme app extensions</h4>
    <p>Your app might not pass App Store review if it uses script tags instead of
  theme app extensions. All new apps, and apps that integrate with Online Store
  2.0 themes, should use theme app extensions, such as app blocks or app embed
  blocks. Script tags are an alternative you can use with only vintage themes.
  <a href="/apps/online-store#what-integration-method-should-i-use"
  target="_blank">Learn more</a>.</p></div>
  
  
  Deletes a script tag.
  """
  scriptTagDelete(
    """The ID of the script tag to delete."""
    id: ID!
  ): Shopify_ScriptTagDeletePayload
  """
  <div class="note"><h4>Theme app extensions</h4>
    <p>Your app might not pass App Store review if it uses script tags instead of
  theme app extensions. All new apps, and apps that integrate with Online Store
  2.0 themes, should use theme app extensions, such as app blocks or app embed
  blocks. Script tags are an alternative you can use with only vintage themes.
  <a href="/apps/online-store#what-integration-method-should-i-use"
  target="_blank">Learn more</a>.</p></div>
  
  
  Updates a script tag.
  """
  scriptTagUpdate(
    """The ID of the script tag to update."""
    id: ID!
    """Specifies the input fields for a script tag."""
    input: Shopify_ScriptTagInput!
  ): Shopify_ScriptTagUpdatePayload
  """Creates a segment."""
  segmentCreate(
    """The name of the segment to be created."""
    name: String!
    """
    A precise definition of the segment. The definition is composed of a
    combination of conditions on facts about customers such as
    `email_subscription_status = 'SUBSCRIBED'` with [this
    syntax](https://shopify.dev/api/shopifyql).
    """
    query: String!
  ): Shopify_SegmentCreatePayload
  """Deletes a segment."""
  segmentDelete(
    """Specifies the segment to delete."""
    id: ID!
  ): Shopify_SegmentDeletePayload
  """Updates a segment."""
  segmentUpdate(
    """Specifies the segment to be updated."""
    id: ID!
    """The new name for the segment."""
    name: String
    """
    A precise definition of the segment. The definition is composed of a
    combination of conditions on facts about customers such as
    `email_subscription_status = 'SUBSCRIBED' with [this
    syntax](https://shopify.dev/api/shopifyql).
    """
    query: String
  ): Shopify_SegmentUpdatePayload
  """Adds multiple product variants to a selling plan group."""
  sellingPlanGroupAddProductVariants(
    """The ID of the selling plan group."""
    id: ID!
    """The IDs of the product variants to add."""
    productVariantIds: [ID!]!
  ): Shopify_SellingPlanGroupAddProductVariantsPayload
  """Adds multiple products to a selling plan group."""
  sellingPlanGroupAddProducts(
    """The ID of the selling plan group."""
    id: ID!
    """The IDs of the products to add."""
    productIds: [ID!]!
  ): Shopify_SellingPlanGroupAddProductsPayload
  """Creates a Selling Plan Group."""
  sellingPlanGroupCreate(
    """The properties of the new Selling Plan Group."""
    input: Shopify_SellingPlanGroupInput!
    """The resources this Selling Plan Group should be applied to."""
    resources: Shopify_SellingPlanGroupResourceInput
  ): Shopify_SellingPlanGroupCreatePayload
  """Delete a Selling Plan Group."""
  sellingPlanGroupDelete(
    """The id of the selling plan group to delete."""
    id: ID!
  ): Shopify_SellingPlanGroupDeletePayload
  """Removes multiple product variants from a selling plan group."""
  sellingPlanGroupRemoveProductVariants(
    """The ID of the selling plan group."""
    id: ID!
    """The IDs of the product variants to remove."""
    productVariantIds: [ID!]!
  ): Shopify_SellingPlanGroupRemoveProductVariantsPayload
  """Removes multiple products from a selling plan group."""
  sellingPlanGroupRemoveProducts(
    """The ID of the selling plan group."""
    id: ID!
    """The IDs of the products to remove."""
    productIds: [ID!]!
  ): Shopify_SellingPlanGroupRemoveProductsPayload
  """Update a Selling Plan Group."""
  sellingPlanGroupUpdate(
    """The Selling Plan Group to update."""
    id: ID!
    """The properties of the Selling Plan Group to update."""
    input: Shopify_SellingPlanGroupInput
  ): Shopify_SellingPlanGroupUpdatePayload
  """Deletes a shipping package."""
  shippingPackageDelete(
    """The ID of the shipping package to remove."""
    id: ID!
  ): Shopify_ShippingPackageDeletePayload
  """
  Set a shipping package as the default.
  The default shipping package is the one used to calculate shipping costs on checkout.
  """
  shippingPackageMakeDefault(
    """The ID of the shipping package to set as the default."""
    id: ID!
  ): Shopify_ShippingPackageMakeDefaultPayload
  """Updates a shipping package."""
  shippingPackageUpdate(
    """The ID of the shipping package to update."""
    id: ID!
    """Specifies the input fields for a shipping package."""
    shippingPackage: Shopify_CustomShippingPackageInput!
  ): Shopify_ShippingPackageUpdatePayload
  """
  Deletes a locale for a shop. This also deletes all translations of this locale.
  """
  shopLocaleDisable(
    """ISO code of the locale to delete."""
    locale: String!
  ): Shopify_ShopLocaleDisablePayload
  """
  Adds a locale for a shop. The newly added locale is in the unpublished state.
  """
  shopLocaleEnable(
    """ISO code of the locale to enable."""
    locale: String!
    """The list of markets web presences to add the locale to."""
    marketWebPresenceIds: [ID!]
  ): Shopify_ShopLocaleEnablePayload
  """Updates a locale for a shop."""
  shopLocaleUpdate(
    """ISO code of the locale to update."""
    locale: String!
    """Specifies the input fields for a shop locale."""
    shopLocale: Shopify_ShopLocaleInput!
  ): Shopify_ShopLocaleUpdatePayload
  """Updates a shop policy."""
  shopPolicyUpdate(
    """The properties to use when updating the shop policy."""
    shopPolicy: Shopify_ShopPolicyInput!
  ): Shopify_ShopPolicyUpdatePayload
  """
  The `ResourceFeedback` object lets your app report the status of shops and their resources. For example, if
  your app is a marketplace channel, then you can use resource feedback to alert
  merchants that they need to connect their marketplace account by signing in.
  
  Resource feedback notifications are displayed to the merchant on the home
  screen of their Shopify admin, and in the product details view for any
  products that are published to your app.
  
  This resource should be used only in cases where you're describing steps that
  a merchant is required to complete. If your app offers optional or promotional
  set-up steps, or if it makes recommendations, then don't use resource feedback
  to let merchants know about them.
  
  ## Sending feedback on a shop
  
  You can send resource feedback on a shop to let the merchant know what steps
  they need to take to make sure that your app is set up correctly. Feedback can
  have one of two states: `requires_action` or `success`. You need to send a
  `requires_action` feedback request for each step that the merchant is required to complete.
  
  If there are multiple set-up steps that require merchant action, then send
  feedback with a state of `requires_action` as merchants complete prior steps.
  And to remove the feedback message from the Shopify admin, send a `success`
  feedback request.
  
  #### Important
  Sending feedback replaces previously sent feedback for the shop. Send a new
  `shopResourceFeedbackCreate` mutation to push the latest state of a shop or
  its resources to Shopify.
  """
  shopResourceFeedbackCreate(
    """The fields required to create shop feedback."""
    input: Shopify_ResourceFeedbackCreateInput!
  ): Shopify_ShopResourceFeedbackCreatePayload
  """
  Generates the URL and signed paramaters needed to upload an asset to Shopify.
  """
  stagedUploadTargetGenerate(
    """The input fields for generating a staged upload."""
    input: Shopify_StagedUploadTargetGenerateInput!
  ): Shopify_StagedUploadTargetGeneratePayload @deprecated(reason: "Use `stagedUploadsCreate` instead.")
  """Uploads multiple images."""
  stagedUploadTargetsGenerate(
    """The input fields for generating staged uploads."""
    input: [Shopify_StageImageInput!]!
  ): Shopify_StagedUploadTargetsGeneratePayload @deprecated(reason: "Use `stagedUploadsCreate` instead.")
  """
  Creates staged upload targets for each input. This is the first step in the upload process.
  The returned staged upload targets' URL and parameter fields can be used to send a request
  to upload the file described in the corresponding input.
  
  For more information on the upload process, refer to
  [Upload media to Shopify](https://shopify.dev/apps/online-store/media/products#step-1-upload-media-to-shopify).
  """
  stagedUploadsCreate(
    """The information required to generate staged upload targets."""
    input: [Shopify_StagedUploadInput!]!
  ): Shopify_StagedUploadsCreatePayload
  """
  Activates the specified standard metafield definition from its template.
  
  Refer to the [list of standard metafield definition templates](https://shopify.dev/apps/metafields/definitions/standard-definitions).
  """
  standardMetafieldDefinitionEnable(
    """The resource type that the metafield definition is scoped to."""
    ownerType: Shopify_MetafieldOwnerType!
    """The ID of the standard metafield definition template to enable."""
    id: ID
    """
    The namespace of the standard metafield to enable. Used in combination with `key`.
    """
    namespace: String
    """
    The key of the standard metafield to enable. Used in combination with `namespace`.
    """
    key: String
    """Whether to pin the metafield definition."""
    pin: Boolean! = false
    """
    Whether metafields for the definition are visible using the Storefront API.
    """
    visibleToStorefrontApi: Boolean = null
    """
    Whether the metafield definition can be used as a collection condition.
    """
    useAsCollectionCondition: Boolean = false
  ): Shopify_StandardMetafieldDefinitionEnablePayload
  """
  Enables the specified standard metaobject definition from its template.
  """
  standardMetaobjectDefinitionEnable(
    """The type of the metaobject definition to enable."""
    type: String!
  ): Shopify_StandardMetaobjectDefinitionEnablePayload
  """
  Creates a storefront access token. An app can have a maximum of 100 active storefront access tokens for each shop.
  """
  storefrontAccessTokenCreate(
    """Provides the input fields for creating a storefront access token."""
    input: Shopify_StorefrontAccessTokenInput!
  ): Shopify_StorefrontAccessTokenCreatePayload
  """Deletes a storefront access token."""
  storefrontAccessTokenDelete(
    """
    Provides the input fields required to delete a storefront access token.
    """
    input: Shopify_StorefrontAccessTokenDeleteInput!
  ): Shopify_StorefrontAccessTokenDeletePayload
  """
  Creates a new subscription billing attempt. For more information, refer to
  [Create a subscription contract](https://shopify.dev/apps/subscriptions/contracts/create#step-4-create-a-billing-attempt).
  """
  subscriptionBillingAttemptCreate(
    """The ID of the subscription contract."""
    subscriptionContractId: ID!
    """The information to apply as a billing attempt."""
    subscriptionBillingAttemptInput: Shopify_SubscriptionBillingAttemptInput!
  ): Shopify_SubscriptionBillingAttemptCreatePayload
  """Commits the updates of a Subscription Billing Cycle Contract draft."""
  subscriptionBillingCycleContractDraftCommit(
    """The gid of the Subscription Contract draft to commit."""
    draftId: ID!
  ): Shopify_SubscriptionBillingCycleContractDraftCommitPayload
  """Concatenates a contract to a Subscription Draft."""
  subscriptionBillingCycleContractDraftConcatenate(
    """The gid of the Subscription Contract draft to update."""
    draftId: ID!
    """
    An array of Subscription Contracts with their selected billing cycles to concatenate to the subscription draft.
    """
    concatenatedBillingCycleContracts: [Shopify_SubscriptionBillingCycleInput!]!
  ): Shopify_SubscriptionBillingCycleContractDraftConcatenatePayload
  """
  Edit the contents of a subscription contract for the specified billing cycle.
  """
  subscriptionBillingCycleContractEdit(
    """Input object for selecting and using billing cycles."""
    billingCycleInput: Shopify_SubscriptionBillingCycleInput!
  ): Shopify_SubscriptionBillingCycleContractEditPayload
  """
  Delete the current or future schedule and contract edits of a subscription billing cycle.
  """
  subscriptionBillingCycleEditDelete(
    """Input object used to select and use billing cycles."""
    billingCycleInput: Shopify_SubscriptionBillingCycleInput!
  ): Shopify_SubscriptionBillingCycleEditDeletePayload
  """
  Delete the current or future schedule and contract edits of a list of subscription billing cycles.
  """
  subscriptionBillingCycleEditsDelete(
    """
    The globally-unique identifier of the subscription contract that the billing cycle belongs to.
    """
    contractId: ID!
    """Select billing cycles to be deleted."""
    targetSelection: Shopify_SubscriptionBillingCyclesTargetSelection!
  ): Shopify_SubscriptionBillingCycleEditsDeletePayload
  """Modify the schedule of a specific billing cycle."""
  subscriptionBillingCycleScheduleEdit(
    """Input object for selecting and using billing cycles."""
    billingCycleInput: Shopify_SubscriptionBillingCycleInput!
    """Data used to create or modify billing cycle schedule edit."""
    input: Shopify_SubscriptionBillingCycleScheduleEditInput!
  ): Shopify_SubscriptionBillingCycleScheduleEditPayload
  """Creates a Subscription Contract."""
  subscriptionContractCreate(
    """The properties of the new Subscription Contract."""
    input: Shopify_SubscriptionContractCreateInput!
  ): Shopify_SubscriptionContractCreatePayload
  """Sets the next billing date of a Subscription Contract."""
  subscriptionContractSetNextBillingDate(
    """The gid of the Subscription Contract to set the next billing date for."""
    contractId: ID!
    """The next billing date."""
    date: DateTime!
  ): Shopify_SubscriptionContractSetNextBillingDatePayload
  """Updates a Subscription Contract."""
  subscriptionContractUpdate(
    """The gid of the Subscription Contract to update."""
    contractId: ID!
  ): Shopify_SubscriptionContractUpdatePayload
  """Commits the updates of a Subscription Contract draft."""
  subscriptionDraftCommit(
    """The gid of the Subscription Contract draft to commit."""
    draftId: ID!
  ): Shopify_SubscriptionDraftCommitPayload
  """Adds a subscription discount to a subscription draft."""
  subscriptionDraftDiscountAdd(
    """
    The ID of the Subscription Contract draft to add a subscription discount to.
    """
    draftId: ID!
    """The properties of the new Subscription Discount."""
    input: Shopify_SubscriptionManualDiscountInput!
  ): Shopify_SubscriptionDraftDiscountAddPayload
  """Applies a code discount on the subscription draft."""
  subscriptionDraftDiscountCodeApply(
    """
    The gid of the subscription contract draft to apply a subscription code discount on.
    """
    draftId: ID!
    """Code discount redeem code."""
    redeemCode: String!
  ): Shopify_SubscriptionDraftDiscountCodeApplyPayload
  """Removes a subscription discount from a subscription draft."""
  subscriptionDraftDiscountRemove(
    """
    The gid of the subscription contract draft to remove a subscription discount from.
    """
    draftId: ID!
    """The gid of the subscription draft discount to remove."""
    discountId: ID!
  ): Shopify_SubscriptionDraftDiscountRemovePayload
  """Updates a subscription discount on a subscription draft."""
  subscriptionDraftDiscountUpdate(
    """
    The ID of the Subscription Contract draft to update a subscription discount on.
    """
    draftId: ID!
    """The gid of the Subscription Discount to update."""
    discountId: ID!
    """The properties to update on the Subscription Discount."""
    input: Shopify_SubscriptionManualDiscountInput!
  ): Shopify_SubscriptionDraftDiscountUpdatePayload
  """Adds a subscription free shipping discount to a subscription draft."""
  subscriptionDraftFreeShippingDiscountAdd(
    """
    The ID of the subscription contract draft to add a subscription free shipping discount to.
    """
    draftId: ID!
    """The properties of the new subscription free shipping discount."""
    input: Shopify_SubscriptionFreeShippingDiscountInput!
  ): Shopify_SubscriptionDraftFreeShippingDiscountAddPayload
  """Updates a subscription free shipping discount on a subscription draft."""
  subscriptionDraftFreeShippingDiscountUpdate(
    """
    The ID of the Subscription Contract draft to update a subscription discount on.
    """
    draftId: ID!
    """The gid of the Subscription Discount to update."""
    discountId: ID!
    """The properties to update on the Subscription Free Shipping Discount."""
    input: Shopify_SubscriptionFreeShippingDiscountInput!
  ): Shopify_SubscriptionDraftFreeShippingDiscountUpdatePayload
  """Adds a subscription line to a subscription draft."""
  subscriptionDraftLineAdd(
    """
    The gid of the Subscription Contract draft to add a subscription line to.
    """
    draftId: ID!
    """The properties of the new Subscription Line."""
    input: Shopify_SubscriptionLineInput!
  ): Shopify_SubscriptionDraftLineAddPayload
  """Removes a subscription line from a subscription draft."""
  subscriptionDraftLineRemove(
    """
    The gid of the Subscription Contract draft to remove a subscription line from.
    """
    draftId: ID!
    """The gid of the Subscription Line to remove."""
    lineId: ID!
  ): Shopify_SubscriptionDraftLineRemovePayload
  """Updates a subscription line on a subscription draft."""
  subscriptionDraftLineUpdate(
    """
    The gid of the Subscription Contract draft to update a subscription line from.
    """
    draftId: ID!
    """The gid of the Subscription Line to update."""
    lineId: ID!
    """The properties of the new Subscription Line."""
    input: Shopify_SubscriptionLineUpdateInput!
  ): Shopify_SubscriptionDraftLineUpdatePayload
  """Updates a Subscription Draft."""
  subscriptionDraftUpdate(
    """The gid of the Subscription Draft to update."""
    draftId: ID!
    """The properties of the new Subscription Contract."""
    input: Shopify_SubscriptionDraftInput!
  ): Shopify_SubscriptionDraftUpdatePayload
  """
  Add tags to an order, a draft order, a customer, a product, or an online store article.
  """
  tagsAdd(
    """The ID of a resource to add tags to."""
    id: ID!
    """
    A list of tags to add to the resource. Can be an array of strings or a
    single string composed of a comma-separated list of values. Example values:
    `["tag1", "tag2", "tag3"]`, `"tag1, tag2, tag3"`.
    """
    tags: [String!]!
  ): Shopify_TagsAddPayload
  """
  Remove tags from an order, a draft order, a customer, a product, or an online store article.
  """
  tagsRemove(
    """The ID of the resource to remove tags from."""
    id: ID!
    """
    A list of tags to remove from the resource in the form of an array of
    strings. Example value: `["tag1", "tag2", "tag3"]`.
    """
    tags: [String!]!
  ): Shopify_TagsRemovePayload
  """Creates or updates translations."""
  translationsRegister(
    """ID of the resource that is being translated."""
    resourceId: ID!
    """Specifies the input fields for a translation."""
    translations: [Shopify_TranslationInput!]!
  ): Shopify_TranslationsRegisterPayload
  """Deletes translations."""
  translationsRemove(
    """
    ID of the translatable resource for which translations are being deleted.
    """
    resourceId: ID!
    """The list of translation keys."""
    translationKeys: [String!]!
    """The list of translation locales."""
    locales: [String!]!
    """The list of market IDs."""
    marketIds: [ID!]
  ): Shopify_TranslationsRemovePayload
  """
  Asynchronously delete [URL redirects](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) in bulk.
  """
  urlRedirectBulkDeleteAll: Shopify_UrlRedirectBulkDeleteAllPayload
  """
  Asynchronously delete [URLRedirect](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) 
  objects in bulk by IDs.
  Learn more about [URLRedirect](https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect) 
  objects.
  """
  urlRedirectBulkDeleteByIds(
    """
    A list of [`URLRedirect`](
                https://help.shopify.com/en/manual/online-store/menus-and-links/url-redirect
              ) object IDs to delete.
    """
    ids: [ID!]!
  ): Shopify_UrlRedirectBulkDeleteByIdsPayload
  """Asynchronously delete redirects in bulk."""
  urlRedirectBulkDeleteBySavedSearch(
    """The ID of the URL redirect saved search for filtering."""
    savedSearchId: ID!
  ): Shopify_UrlRedirectBulkDeleteBySavedSearchPayload
  """Asynchronously delete redirects in bulk."""
  urlRedirectBulkDeleteBySearch(
    """
    Search query for filtering redirects on (both Redirect from and Redirect to fields).
    """
    search: String!
  ): Shopify_UrlRedirectBulkDeleteBySearchPayload
  """
  Creates a [`UrlRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object.
  """
  urlRedirectCreate(
    """The fields to use when creating the redirect."""
    urlRedirect: Shopify_UrlRedirectInput!
  ): Shopify_UrlRedirectCreatePayload
  """
  Deletes a [`UrlRedirect`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirect) object.
  """
  urlRedirectDelete(
    """The ID of the redirect to delete."""
    id: ID!
  ): Shopify_UrlRedirectDeletePayload
  """
  Creates a [`UrlRedirectImport`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirectImport) object.
  
  After creating the `UrlRedirectImport` object, the `UrlRedirectImport` request
  can be performed using the [`urlRedirectImportSubmit`](https://shopify.dev/api/admin-graphql/latest/mutations/urlRedirectImportSubmit) mutation.
  """
  urlRedirectImportCreate(
    """
    The S3 URL of the CSV file.
    You can download [a sample URL redirect CSV file](https://help.shopify.com/csv/sample-redirect-template.csv)).
    """
    url: URL!
  ): Shopify_UrlRedirectImportCreatePayload
  """
  Submits a `UrlRedirectImport` request to be processed.
  
  The `UrlRedirectImport` request is first created with the [`urlRedirectImportCreate`](https://shopify.dev/api/admin-graphql/latest/mutations/urlRedirectImportCreate) mutation.
  """
  urlRedirectImportSubmit(
    """
    The ID of the [`UrlRedirectImport`](https://shopify.dev/api/admin-graphql/latest/objects/UrlRedirectImport) object.
    """
    id: ID!
  ): Shopify_UrlRedirectImportSubmitPayload
  """Updates a URL redirect."""
  urlRedirectUpdate(
    """The ID of the URL redirect to update."""
    id: ID!
    """The input fields required to update the URL redirect."""
    urlRedirect: Shopify_UrlRedirectInput!
  ): Shopify_UrlRedirectUpdatePayload
  """Creates a new web pixel settings."""
  webPixelCreate(
    """The web pixel settings in JSON format."""
    webPixel: Shopify_WebPixelInput!
  ): Shopify_WebPixelCreatePayload
  """Deletes the web pixel shop settings."""
  webPixelDelete(
    """The ID of the web pixel to delete."""
    id: ID!
  ): Shopify_WebPixelDeletePayload
  """Updates the web pixel settings."""
  webPixelUpdate(
    """The ID of the web pixel to update."""
    id: ID!
    """The web pixel settings in JSON format."""
    webPixel: Shopify_WebPixelInput!
  ): Shopify_WebPixelUpdatePayload
  """Creates a new webhook subscription."""
  webhookSubscriptionCreate(
    """The type of event that triggers the webhook."""
    topic: Shopify_WebhookSubscriptionTopic!
    """Specifies the input fields for a webhook subscription."""
    webhookSubscription: Shopify_WebhookSubscriptionInput!
  ): Shopify_WebhookSubscriptionCreatePayload
  """Deletes a webhook subscription."""
  webhookSubscriptionDelete(
    """The ID of the webhook subscription to delete."""
    id: ID!
  ): Shopify_WebhookSubscriptionDeletePayload
  """Updates a webhook subscription."""
  webhookSubscriptionUpdate(
    """The ID of the webhook subscription to update."""
    id: ID!
    """Specifies the input fields for a webhook subscription."""
    webhookSubscription: Shopify_WebhookSubscriptionInput!
  ): Shopify_WebhookSubscriptionUpdatePayload
}