type Query {
  """
  Retrieve a block
  
  Equivalent to GET /v1/blocks/{id}
  """
  v1Block(id: String!): V1Block

  """
  Retrieve block children
  
  Equivalent to GET /v1/blocks/{id}/children
  """
  v1BlockChildren(id: String!, pageSize: String): V1BlockChildren

  """
  Retrieves a database object using the ID specified in the request path. 
  
  Equivalent to GET /v1/databases/{id}
  """
  v1Database(id: String!): V1Database

  """
  Retrieves a Page object using the ID in the request path. This endpoint exposes page properties, not page content. 
  
  Equivalent to GET /v1/pages/{id}
  """
  v1Page(id: String!): V1Page

  """
  Retrieve a user object using the ID specified in the request path.
  
  Equivalent to GET /v1/users/{id}
  """
  v1User(id: String!): V1User
}

type V1Block {
  createdTime: String
  hasChildren: Boolean
  id: String
  lastEditedTime: String
  object: String
  paragraph: Paragraph
  type: String
}

type Paragraph {
  text: [TextListItem]
}

type TextListItem {
  annotations: Annotations
  href: JSON
  plainText: String
  text: Text2
  type: String
}

type Annotations {
  bold: Boolean
  code: Boolean
  color: String
  italic: Boolean
  strikethrough: Boolean
  underline: Boolean
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Text2 {
  content: String
  link: JSON
}

type V1BlockChildren {
  hasMore: Boolean
  nextCursor: JSON
  object: String
  results: [ResultsListItem]
}

type ResultsListItem {
  createdTime: String
  hasChildren: Boolean
  id: String
  lastEditedTime: String
  object: String
  type: String
  unsupported: JSON
}

type V1Database {
  createdTime: String
  id: String
  lastEditedTime: String
  object: String
  properties: Properties
  title: [Title2ListItem]
}

type Properties {
  author: Author
  link: Link
  name: Name
  publisher: Publisher
  publishingReleaseDate: PublishingReleaseDate
  read: Read
  score5: Score5
  status: Status
  summary: Summary
  type: Type
}

type Author {
  id: String
  multiSelect: MultiSelect
  type: String
}

type MultiSelect {
  options: [OptionsListItem]
}

type OptionsListItem {
  color: String
  id: String
  name: String
}

type Link {
  id: String
  type: String
  url: JSON
}

type Name {
  id: String
  title: JSON
  type: String
}

type Publisher {
  id: String
  select: Select
  type: String
}

type Select {
  options: [Options2ListItem]
}

type Options2ListItem {
  color: String
  id: String
  name: String
}

type PublishingReleaseDate {
  date: JSON
  id: String
  type: String
}

type Read {
  checkbox: JSON
  id: String
  type: String
}

type Score5 {
  id: String
  select: Select2
  type: String
}

type Select2 {
  options: [Options3ListItem]
}

type Options3ListItem {
  color: String
  id: String
  name: String
}

type Status {
  id: String
  select: Select3
  type: String
}

type Select3 {
  options: [Options4ListItem]
}

type Options4ListItem {
  color: String
  id: String
  name: String
}

type Summary {
  id: String
  text: JSON
  type: String
}

type Type {
  id: String
  select: Select4
  type: String
}

type Select4 {
  options: [Options5ListItem]
}

type Options5ListItem {
  color: String
  id: String
  name: String
}

type Title2ListItem {
  annotations: Annotations
  href: JSON
  plainText: String
  text: Text8
  type: String
}

type Text8 {
  content: String
  link: JSON
}

type V1Page {
  archived: Boolean
  createdTime: String
  id: String
  lastEditedTime: String
  object: String
  parent: Parent2
  properties: Properties5
}

type Parent2 {
  databaseId: String
  type: String
}

type Properties5 {
  author: Author4
  link: Link4
  name: Name4
  publisher: Publisher4
  publishingReleaseDate: PublishingReleaseDate4
  read: Read3
  status: Status4
  summary: Summary4
  type: Type4
}

type Author4 {
  id: String
  multiSelect: [MultiSelect3ListItem]
  type: String
}

type MultiSelect3ListItem {
  color: String
  id: String
  name: String
}

type Link4 {
  id: String
  type: String
  url: String
}

type Name4 {
  id: String
  title: [Title6ListItem]
  type: String
}

type Title6ListItem {
  annotations: Annotations
  href: JSON
  plainText: String
  text: Text13
  type: String
}

type Text13 {
  content: String
  link: JSON
}

type Publisher4 {
  id: String
  select: Select10
  type: String
}

type Select10 {
  color: String
  id: String
  name: String
}

type PublishingReleaseDate4 {
  date: Date4
  id: String
  type: String
}

type Date4 {
  end: JSON
  start: String
}

type Read3 {
  checkbox: Boolean
  id: String
  type: String
}

type Status4 {
  id: String
  select: Select11
  type: String
}

type Select11 {
  color: String
  id: String
  name: String
}

type Summary4 {
  id: String
  text: [Text14ListItem]
  type: String
}

type Text14ListItem {
  annotations: Annotations
  href: JSON
  plainText: String
  text: Text15
  type: String
}

type Text15 {
  content: String
  link: JSON
}

type Type4 {
  id: String
  select: Select12
  type: String
}

type Select12 {
  color: String
  id: String
  name: String
}

type V1User {
  avatarUrl: JSON
  id: String
  name: String
  object: String
  person: Person
  type: String
}

type Person {
  email: String
}

type Mutation {
  """
  Append block children
  
  Equivalent to PATCH /v1/blocks/{id}/children
  """
  appendBlockChildren(id: String!, v1BlockChildren2Input: V1BlockChildren2Input): V1BlockChildren3

  """
  Query a database
  
  Equivalent to POST /v1/databases/{id}/query
  """
  queryADatabase(id: String!, v1DatabaseQueryInput: V1DatabaseQueryInput): V1DatabaseQuery2

  """
  This endpoint allows you to update block content. [See Full Documentation](https://developers.notion.com/reference/update-a-block)
  
  Equivalent to PATCH /v1/blocks/{id}
  """
  updateABlock(id: String!, v1Block2Input: V1Block2Input): V1Block

  """
  Update a database
  
  Equivalent to PATCH /v1/databases/{id}
  """
  updateADatabase(id: String!, v1Database2Input: V1Database2Input): V1Database3

  """
  Updates a page by setting the values of any properties specified in the JSON body of the request. Properties not updated via parameters will remain unchanged. 
  
  Equivalent to PATCH /v1/pages/{id}
  """
  updatePageProperties(id: String!, v1Page2Input: V1Page2Input): V1Page3
}

type V1BlockChildren3 {
  childPage: ChildPage
  createdTime: String
  hasChildren: Boolean
  id: String
  lastEditedTime: String
  object: String
  type: String
}

type ChildPage {
  title: String
}

input V1BlockChildren2Input {
  children: [ChildrenListItemInput]
}

input ChildrenListItemInput {
  heading2: Heading2Input
  object: String
  type: String
}

input Heading2Input {
  text: [Text5ListItemInput]
}

input Text5ListItemInput {
  text: Text6Input
  type: String
}

input Text6Input {
  content: String
}

type V1DatabaseQuery2 {
  hasMore: Boolean
  nextCursor: JSON
  object: String
  results: [Results2ListItem]
}

type Results2ListItem {
  archived: Boolean
  createdTime: String
  id: String
  lastEditedTime: String
  object: String
  parent: Parent2
  properties: Properties4
}

type Properties4 {
  author: Author3
  link: Link3
  name: Name3
  publisher: Publisher3
  publishingReleaseDate: PublishingReleaseDate3
  read: Read3
  score5: Score53
  status: Status3
  summary: Summary3
  type: Type3
}

type Author3 {
  id: String
  multiSelect: [MultiSelect2ListItem]
  type: String
}

type MultiSelect2ListItem {
  color: String
  id: String
  name: String
}

type Link3 {
  id: String
  type: String
  url: String
}

type Name3 {
  id: String
  title: [Title5ListItem]
  type: String
}

type Title5ListItem {
  annotations: Annotations2
  href: JSON
  plainText: String
  text: Text11
  type: String
}

type Annotations2 {
  bold: Boolean
  code: Boolean
  color: String
  italic: Boolean
  strikethrough: Boolean
  underline: Boolean
}

type Text11 {
  content: String
  link: JSON
}

type Publisher3 {
  id: String
  select: Select6
  type: String
}

type Select6 {
  color: String
  id: String
  name: String
}

type PublishingReleaseDate3 {
  date: Date3
  id: String
  type: String
}

type Date3 {
  end: JSON
  start: String
}

type Score53 {
  id: String
  select: Select7
  type: String
}

type Select7 {
  color: String
  id: String
  name: String
}

type Status3 {
  id: String
  select: Select8
  type: String
}

type Select8 {
  color: String
  id: String
  name: String
}

type Summary3 {
  id: String
  text: [JSON]
  type: String
}

type Type3 {
  id: String
  select: Select9
  type: String
}

type Select9 {
  color: String
  id: String
  name: String
}

input V1DatabaseQueryInput {
  filter: FilterInput
  sorts: [SortsListItemInput]
}

input FilterInput {
  or: [OrListItemInput]
}

input OrListItemInput {
  property: String
  select: Select5Input
}

input Select5Input {
  equals: String
}

input SortsListItemInput {
  direction: String
  property: String
}

input V1Block2Input {
  paragraph: Paragraph2Input
}

input Paragraph2Input {
  text: [Text3ListItemInput]
}

input Text3ListItemInput {
  text: Text4Input
  type: String
}

input Text4Input {
  content: String
}

type V1Database3 {
  createdTime: String
  id: String
  lastEditedTime: String
  object: String
  parent: Parent
  properties: Properties3
  title: [Title4ListItem]
}

type Parent {
  pageId: String
  type: String
}

type Properties3 {
  author: Author2
  date: Date2
  link: Link2
  name: Name2
  publisher: Publisher2
  publishingReleaseDate: PublishingReleaseDate2
  read: Read2
  score5: Score52
  status: Status2
  summary: Summary2
  type: Type2
  winePairing: WinePairing2
}

type Author2 {
  id: String
  multiSelect: MultiSelect
  name: String
  type: String
}

type Date2 {
  date: JSON
  id: String
  name: String
  type: String
}

type Link2 {
  id: String
  name: String
  type: String
  url: JSON
}

type Name2 {
  id: String
  name: String
  title: JSON
  type: String
}

type Publisher2 {
  id: String
  name: String
  select: Select
  type: String
}

type PublishingReleaseDate2 {
  date: JSON
  id: String
  name: String
  type: String
}

type Read2 {
  checkbox: JSON
  id: String
  name: String
  type: String
}

type Score52 {
  id: String
  name: String
  select: Select2
  type: String
}

type Status2 {
  id: String
  name: String
  select: Select3
  type: String
}

type Summary2 {
  id: String
  name: String
  richText: JSON
  type: String
}

type Type2 {
  id: String
  name: String
  select: Select4
  type: String
}

type WinePairing2 {
  id: String
  name: String
  richText: JSON
  type: String
}

type Title4ListItem {
  annotations: Annotations
  href: JSON
  plainText: String
  text: Text10
  type: String
}

type Text10 {
  content: String
  link: JSON
}

input V1Database2Input {
  properties: Properties2Input
  title: [Title3ListItemInput]
}

input Properties2Input {
  winePairing: WinePairingInput
}

input WinePairingInput {
  richText: JSON
}

input Title3ListItemInput {
  text: Text9Input
}

input Text9Input {
  content: String
}

type V1Page3 {
  archived: Boolean
  createdTime: String
  id: String
  lastEditedTime: String
  object: String
  parent: Parent2
  properties: Properties7
}

type Properties7 {
  author: Author4
  link: Link4
  name: Name4
  publisher: Publisher4
  publishingReleaseDate: PublishingReleaseDate4
  read: Read4
  score5: Score54
  status: Status3
  summary: Summary5
  type: Type4
}

type Read4 {
  checkbox: Boolean
  id: String
  type: String
}

type Score54 {
  id: String
  select: Select14
  type: String
}

type Select14 {
  color: String
  id: String
  name: String
}

type Summary5 {
  id: String
  richText: [RichText2ListItem]
  type: String
}

type RichText2ListItem {
  annotations: Annotations
  href: JSON
  plainText: String
  text: Text15
  type: String
}

input V1Page2Input {
  properties: Properties6Input
}

input Properties6Input {
  status: Status5Input
}

input Status5Input {
  select: Select13Input
}

input Select13Input {
  name: String
}
