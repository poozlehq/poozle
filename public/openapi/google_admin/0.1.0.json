{
  "openapi": "3.0.0",
  "info": {
    "contact": {
      "name": "StackQL Studios",
      "url": "https://github.com/stackql/google-discovery-to-openapi",
      "email": "info@stackql.io"
    },
    "title": "Admin SDK API",
    "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
    "version": "directory_v1",
    "x-discovery-doc-revision": "20230321",
    "x-generated-date": "2023-04-01"
  },
  "externalDocs": {
    "url": "https://developers.google.com/admin-sdk/"
  },
  "servers": [
    {
      "url": "https://admin.googleapis.com"
    }
  ],
  "components": {
    "schemas": {
      "ChromeOsDeviceAction": {
        "type": "object",
        "properties": {
          "deprovisionReason": {
            "description": "Only used when the action is `deprovision`. With the `deprovision` action, this field is required. *Note*: The deprovision reason is audited because it might have implications on licenses for perpetual subscription customers.",
            "type": "string"
          },
          "action": {
            "type": "string",
            "description": "Action to be taken on the Chrome OS device."
          }
        },
        "description": "Data about an update to the status of a Chrome OS device."
      },
      "Channel": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "default": "api#channel",
            "description": "Identifies this as a notification channel used to watch for changes to a resource, which is `api#channel`."
          },
          "token": {
            "description": "An arbitrary string delivered to the target address with each notification delivered over this channel. Optional.",
            "type": "string"
          },
          "resourceId": {
            "type": "string",
            "description": "An opaque ID that identifies the resource being watched on this channel. Stable across different API versions."
          },
          "payload": {
            "description": "A Boolean value to indicate whether payload is wanted. Optional.",
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "description": "The type of delivery mechanism used for this channel."
          },
          "expiration": {
            "description": "Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional.",
            "format": "int64",
            "type": "string"
          },
          "address": {
            "description": "The address where notifications are delivered for this channel.",
            "type": "string"
          },
          "resourceUri": {
            "description": "A version-specific identifier for the watched resource.",
            "type": "string"
          },
          "params": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "description": "Additional parameters controlling delivery channel behavior. Optional. For example, `params.ttl` specifies the time-to-live in seconds for the notification channel, where the default is 2 hours and the maximum TTL is 2 days."
          }
        },
        "description": "An notification channel used to watch for resource changes."
      },
      "ListPrintersResponse": {
        "type": "object",
        "description": "Response for listing printers.",
        "properties": {
          "printers": {
            "type": "array",
            "description": "List of printers. If `org_unit_id` was given in the request, then only printers visible for this OU will be returned. If `org_unit_id` was not given in the request, then all printers will be returned.",
            "items": {
              "$ref": "#/components/schemas/Printer"
            }
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
          }
        }
      },
      "UserPhoto": {
        "properties": {
          "kind": {
            "type": "string",
            "description": "The type of the API resource. For Photo resources, this is `admin#directory#user#photo`.",
            "default": "admin#directory#user#photo"
          },
          "etag": {
            "description": "ETag of the resource.",
            "type": "string"
          },
          "photoData": {
            "format": "byte",
            "type": "string",
            "description": "The user photo's upload data in [web-safe Base64](https://en.wikipedia.org/wiki/Base64#URL_applications) format in bytes. This means: * The slash (/) character is replaced with the underscore (_) character. * The plus sign (+) character is replaced with the hyphen (-) character. * The equals sign (=) character is replaced with the asterisk (*). * For padding, the period (.) character is used instead of the RFC-4648 baseURL definition which uses the equals sign (=) for padding. This is done to simplify URL-parsing. * Whatever the size of the photo being uploaded, the API downsizes it to 96x96 pixels."
          },
          "width": {
            "format": "int32",
            "type": "integer",
            "description": "Width of the photo in pixels."
          },
          "height": {
            "type": "integer",
            "format": "int32",
            "description": "Height of the photo in pixels."
          },
          "primaryEmail": {
            "description": "The user's primary email address.",
            "type": "string"
          },
          "mimeType": {
            "description": "The MIME type of the photo. Allowed values are `JPEG`, `PNG`, `GIF`, `BMP`, `TIFF`, and web-safe base64 encoding.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PrintServer": {
        "properties": {
          "uri": {
            "description": "Editable. Print server URI.",
            "type": "string"
          },
          "displayName": {
            "description": "Editable. Display name of the print server (as shown in the Admin console).",
            "type": "string"
          },
          "orgUnitId": {
            "type": "string",
            "description": "ID of the organization unit (OU) that owns this print server. This value can only be set when the print server is initially created. If it's not populated, the print server is placed under the root OU. The `org_unit_id` can be retrieved using the [Directory API](/admin-sdk/directory/reference/rest/v1/orgunits)."
          },
          "name": {
            "type": "string",
            "description": "Immutable. Resource name of the print server. Leave empty when creating. Format: `customers/{customer.id}/printServers/{print_server.id}`"
          },
          "createTime": {
            "description": "Output only. Time when the print server was created.",
            "type": "string",
            "format": "google-datetime",
            "required": true
          },
          "description": {
            "type": "string",
            "description": "Editable. Description of the print server (as shown in the Admin console)."
          }
        },
        "description": "Configuration for a print server.",
        "type": "object"
      },
      "UserPhone": {
        "properties": {
          "primary": {
            "description": "If this is user's primary phone or not.",
            "type": "boolean"
          },
          "type": {
            "description": "Each entry can have a type which indicates standard types of that entry. For example phone could be of home_fax work mobile etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
            "type": "string"
          },
          "value": {
            "type": "string",
            "description": "Phone number."
          },
          "customType": {
            "description": "Custom Type.",
            "type": "string"
          }
        },
        "type": "object",
        "description": "JSON template for a phone entry."
      },
      "DomainAlias": {
        "type": "object",
        "properties": {
          "creationTime": {
            "type": "string",
            "format": "int64",
            "description": "The creation time of the domain alias. (Read-only)."
          },
          "etag": {
            "type": "string",
            "description": "ETag of the resource."
          },
          "verified": {
            "type": "boolean",
            "description": "Indicates the verification state of a domain alias. (Read-only)"
          },
          "parentDomainName": {
            "description": "The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.",
            "type": "string"
          },
          "kind": {
            "description": "Kind of resource this is.",
            "type": "string",
            "default": "admin#directory#domainAlias"
          },
          "domainAliasName": {
            "type": "string",
            "description": "The domain alias name."
          }
        }
      },
      "Buildings": {
        "description": "Public API: Resources.buildings",
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "default": "admin#directory#resources#buildings#buildingsList",
            "description": "Kind of resource this is."
          },
          "nextPageToken": {
            "type": "string",
            "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results."
          },
          "buildings": {
            "description": "The Buildings in this page of results.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Building"
            }
          },
          "etag": {
            "description": "ETag of the resource.",
            "type": "string"
          }
        }
      },
      "Asps": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Asp"
            },
            "description": "A list of ASP resources."
          },
          "kind": {
            "type": "string",
            "description": "The type of the API resource. This is always `admin#directory#aspList`.",
            "default": "admin#directory#aspList"
          },
          "etag": {
            "type": "string",
            "description": "ETag of the resource."
          }
        }
      },
      "Domains2": {
        "type": "object",
        "properties": {
          "etag": {
            "type": "string",
            "description": "ETag of the resource."
          },
          "domains": {
            "description": "A list of domain objects.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Domains"
            }
          },
          "kind": {
            "description": "Kind of resource this is.",
            "default": "admin#directory#domains",
            "type": "string"
          }
        }
      },
      "ChromeOsDevices": {
        "properties": {
          "nextPageToken": {
            "description": "Token used to access the next page of this result. To access the next page, use this token's value in the `pageToken` query string of this request.",
            "type": "string"
          },
          "kind": {
            "default": "admin#directory#chromeosdevices",
            "description": "Kind of resource this is.",
            "type": "string"
          },
          "chromeosdevices": {
            "type": "array",
            "description": "A list of Chrome OS Device objects.",
            "items": {
              "$ref": "#/components/schemas/ChromeOsDevice"
            }
          },
          "etag": {
            "type": "string",
            "description": "ETag of the resource."
          }
        },
        "type": "object"
      },
      "DirectoryChromeosdevicesIssueCommandResponse": {
        "properties": {
          "commandId": {
            "format": "int64",
            "type": "string",
            "description": "The unique ID of the issued command, used to retrieve the command status."
          }
        },
        "type": "object",
        "description": "A response for issuing a command."
      },
      "FeatureInstance": {
        "type": "object",
        "description": "JSON template for a feature instance.",
        "properties": {
          "feature": {
            "$ref": "#/components/schemas/Feature",
            "description": "The feature that this is an instance of. A calendar resource may have multiple instances of a feature."
          }
        }
      },
      "Group": {
        "description": "Google Groups provide your users the ability to send messages to groups of people using the group's email address. For more information about common tasks, see the [Developer's Guide](https://developers.google.com/admin-sdk/directory/v1/guides/manage-groups). For information about other types of groups, see the [Cloud Identity Groups API documentation](https://cloud.google.com/identity/docs/groups). Note: The user calling the API (or being impersonated by a service account) must have an assigned [role](https://developers.google.com/admin-sdk/directory/v1/guides/manage-roles) that includes Admin API Groups permissions, such as Super Admin or Groups Admin.",
        "type": "object",
        "properties": {
          "nonEditableAliases": {
            "type": "array",
            "description": "Read-only. The list of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the group. This is a read-only property returned in the API's response for a group. If edited in a group's POST or PUT request, the edit is ignored.",
            "items": {
              "type": "string"
            }
          },
          "adminCreated": {
            "description": "Read-only. Value is `true` if this group was created by an administrator rather than a user.",
            "type": "boolean"
          },
          "description": {
            "description": "An extended description to help users determine the purpose of a group. For example, you can include information about who should join the group, the types of messages to send to the group, links to FAQs about the group, or related groups. Maximum length is `4,096` characters.",
            "type": "string"
          },
          "kind": {
            "type": "string",
            "description": "The type of the API resource. For Groups resources, the value is `admin#directory#group`.",
            "default": "admin#directory#group"
          },
          "directMembersCount": {
            "description": "The number of users that are direct members of the group. If a group is a member (child) of this group (the parent), members of the child group are not counted in the `directMembersCount` property of the parent group.",
            "format": "int64",
            "type": "string"
          },
          "etag": {
            "description": "ETag of the resource.",
            "type": "string"
          },
          "email": {
            "type": "string",
            "description": "The group's email address. If your account has multiple domains, select the appropriate domain for the email address. The `email` must be unique. This property is required when creating a group. Group email addresses are subject to the same character usage rules as usernames, see the [help center](https://support.google.com/a/answer/9193374) for details."
          },
          "name": {
            "type": "string",
            "description": "The group's display name."
          },
          "aliases": {
            "description": "Read-only. The list of a group's alias email addresses. To add, update, or remove a group's aliases, use the `groups.aliases` methods. If edited in a group's POST or PUT request, the edit is ignored.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "Building": {
        "properties": {
          "etags": {
            "type": "string",
            "description": "ETag of the resource."
          },
          "floorNames": {
            "type": "array",
            "description": "The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry.",
            "items": {
              "type": "string"
            }
          },
          "buildingId": {
            "type": "string",
            "description": "Unique identifier for the building. The maximum length is 100 characters."
          },
          "buildingName": {
            "type": "string",
            "description": "The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters."
          },
          "address": {
            "$ref": "#/components/schemas/BuildingAddress",
            "description": "The postal address of the building. See [`PostalAddress`](/my-business/reference/rest/v4/PostalAddress) for details. Note that only a single address line and region code are required."
          },
          "kind": {
            "type": "string",
            "description": "Kind of resource this is.",
            "default": "admin#directory#resources#buildings#Building"
          },
          "coordinates": {
            "$ref": "#/components/schemas/BuildingCoordinates",
            "description": "The geographic coordinates of the center of the building, expressed as latitude and longitude in decimal degrees."
          },
          "description": {
            "description": "A brief description of the building. For example, \"Chelsea Market\".",
            "type": "string"
          }
        },
        "description": "Public API: Resources.buildings",
        "type": "object"
      },
      "Role": {
        "type": "object",
        "properties": {
          "isSystemRole": {
            "description": "Returns `true` if this is a pre-defined system role.",
            "type": "boolean"
          },
          "rolePrivileges": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "privilegeName": {
                  "description": "The name of the privilege.",
                  "type": "string"
                },
                "serviceId": {
                  "description": "The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list).",
                  "type": "string"
                }
              }
            },
            "description": "The set of privileges that are granted to this role."
          },
          "roleId": {
            "format": "int64",
            "description": "ID of the role.",
            "type": "string"
          },
          "isSuperAdminRole": {
            "type": "boolean",
            "description": "Returns `true` if the role is a super admin role."
          },
          "roleDescription": {
            "description": "A short description of the role.",
            "type": "string"
          },
          "roleName": {
            "description": "Name of the role.",
            "type": "string"
          },
          "kind": {
            "description": "The type of the API resource. This is always `admin#directory#role`.",
            "type": "string",
            "default": "admin#directory#role"
          },
          "etag": {
            "type": "string",
            "description": "ETag of the resource."
          }
        }
      },
      "Member": {
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of group member."
          },
          "delivery_settings": {
            "description": "Defines mail delivery preferences of member. This is only supported by create/update/get.",
            "type": "string"
          },
          "role": {
            "description": "The member's role in a group. The API returns an error for cycles in group memberships. For example, if `group1` is a member of `group2`, `group2` cannot be a member of `group1`. For more information about a member's role, see the [administration help center](https://support.google.com/a/answer/167094).",
            "type": "string"
          },
          "email": {
            "description": "The member's email address. A member can be a user or another group. This property is required when adding a member to a group. The `email` must be unique and cannot be an alias of another group. If the email address is changed, the API automatically reflects the email address changes.",
            "type": "string"
          },
          "etag": {
            "type": "string",
            "description": "ETag of the resource."
          },
          "status": {
            "description": "Status of member (Immutable)",
            "type": "string"
          },
          "kind": {
            "default": "admin#directory#member",
            "type": "string",
            "description": "The type of the API resource. For Members resources, the value is `admin#directory#member`."
          }
        },
        "type": "object",
        "description": "A Google Groups member can be a user or another group. This member can be inside or outside of your account's domains. For more information about common group member tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-group-members)."
      },
      "UserUndelete": {
        "properties": {
          "orgUnitPath": {
            "type": "string",
            "description": "OrgUnit of User"
          }
        },
        "type": "object"
      },
      "BatchCreatePrintServersResponse": {
        "type": "object",
        "properties": {
          "failures": {
            "items": {
              "$ref": "#/components/schemas/PrintServerFailureInfo"
            },
            "description": "A list of create failures. `PrintServer` IDs are not populated, as print servers were not created.",
            "type": "array"
          },
          "printServers": {
            "items": {
              "$ref": "#/components/schemas/PrintServer"
            },
            "type": "array",
            "description": "A list of successfully created print servers with their IDs populated."
          }
        }
      },
      "BatchCreatePrintServersRequest": {
        "properties": {
          "requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePrintServerRequest"
            },
            "description": "Required. A list of `PrintServer` resources to be created (max `50` per batch)."
          }
        },
        "description": "Request to add multiple new print servers in a batch.",
        "type": "object"
      },
      "VerificationCode": {
        "properties": {
          "etag": {
            "type": "string",
            "description": "ETag of the resource."
          },
          "verificationCode": {
            "description": "A current verification code for the user. Invalidated or used verification codes are not returned as part of the result.",
            "type": "string"
          },
          "userId": {
            "type": "string",
            "description": "The obfuscated unique ID of the user."
          },
          "kind": {
            "default": "admin#directory#verificationCode",
            "description": "The type of the resource. This is always `admin#directory#verificationCode`.",
            "type": "string"
          }
        },
        "description": "The Directory API allows you to view, generate, and invalidate backup verification codes for a user.",
        "type": "object"
      },
      "DirectoryChromeosdevicesCommand": {
        "properties": {
          "payload": {
            "description": "The payload that the command specified, if any.",
            "type": "string"
          },
          "issueTime": {
            "type": "string",
            "format": "google-datetime",
            "description": "The timestamp when the command was issued by the admin."
          },
          "commandExpireTime": {
            "format": "google-datetime",
            "type": "string",
            "description": "The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired."
          },
          "commandResult": {
            "$ref": "#/components/schemas/DirectoryChromeosdevicesCommandResult",
            "description": "The result of the command execution."
          },
          "type": {
            "enum": [
              "COMMAND_TYPE_UNSPECIFIED",
              "REBOOT",
              "TAKE_A_SCREENSHOT",
              "SET_VOLUME",
              "WIPE_USERS",
              "REMOTE_POWERWASH",
              "DEVICE_START_CRD_SESSION",
              "CAPTURE_LOGS"
            ],
            "description": "The type of the command.",
            "type": "string"
          },
          "state": {
            "description": "Indicates the command state.",
            "type": "string",
            "enum": [
              "STATE_UNSPECIFIED",
              "PENDING",
              "EXPIRED",
              "CANCELLED",
              "SENT_TO_CLIENT",
              "ACKED_BY_CLIENT",
              "EXECUTED_BY_CLIENT"
            ]
          },
          "commandId": {
            "type": "string",
            "format": "int64",
            "description": "Unique ID of a device command."
          }
        },
        "description": "Information regarding a command that was issued to a device.",
        "type": "object"
      },
      "GroupAlias": {
        "description": "The Directory API manages aliases, which are alternative email addresses.",
        "properties": {
          "alias": {
            "description": "The alias email address.",
            "type": "string"
          },
          "kind": {
            "type": "string",
            "description": "The type of the API resource. For Alias resources, the value is `admin#directory#alias`."
          },
          "etag": {
            "description": "ETag of the resource.",
            "type": "string"
          },
          "primaryEmail": {
            "type": "string",
            "description": "The primary email address of the group."
          }
        },
        "type": "object"
      },
      "UserIm": {
        "properties": {
          "primary": {
            "type": "boolean",
            "description": "If this is user's primary im. Only one entry could be marked as primary."
          },
          "customProtocol": {
            "description": "Custom protocol.",
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "Each entry can have a type which indicates standard types of that entry. For example instant messengers could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such types should have the CUSTOM value as type and also have a customType value."
          },
          "customType": {
            "type": "string",
            "description": "Custom type."
          },
          "im": {
            "type": "string",
            "description": "Instant messenger id."
          },
          "protocol": {
            "description": "Protocol used in the instant messenger. It should be one of the values from ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify the custom name in customProtocol field.",
            "type": "string"
          }
        },
        "type": "object",
        "description": "JSON template for instant messenger of an user."
      },
      "DomainAliases": {
        "properties": {
          "etag": {
            "type": "string",
            "description": "ETag of the resource."
          },
          "domainAliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DomainAlias"
            },
            "description": "A list of domain alias objects."
          },
          "kind": {
            "default": "admin#directory#domainAliases",
            "type": "string",
            "description": "Kind of resource this is."
          }
        },
        "type": "object"
      },
      "RoleAssignment": {
        "type": "object",
        "properties": {
          "kind": {
            "description": "The type of the API resource. This is always `admin#directory#roleAssignment`.",
            "type": "string",
            "default": "admin#directory#roleAssignment"
          },
          "assignedTo": {
            "type": "string",
            "description": "The unique ID of the entity this role is assigned to\u2014either the `user_id` of a user or the `uniqueId` of a service account, as defined in [Identity and Access Management (IAM)](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts)."
          },
          "roleId": {
            "format": "int64",
            "type": "string",
            "description": "The ID of the role that is assigned."
          },
          "etag": {
            "type": "string",
            "description": "ETag of the resource."
          },
          "roleAssignmentId": {
            "type": "string",
            "description": "ID of this roleAssignment.",
            "format": "int64"
          },
          "scopeType": {
            "description": "The scope in which this role is assigned.",
            "type": "string"
          },
          "assigneeType": {
            "required": true,
            "enum": [
              "user",
              "group"
            ],
            "type": "string",
            "description": "Output only. The type of the assignee (`USER` or `GROUP`)."
          },
          "orgUnitId": {
            "description": "If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to.",
            "type": "string"
          }
        },
        "description": "Defines an assignment of a role."
      },
      "UserName": {
        "properties": {
          "fullName": {
            "description": "The user's full name formed by concatenating the first and last name values.",
            "type": "string"
          },
          "givenName": {
            "description": "The user's first name. Required when creating a user account.",
            "type": "string"
          },
          "displayName": {
            "description": "The user's display name. Limit: 256 characters.",
            "type": "string"
          },
          "familyName": {
            "type": "string",
            "description": "The user's last name. Required when creating a user account."
          }
        },
        "type": "object"
      },
      "BuildingCoordinates": {
        "type": "object",
        "description": "Public API: Resources.buildings",
        "properties": {
          "longitude": {
            "format": "double",
            "type": "number",
            "description": "Longitude in decimal degrees."
          },
          "latitude": {
            "description": "Latitude in decimal degrees.",
            "format": "double",
            "type": "number"
          }
        }
      },
      "OrgUnits": {
        "properties": {
          "organizationUnits": {
            "type": "array",
            "description": "A list of organizational unit objects.",
            "items": {
              "$ref": "#/components/schemas/OrgUnit"
            }
          },
          "kind": {
            "type": "string",
            "description": "The type of the API resource. For Org Unit resources, the type is `admin#directory#orgUnits`.",
            "default": "admin#directory#orgUnits"
          },
          "etag": {
            "type": "string",
            "description": "ETag of the resource."
          }
        },
        "type": "object"
      },
      "BatchCreatePrintersRequest": {
        "description": "Request for adding new printers in batch.",
        "type": "object",
        "properties": {
          "requests": {
            "description": "A list of Printers to be created. Max 50 at a time.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePrinterRequest"
            }
          }
        }
      },
      "MobileDeviceAction": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "The action to be performed on the device."
          }
        }
      },
      "CreatePrinterRequest": {
        "type": "object",
        "properties": {
          "printer": {
            "description": "Required. A printer to create. If you want to place the printer under particular OU then populate printer.org_unit_id filed. Otherwise the printer will be placed under root OU.",
            "$ref": "#/components/schemas/Printer"
          },
          "parent": {
            "type": "string",
            "description": "Required. The name of the customer. Format: customers/{customer_id}"
          }
        },
        "description": "Request for adding a new printer."
      },
      "UserRelation": {
        "type": "object",
        "description": "JSON template for a relation entry.",
        "properties": {
          "customType": {
            "type": "string",
            "description": "Custom Type."
          },
          "value": {
            "description": "The name of the relation.",
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "The relation of the user. Some of the possible values are mother father sister brother manager assistant partner."
          }
        }
      },
      "CreatePrintServerRequest": {
        "description": "Request for adding a new print server.",
        "properties": {
          "printServer": {
            "description": "Required. A print server to create. If you want to place the print server under a specific organizational unit (OU), then populate the `org_unit_id`. Otherwise the print server is created under the root OU. The `org_unit_id` can be retrieved using the [Directory API](https://developers.google.com/admin-sdk/directory/v1/guides/manage-org-units).",
            "$ref": "#/components/schemas/PrintServer"
          },
          "parent": {
            "description": "Required. The [unique ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers) of the customer's Google Workspace account. Format: `customers/{id}`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Alias": {
        "description": "JSON template for Alias object in Directory API.",
        "properties": {
          "etag": {
            "type": "string"
          },
          "primaryEmail": {
            "type": "string"
          },
          "kind": {
            "type": "string",
            "default": "admin#directory#alias"
          },
          "alias": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "FailureInfo": {
        "description": "Info about failures",
        "properties": {
          "errorMessage": {
            "type": "string",
            "description": "Failure reason message."
          },
          "errorCode": {
            "enum": [
              "OK",
              "CANCELLED",
              "UNKNOWN",
              "INVALID_ARGUMENT",
              "DEADLINE_EXCEEDED",
              "NOT_FOUND",
              "ALREADY_EXISTS",
              "PERMISSION_DENIED",
              "UNAUTHENTICATED",
              "RESOURCE_EXHAUSTED",
              "FAILED_PRECONDITION",
              "ABORTED",
              "OUT_OF_RANGE",
              "UNIMPLEMENTED",
              "INTERNAL",
              "UNAVAILABLE",
              "DATA_LOSS"
            ],
            "description": "Canonical code for why the update failed to apply.",
            "type": "string"
          },
          "printer": {
            "$ref": "#/components/schemas/Printer",
            "description": "Failed printer."
          },
          "printerId": {
            "type": "string",
            "description": "Id of a failed printer."
          }
        },
        "type": "object"
      },
      "Roles": {
        "type": "object",
        "properties": {
          "kind": {
            "default": "admin#directory#roles",
            "type": "string",
            "description": "The type of the API resource. This is always `admin#directory#roles`."
          },
          "nextPageToken": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "description": "A list of Role resources."
          },
          "etag": {
            "type": "string",
            "description": "ETag of the resource."
          }
        }
      },
      "UserCustomProperties": {
        "description": "JSON template for a set of custom properties (i.e. all fields in a particular schema)",
        "type": "object",
        "additionalProperties": { }
      },
      "FeatureRename": {
        "type": "object",
        "properties": {
          "newName": {
            "description": "New name of the feature.",
            "type": "string"
          }
        }
      },
      "OrgUnit": {
        "description": "Managing your account's organizational units allows you to configure your users' access to services and custom settings. For more information about common organizational unit tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-org-units.html). The customer's organizational unit hierarchy is limited to 35 levels of depth.",
        "properties": {
          "parentOrgUnitId": {
            "type": "string",
            "description": "The unique ID of the parent organizational unit. Required, unless `parentOrgUnitPath` is set."
          },
          "kind": {
            "default": "admin#directory#orgUnit",
            "description": "The type of the API resource. For Orgunits resources, the value is `admin#directory#orgUnit`.",
            "type": "string"
          },
          "orgUnitPath": {
            "type": "string",
            "description": "The full path to the organizational unit. The `orgUnitPath` is a derived property. When listed, it is derived from `parentOrgunitPath` and organizational unit's `name`. For example, for an organizational unit named 'apps' under parent organization '/engineering', the orgUnitPath is '/engineering/apps'. In order to edit an `orgUnitPath`, either update the name of the organization or the `parentOrgunitPath`. A user's organizational unit determines which Google Workspace services the user has access to. If the user is moved to a new organization, the user's access changes. For more information about organization structures, see the [administration help center](https://support.google.com/a/answer/4352075). For more information about moving a user to a different organization, see [Update a user](/admin-sdk/directory/v1/guides/manage-users.html#update_user)."
          },
          "etag": {
            "description": "ETag of the resource.",
            "type": "string"
          },
          "parentOrgUnitPath": {
            "type": "string",
            "description": "The organizational unit's parent path. For example, /corp/sales is the parent path for /corp/sales/sales_support organizational unit. Required, unless `parentOrgUnitId` is set."
          },
          "blockInheritance": {
            "type": "boolean",
            "description": "Determines if a sub-organizational unit can inherit the settings of the parent organization. The default value is `false`, meaning a sub-organizational unit inherits the settings of the nearest parent organizational unit. For more information on inheritance and users in an organization structure, see the [administration help center](https://support.google.com/a/answer/4352075)."
          },
          "name": {
            "type": "string",
            "description": "The organizational unit's path name. For example, an organizational unit's name within the /corp/support/sales_support parent path is sales_support. Required."
          },
          "orgUnitId": {
            "type": "string",
            "description": "The unique ID of the organizational unit."
          },
          "description": {
            "description": "Description of the organizational unit.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DirectoryChromeosdevicesCommandResult": {
        "properties": {
          "result": {
            "description": "The result of the command.",
            "type": "string",
            "enum": [
              "COMMAND_RESULT_TYPE_UNSPECIFIED",
              "IGNORED",
              "FAILURE",
              "SUCCESS"
            ]
          },
          "executeTime": {
            "description": "The time at which the command was executed or failed to execute.",
            "type": "string",
            "format": "google-datetime"
          },
          "errorMessage": {
            "type": "string",
            "description": "The error message with a short explanation as to why the command failed. Only present if the command failed."
          },
          "commandResultPayload": {
            "type": "string",
            "description": "The payload for the command result. The following commands respond with a payload: * `DEVICE_START_CRD_SESSION`: Payload is a stringified JSON object in the form: { \"url\": url }. The URL provides a link to the Chrome Remote Desktop session."
          }
        },
        "type": "object",
        "description": "The result of executing a command."
      },
      "MobileDevices": {
        "properties": {
          "kind": {
            "type": "string",
            "default": "admin#directory#mobiledevices",
            "description": "Kind of resource this is."
          },
          "nextPageToken": {
            "type": "string",
            "description": "Token used to access next page of this result."
          },
          "mobiledevices": {
            "description": "A list of Mobile Device objects.",
            "items": {
              "$ref": "#/components/schemas/MobileDevice"
            },
            "type": "array"
          },
          "etag": {
            "type": "string",
            "description": "ETag of the resource."
          }
        },
        "type": "object"
      },
      "Empty": {
        "properties": { },
        "type": "object",
        "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }"
      },
      "UserWebsite": {
        "type": "object",
        "description": "JSON template for a website entry.",
        "properties": {
          "primary": {
            "description": "If this is user's primary website or not.",
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "description": "Each entry can have a type which indicates standard types of that entry. For example website could be of home work blog etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value."
          },
          "customType": {
            "type": "string",
            "description": "Custom Type."
          },
          "value": {
            "type": "string",
            "description": "Website."
          }
        }
      },
      "VerificationCodes": {
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VerificationCode"
            },
            "description": "A list of verification code resources."
          },
          "kind": {
            "type": "string",
            "description": "The type of the resource. This is always `admin#directory#verificationCodesList`.",
            "default": "admin#directory#verificationCodesList"
          },
          "etag": {
            "description": "ETag of the resource.",
            "type": "string"
          }
        },
        "description": "JSON response template for list verification codes operation in Directory API.",
        "type": "object"
      },
      "CalendarResource": {
        "type": "object",
        "description": "Public API: Resources.calendars",
        "properties": {
          "floorSection": {
            "description": "Name of the section within a floor a resource is located in.",
            "type": "string"
          },
          "resourceName": {
            "type": "string",
            "description": "The name of the calendar resource. For example, \"Training Room 1A\"."
          },
          "kind": {
            "default": "admin#directory#resources#calendars#CalendarResource",
            "description": "The type of the resource. For calendar resources, the value is `admin#directory#resources#calendars#CalendarResource`.",
            "type": "string"
          },
          "userVisibleDescription": {
            "type": "string",
            "description": "Description of the resource, visible to users and admins."
          },
          "featureInstances": {
            "description": "Instances of features for the calendar resource."
          },
          "resourceCategory": {
            "type": "string",
            "description": "The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN."
          },
          "resourceDescription": {
            "type": "string",
            "description": "Description of the resource, visible only to admins."
          },
          "resourceEmail": {
            "description": "The read-only email for the calendar resource. Generated as part of creating a new calendar resource.",
            "type": "string"
          },
          "generatedResourceName": {
            "description": "The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\".",
            "type": "string"
          },
          "buildingId": {
            "type": "string",
            "description": "Unique ID for the building a resource is located in."
          },
          "floorName": {
            "description": "Name of the floor a resource is located on.",
            "type": "string"
          },
          "resourceId": {
            "type": "string",
            "description": "The unique ID for the calendar resource."
          },
          "capacity": {
            "type": "integer",
            "format": "int32",
            "description": "Capacity of a resource, number of seats in a room."
          },
          "resourceType": {
            "type": "string",
            "description": "The type of the calendar resource, intended for non-room resources."
          },
          "etags": {
            "description": "ETag of the resource.",
            "type": "string"
          }
        }
      },
      "MobileDevice": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The device's status."
          },
          "serialNumber": {
            "type": "string",
            "description": "The device's serial number."
          },
          "hardwareId": {
            "description": "The IMEI/MEID unique identifier for Android hardware. It is not applicable to Google Sync devices. When adding an Android mobile device, this is an optional property. When updating one of these devices, this is a read-only property.",
            "type": "string"
          },
          "kernelVersion": {
            "description": "The device's kernel version.",
            "type": "string"
          },
          "applications": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "permission": {
                  "type": "array",
                  "description": "The list of permissions of this application. These can be either a standard Android permission or one defined by the application, and are found in an application's [Android manifest](https://developer.android.com/guide/topics/manifest/uses-permission-element.html). Examples of a Calendar application's permissions are `READ_CALENDAR`, or `MANAGE_ACCOUNTS`.",
                  "items": {
                    "type": "string"
                  }
                },
                "versionCode": {
                  "description": "The application's version code. An example is `13`.",
                  "format": "int32",
                  "type": "integer"
                },
                "displayName": {
                  "type": "string",
                  "description": "The application's display name. An example is `Browser`."
                },
                "versionName": {
                  "description": "The application's version name. An example is `3.2-140714`.",
                  "type": "string"
                },
                "packageName": {
                  "type": "string",
                  "description": "The application's package name. An example is `com.android.browser`."
                }
              }
            },
            "description": "The list of applications installed on an Android mobile device. It is not applicable to Google Sync and iOS devices. The list includes any Android applications that access Google Workspace data. When updating an applications list, it is important to note that updates replace the existing list. If the Android device has two existing applications and the API updates the list with five applications, the is now the updated list of five applications."
          },
          "model": {
            "description": "The mobile device's model name, for example Nexus S. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile=devices#update_mobile_device).",
            "type": "string"
          },
          "adbStatus": {
            "type": "boolean",
            "description": "Adb (USB debugging) enabled or disabled on device (Read-only)"
          },
          "brand": {
            "description": "Mobile Device Brand (Read-only)",
            "type": "string"
          },
          "meid": {
            "type": "string",
            "description": "The device's MEID number."
          },
          "manufacturer": {
            "description": "Mobile Device manufacturer (Read-only)",
            "type": "string"
          },
          "kind": {
            "description": "The type of the API resource. For Mobiledevices resources, the value is `admin#directory#mobiledevice`.",
            "type": "string",
            "default": "admin#directory#mobiledevice"
          },
          "releaseVersion": {
            "description": "Mobile Device release version version (Read-only)",
            "type": "string"
          },
          "deviceCompromisedStatus": {
            "type": "string",
            "description": "The compromised device status."
          },
          "developerOptionsStatus": {
            "type": "boolean",
            "description": "Developer options enabled or disabled on device (Read-only)"
          },
          "networkOperator": {
            "type": "string",
            "description": "Mobile Device mobile or network operator (if available) (Read-only)"
          },
          "buildNumber": {
            "description": "The device's operating system build number.",
            "type": "string"
          },
          "supportsWorkProfile": {
            "type": "boolean",
            "description": "Work profile supported on device (Read-only)"
          },
          "userAgent": {
            "description": "Gives information about the device such as `os` version. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device).",
            "type": "string"
          },
          "name": {
            "description": "The list of the owner's user names. If your application needs the current list of device owner names, use the [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For more information about retrieving mobile device user information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-users#get_user).",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "email": {
            "description": "The list of the owner's email addresses. If your application needs the current list of user emails, use the [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For additional information, see the [retrieve a user](/admin-sdk/directory/v1/guides/manage-users#get_user) method.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "type": "string",
            "description": "The type of mobile device."
          },
          "otherAccountsInfo": {
            "description": "The list of accounts added on device (Read-only)",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "encryptionStatus": {
            "type": "string",
            "description": "Mobile Device Encryption Status (Read-only)"
          },
          "securityPatchLevel": {
            "format": "int64",
            "description": "Mobile Device Security patch level (Read-only)",
            "type": "string"
          },
          "imei": {
            "description": "The device's IMEI number.",
            "type": "string"
          },
          "defaultLanguage": {
            "description": "The default locale used on the device.",
            "type": "string"
          },
          "unknownSourcesStatus": {
            "description": "Unknown sources enabled or disabled on device (Read-only)",
            "type": "boolean"
          },
          "deviceId": {
            "type": "string",
            "description": "The serial number for a Google Sync mobile device. For Android and iOS devices, this is a software generated unique identifier."
          },
          "managedAccountIsOnOwnerProfile": {
            "type": "boolean",
            "description": "Boolean indicating if this account is on owner/primary profile or not."
          },
          "bootloaderVersion": {
            "type": "string",
            "description": "Mobile Device Bootloader version (Read-only)"
          },
          "devicePasswordStatus": {
            "description": "DevicePasswordStatus (Read-only)",
            "type": "string"
          },
          "wifiMacAddress": {
            "type": "string",
            "description": "The device's MAC address on Wi-Fi networks."
          },
          "lastSync": {
            "format": "date-time",
            "type": "string",
            "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)"
          },
          "resourceId": {
            "type": "string",
            "description": "The unique ID the API service uses to identify the mobile device."
          },
          "privilege": {
            "description": "DMAgentPermission (Read-only)",
            "type": "string"
          },
          "os": {
            "type": "string",
            "description": "The mobile device's operating system, for example IOS 4.3 or Android 2.3.5. This property can be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For more information, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device)."
          },
          "basebandVersion": {
            "type": "string",
            "description": "The device's baseband version."
          },
          "hardware": {
            "description": "Mobile Device Hardware (Read-only)",
            "type": "string"
          },
          "etag": {
            "type": "string",
            "description": "ETag of the resource."
          },
          "firstSync": {
            "description": "Date and time the device was first synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
            "format": "date-time",
            "type": "string"
          }
        },
        "description": "Google Workspace Mobile Management includes Android, [Google Sync](https://support.google.com/a/answer/135937), and iOS devices. For more information about common group mobile device API tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices.html)."
      },
      "BatchDeletePrintServersRequest": {
        "properties": {
          "printServerIds": {
            "description": "A list of print server IDs that should be deleted (max `100` per batch).",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object",
        "description": "Request to delete multiple existing print servers in a batch."
      },
      "UserPosixAccount": {
        "type": "object",
        "description": "JSON template for a POSIX account entry.",
        "properties": {
          "accountId": {
            "description": "A POSIX account field identifier.",
            "type": "string"
          },
          "username": {
            "description": "The username of the account.",
            "type": "string"
          },
          "gecos": {
            "description": "The GECOS (user information) for this account.",
            "type": "string"
          },
          "uid": {
            "description": "The POSIX compliant user ID.",
            "type": "string",
            "format": "uint64"
          },
          "primary": {
            "description": "If this is user's primary account within the SystemId.",
            "type": "boolean"
          },
          "systemId": {
            "description": "System identifier for which account Username or Uid apply to.",
            "type": "string"
          },
          "operatingSystemType": {
            "type": "string",
            "description": "The operating system type for this account."
          },
          "homeDirectory": {
            "description": "The path to the home directory for this account.",
            "type": "string"
          },
          "shell": {
            "type": "string",
            "description": "The path to the login shell for this account."
          },
          "gid": {
            "type": "string",
            "description": "The default group ID.",
            "format": "uint64"
          }
        }
      },
      "UserEmail": {
        "properties": {
          "type": {
            "description": "Each entry can have a type which indicates standard types of that entry. For example email could be of home, work etc. In addition to the standard type, an entry can have a custom type and can take any value Such types should have the CUSTOM value as type and also have a customType value.",
            "type": "string"
          },
          "address": {
            "description": "Email id of the user.",
            "type": "string"
          },
          "primary": {
            "type": "boolean",
            "description": "If this is user's primary email. Only one entry could be marked as primary."
          },
          "customType": {
            "description": "Custom Type.",
            "type": "string"
          }
        },
        "type": "object",
        "description": "JSON template for an email."
      },
      "Features": {
        "type": "object",
        "properties": {
          "features": {
            "description": "The Features in this page of results.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feature"
            }
          },
          "kind": {
            "type": "string",
            "default": "admin#directory#resources#features#featuresList",
            "description": "Kind of resource this is."
          },
          "nextPageToken": {
            "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
            "type": "string"
          },
          "etag": {
            "description": "ETag of the resource.",
            "type": "string"
          }
        },
        "description": "Public API: Resources.features"
      },
      "Schema": {
        "properties": {
          "kind": {
            "description": "Kind of resource this is.",
            "default": "admin#directory#schema",
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "Display name for the schema."
          },
          "schemaId": {
            "type": "string",
            "description": "The unique identifier of the schema (Read-only)"
          },
          "fields": {
            "type": "array",
            "description": "A list of fields in the schema.",
            "items": {
              "$ref": "#/components/schemas/SchemaFieldSpec"
            }
          },
          "schemaName": {
            "description": "The schema's name. Each `schema_name` must be unique within a customer. Reusing a name results in a `409: Entity already exists` error.",
            "type": "string"
          },
          "etag": {
            "type": "string",
            "description": "The ETag of the resource."
          }
        },
        "type": "object",
        "description": "The type of API resource. For Schema resources, this is always `admin#directory#schema`."
      },
      "Tokens": {
        "properties": {
          "etag": {
            "type": "string",
            "description": "ETag of the resource."
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Token"
            },
            "description": "A list of Token resources."
          },
          "kind": {
            "default": "admin#directory#tokenList",
            "type": "string",
            "description": "The type of the API resource. This is always `admin#directory#tokenList`."
          }
        },
        "type": "object",
        "description": "JSON response template for List tokens operation in Directory API."
      },
      "Aliases": {
        "properties": {
          "kind": {
            "default": "admin#directory#aliases",
            "type": "string"
          },
          "etag": {
            "type": "string"
          },
          "aliases": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object",
        "description": "JSON response template to list aliases in Directory API."
      },
      "SchemaFieldSpec": {
        "properties": {
          "fieldId": {
            "description": "The unique identifier of the field (Read-only)",
            "type": "string"
          },
          "displayName": {
            "type": "string",
            "description": "Display Name of the field."
          },
          "kind": {
            "type": "string",
            "description": "The kind of resource this is. For schema fields this is always `admin#directory#schema#fieldspec`.",
            "default": "admin#directory#schema#fieldspec"
          },
          "readAccessType": {
            "type": "string",
            "description": "Specifies who can view values of this field. See [Retrieve users as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin) for more information. Note: It may take up to 24 hours for changes to this field to be reflected.",
            "default": "ALL_DOMAIN_USERS"
          },
          "indexed": {
            "default": "true",
            "description": "Boolean specifying whether the field is indexed or not. Default: `true`.",
            "type": "boolean"
          },
          "numericIndexingSpec": {
            "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the `numericIndexingSpec` allows range queries to be supported.",
            "properties": {
              "minValue": {
                "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
                "type": "number",
                "format": "double"
              },
              "maxValue": {
                "format": "double",
                "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
                "type": "number"
              }
            },
            "type": "object"
          },
          "fieldName": {
            "type": "string",
            "description": "The name of the field."
          },
          "etag": {
            "type": "string",
            "description": "The ETag of the field."
          },
          "fieldType": {
            "description": "The type of the field.",
            "type": "string"
          },
          "multiValued": {
            "type": "boolean",
            "description": "A boolean specifying whether this is a multi-valued field or not. Default: `false`."
          }
        },
        "description": "You can use schemas to add custom fields to user profiles. You can use these fields to store information such as the projects your users work on, their physical locations, their hire dates, or whatever else fits your business needs. For more information, see [Custom User Fields](/admin-sdk/directory/v1/guides/manage-schemas).",
        "type": "object"
      },
      "MembersHasMember": {
        "type": "object",
        "properties": {
          "isMember": {
            "description": "Output only. Identifies whether the given user is a member of the group. Membership can be direct or nested.",
            "type": "boolean",
            "required": true
          }
        },
        "description": "JSON template for Has Member response in Directory API."
      },
      "CustomerPostalAddress": {
        "type": "object",
        "properties": {
          "region": {
            "description": "Name of the region. An example of a region value is `NY` for the state of New York.",
            "type": "string"
          },
          "contactName": {
            "type": "string",
            "description": "The customer contact's name."
          },
          "postalCode": {
            "type": "string",
            "description": "The postal code. A postalCode example is a postal zip code such as `10009`. This is in accordance with - http: //portablecontacts.net/draft-spec.html#address_element."
          },
          "addressLine2": {
            "type": "string",
            "description": "Address line 2 of the address."
          },
          "addressLine1": {
            "type": "string",
            "description": "A customer's physical address. The address can be composed of one to three lines."
          },
          "addressLine3": {
            "type": "string",
            "description": "Address line 3 of the address."
          },
          "locality": {
            "description": "Name of the locality. An example of a locality value is the city of `San Francisco`.",
            "type": "string"
          },
          "organizationName": {
            "type": "string",
            "description": "The company or company division name."
          },
          "countryCode": {
            "description": "This is a required property. For `countryCode` information see the [ISO 3166 country code elements](https://www.iso.org/iso/country_codes.htm).",
            "type": "string"
          }
        }
      },
      "BatchCreatePrintersResponse": {
        "description": "Response for adding new printers in batch.",
        "properties": {
          "failures": {
            "description": "A list of create failures. Printer IDs are not populated, as printer were not created.",
            "items": {
              "$ref": "#/components/schemas/FailureInfo"
            },
            "type": "array"
          },
          "printers": {
            "description": "A list of successfully created printers with their IDs populated.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Printer"
            }
          }
        },
        "type": "object"
      },
      "Privileges": {
        "type": "object",
        "properties": {
          "etag": {
            "type": "string",
            "description": "ETag of the resource."
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/Privilege"
            },
            "type": "array",
            "description": "A list of Privilege resources."
          },
          "kind": {
            "type": "string",
            "default": "admin#directory#privileges",
            "description": "The type of the API resource. This is always `admin#directory#privileges`."
          }
        }
      },
      "UserMakeAdmin": {
        "type": "object",
        "properties": {
          "status": {
            "description": "Indicates the administrator status of the user.",
            "type": "boolean"
          }
        }
      },
      "DirectoryChromeosdevicesIssueCommandRequest": {
        "description": "A request for issuing a command.",
        "properties": {
          "commandType": {
            "description": "The type of command.",
            "type": "string",
            "enum": [
              "COMMAND_TYPE_UNSPECIFIED",
              "REBOOT",
              "TAKE_A_SCREENSHOT",
              "SET_VOLUME",
              "WIPE_USERS",
              "REMOTE_POWERWASH",
              "DEVICE_START_CRD_SESSION",
              "CAPTURE_LOGS"
            ]
          },
          "payload": {
            "type": "string",
            "description": "The payload for the command, provide it only if command supports it. The following commands support adding payload: * `SET_VOLUME`: Payload is a stringified JSON object in the form: { \"volume\": 50 }. The volume has to be an integer in the range [0,100]. * `DEVICE_START_CRD_SESSION`: Payload is optionally a stringified JSON object in the form: { \"ackedUserPresence\": true }. `ackedUserPresence` is a boolean. By default, `ackedUserPresence` is set to `false`. To start a Chrome Remote Desktop session for an active device, set `ackedUserPresence` to `true`."
          }
        },
        "type": "object"
      },
      "AuxiliaryMessage": {
        "properties": {
          "fieldMask": {
            "type": "string",
            "description": "Field that this message concerns.",
            "format": "google-fieldmask"
          },
          "severity": {
            "type": "string",
            "enum": [
              "SEVERITY_UNSPECIFIED",
              "SEVERITY_INFO",
              "SEVERITY_WARNING",
              "SEVERITY_ERROR"
            ],
            "description": "Message severity"
          },
          "auxiliaryMessage": {
            "type": "string",
            "description": "Human readable message in English. Example: \"Given printer is invalid or no longer supported.\""
          }
        },
        "type": "object",
        "description": "Auxiliary message about issues with printers or settings. Example: {message_type:AUXILIARY_MESSAGE_WARNING, field_mask:make_and_model, message:\"Given printer is invalid or no longer supported.\"}"
      },
      "ListPrinterModelsResponse": {
        "properties": {
          "printerModels": {
            "description": "Printer models that are currently allowed to be configured for ChromeOs. Some printers may be added or removed over time.",
            "items": {
              "$ref": "#/components/schemas/PrinterModel"
            },
            "type": "array"
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages."
          }
        },
        "description": "Response for listing allowed printer models.",
        "type": "object"
      },
      "Asp": {
        "properties": {
          "name": {
            "description": "The name of the application that the user, represented by their `userId`, entered when the ASP was created.",
            "type": "string"
          },
          "etag": {
            "type": "string",
            "description": "ETag of the ASP."
          },
          "creationTime": {
            "description": "The time when the ASP was created. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format.",
            "type": "string",
            "format": "int64"
          },
          "codeId": {
            "description": "The unique ID of the ASP.",
            "format": "int32",
            "type": "integer"
          },
          "userKey": {
            "description": "The unique ID of the user who issued the ASP.",
            "type": "string"
          },
          "kind": {
            "default": "admin#directory#asp",
            "type": "string",
            "description": "The type of the API resource. This is always `admin#directory#asp`."
          },
          "lastTimeUsed": {
            "format": "int64",
            "description": "The time when the ASP was last used. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format.",
            "type": "string"
          }
        },
        "type": "object",
        "description": "An application-specific password (ASP) is used with applications that do not accept a verification code when logging into the application on certain devices. The ASP access code is used instead of the login and password you commonly use when accessing an application through a browser. For more information about ASPs and how to create one, see the [help center](https://support.google.com/a/answer/2537800#asp)."
      },
      "BuildingAddress": {
        "properties": {
          "languageCode": {
            "description": "Optional. BCP-47 language code of the contents of this address (if known).",
            "type": "string"
          },
          "addressLines": {
            "description": "Unstructured address lines describing the lower levels of an address.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "administrativeArea": {
            "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region.",
            "type": "string"
          },
          "postalCode": {
            "description": "Optional. Postal code of the address.",
            "type": "string"
          },
          "locality": {
            "type": "string",
            "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines."
          },
          "sublocality": {
            "description": "Optional. Sublocality of the address.",
            "type": "string"
          },
          "regionCode": {
            "description": "Required. CLDR region code of the country/region of the address.",
            "type": "string"
          }
        },
        "type": "object",
        "description": "Public API: Resources.buildings"
      },
      "UserOrganization": {
        "description": "JSON template for an organization entry.",
        "properties": {
          "domain": {
            "type": "string",
            "description": "The domain to which the organization belongs to."
          },
          "fullTimeEquivalent": {
            "description": "The full-time equivalent millipercent within the organization (100000 = 100%).",
            "format": "int32",
            "type": "integer"
          },
          "title": {
            "type": "string",
            "description": "Title (designation) of the user in the organization."
          },
          "customType": {
            "type": "string",
            "description": "Custom type."
          },
          "type": {
            "type": "string",
            "description": "Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value."
          },
          "department": {
            "description": "Department within the organization.",
            "type": "string"
          },
          "costCenter": {
            "description": "The cost center of the users department.",
            "type": "string"
          },
          "location": {
            "description": "Location of the organization. This need not be fully qualified address.",
            "type": "string"
          },
          "name": {
            "description": "Name of the organization",
            "type": "string"
          },
          "primary": {
            "description": "If it user's primary organization.",
            "type": "boolean"
          },
          "description": {
            "description": "Description of the organization.",
            "type": "string"
          },
          "symbol": {
            "type": "string",
            "description": "Symbol of the organization."
          }
        },
        "type": "object"
      },
      "PrintServerFailureInfo": {
        "type": "object",
        "properties": {
          "printServer": {
            "description": "Failed print server.",
            "$ref": "#/components/schemas/PrintServer"
          },
          "errorMessage": {
            "type": "string",
            "description": "Failure reason message."
          },
          "printServerId": {
            "type": "string",
            "description": "ID of a failed print server."
          },
          "errorCode": {
            "type": "string",
            "enum": [
              "OK",
              "CANCELLED",
              "UNKNOWN",
              "INVALID_ARGUMENT",
              "DEADLINE_EXCEEDED",
              "NOT_FOUND",
              "ALREADY_EXISTS",
              "PERMISSION_DENIED",
              "UNAUTHENTICATED",
              "RESOURCE_EXHAUSTED",
              "FAILED_PRECONDITION",
              "ABORTED",
              "OUT_OF_RANGE",
              "UNIMPLEMENTED",
              "INTERNAL",
              "UNAVAILABLE",
              "DATA_LOSS"
            ],
            "description": "Canonical code for why the update failed to apply."
          }
        },
        "description": "Info about failures"
      },
      "User": {
        "description": "The Directory API allows you to create and manage your account's users, user aliases, and user Gmail chat profile photos. For more information about common tasks, see the [User Accounts Developer's Guide](/admin-sdk/directory/v1/guides/manage-users.html) and the [User Aliases Developer's Guide](/admin-sdk/directory/v1/guides/manage-user-aliases.html).",
        "properties": {
          "sshPublicKeys": {
            "description": "A list of SSH public keys."
          },
          "notes": {
            "description": "Notes for the user."
          },
          "isEnrolledIn2Sv": {
            "required": true,
            "description": "Output only. Is enrolled in 2-step verification (Read-only)",
            "type": "boolean"
          },
          "recoveryPhone": {
            "description": "Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: *+16506661212*.",
            "type": "string"
          },
          "emails": {
            "description": "The list of the user's email addresses. The maximum allowed data size for this field is 10KB."
          },
          "etag": {
            "required": true,
            "type": "string",
            "description": "Output only. ETag of the resource."
          },
          "phones": {
            "description": "The list of the user's phone numbers. The maximum allowed data size for this field is 1KB."
          },
          "isAdmin": {
            "required": true,
            "type": "boolean",
            "description": "Output only. Indicates a user with super admininistrator privileges. The `isAdmin` property can only be edited in the [Make a user an administrator](/admin-sdk/directory/v1/guides/manage-users.html#make_admin) operation ( [makeAdmin](/admin-sdk/directory/v1/reference/users/makeAdmin.html) method). If edited in the user [insert](/admin-sdk/directory/v1/reference/users/insert.html) or [update](/admin-sdk/directory/v1/reference/users/update.html) methods, the edit is ignored by the API service."
          },
          "ims": {
            "description": "The list of the user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims properties can be the primary IM contact. The maximum allowed data size for this field is 2KB."
          },
          "suspended": {
            "type": "boolean",
            "description": "Indicates if user is suspended."
          },
          "isMailboxSetup": {
            "type": "boolean",
            "required": true,
            "description": "Output only. Indicates if the user's Google mailbox is created. This property is only applicable if the user has been assigned a Gmail license."
          },
          "nonEditableAliases": {
            "items": {
              "type": "string"
            },
            "required": true,
            "description": "Output only. The list of the user's non-editable alias email addresses. These are typically outside the account's primary domain or sub-domain.",
            "type": "array"
          },
          "hashFunction": {
            "type": "string",
            "description": "Stores the hash format of the `password` property. The following `hashFunction` values are allowed: * `MD5` - Accepts simple hex-encoded values. * `SHA-1` - Accepts simple hex-encoded values. * `crypt` - Compliant with the [C crypt library](https://en.wikipedia.org/wiki/Crypt_%28C%29). Supports the DES, MD5 (hash prefix `$1$`), SHA-256 (hash prefix `$5$`), and SHA-512 (hash prefix `$6$`) hash algorithms. If rounds are specified as part of the prefix, they must be 10,000 or fewer."
          },
          "locations": {
            "description": "The user's locations. The maximum allowed data size for this field is 10KB."
          },
          "externalIds": {
            "description": "The list of external IDs for the user, such as an employee or network ID. The maximum allowed data size for this field is 2KB."
          },
          "ipWhitelisted": {
            "type": "boolean",
            "description": "If `true`, the user's IP address is subject to a deprecated IP address [`allowlist`](https://support.google.com/a/answer/60752) configuration."
          },
          "orgUnitPath": {
            "description": "The full path of the parent organization associated with the user. If the parent organization is the top-level, it is represented as a forward slash (`/`).",
            "type": "string"
          },
          "relations": {
            "description": "The list of the user's relationships to other users. The maximum allowed data size for this field is 2KB."
          },
          "isEnforcedIn2Sv": {
            "type": "boolean",
            "description": "Output only. Is 2-step verification enforced (Read-only)",
            "required": true
          },
          "thumbnailPhotoEtag": {
            "required": true,
            "description": "Output only. ETag of the user's photo (Read-only)",
            "type": "string"
          },
          "customerId": {
            "required": true,
            "description": "Output only. The customer ID to [retrieve all account users](/admin-sdk/directory/v1/guides/manage-users.html#get_all_users). You can use the alias `my_customer` to represent your account's `customerId`. As a reseller administrator, you can use the resold customer account's `customerId`. To get a `customerId`, use the account's primary domain in the `domain` parameter of a [users.list](/admin-sdk/directory/v1/reference/users/list) request.",
            "type": "string"
          },
          "includeInGlobalAddressList": {
            "type": "boolean",
            "description": "Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature is enabled for the domain. For more information about excluding user profiles, see the [administration help center](https://support.google.com/a/answer/1285988)."
          },
          "creationTime": {
            "description": "User's G Suite account creation time. (Read-only)",
            "type": "string",
            "required": true,
            "format": "date-time"
          },
          "deletionTime": {
            "format": "date-time",
            "required": true,
            "type": "string"
          },
          "suspensionReason": {
            "description": "Output only. Has the reason a user account is suspended either by the administrator or by Google at the time of suspension. The property is returned only if the `suspended` property is `true`.",
            "type": "string",
            "required": true
          },
          "changePasswordAtNextLogin": {
            "description": "Indicates if the user is forced to change their password at next login. This setting doesn't apply when [the user signs in via a third-party identity provider](https://support.google.com/a/answer/60224).",
            "type": "boolean"
          },
          "websites": {
            "description": "The user's websites. The maximum allowed data size for this field is 2KB."
          },
          "kind": {
            "type": "string",
            "required": true,
            "description": "Output only. The type of the API resource. For Users resources, the value is `admin#directory#user`.",
            "default": "admin#directory#user"
          },
          "lastLoginTime": {
            "type": "string",
            "format": "date-time",
            "description": "User's last login time. (Read-only)",
            "required": true
          },
          "aliases": {
            "items": {
              "type": "string"
            },
            "description": "Output only. The list of the user's alias email addresses.",
            "required": true,
            "type": "array"
          },
          "primaryEmail": {
            "type": "string",
            "description": "The user's primary email address. This property is required in a request to create a user account. The `primaryEmail` must be unique and cannot be an alias of another user."
          },
          "organizations": {
            "description": "The list of organizations the user belongs to. The maximum allowed data size for this field is 10KB."
          },
          "archived": {
            "description": "Indicates if user is archived.",
            "type": "boolean"
          },
          "password": {
            "type": "string",
            "description": "User's password"
          },
          "addresses": {
            "description": "The list of the user's addresses. The maximum allowed data size for this field is 10KB."
          },
          "customSchemas": {
            "description": "Custom fields of the user. The key is a `schema_name` and its values are `'field_name': 'field_value'`.",
            "additionalProperties": {
              "$ref": "#/components/schemas/UserCustomProperties"
            },
            "type": "object"
          },
          "gender": {
            "description": "The user's gender. The maximum allowed data size for this field is 1KB."
          },
          "name": {
            "$ref": "#/components/schemas/UserName",
            "description": "Holds the given and family names of the user, and the read-only `fullName` value. The maximum number of characters in the `givenName` and in the `familyName` values is 60. In addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). For more information about character usage rules, see the [administration help center](https://support.google.com/a/answer/9193374). Maximum allowed data size for this field is 1KB."
          },
          "keywords": {
            "description": "The list of the user's keywords. The maximum allowed data size for this field is 1KB."
          },
          "thumbnailPhotoUrl": {
            "type": "string",
            "required": true,
            "description": "Output only. The URL of the user's profile photo. The URL might be temporary or private."
          },
          "isDelegatedAdmin": {
            "type": "boolean",
            "required": true,
            "description": "Output only. Indicates if the user is a delegated administrator. Delegated administrators are supported by the API but cannot create or undelete users, or make users administrators. These requests are ignored by the API service. Roles and privileges for administrators are assigned using the [Admin console](https://support.google.com/a/answer/33325)."
          },
          "languages": {
            "description": "The user's languages. The maximum allowed data size for this field is 1KB."
          },
          "agreedToTerms": {
            "type": "boolean",
            "required": true,
            "description": "Output only. This property is `true` if the user has completed an initial login and accepted the Terms of Service agreement."
          },
          "posixAccounts": {
            "description": "The list of [POSIX](https://www.opengroup.org/austin/papers/posix_faq.html) account information for the user."
          },
          "recoveryEmail": {
            "type": "string",
            "description": "Recovery email of the user."
          }
        },
        "type": "object"
      },
      "BatchDeletePrintersResponse": {
        "properties": {
          "printerIds": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "A list of Printer.id that were successfully deleted."
          },
          "failedPrinters": {
            "description": "A list of update failures.",
            "items": {
              "$ref": "#/components/schemas/FailureInfo"
            },
            "type": "array"
          }
        },
        "type": "object",
        "description": "Response for deleting existing printers in batch."
      },
      "Domains": {
        "type": "object",
        "properties": {
          "verified": {
            "description": "Indicates the verification state of a domain. (Read-only).",
            "type": "boolean"
          },
          "kind": {
            "type": "string",
            "default": "admin#directory#domain",
            "description": "Kind of resource this is."
          },
          "etag": {
            "description": "ETag of the resource.",
            "type": "string"
          },
          "domainName": {
            "type": "string",
            "description": "The domain name of the customer."
          },
          "creationTime": {
            "type": "string",
            "format": "int64",
            "description": "Creation time of the domain. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format. (Read-only)."
          },
          "isPrimary": {
            "description": "Indicates if the domain is a primary domain (Read-only).",
            "type": "boolean"
          },
          "domainAliases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DomainAlias"
            },
            "description": "A list of domain alias objects. (Read-only)"
          }
        }
      },
      "Token": {
        "properties": {
          "userKey": {
            "type": "string",
            "description": "The unique ID of the user that issued the token."
          },
          "etag": {
            "description": "ETag of the resource.",
            "type": "string"
          },
          "kind": {
            "default": "admin#directory#token",
            "description": "The type of the API resource. This is always `admin#directory#token`.",
            "type": "string"
          },
          "clientId": {
            "description": "The Client ID of the application the token is issued to.",
            "type": "string"
          },
          "anonymous": {
            "type": "boolean",
            "description": "Whether the application is registered with Google. The value is `true` if the application has an anonymous Client ID."
          },
          "nativeApp": {
            "type": "boolean",
            "description": "Whether the token is issued to an installed application. The value is `true` if the application is installed to a desktop or mobile device."
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "A list of authorization scopes the application is granted."
          },
          "displayText": {
            "description": "The displayable name of the application the token is issued to.",
            "type": "string"
          }
        },
        "type": "object",
        "description": "JSON template for token resource in Directory API."
      },
      "ChromeOsDevice": {
        "description": "Google Chrome devices run on the [Chrome OS](https://support.google.com/chromeos). For more information about common API tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices).",
        "type": "object",
        "properties": {
          "systemRamTotal": {
            "description": "Total RAM on the device [in bytes] (Read-only)",
            "type": "string",
            "format": "int64"
          },
          "deprovisionReason": {
            "type": "string",
            "description": "(Read-only) Deprovision reason.",
            "enum": [
              "deprovisionReasonUnspecified",
              "deprovisionReasonSameModelReplacement",
              "deprovisionReasonUpgrade",
              "deprovisionReasonDomainMove",
              "deprovisionReasonServiceExpiration",
              "deprovisionReasonOther",
              "deprovisionReasonDifferentModelReplacement",
              "deprovisionReasonRetiringDevice",
              "deprovisionReasonUpgradeTransfer",
              "deprovisionReasonNotRequired",
              "deprovisionReasonRepairCenter"
            ]
          },
          "macAddress": {
            "description": "The device's wireless MAC address. If the device does not have this information, it is not included in the response.",
            "type": "string"
          },
          "notes": {
            "description": "Notes about this device added by the administrator. This property can be [searched](https://support.google.com/chrome/a/answer/1698333) with the [list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method's `query` parameter. Maximum length is 500 characters. Empty values are allowed.",
            "type": "string"
          },
          "ethernetMacAddress": {
            "description": "The device's MAC address on the ethernet network interface.",
            "type": "string"
          },
          "orgUnitPath": {
            "description": "The full parent path with the organizational unit's name associated with the device. Path names are case insensitive. If the parent organizational unit is the top-level organization, it is represented as a forward slash, `/`. This property can be [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou) using the API. For more information about how to create an organizational structure for your device, see the [administration help center](https://support.google.com/a/answer/182433).",
            "type": "string"
          },
          "cpuStatusReports": {
            "description": "Reports of CPU utilization and temperature (Read-only)",
            "type": "array",
            "items": {
              "properties": {
                "cpuTemperatureInfo": {
                  "items": {
                    "properties": {
                      "label": {
                        "type": "string",
                        "description": "CPU label"
                      },
                      "temperature": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Temperature in Celsius degrees."
                      }
                    },
                    "type": "object"
                  },
                  "type": "array",
                  "description": "A list of CPU temperature samples."
                },
                "reportTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date and time the report was received."
                },
                "cpuUtilizationPercentageInfo": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "type": "object"
            }
          },
          "osUpdateStatus": {
            "$ref": "#/components/schemas/OsUpdateStatus",
            "description": "The status of the OS updates for the device."
          },
          "orderNumber": {
            "type": "string",
            "description": "The device's order number. Only devices directly purchased from Google have an order number."
          },
          "dockMacAddress": {
            "type": "string",
            "description": "(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices."
          },
          "status": {
            "description": "The status of the device.",
            "type": "string"
          },
          "annotatedUser": {
            "description": "The user of the device as noted by the administrator. Maximum length is 100 characters. Empty values are allowed.",
            "type": "string"
          },
          "meid": {
            "type": "string",
            "description": "The Mobile Equipment Identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in a mobile device. A MEID/IMEI is typically used when adding a device to a wireless carrier's post-pay service plan. If the device does not have this information, this property is not included in the response. For more information on how to export a MEID/IMEI list, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices.html#export_meid)."
          },
          "osVersion": {
            "type": "string",
            "description": "The Chrome device's operating system version."
          },
          "cpuInfo": {
            "description": "Information regarding CPU specs in the device.",
            "type": "array",
            "items": {
              "properties": {
                "logicalCpus": {
                  "type": "array",
                  "description": "Information for the Logical CPUs",
                  "items": {
                    "description": "Status of a single logical CPU.",
                    "properties": {
                      "idleDuration": {
                        "type": "string",
                        "format": "google-duration",
                        "description": "Idle time since last boot."
                      },
                      "maxScalingFrequencyKhz": {
                        "format": "int32",
                        "description": "Maximum frequency the CPU is allowed to run at, by policy.",
                        "type": "integer"
                      },
                      "cStates": {
                        "description": "C-States indicate the power consumption state of the CPU. For more information look at documentation published by the CPU maker.",
                        "type": "array",
                        "items": {
                          "description": "Status of a single C-state. C-states are various modes the CPU can transition to in order to use more or less power.",
                          "properties": {
                            "sessionDuration": {
                              "description": "Time spent in the state since the last reboot.",
                              "type": "string",
                              "format": "google-duration"
                            },
                            "displayName": {
                              "description": "Name of the state.",
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "currentScalingFrequencyKhz": {
                        "type": "integer",
                        "description": "Current frequency the CPU is running at.",
                        "format": "int32"
                      }
                    },
                    "type": "object"
                  }
                },
                "model": {
                  "type": "string",
                  "description": "The CPU model name."
                },
                "architecture": {
                  "description": "The CPU architecture.",
                  "type": "string"
                },
                "maxClockSpeedKhz": {
                  "format": "int32",
                  "type": "integer",
                  "description": "The max CPU clock speed in kHz."
                }
              },
              "description": "CPU specs for a CPU.",
              "type": "object"
            }
          },
          "etag": {
            "type": "string",
            "description": "ETag of the resource."
          },
          "lastEnrollmentTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the device was last enrolled (Read-only)"
          },
          "annotatedAssetId": {
            "type": "string",
            "description": "The asset identifier as noted by an administrator or specified during enrollment."
          },
          "platformVersion": {
            "type": "string",
            "description": "The Chrome device's platform version."
          },
          "annotatedLocation": {
            "description": "The address or location of the device as noted by the administrator. Maximum length is `200` characters. Empty values are allowed.",
            "type": "string"
          },
          "kind": {
            "type": "string",
            "description": "The type of resource. For the Chromeosdevices resource, the value is `admin#directory#chromeosdevice`.",
            "default": "admin#directory#chromeosdevice"
          },
          "screenshotFiles": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "downloadUrl": {
                  "description": "File download URL",
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "description": "File type"
                },
                "createTime": {
                  "format": "date-time",
                  "type": "string",
                  "description": "Date and time the file was created"
                },
                "name": {
                  "description": "File name",
                  "type": "string"
                }
              }
            },
            "description": "A list of screenshot files to download. Type is always \"SCREENSHOT_FILE\". (Read-only)"
          },
          "willAutoRenew": {
            "description": "Determines if the device will auto renew its support after the support end date. This is a read-only property.",
            "type": "boolean"
          },
          "lastKnownNetwork": {
            "items": {
              "description": "Information for an ip address.",
              "type": "object",
              "properties": {
                "ipAddress": {
                  "type": "string",
                  "description": "The IP address."
                },
                "wanIpAddress": {
                  "type": "string",
                  "description": "The WAN IP address."
                }
              }
            },
            "description": "Contains last known network (Read-only)",
            "type": "array"
          },
          "supportEndDate": {
            "format": "date-time",
            "description": "Final date the device will be supported (Read-only)",
            "type": "string"
          },
          "deviceId": {
            "type": "string",
            "description": "The unique ID of the Chrome device."
          },
          "autoUpdateExpiration": {
            "description": "(Read-only) The timestamp after which the device will stop receiving Chrome updates or support",
            "format": "int64",
            "type": "string"
          },
          "model": {
            "type": "string",
            "description": "The device's model information. If the device does not have this information, this property is not included in the response."
          },
          "activeTimeRanges": {
            "items": {
              "properties": {
                "activeTime": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Duration of usage in milliseconds."
                },
                "date": {
                  "description": "Date of usage",
                  "type": "string",
                  "format": "date"
                }
              },
              "type": "object"
            },
            "description": "A list of active time ranges (Read-only).",
            "type": "array"
          },
          "tpmVersionInfo": {
            "type": "object",
            "description": "Trusted Platform Module (TPM) (Read-only)",
            "properties": {
              "firmwareVersion": {
                "type": "string",
                "description": "TPM firmware version."
              },
              "vendorSpecific": {
                "type": "string",
                "description": "Vendor-specific information such as Vendor ID."
              },
              "tpmModel": {
                "description": "TPM model number.",
                "type": "string"
              },
              "specLevel": {
                "description": "TPM specification level. See Library Specification for TPM 2.0 and Main Specification for TPM 1.2.",
                "type": "string"
              },
              "family": {
                "type": "string",
                "description": "TPM family. We use the TPM 2.0 style encoding, e.g.: TPM 1.2: \"1.2\" -> 312e3200 TPM 2.0: \"2.0\" -> 322e3000"
              },
              "manufacturer": {
                "description": "TPM manufacturer code.",
                "type": "string"
              }
            }
          },
          "recentUsers": {
            "items": {
              "type": "object",
              "description": "A list of recent device users, in descending order, by last login time.",
              "properties": {
                "email": {
                  "description": "The user's email address. This is only present if the user type is `USER_TYPE_MANAGED`.",
                  "type": "string"
                },
                "type": {
                  "description": "The type of the user.",
                  "type": "string"
                }
              }
            },
            "description": "A list of recent device users, in descending order, by last login time.",
            "type": "array"
          },
          "orgUnitId": {
            "description": "The unique ID of the organizational unit. orgUnitPath is the human readable version of orgUnitId. While orgUnitPath may change by renaming an organizational unit within the path, orgUnitId is unchangeable for one organizational unit. This property can be [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou) using the API. For more information about how to create an organizational structure for your device, see the [administration help center](https://support.google.com/a/answer/182433).",
            "type": "string"
          },
          "systemRamFreeReports": {
            "type": "array",
            "items": {
              "properties": {
                "systemRamFreeInfo": {
                  "items": {
                    "format": "int64",
                    "type": "string"
                  },
                  "type": "array"
                },
                "reportTime": {
                  "description": "Date and time the report was received.",
                  "format": "date-time",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "description": "Reports of amounts of available RAM memory (Read-only)"
          },
          "lastSync": {
            "description": "Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)",
            "format": "date-time",
            "type": "string"
          },
          "bootMode": {
            "description": "The boot mode for the device. The possible values are: * `Verified`: The device is running a valid version of the Chrome OS. * `Dev`: The devices's developer hardware switch is enabled. When booted, the device has a command line shell. For an example of a developer switch, see the [Chromebook developer information](https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/samsung-series-5-chromebook#TOC-Developer-switch).",
            "type": "string"
          },
          "serialNumber": {
            "type": "string",
            "description": "The Chrome device serial number entered when the device was enabled. This value is the same as the Admin console's *Serial Number* in the *Chrome OS Devices* tab."
          },
          "manufactureDate": {
            "description": "(Read-only) The date the device was manufactured in yyyy-mm-dd format.",
            "type": "string"
          },
          "firstEnrollmentTime": {
            "type": "string",
            "description": "Date and time for the first time the device was enrolled."
          },
          "ethernetMacAddress0": {
            "description": "(Read-only) MAC address used by the Chromebook\u2019s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.",
            "type": "string"
          },
          "firmwareVersion": {
            "description": "The Chrome device's firmware version.",
            "type": "string"
          },
          "diskVolumeReports": {
            "description": "Reports of disk space and other info about mounted/connected volumes.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "volumeInfo": {
                  "description": "Disk volumes",
                  "items": {
                    "properties": {
                      "storageFree": {
                        "type": "string",
                        "format": "int64",
                        "description": "Free disk space [in bytes]"
                      },
                      "storageTotal": {
                        "format": "int64",
                        "type": "string",
                        "description": "Total disk space [in bytes]"
                      },
                      "volumeId": {
                        "type": "string",
                        "description": "Volume id"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            }
          },
          "deviceFiles": {
            "description": "A list of device files to download (Read-only)",
            "type": "array",
            "items": {
              "properties": {
                "type": {
                  "description": "File type",
                  "type": "string"
                },
                "createTime": {
                  "type": "string",
                  "description": "Date and time the file was created",
                  "format": "date-time"
                },
                "name": {
                  "type": "string",
                  "description": "File name"
                },
                "downloadUrl": {
                  "type": "string",
                  "description": "File download URL"
                }
              },
              "type": "object"
            }
          },
          "lastDeprovisionTimestamp": {
            "type": "string",
            "description": "(Read-only) Date and time for the last deprovision of the device."
          }
        }
      },
      "UserExternalId": {
        "description": "JSON template for an externalId entry.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of the Id."
          },
          "customType": {
            "description": "Custom type.",
            "type": "string"
          },
          "value": {
            "description": "The value of the id.",
            "type": "string"
          }
        }
      },
      "Schemas": {
        "type": "object",
        "description": "JSON response template for List Schema operation in Directory API.",
        "properties": {
          "schemas": {
            "items": {
              "$ref": "#/components/schemas/Schema"
            },
            "description": "A list of UserSchema objects.",
            "type": "array"
          },
          "kind": {
            "description": "Kind of resource this is.",
            "type": "string",
            "default": "admin#directory#schemas"
          },
          "etag": {
            "description": "ETag of the resource.",
            "type": "string"
          }
        }
      },
      "UserAddress": {
        "description": "JSON template for address.",
        "type": "object",
        "properties": {
          "formatted": {
            "description": "Formatted address.",
            "type": "string"
          },
          "customType": {
            "description": "Custom type.",
            "type": "string"
          },
          "region": {
            "description": "Region.",
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "Each entry can have a type which indicates standard values of that entry. For example address could be of home work etc. In addition to the standard type an entry can have a custom type and can take any value. Such type should have the CUSTOM value as type and also have a customType value."
          },
          "primary": {
            "type": "boolean",
            "description": "If this is user's primary address. Only one entry could be marked as primary."
          },
          "country": {
            "type": "string",
            "description": "Country."
          },
          "extendedAddress": {
            "description": "Extended Address.",
            "type": "string"
          },
          "postalCode": {
            "description": "Postal code.",
            "type": "string"
          },
          "streetAddress": {
            "type": "string",
            "description": "Street."
          },
          "sourceIsStructured": {
            "description": "User supplied address was structured. Structured addresses are NOT supported at this time. You might be able to write structured addresses but any values will eventually be clobbered.",
            "type": "boolean"
          },
          "poBox": {
            "type": "string",
            "description": "Other parts of address."
          },
          "countryCode": {
            "type": "string",
            "description": "Country code."
          },
          "locality": {
            "type": "string",
            "description": "Locality."
          }
        }
      },
      "RoleAssignments": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string"
          },
          "items": {
            "description": "A list of RoleAssignment resources.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleAssignment"
            }
          },
          "etag": {
            "description": "ETag of the resource.",
            "type": "string"
          },
          "kind": {
            "default": "admin#directory#roleAssignments",
            "description": "The type of the API resource. This is always `admin#directory#roleAssignments`.",
            "type": "string"
          }
        }
      },
      "Privilege": {
        "properties": {
          "etag": {
            "type": "string",
            "description": "ETag of the resource."
          },
          "serviceId": {
            "description": "The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list).",
            "type": "string"
          },
          "serviceName": {
            "description": "The name of the service this privilege is for.",
            "type": "string"
          },
          "childPrivileges": {
            "description": "A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Privilege"
            }
          },
          "isOuScopable": {
            "description": "If the privilege can be restricted to an organization unit.",
            "type": "boolean"
          },
          "privilegeName": {
            "description": "The name of the privilege.",
            "type": "string"
          },
          "kind": {
            "type": "string",
            "default": "admin#directory#privilege",
            "description": "The type of the API resource. This is always `admin#directory#privilege`."
          }
        },
        "type": "object"
      },
      "Members": {
        "type": "object",
        "properties": {
          "members": {
            "type": "array",
            "description": "A list of member objects.",
            "items": {
              "$ref": "#/components/schemas/Member"
            }
          },
          "kind": {
            "description": "Kind of resource this is.",
            "default": "admin#directory#members",
            "type": "string"
          },
          "etag": {
            "description": "ETag of the resource.",
            "type": "string"
          },
          "nextPageToken": {
            "type": "string",
            "description": "Token used to access next page of this result."
          }
        }
      },
      "UserLocation": {
        "properties": {
          "buildingId": {
            "type": "string",
            "description": "Building Identifier."
          },
          "floorName": {
            "description": "Floor name/number.",
            "type": "string"
          },
          "deskCode": {
            "type": "string",
            "description": "Most specific textual code of individual desk location."
          },
          "customType": {
            "description": "Custom Type.",
            "type": "string"
          },
          "area": {
            "description": "Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''",
            "type": "string"
          },
          "type": {
            "description": "Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value.",
            "type": "string"
          },
          "floorSection": {
            "description": "Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values.",
            "type": "string"
          }
        },
        "type": "object",
        "description": "JSON template for a location entry."
      },
      "BatchDeletePrintersRequest": {
        "properties": {
          "printerIds": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "A list of Printer.id that should be deleted. Max 100 at a time."
          }
        },
        "type": "object",
        "description": "Request for deleting existing printers in batch."
      },
      "CalendarResources": {
        "properties": {
          "kind": {
            "type": "string",
            "default": "admin#directory#resources#calendars#calendarResourcesList",
            "description": "Identifies this as a collection of CalendarResources. This is always `admin#directory#resources#calendars#calendarResourcesList`."
          },
          "nextPageToken": {
            "description": "The continuation token, used to page through large result sets. Provide this value in a subsequent request to return the next page of results.",
            "type": "string"
          },
          "etag": {
            "description": "ETag of the resource.",
            "type": "string"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/CalendarResource"
            },
            "type": "array",
            "description": "The CalendarResources in this page of results."
          }
        },
        "description": "Public API: Resources.calendars",
        "type": "object"
      },
      "ListPrintServersResponse": {
        "type": "object",
        "properties": {
          "printServers": {
            "items": {
              "$ref": "#/components/schemas/PrintServer"
            },
            "description": "List of print servers.",
            "type": "array"
          },
          "nextPageToken": {
            "type": "string",
            "description": "A token that can be sent as `page_token` in a request to retrieve the next page. If this field is omitted, there are no subsequent pages."
          }
        }
      },
      "OsUpdateStatus": {
        "properties": {
          "updateCheckTime": {
            "type": "string",
            "description": "Date and time of the last update check."
          },
          "targetOsVersion": {
            "description": "New platform version of the OS image being downloaded and applied. It is only set when update status is UPDATE_STATUS_DOWNLOAD_IN_PROGRESS or UPDATE_STATUS_NEED_REBOOT. Note this could be a dummy \"0.0.0.0\" for UPDATE_STATUS_NEED_REBOOT for some edge cases, e.g. update engine is restarted without a reboot.",
            "type": "string"
          },
          "targetKioskAppVersion": {
            "type": "string",
            "description": "New required platform version from the pending updated kiosk app."
          },
          "rebootTime": {
            "type": "string",
            "description": "Date and time of the last reboot."
          },
          "updateTime": {
            "type": "string",
            "description": "Date and time of the last successful OS update."
          },
          "state": {
            "type": "string",
            "description": "The update state of an OS update.",
            "enum": [
              "updateStateUnspecified",
              "updateStateNotStarted",
              "updateStateDownloadInProgress",
              "updateStateNeedReboot"
            ]
          }
        },
        "description": "Contains information regarding the current OS update status.",
        "type": "object"
      },
      "UserGender": {
        "type": "object",
        "properties": {
          "addressMeAs": {
            "description": "AddressMeAs. A human-readable string containing the proper way to refer to the profile owner by humans for example he/him/his or they/them/their.",
            "type": "string"
          },
          "customGender": {
            "type": "string",
            "description": "Custom gender."
          },
          "type": {
            "description": "Gender.",
            "type": "string"
          }
        }
      },
      "PrinterModel": {
        "type": "object",
        "description": "Printer manufacturer and model",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Display name. eq. \"Brother MFC-8840D\""
          },
          "manufacturer": {
            "description": "Manufacturer. eq. \"Brother\"",
            "type": "string"
          },
          "makeAndModel": {
            "description": "Make and model as represented in \"make_and_model\" field in Printer object. eq. \"brother mfc-8840d\"",
            "type": "string"
          }
        }
      },
      "BatchDeletePrintServersResponse": {
        "type": "object",
        "properties": {
          "printServerIds": {
            "type": "array",
            "description": "A list of print server IDs that were successfully deleted.",
            "items": {
              "type": "string"
            }
          },
          "failedPrintServers": {
            "description": "A list of update failures.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrintServerFailureInfo"
            }
          }
        }
      },
      "Users": {
        "properties": {
          "nextPageToken": {
            "description": "Token used to access next page of this result.",
            "type": "string"
          },
          "kind": {
            "description": "Kind of resource this is.",
            "type": "string",
            "default": "admin#directory#users"
          },
          "etag": {
            "type": "string",
            "description": "ETag of the resource."
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "description": "A list of user objects.",
            "type": "array"
          },
          "trigger_event": {
            "type": "string",
            "description": "Event that triggered this response (only used in case of Push Response)"
          }
        },
        "type": "object"
      },
      "Feature": {
        "properties": {
          "etags": {
            "type": "string",
            "description": "ETag of the resource."
          },
          "name": {
            "description": "The name of the feature.",
            "type": "string"
          },
          "kind": {
            "default": "admin#directory#resources#features#Feature",
            "type": "string",
            "description": "Kind of resource this is."
          }
        },
        "description": "JSON template for Feature object in Directory API.",
        "type": "object"
      },
      "UserAlias": {
        "properties": {
          "etag": {
            "type": "string",
            "description": "ETag of the resource."
          },
          "primaryEmail": {
            "description": "The user's primary email address.",
            "type": "string"
          },
          "kind": {
            "type": "string",
            "description": "The type of the API resource. For Alias resources, the value is `admin#directory#alias`."
          },
          "alias": {
            "type": "string",
            "description": "The alias email address."
          }
        },
        "type": "object",
        "description": "The Directory API manages aliases, which are alternative email addresses."
      },
      "UserLanguage": {
        "properties": {
          "languageCode": {
            "description": "ISO 639 string representation of a language. See [Language Codes](/admin-sdk/directory/v1/languages) for the list of supported codes. Valid language codes outside the supported set will be accepted by the API but may lead to unexpected behavior. Illegal values cause `SchemaException`. If this is set, `customLanguage` can't be set.",
            "type": "string"
          },
          "customLanguage": {
            "type": "string",
            "description": "Other language. User can provide their own language name if there is no corresponding ISO 639 language code. If this is set, `languageCode` can't be set."
          },
          "preference": {
            "type": "string",
            "description": "Optional. If present, controls whether the specified `languageCode` is the user's preferred language. If `customLanguage` is set, this can't be set. Allowed values are `preferred` and `not_preferred`."
          }
        },
        "type": "object",
        "description": "JSON template for a language entry."
      },
      "Groups": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "description": "Kind of resource this is.",
            "default": "admin#directory#groups"
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            },
            "description": "A list of group objects."
          },
          "etag": {
            "type": "string",
            "description": "ETag of the resource."
          },
          "nextPageToken": {
            "description": "Token used to access next page of this result.",
            "type": "string"
          }
        }
      },
      "UserSshPublicKey": {
        "properties": {
          "fingerprint": {
            "description": "A SHA-256 fingerprint of the SSH public key. (Read-only)",
            "required": true,
            "type": "string"
          },
          "expirationTimeUsec": {
            "format": "int64",
            "description": "An expiration time in microseconds since epoch.",
            "type": "string"
          },
          "key": {
            "description": "An SSH public key.",
            "type": "string"
          }
        },
        "description": "JSON template for a POSIX account entry.",
        "type": "object"
      },
      "UserAbout": {
        "properties": {
          "value": {
            "type": "string",
            "description": "Actual value of notes."
          },
          "contentType": {
            "type": "string",
            "description": "About entry can have a type which indicates the content type. It can either be plain or html. By default, notes contents are assumed to contain plain text."
          }
        },
        "description": "JSON template for About (notes) of a user in Directory API.",
        "type": "object"
      },
      "Printer": {
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Editable. Name of printer."
          },
          "makeAndModel": {
            "type": "string",
            "description": "Editable. Make and model of printer. e.g. Lexmark MS610de Value must be in format as seen in ListPrinterModels response."
          },
          "createTime": {
            "description": "Output only. Time when printer was created.",
            "required": true,
            "type": "string",
            "format": "google-datetime"
          },
          "uri": {
            "type": "string",
            "description": "Editable. Printer URI."
          },
          "orgUnitId": {
            "type": "string",
            "description": "Organization Unit that owns this printer (Only can be set during Printer creation)"
          },
          "name": {
            "type": "string",
            "description": "The resource name of the Printer object, in the format customers/{customer-id}/printers/{printer-id} (During printer creation leave empty)"
          },
          "useDriverlessConfig": {
            "type": "boolean",
            "description": "Editable. flag to use driverless configuration or not. If it's set to be true, make_and_model can be ignored"
          },
          "auxiliaryMessages": {
            "type": "array",
            "description": "Output only. Auxiliary messages about issues with the printer configuration if any.",
            "required": true,
            "items": {
              "$ref": "#/components/schemas/AuxiliaryMessage"
            }
          },
          "description": {
            "type": "string",
            "description": "Editable. Description of printer."
          }
        },
        "description": "Printer configuration.",
        "type": "object"
      },
      "ChromeOsMoveDevicesToOu": {
        "type": "object",
        "properties": {
          "deviceIds": {
            "description": "Chrome OS devices to be moved to OU",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "customerDomain": {
            "type": "string",
            "description": "The customer's primary domain name string. Do not include the `www` prefix when creating a new customer."
          },
          "etag": {
            "type": "string",
            "description": "ETag of the resource."
          },
          "alternateEmail": {
            "type": "string",
            "description": "The customer's secondary contact email address. This email address cannot be on the same domain as the `customerDomain`"
          },
          "kind": {
            "description": "Identifies the resource as a customer. Value: `admin#directory#customer`",
            "type": "string",
            "default": "admin#directory#customer"
          },
          "postalAddress": {
            "description": "The customer's postal address information.",
            "$ref": "#/components/schemas/CustomerPostalAddress"
          },
          "customerCreationTime": {
            "format": "date-time",
            "type": "string",
            "description": "The customer's creation time (Readonly)"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The customer's contact phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format."
          },
          "language": {
            "type": "string",
            "description": "The customer's ISO 639-2 language code. See the [Language Codes](/admin-sdk/directory/v1/languages) page for the list of supported codes. Valid language codes outside the supported set will be accepted by the API but may lead to unexpected behavior. The default value is `en`."
          }
        }
      },
      "UserKeyword": {
        "description": "JSON template for a keyword entry.",
        "properties": {
          "customType": {
            "type": "string",
            "description": "Custom Type."
          },
          "type": {
            "description": "Each entry can have a type which indicates standard type of that entry. For example keyword could be of type occupation or outlook. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a customType value.",
            "type": "string"
          },
          "value": {
            "description": "Keyword.",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "parameters": {
      "quotaUser": {
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
        "in": "query",
        "name": "quotaUser",
        "schema": {
          "type": "string"
        }
      },
      "oauth_token": {
        "description": "OAuth 2.0 token for the current user.",
        "in": "query",
        "name": "oauth_token",
        "schema": {
          "type": "string"
        }
      },
      "fields": {
        "description": "Selector specifying which fields to include in a partial response.",
        "in": "query",
        "name": "fields",
        "schema": {
          "type": "string"
        }
      },
      "key": {
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
        "in": "query",
        "name": "key",
        "schema": {
          "type": "string"
        }
      },
      "prettyPrint": {
        "description": "Returns response with indentations and line breaks.",
        "in": "query",
        "name": "prettyPrint",
        "schema": {
          "type": "boolean"
        }
      },
      "_.xgafv": {
        "description": "V1 error format.",
        "in": "query",
        "name": "_.xgafv",
        "schema": {
          "type": "string",
          "enum": [
            "1",
            "2"
          ]
        }
      },
      "uploadType": {
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
        "in": "query",
        "name": "uploadType",
        "schema": {
          "type": "string"
        }
      },
      "alt": {
        "description": "Data format for response.",
        "in": "query",
        "name": "alt",
        "schema": {
          "type": "string",
          "enum": [
            "json",
            "media",
            "proto"
          ]
        }
      },
      "callback": {
        "description": "JSONP",
        "in": "query",
        "name": "callback",
        "schema": {
          "type": "string"
        }
      },
      "upload_protocol": {
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
        "in": "query",
        "name": "upload_protocol",
        "schema": {
          "type": "string"
        }
      }
    }
  },
  "paths": {
    "/admin/directory/v1/users": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Creates a user.",
        "operationId": "directory.users.insert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "parameters": [ ],
        "x-stackQL-resource": "users",
        "x-stackQL-verb": "insert"
      },
      "get": {
        "description": "Retrieves a paginated list of either deleted users or all users in a domain.",
        "operationId": "directory.users.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "customer",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "event",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "viewType",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "projection",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "maxResults",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "showDeleted",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "customFieldMask",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "domain",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "users",
        "x-stackQL-verb": "select"
      }
    },
    "/admin/directory/v1/users/{userKey}/makeAdmin": {
      "parameters": [
        {
          "$ref": "#/components/parameters/_.xgafv"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        }
      ],
      "post": {
        "description": "Makes a user a super administrator.",
        "operationId": "directory.users.makeAdmin",
        "parameters": [
          {
            "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID.",
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserMakeAdmin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/admin/directory/v1/users/{userKey}/undelete": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Undeletes a deleted user.",
        "operationId": "directory.users.undelete",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUndelete"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "users",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/users/watch": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Watches for changes in users list.",
        "operationId": "directory.users.watch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Channel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "pageToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "projection",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "maxResults",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "viewType",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "domain",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "event",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "customFieldMask",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "showDeleted",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "customer",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "users",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/users/{userKey}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "patch": {
        "description": "Updates a user using patch semantics. The update method should be used instead, because it also supports patch semantics and has better performance. If you're mapping an external identity to a Google identity, use the [`update`](https://developers.google.com/admin-sdk/directory/v1/reference/users/update) method instead of the `patch` method. This method is unable to clear fields that contain repeated objects (`addresses`, `phones`, etc). Use the update method instead.",
        "operationId": "directory.users.patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "users",
        "x-stackQL-verb": "exec"
      },
      "get": {
        "description": "Retrieves a user.",
        "operationId": "directory.users.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "projection",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "viewType",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "customFieldMask",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "users",
        "x-stackQL-verb": "select"
      },
      "delete": {
        "description": "Deletes a user.",
        "operationId": "directory.users.delete",
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "users",
        "x-stackQL-verb": "delete"
      },
      "put": {
        "description": "Updates a user. This method supports patch semantics, meaning that you only need to include the fields you wish to update. Fields that are not present in the request will be preserved, and fields set to `null` will be cleared. For repeating fields that contain arrays, individual items in the array can't be patched piecemeal; they must be supplied in the request body with the desired values for all items. See the [user accounts guide](https://developers.google.com/admin-sdk/directory/v1/guides/manage-users#update_user) for more information.",
        "operationId": "directory.users.update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "users",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/users/{userKey}/signOut": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Signs a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
        "operationId": "directory.users.signOut",
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "users",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/users/{userKey}/aliases/watch": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Watches for changes in users list.",
        "operationId": "directory.users.aliases.watch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Channel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Channel"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "event",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "aliases",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/users/{userKey}/aliases": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "Lists all aliases for a user.",
        "operationId": "directory.users.aliases.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Aliases"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "event",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "aliases",
        "x-stackQL-verb": "select"
      },
      "post": {
        "description": "Adds an alias.",
        "operationId": "directory.users.aliases.insert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Alias"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Alias"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "aliases",
        "x-stackQL-verb": "insert"
      }
    },
    "/admin/directory/v1/users/{userKey}/aliases/{alias}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "delete": {
        "description": "Removes an alias.",
        "operationId": "directory.users.aliases.delete",
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "alias",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "aliases",
        "x-stackQL-verb": "delete"
      }
    },
    "/admin/directory/v1/users/{userKey}/photos/thumbnail": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "Retrieves the user's photo.",
        "operationId": "directory.users.photos.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPhoto"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "photos",
        "x-stackQL-verb": "select"
      },
      "delete": {
        "description": "Removes the user's photo.",
        "operationId": "directory.users.photos.delete",
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "photos",
        "x-stackQL-verb": "delete"
      },
      "patch": {
        "description": "Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
        "operationId": "directory.users.photos.patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPhoto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPhoto"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "photos",
        "x-stackQL-verb": "exec"
      },
      "put": {
        "description": "Adds a photo for the user.",
        "operationId": "directory.users.photos.update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPhoto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPhoto"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "photos",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/users/{userKey}/twoStepVerification/turnOff": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Turns off 2-Step Verification for user.",
        "operationId": "directory.twoStepVerification.turnOff",
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "two_step_verification",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Issues a command for the device to execute.",
        "operationId": "admin.customer.devices.chromeos.issueCommand",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DirectoryChromeosdevicesIssueCommandRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectoryChromeosdevicesIssueCommandResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "deviceId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "chromeos",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "Gets command data a specific command issued to the device.",
        "operationId": "admin.customer.devices.chromeos.commands.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectoryChromeosdevicesCommand"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "deviceId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "commandId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "commands",
        "x-stackQL-verb": "select"
      }
    },
    "/admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "Retrieves a Chrome OS device's properties.",
        "operationId": "directory.chromeosdevices.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChromeOsDevice"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "deviceId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "projection",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "chromeosdevices",
        "x-stackQL-verb": "select"
      },
      "put": {
        "description": "Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`.",
        "operationId": "directory.chromeosdevices.update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChromeOsDevice"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChromeOsDevice"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "deviceId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "projection",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "chromeosdevices",
        "x-stackQL-verb": "exec"
      },
      "patch": {
        "description": "Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
        "operationId": "directory.chromeosdevices.patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChromeOsDevice"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChromeOsDevice"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "deviceId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "projection",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "chromeosdevices",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Moves or inserts multiple Chrome OS devices to an organizational unit. You can move up to 50 devices at once.",
        "operationId": "directory.chromeosdevices.moveDevicesToOu",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChromeOsMoveDevicesToOu"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orgUnitPath",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "chromeosdevices",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Takes an action that affects a Chrome OS Device. This includes deprovisioning, disabling, and re-enabling devices. *Warning:* * Deprovisioning a device will stop device policy syncing and remove device-level printers. After a device is deprovisioned, it must be wiped before it can be re-enrolled. * Lost or stolen devices should use the disable action. * Re-enabling a disabled device will consume a device license. If you do not have sufficient licenses available when completing the re-enable action, you will receive an error. For more information about deprovisioning and disabling devices, visit the [help center](https://support.google.com/chrome/a/answer/3523633).",
        "operationId": "directory.chromeosdevices.action",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChromeOsDeviceAction"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "resourceId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "chromeosdevices",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/customer/{customerId}/devices/chromeos": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "Retrieves a paginated list of Chrome OS devices within an account.",
        "operationId": "directory.chromeosdevices.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChromeOsDevices"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "maxResults",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "orgUnitPath",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "projection",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeChildOrgunits",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "chromeosdevices",
        "x-stackQL-verb": "select"
      }
    },
    "/admin/directory/v1/customer/{customerId}/schemas": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "Retrieves all schemas for a customer.",
        "operationId": "directory.schemas.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schemas"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "schemas",
        "x-stackQL-verb": "select"
      },
      "post": {
        "description": "Creates a schema.",
        "operationId": "directory.schemas.insert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "schemas",
        "x-stackQL-verb": "insert"
      }
    },
    "/admin/directory/v1/customer/{customerId}/schemas/{schemaKey}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "put": {
        "description": "Updates a schema.",
        "operationId": "directory.schemas.update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemaKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "schemas",
        "x-stackQL-verb": "exec"
      },
      "get": {
        "description": "Retrieves a schema.",
        "operationId": "directory.schemas.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemaKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "schemas",
        "x-stackQL-verb": "select"
      },
      "patch": {
        "description": "Patches a schema.",
        "operationId": "directory.schemas.patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemaKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "schemas",
        "x-stackQL-verb": "exec"
      },
      "delete": {
        "description": "Deletes a schema.",
        "operationId": "directory.schemas.delete",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemaKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "schemas",
        "x-stackQL-verb": "delete"
      }
    },
    "/admin/directory/v1/groups/{groupKey}/aliases": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Adds an alias for the group.",
        "operationId": "directory.groups.aliases.insert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Alias"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Alias"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "groupKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "aliases",
        "x-stackQL-verb": "insert"
      },
      "get": {
        "description": "Lists all aliases for a group.",
        "operationId": "directory.groups.aliases.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Aliases"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "groupKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "aliases",
        "x-stackQL-verb": "select"
      }
    },
    "/admin/directory/v1/groups/{groupKey}/aliases/{alias}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "delete": {
        "description": "Removes an alias.",
        "operationId": "directory.groups.aliases.delete",
        "parameters": [
          {
            "in": "path",
            "name": "groupKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "alias",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "aliases",
        "x-stackQL-verb": "delete"
      }
    },
    "/admin/directory/v1/groups": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "Retrieves all groups of a domain or of a user given a userKey (paginated).",
        "operationId": "directory.groups.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Groups"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "domain",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userKey",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "customer",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "maxResults",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "x-stackQL-resource": "groups",
        "x-stackQL-verb": "select"
      },
      "post": {
        "description": "Creates a group.",
        "operationId": "directory.groups.insert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          }
        },
        "parameters": [ ],
        "x-stackQL-resource": "groups",
        "x-stackQL-verb": "insert"
      }
    },
    "/admin/directory/v1/groups/{groupKey}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "Retrieves a group's properties.",
        "operationId": "directory.groups.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "groupKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "groups",
        "x-stackQL-verb": "select"
      },
      "patch": {
        "description": "Updates a group's properties. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
        "operationId": "directory.groups.patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "groupKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "groups",
        "x-stackQL-verb": "exec"
      },
      "put": {
        "description": "Updates a group's properties.",
        "operationId": "directory.groups.update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "groupKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "groups",
        "x-stackQL-verb": "exec"
      },
      "delete": {
        "description": "Deletes a group.",
        "operationId": "directory.groups.delete",
        "parameters": [
          {
            "in": "path",
            "name": "groupKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "groups",
        "x-stackQL-verb": "delete"
      }
    },
    "/admin/directory/v1/customer/{customer}/resources/features": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Inserts a feature.",
        "operationId": "directory.resources.features.insert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Feature"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Feature"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "features",
        "x-stackQL-verb": "insert"
      },
      "get": {
        "description": "Retrieves a list of features for an account.",
        "operationId": "directory.resources.features.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Features"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "maxResults",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "x-stackQL-resource": "features",
        "x-stackQL-verb": "select"
      }
    },
    "/admin/directory/v1/customer/{customer}/resources/features/{featureKey}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "put": {
        "description": "Updates a feature.",
        "operationId": "directory.resources.features.update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Feature"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Feature"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "featureKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "features",
        "x-stackQL-verb": "exec"
      },
      "delete": {
        "description": "Deletes a feature.",
        "operationId": "directory.resources.features.delete",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "featureKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "features",
        "x-stackQL-verb": "delete"
      },
      "get": {
        "description": "Retrieves a feature.",
        "operationId": "directory.resources.features.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Feature"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "featureKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "features",
        "x-stackQL-verb": "select"
      },
      "patch": {
        "description": "Patches a feature.",
        "operationId": "directory.resources.features.patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Feature"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Feature"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "featureKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "features",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Renames a feature.",
        "operationId": "directory.resources.features.rename",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeatureRename"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "oldName",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "features",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "patch": {
        "description": "Patches a calendar resource.",
        "operationId": "directory.resources.calendars.patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarResource"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarResource"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "calendarResourceId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "calendars",
        "x-stackQL-verb": "exec"
      },
      "get": {
        "description": "Retrieves a calendar resource.",
        "operationId": "directory.resources.calendars.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarResource"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "calendarResourceId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "calendars",
        "x-stackQL-verb": "select"
      },
      "put": {
        "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
        "operationId": "directory.resources.calendars.update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarResource"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarResource"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "calendarResourceId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "calendars",
        "x-stackQL-verb": "exec"
      },
      "delete": {
        "description": "Deletes a calendar resource.",
        "operationId": "directory.resources.calendars.delete",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "calendarResourceId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "calendars",
        "x-stackQL-verb": "delete"
      }
    },
    "/admin/directory/v1/customer/{customer}/resources/calendars": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "Retrieves a list of calendar resources for an account.",
        "operationId": "directory.resources.calendars.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarResources"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "maxResults",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "calendars",
        "x-stackQL-verb": "select"
      },
      "post": {
        "description": "Inserts a calendar resource.",
        "operationId": "directory.resources.calendars.insert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarResource"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarResource"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "calendars",
        "x-stackQL-verb": "insert"
      }
    },
    "/admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "Retrieves a building.",
        "operationId": "directory.resources.buildings.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Building"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "buildingId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "buildings",
        "x-stackQL-verb": "select"
      },
      "patch": {
        "description": "Patches a building.",
        "operationId": "directory.resources.buildings.patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Building"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Building"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "buildingId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "coordinatesSource",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "buildings",
        "x-stackQL-verb": "exec"
      },
      "delete": {
        "description": "Deletes a building.",
        "operationId": "directory.resources.buildings.delete",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "buildingId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "buildings",
        "x-stackQL-verb": "delete"
      },
      "put": {
        "description": "Updates a building.",
        "operationId": "directory.resources.buildings.update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Building"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Building"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "buildingId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "coordinatesSource",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "buildings",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/customer/{customer}/resources/buildings": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Inserts a building.",
        "operationId": "directory.resources.buildings.insert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Building"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Building"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "coordinatesSource",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "buildings",
        "x-stackQL-verb": "insert"
      },
      "get": {
        "description": "Retrieves a list of buildings for an account.",
        "operationId": "directory.resources.buildings.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Buildings"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "maxResults",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "x-stackQL-resource": "buildings",
        "x-stackQL-verb": "select"
      }
    },
    "/admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "delete": {
        "description": "Removes an organizational unit.",
        "operationId": "directory.orgunits.delete",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "orgunitsId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "orgunits",
        "x-stackQL-verb": "delete"
      },
      "put": {
        "description": "Updates an organizational unit.",
        "operationId": "directory.orgunits.update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgUnit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgUnit"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "orgunitsId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "orgunits",
        "x-stackQL-verb": "exec"
      },
      "patch": {
        "description": "Updates an organizational unit. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch)",
        "operationId": "directory.orgunits.patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgUnit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgUnit"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "orgunitsId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "orgunits",
        "x-stackQL-verb": "exec"
      },
      "get": {
        "description": "Retrieves an organizational unit.",
        "operationId": "directory.orgunits.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgUnit"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "orgunitsId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "orgunits",
        "x-stackQL-verb": "select"
      }
    },
    "/admin/directory/v1/customer/{customerId}/orgunits": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "Retrieves a list of all organizational units for an account.",
        "operationId": "directory.orgunits.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgUnits"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orgUnitPath",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "orgunits",
        "x-stackQL-verb": "select"
      },
      "post": {
        "description": "Adds an organizational unit.",
        "operationId": "directory.orgunits.insert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrgUnit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgUnit"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "orgunits",
        "x-stackQL-verb": "insert"
      }
    },
    "/admin/directory/v1/customers/{customerKey}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "patch": {
        "description": "Patches a customer.",
        "operationId": "directory.customers.patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Customer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "customers",
        "x-stackQL-verb": "exec"
      },
      "get": {
        "description": "Retrieves a customer.",
        "operationId": "directory.customers.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "customers",
        "x-stackQL-verb": "select"
      },
      "put": {
        "description": "Updates a customer.",
        "operationId": "directory.customers.update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Customer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "customers",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/customers/{customersId}/chrome/printServers/{printServersId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "patch": {
        "description": "Updates a print server's configuration.",
        "operationId": "admin.customers.chrome.printServers.patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrintServer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrintServer"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customersId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "printServersId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "updateMask",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "print_servers",
        "x-stackQL-verb": "exec"
      },
      "get": {
        "description": "Returns a print server's configuration.",
        "operationId": "admin.customers.chrome.printServers.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrintServer"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customersId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "printServersId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "print_servers",
        "x-stackQL-verb": "select"
      },
      "delete": {
        "description": "Deletes a print server.",
        "operationId": "admin.customers.chrome.printServers.delete",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customersId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "printServersId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "print_servers",
        "x-stackQL-verb": "delete"
      }
    },
    "/admin/directory/v1/customers/{customersId}/chrome/printServers:batchCreatePrintServers": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Creates multiple print servers.",
        "operationId": "admin.customers.chrome.printServers.batchCreatePrintServers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchCreatePrintServersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchCreatePrintServersResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customersId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "print_servers",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/customers/{customersId}/chrome/printServers": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Creates a print server.",
        "operationId": "admin.customers.chrome.printServers.create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrintServer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrintServer"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customersId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "print_servers",
        "x-stackQL-verb": "insert"
      },
      "get": {
        "description": "Lists print server configurations.",
        "operationId": "admin.customers.chrome.printServers.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPrintServersResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customersId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orgUnitId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "x-stackQL-resource": "print_servers",
        "x-stackQL-verb": "select"
      }
    },
    "/admin/directory/v1/customers/{customersId}/chrome/printServers:batchDeletePrintServers": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Deletes multiple print servers.",
        "operationId": "admin.customers.chrome.printServers.batchDeletePrintServers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchDeletePrintServersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchDeletePrintServersResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customersId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "print_servers",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/customers/{customersId}/chrome/printers:listPrinterModels": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "Lists the supported printer models.",
        "operationId": "admin.customers.chrome.printers.listPrinterModels",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPrinterModelsResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customersId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "printers__printer_models",
        "x-stackQL-verb": "select"
      }
    },
    "/admin/directory/v1/customers/{customersId}/chrome/printers:batchDeletePrinters": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Deletes printers in batch.",
        "operationId": "admin.customers.chrome.printers.batchDeletePrinters",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchDeletePrintersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchDeletePrintersResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customersId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "printers",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/customers/{customersId}/chrome/printers/{printersId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "patch": {
        "description": "Updates a `Printer` resource.",
        "operationId": "admin.customers.chrome.printers.patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Printer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Printer"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customersId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "printersId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "clearMask",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "updateMask",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "printers",
        "x-stackQL-verb": "exec"
      },
      "delete": {
        "description": "Deletes a `Printer`.",
        "operationId": "admin.customers.chrome.printers.delete",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customersId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "printersId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "printers",
        "x-stackQL-verb": "delete"
      },
      "get": {
        "description": "Returns a `Printer` resource (printer's config).",
        "operationId": "admin.customers.chrome.printers.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Printer"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customersId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "printersId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "printers",
        "x-stackQL-verb": "select"
      }
    },
    "/admin/directory/v1/customers/{customersId}/chrome/printers": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "List printers configs.",
        "operationId": "admin.customers.chrome.printers.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPrintersResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customersId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orgUnitId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "printers",
        "x-stackQL-verb": "select"
      },
      "post": {
        "description": "Creates a printer under given Organization Unit.",
        "operationId": "admin.customers.chrome.printers.create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Printer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Printer"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customersId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "printers",
        "x-stackQL-verb": "insert"
      }
    },
    "/admin/directory/v1/customers/{customersId}/chrome/printers:batchCreatePrinters": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Creates printers under given Organization Unit.",
        "operationId": "admin.customers.chrome.printers.batchCreatePrinters",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchCreatePrintersRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchCreatePrintersResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customersId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "printers",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/users/{userKey}/tokens/{clientId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "Gets information about an access token issued by a user.",
        "operationId": "directory.tokens.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "clientId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "tokens",
        "x-stackQL-verb": "select"
      },
      "delete": {
        "description": "Deletes all access tokens issued by a user for an application.",
        "operationId": "directory.tokens.delete",
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "clientId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "tokens",
        "x-stackQL-verb": "delete"
      }
    },
    "/admin/directory/v1/users/{userKey}/tokens": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
        "operationId": "directory.tokens.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tokens"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "tokens",
        "x-stackQL-verb": "select"
      }
    },
    "/admin/directory/v1/users/{userKey}/asps/{codeId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "delete": {
        "description": "Deletes an ASP issued by a user.",
        "operationId": "directory.asps.delete",
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "codeId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "asps",
        "x-stackQL-verb": "delete"
      },
      "get": {
        "description": "Gets information about an ASP issued by a user.",
        "operationId": "directory.asps.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asp"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "codeId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "asps",
        "x-stackQL-verb": "select"
      }
    },
    "/admin/directory/v1/users/{userKey}/asps": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "Lists the ASPs issued by a user.",
        "operationId": "directory.asps.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Asps"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "asps",
        "x-stackQL-verb": "select"
      }
    },
    "/admin/directory/v1/groups/{groupKey}/members/{memberKey}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "put": {
        "description": "Updates the membership of a user in the specified group.",
        "operationId": "directory.members.update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Member"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "groupKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "memberKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "members",
        "x-stackQL-verb": "exec"
      },
      "patch": {
        "description": "Updates the membership properties of a user in the specified group. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
        "operationId": "directory.members.patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Member"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "groupKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "memberKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "members",
        "x-stackQL-verb": "exec"
      },
      "get": {
        "description": "Retrieves a group member's properties.",
        "operationId": "directory.members.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "groupKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "memberKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "members",
        "x-stackQL-verb": "select"
      },
      "delete": {
        "description": "Removes a member from a group.",
        "operationId": "directory.members.delete",
        "parameters": [
          {
            "in": "path",
            "name": "groupKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "memberKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "members",
        "x-stackQL-verb": "delete"
      }
    },
    "/admin/directory/v1/groups/{groupKey}/members": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Adds a user to the specified group.",
        "operationId": "directory.members.insert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Member"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "groupKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "members",
        "x-stackQL-verb": "insert"
      },
      "get": {
        "description": "Retrieves a paginated list of all members in a group. This method times out after 60 minutes. For more information, see [Troubleshoot error codes](https://developers.google.com/admin-sdk/directory/v1/guides/troubleshoot-error-codes).",
        "operationId": "directory.members.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Members"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "groupKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeDerivedMembership",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "roles",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "maxResults",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "members",
        "x-stackQL-verb": "select"
      }
    },
    "/admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "Checks whether the given user is a member of the group. Membership can be direct or nested, but if nested, the `memberKey` and `groupKey` must be entities in the same domain or an `Invalid input` error is returned. To check for nested memberships that include entities outside of the group's domain, use the [`checkTransitiveMembership()`](https://cloud.google.com/identity/docs/reference/rest/v1/groups.memberships/checkTransitiveMembership) method in the Cloud Identity Groups API.",
        "operationId": "directory.members.hasMember",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembersHasMember"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "groupKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "memberKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "members",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/users/{userKey}/verificationCodes/invalidate": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Invalidates the current backup verification codes for the user.",
        "operationId": "directory.verificationCodes.invalidate",
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "verification_codes",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/users/{userKey}/verificationCodes/generate": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Generates new backup verification codes for the user.",
        "operationId": "directory.verificationCodes.generate",
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "verification_codes",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/users/{userKey}/verificationCodes": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "Returns the current set of valid backup verification codes for the specified user.",
        "operationId": "directory.verificationCodes.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationCodes"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "userKey",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "verification_codes",
        "x-stackQL-verb": "select"
      }
    },
    "/admin/directory/v1/customer/{customer}/roles/{roleId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "put": {
        "description": "Updates a role.",
        "operationId": "directory.roles.update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "roleId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "roles",
        "x-stackQL-verb": "exec"
      },
      "delete": {
        "description": "Deletes a role.",
        "operationId": "directory.roles.delete",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "roleId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "roles",
        "x-stackQL-verb": "delete"
      },
      "get": {
        "description": "Retrieves a role.",
        "operationId": "directory.roles.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "roleId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "roles",
        "x-stackQL-verb": "select"
      },
      "patch": {
        "description": "Patches a role.",
        "operationId": "directory.roles.patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "roleId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "roles",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/customer/{customer}/roles": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Creates a role.",
        "operationId": "directory.roles.insert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "roles",
        "x-stackQL-verb": "insert"
      },
      "get": {
        "description": "Retrieves a paginated list of all the roles in a domain.",
        "operationId": "directory.roles.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roles"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "maxResults",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "x-stackQL-resource": "roles",
        "x-stackQL-verb": "select"
      }
    },
    "/admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "delete": {
        "description": "Deletes a role assignment.",
        "operationId": "directory.roleAssignments.delete",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "roleAssignmentId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "role_assignments",
        "x-stackQL-verb": "delete"
      },
      "get": {
        "description": "Retrieves a role assignment.",
        "operationId": "directory.roleAssignments.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleAssignment"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "roleAssignmentId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "role_assignments",
        "x-stackQL-verb": "select"
      }
    },
    "/admin/directory/v1/customer/{customer}/roleassignments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Creates a role assignment.",
        "operationId": "directory.roleAssignments.insert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleAssignment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleAssignment"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "role_assignments",
        "x-stackQL-verb": "insert"
      },
      "get": {
        "description": "Retrieves a paginated list of all roleAssignments.",
        "operationId": "directory.roleAssignments.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleAssignments"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeIndirectRoleAssignments",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "roleId",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "userKey",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "maxResults",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "x-stackQL-resource": "role_assignments",
        "x-stackQL-verb": "select"
      }
    },
    "/admin/directory_v1/channels/stop": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Stops watching resources through this channel.",
        "operationId": "admin.channels.stop",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Channel"
              }
            }
          }
        },
        "parameters": [ ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "channels",
        "x-stackQL-verb": "exec"
      }
    },
    "/admin/directory/v1/customer/{customer}/roles/ALL/privileges": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "Retrieves a paginated list of all privileges for a customer.",
        "operationId": "directory.privileges.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Privileges"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "privileges",
        "x-stackQL-verb": "select"
      }
    },
    "/admin/directory/v1/customer/{customer}/domains": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "Lists the domains of the customer.",
        "operationId": "directory.domains.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domains2"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "domains",
        "x-stackQL-verb": "select"
      },
      "post": {
        "description": "Inserts a domain of the customer.",
        "operationId": "directory.domains.insert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Domains"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domains"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "domains",
        "x-stackQL-verb": "insert"
      }
    },
    "/admin/directory/v1/customer/{customer}/domains/{domainName}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "Retrieves a domain of the customer.",
        "operationId": "directory.domains.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domains"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "domainName",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "domains",
        "x-stackQL-verb": "select"
      },
      "delete": {
        "description": "Deletes a domain of the customer.",
        "operationId": "directory.domains.delete",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "domainName",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "domains",
        "x-stackQL-verb": "delete"
      }
    },
    "/admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "Retrieves a domain alias of the customer.",
        "operationId": "directory.domainAliases.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainAlias"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "domainAliasName",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "domain_aliases",
        "x-stackQL-verb": "select"
      },
      "delete": {
        "description": "Deletes a domain Alias of the customer.",
        "operationId": "directory.domainAliases.delete",
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "domainAliasName",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "domain_aliases",
        "x-stackQL-verb": "delete"
      }
    },
    "/admin/directory/v1/customer/{customer}/domainaliases": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Inserts a domain alias of the customer.",
        "operationId": "directory.domainAliases.insert",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainAlias"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainAlias"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "domain_aliases",
        "x-stackQL-verb": "insert"
      },
      "get": {
        "description": "Lists the domain aliases of the customer.",
        "operationId": "directory.domainAliases.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainAliases"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customer",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "parentDomainName",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "domain_aliases",
        "x-stackQL-verb": "select"
      }
    },
    "/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "delete": {
        "description": "Removes a mobile device.",
        "operationId": "directory.mobiledevices.delete",
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "resourceId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "mobiledevices",
        "x-stackQL-verb": "delete"
      },
      "get": {
        "description": "Retrieves a mobile device's properties.",
        "operationId": "directory.mobiledevices.get",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MobileDevice"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "resourceId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "projection",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "mobiledevices",
        "x-stackQL-verb": "select"
      }
    },
    "/admin/directory/v1/customer/{customerId}/devices/mobile": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "get": {
        "description": "Retrieves a paginated list of all user-owned mobile devices for an account. To retrieve a list that includes company-owned devices, use the Cloud Identity [Devices API](https://cloud.google.com/identity/docs/concepts/overview-devices) instead. This method times out after 60 minutes. For more information, see [Troubleshoot error codes](https://developers.google.com/admin-sdk/directory/v1/guides/troubleshoot-error-codes).",
        "operationId": "directory.mobiledevices.list",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MobileDevices"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageToken",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "maxResults",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "projection",
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-stackQL-resource": "mobiledevices",
        "x-stackQL-verb": "select"
      }
    },
    "/admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action": {
      "parameters": [
        {
          "$ref": "#/components/parameters/quotaUser"
        },
        {
          "$ref": "#/components/parameters/oauth_token"
        },
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/key"
        },
        {
          "$ref": "#/components/parameters/prettyPrint"
        },
        {
          "$ref": "#/components/parameters/_.xgafv"
        },
        {
          "$ref": "#/components/parameters/uploadType"
        },

        {
          "$ref": "#/components/parameters/alt"
        },
        {
          "$ref": "#/components/parameters/callback"
        },
        {
          "$ref": "#/components/parameters/upload_protocol"
        }
      ],
      "post": {
        "description": "Takes an action that affects a mobile device. For example, remotely wiping a device.",
        "operationId": "directory.mobiledevices.action",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MobileDeviceAction"
              }
            }
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "customerId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "resourceId",
            "required": "true",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-stackQL-resource": "mobiledevices",
        "x-stackQL-verb": "exec"
      }
    }
  }
}