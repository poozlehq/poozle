datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/@@generated"
  outputToNestJsResourceStructure = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  fileNamingStyle                 = "camel"
}

model User {
  userId    String      @id @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  firstname String?
  lastname  String?
  Workspace Workspace[]
}

model Workspace {
  workspaceId             String                  @id @default(uuid())
  slug                    String                  @unique
  user                    User                    @relation(references: [userId], fields: [userId])
  userId                  String
  initialSetupComplete    Boolean                 @default(false)
  anonymousDataCollection Boolean                 @default(false)
  IntegrationDefinition   IntegrationDefinition[]
  IntegrationAccount      IntegrationAccount[]
  IntegrationOAuthApp     IntegrationOAuthApp[]
  deleted                 DateTime?
}

model IntegrationDefinition {
  integrationDefinitionId String                @id @default(uuid())
  name                    String
  key                     String
  icon                    String?
  releaseStage            ReleaseStage          @default(ALPHA)
  sourceUrl               String
  integrationType         IntegrationType
  workspace               Workspace?            @relation(references: [workspaceId], fields: [workspaceId])
  workspaceId             String?
  IntegrationAccount      IntegrationAccount[]
  IntegrationOAuthApp     IntegrationOAuthApp[]
  deleted                 DateTime?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt

  @@unique([integrationDefinitionId, key])
}

model IntegrationOAuthApp {
  integrationOAuthAppId   String                @id @default(uuid())
  integrationOAuthAppName String
  integrationDefinition   IntegrationDefinition @relation(references: [integrationDefinitionId], fields: [integrationDefinitionId])
  integrationDefinitionId String

  clientId     String
  clientSecret String
  scopes       String

  workspace   Workspace? @relation(references: [workspaceId], fields: [workspaceId])
  workspaceId String?
  deleted     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([integrationOAuthAppName, workspaceId])
}

model IntegrationAccount {
  integrationAccountId     String                @id @default(uuid())
  integrationDefinition    IntegrationDefinition @relation(references: [integrationDefinitionId], fields: [integrationDefinitionId])
  integrationDefinitionId  String
  integrationConfiguration Json?
  authType                 String
  workspace                Workspace             @relation(references: [workspaceId], fields: [workspaceId])
  workspaceId              String
  integrationAccountName   String
  deleted                  DateTime?
  createdAt                DateTime              @default(now())
  updatedAt                DateTime              @updatedAt

  @@unique([integrationAccountName, workspaceId])
}

enum ReleaseStage {
  ALPHA
  BETA
  GENERALLY_AVAILABLE
  CUSTOM
}

enum IntegrationType {
  HRIS
  MESSAGING
  CALENDAR
  TICKETING
}
