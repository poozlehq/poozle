datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  // for yarn monorepos
  // provider = "prisma-nestjs-graphql"
  output   = "../src/@generated"
}

model User {
  userId    String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  email     String      @unique
  password  String
  firstname String?
  lastname  String?
  Workspace Workspace[]
}

model Workspace {
  workspaceId             String                @id @default(uuid())
  slug                    String                @unique
  user                    User                  @relation(references: [userId], fields: [userId])
  userId                  String
  initialSetupComplete    Boolean               @default(false)
  anonymousDataCollection Boolean               @default(false)
  ExtensionDefinition     ExtensionDefinition[]
  ExtensionAccount        ExtensionAccount[]
  ExtensionAuth           ExtensionAuth[]
  deleted                 DateTime?
  Gateway                 Gateway[]
}

model ExtensionDefinition {
  extensionDefinitionId String             @id @default(uuid())
  name                  String
  key                   String
  version               String
  spec                  String
  icon                  String?
  // This will be endpoint for GRAPHQL and openapi spec link for REST
  source                String
  releaseStage          ReleaseStage       @default(ALPHA)
  extensionType         ExtensionType      @default(GRAPHQL)
  workspace             Workspace?         @relation(references: [workspaceId], fields: [workspaceId])
  workspaceId           String?
  ExtensionAccount      ExtensionAccount[]
  ExtensionAuth         ExtensionAuth[]
  deleted               DateTime?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  @@unique([extensionDefinitionId, key])
}

model ExtensionAuth {
  extensionAuthId       String              @id @default(uuid())
  extensionAuthName     String
  extensionDefinition   ExtensionDefinition @relation(references: [extensionDefinitionId], fields: [extensionDefinitionId])
  extensionDefinitionId String

  clientId     String
  clientSecret String
  scopes       String

  workspace   Workspace? @relation(references: [workspaceId], fields: [workspaceId])
  workspaceId String?
  deleted     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([extensionAuthName, workspaceId])
}

model ExtensionAccount {
  extensionAccountId     String              @id @default(uuid())
  extensionDefinition    ExtensionDefinition @relation(references: [extensionDefinitionId], fields: [extensionDefinitionId])
  extensionDefinitionId  String
  extensionConfiguration Json?
  authType               String
  workspace              Workspace           @relation(references: [workspaceId], fields: [workspaceId])
  workspaceId            String
  name                   String
  extensionAccountName   String              @unique
  deleted                DateTime?
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt

  @@unique([extensionAccountName, workspaceId])
}

model Gateway {
  gatewayTokenId String     @id @default(uuid())
  hiveToken      String
  workspace      Workspace? @relation(references: [workspaceId], fields: [workspaceId])
  workspaceId    String?
}

enum ExtensionType {
  GRAPHQL
  REST
  CUSTOM
}

enum ReleaseStage {
  ALPHA
  BETA
  GENERALLY_AVAILABLE
  CUSTOM
}
