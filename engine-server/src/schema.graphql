# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
  user: User!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Duration {
  p75: Int!
  p90: Int!
  p95: Int!
  p99: Int!
}

type DurationOverTimeObject {
  date: String!
  duration: Duration!
}

type ExtensionAccount {
  createdAt: DateTime!
  deleted: DateTime
  extensionAccountId: ID!
  extensionAccountName: String!
  extensionConfiguration: JSON
  extensionDefinition: ExtensionDefinition!
  extensionDefinitionId: String!
  name: String!
  updatedAt: DateTime!
  workspace: Workspace!
  workspaceId: String!
}

input ExtensionAccountCreateBody {
  extensionAccountName: String!
  extensionConfiguration: JSON
  extensionDefinitionId: String!
  workspaceId: String!
}

input ExtensionAccountGetRequestBody {
  workspaceId: String!
}

type ExtensionAccountMasked {
  createdAt: DateTime!
  deleted: DateTime
  extensionAccountId: ID!
  extensionAccountName: String!
  extensionDefinition: ExtensionDefinition!
  extensionDefinitionId: String!
  name: String!
  updatedAt: DateTime!
  workspace: Workspace!
  workspaceId: String!
}

input ExtensionAccountRequestIdBody {
  extensionAccountId: String!
}

input ExtensionAccountUpdateBody {
  extensionAccountId: String!
  extensionAccountName: String!
  extensionConfiguration: JSON
}

type ExtensionAuth {
  clientId: String!
  clientSecret: String!
  createdAt: DateTime!
  deleted: DateTime
  extensionAuthId: ID!
  extensionAuthName: String!
  extensionDefinition: ExtensionDefinition!
  extensionDefinitionId: String!
  scopes: String!
  updatedAt: DateTime!
  workspace: Workspace
  workspaceId: String
}

input ExtensionAuthCreateBody {
  clientId: String!
  clientSecret: String!
  extensionAuthName: String!
  extensionDefinitionId: String!
  scopes: String!
  workspaceId: String!
}

input ExtensionAuthRequestIdBody {
  extensionAuthId: String!
}

input ExtensionAuthRequestUpdateBody {
  clientId: String!
  clientSecret: String!
  extensionAuthId: String!
  extensionAuthName: String!
  scopes: String!
}

input ExtensionAuthRequestWorkspaceIdBody {
  workspaceId: String!
}

type ExtensionDefinition {
  ExtensionAccount: [ExtensionAccount!]
  ExtensionAuth: [ExtensionAuth!]
  ExtensionRouter: [ExtensionRouter!]
  _count: ExtensionDefinitionCount!
  createdAt: DateTime!
  deleted: DateTime
  dockerImageTag: String!
  dockerRepository: String!
  extensionDefinitionId: ID!
  extensionType: ExtensionType!
  icon: String
  name: String!
  releaseStage: ReleaseStage!
  schemaSource: String
  updatedAt: DateTime!
  workspace: Workspace
  workspaceId: String
}

type ExtensionDefinitionCheck {
  error: String!
  status: Boolean!
}

input ExtensionDefinitionCheckBody {
  config: JSON!
  extensionDefinitionId: String!
  workspaceId: String!
}

type ExtensionDefinitionCount {
  ExtensionAccount: Int!
  ExtensionAuth: Int!
  ExtensionRouter: Int!
}

input ExtensionDefinitionCreateBody {
  dockerImageTag: String!
  dockerRepository: String!
  extensionType: String!
  icon: String!
  name: String!
  releaseStage: String!
  workspaceId: String!
}

input ExtensionDefinitionRequestIdBody {
  extensionDefinitionId: String!
  workspaceId: String!
}

input ExtensionDefinitionRequestWorkspaceIdBody {
  workspaceId: String!
}

type ExtensionDefinitionSpec {
  spec: JSON!
}

input ExtensionDefinitionUpdateBody {
  dockerImageTag: String!
  dockerRepository: String!
  extensionDefinitionId: String!
  extensionType: String!
  icon: String!
  name: String!
  releaseStage: String!
}

type ExtensionRouter {
  createdAt: DateTime!
  deleted: DateTime
  endpoint: String!
  extensionDefinition: ExtensionDefinition!
  extensionDefinitionId: String!
  extensionRouterId: ID!
  updatedAt: DateTime!
  workspace: Workspace!
  workspaceId: String!
}

input ExtensionRouterRequestIdBody {
  extensionRouterId: String!
}

input ExtensionRouterRequestUpdateBody {
  endpoint: String!
  extensionRouterId: String!
}

input ExtensionRouterRequestWorkspaceIdBody {
  workspaceId: String!
}

enum ExtensionType {
  CUSTOM
  GRAPHQL
  REST
}

type Gateway {
  gatewayTokenId: ID!
  hiveToken: String!
  workspace: Workspace
  workspaceId: String
}

type GatewayAuthToken {
  token: String!
}

input GatewayAuthTokenCreateInput {
  days: String
  workspaceId: String!
}

type GeneralStats {
  duration: Duration!
  durationOverTime: [DurationOverTimeObject!]!
  failuresOverTime: [OverTimeObject!]!
  requestsOverTime: [OverTimeObject!]!
  totalFailures: Int!
  totalOperations: Int!
  totalRequests: Int!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginInput {
  email: String!
  password: String!
}

type Logout {
  logout: Boolean!
}

type Mutation {
  changePassword(data: ChangePasswordInput!): User!
  createExtensionAccount(data: ExtensionAccountCreateBody!): ExtensionAccountMasked!
  createExtensionAuth(data: ExtensionAuthCreateBody!): ExtensionAuth!
  createExtensionDefinition(data: ExtensionDefinitionCreateBody!): ExtensionDefinition!
  createGatewayAccessToken(data: GatewayAuthTokenCreateInput!): GatewayAuthToken!
  createWorkspace(data: WorkspaceCreateBody!): Workspace!
  deleteWorkspace(data: WorkspaceRequestIdBody!): Workspace!
  login(data: LoginInput!): Auth!
  logout: Logout!
  refreshToken(token: JWT!): Token!
  signup(data: SignupInput!): Auth!
  updateExtensionAccount(data: ExtensionAccountUpdateBody!): ExtensionAccountMasked!
  updateExtensionAuth(data: ExtensionAuthRequestUpdateBody!): ExtensionAuth!
  updateExtensionDefinition(data: ExtensionDefinitionUpdateBody!): ExtensionDefinition!
  updateExtensionRouter(data: ExtensionRouterRequestUpdateBody!): ExtensionRouter!
  updateUser(data: UpdateUserInput!): User!
  updateWorkspace(data: WorkspaceUpdateBody!): Workspace!
}

type Node {
  count: Int!
  countOk: Int!
  duration: Duration!
  id: String!
  kind: String!
  name: String!
  operationHash: String!
  percentage: Int!
}

type Operation {
  nodes: [Node!]!
  total: Int!
}

type OperationStats {
  operations: [Operation!]!
}

type OverTimeObject {
  date: String!
  value: Int!
}

type Query {
  getExtensionAccount(data: ExtensionAccountRequestIdBody!): ExtensionAccountMasked!
  getExtensionAccountsByWorkspace(data: ExtensionAccountGetRequestBody!): [ExtensionAccountMasked!]!
  getExtensionAuth(data: ExtensionAuthRequestIdBody!): ExtensionAuth!
  getExtensionAuthsByWorkspace(data: ExtensionAuthRequestWorkspaceIdBody!): [ExtensionAuth!]!
  getExtensionDefinitionById(data: ExtensionDefinitionRequestIdBody!): ExtensionDefinition!
  getExtensionDefinitions: [ExtensionDefinition!]!
  getExtensionDefinitionsByWorkspace(data: ExtensionDefinitionRequestWorkspaceIdBody!): [ExtensionDefinition!]!
  getExtensionRouterById(data: ExtensionRouterRequestIdBody!): ExtensionRouter!
  getExtensionRoutersByWorkspace(data: ExtensionRouterRequestWorkspaceIdBody!): [ExtensionRouter!]!
  getGeneralStats(data: StatsInput!): GeneralStats!
  getOperations(data: StatsInput!): OperationStats!
  getSpecForExtensionDefinition(data: ExtensionDefinitionRequestIdBody!): ExtensionDefinitionSpec!
  getWorkspaceWithId(data: WorkspaceRequestIdBody!): Workspace!
  getWorkspaces: [Workspace!]!
  me: User!
  validateExtensionCredentials(data: ExtensionDefinitionCheckBody!): ExtensionDefinitionCheck!
}

enum ReleaseStage {
  ALPHA
  BETA
  CUSTOM
  GENERALLY_AVAILABLE
}

input SignupInput {
  email: String!
  firstname: String
  lastname: String
  password: String!
}

input StatsInput {
  from: String!
  to: String!
  workspace: String!
}

type Token {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

input UpdateUserInput {
  firstname: String
  lastname: String
}

type User {
  Workspace: [Workspace!]
  _count: UserCount!
  createdAt: DateTime!
  email: String!
  firstname: String
  lastname: String
  password: String!
  updatedAt: DateTime!
  userId: ID!
}

type UserCount {
  Workspace: Int!
}

type Workspace {
  ExtensionAccount: [ExtensionAccount!]
  ExtensionAuth: [ExtensionAuth!]
  ExtensionDefinition: [ExtensionDefinition!]
  ExtensionRouter: [ExtensionRouter!]
  Gateway: [Gateway!]
  _count: WorkspaceCount!
  anonymousDataCollection: Boolean!
  deleted: DateTime
  initialSetupComplete: Boolean!
  slug: String!
  user: User!
  userId: String!
  workspaceId: ID!
}

type WorkspaceCount {
  ExtensionAccount: Int!
  ExtensionAuth: Int!
  ExtensionDefinition: Int!
  ExtensionRouter: Int!
  Gateway: Int!
}

input WorkspaceCreateBody {
  slug: String!
}

input WorkspaceRequestIdBody {
  workspaceId: String!
}

input WorkspaceUpdateBody {
  initialSetupComplete: Boolean!
  workspaceId: String!
}